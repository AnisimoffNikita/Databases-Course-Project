/home/nikita/Projects/labs/Databases/Course-Project/Server/src/Model/TestData.hs:(23,103)-(33,2): Splicing expression
    Language.Haskell.TH.Quote.quoteExp
      persistLowerCase
      "\n\
      \Question\n\
      \\n\
      \TestData\n\
      \  name          Text\n\
      \  description   Text\n\
      \  creationDate  UTCTime\n\
      \  passingNumber Int\n\
      \  question      Text\n\
      \  deriving Eq Read Show Generic\n"
  ======>
    [(((((((((EntityDef (HaskellName (packPTH "Question")))
               (DBName (packPTH "question")))
              (((((((FieldDef (HaskellName (packPTH "Id")))
                      (DBName (packPTH "id")))
                     ((FTTypeCon Nothing) (packPTH "QuestionId")))
                    SqlInt64)
                   [])
                  True)
                 ((ForeignRef (HaskellName (packPTH "Question")))
                    ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
             [])
            [])
           [])
          [])
         [])
        (Data.Map.Internal.fromList []))
       False
       {entityFields = [],
        entityId = ((((((FieldDef (HaskellName (packPTH "Id")))
                          (DBName (packPTH "id")))
                         ((FTTypeCon Nothing) (packPTH "QuestionId")))
                        (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                           (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                       [])
                      True)
                     ((ForeignRef (HaskellName (packPTH "Question")))
                        ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))},
     (((((((((EntityDef (HaskellName (packPTH "TestData")))
               (DBName (packPTH "test_data")))
              (((((((FieldDef (HaskellName (packPTH "Id")))
                      (DBName (packPTH "id")))
                     ((FTTypeCon Nothing) (packPTH "TestDataId")))
                    SqlInt64)
                   [])
                  True)
                 ((ForeignRef (HaskellName (packPTH "TestData")))
                    ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
             [])
            [((((((FieldDef (HaskellName (packPTH "name")))
                    (DBName (packPTH "name")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for name")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "description")))
                    (DBName (packPTH "description")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for description")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "creationDate")))
                    (DBName (packPTH "creation_date")))
                   ((FTTypeCon Nothing) (packPTH "UTCTime")))
                  (SqlOther (packPTH "SqlType unset for creationDate")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "passingNumber")))
                    (DBName (packPTH "passing_number")))
                   ((FTTypeCon Nothing) (packPTH "Int")))
                  (SqlOther (packPTH "SqlType unset for passingNumber")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "question")))
                    (DBName (packPTH "question")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for question")))
                 [])
                True)
               NoReference])
           [])
          [])
         [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
        (Data.Map.Internal.fromList []))
       False
       {entityFields = [((((((FieldDef (HaskellName (packPTH "name")))
                               (DBName (packPTH "name")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "description")))
                               (DBName (packPTH "description")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "creationDate")))
                               (DBName (packPTH "creation_date")))
                              ((FTTypeCon Nothing) (packPTH "UTCTime")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy UTCTime)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "passingNumber")))
                               (DBName (packPTH "passing_number")))
                              ((FTTypeCon Nothing) (packPTH "Int")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Int)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "question")))
                               (DBName (packPTH "question")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference],
        entityId = ((((((FieldDef (HaskellName (packPTH "Id")))
                          (DBName (packPTH "id")))
                         ((FTTypeCon Nothing) (packPTH "TestDataId")))
                        (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                           (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                       [])
                      True)
                     ((ForeignRef (HaskellName (packPTH "TestData")))
                        ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))}]
/home/nikita/Projects/labs/Databases/Course-Project/Server/src/Model/TestData.hs:(23,1)-(33,2): Splicing declarations
    share
      [mkPersist (mkPersistSettings (ConT ''MongoContext)),
       mkMigrate "migrateAll"]
      ([(((((((((EntityDef (HaskellName (packPTH "Question")))
                  (DBName (packPTH "question")))
                 (((((((FieldDef (HaskellName (packPTH "Id")))
                         (DBName (packPTH "id")))
                        ((FTTypeCon Nothing) (packPTH "QuestionId")))
                       SqlInt64)
                      [])
                     True)
                    ((ForeignRef (HaskellName (packPTH "Question")))
                       ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                [])
               [])
              [])
             [])
            [])
           (Data.Map.Internal.fromList []))
          False
          {entityFields = [],
           entityId = ((((((FieldDef (HaskellName (packPTH "Id")))
                             (DBName (packPTH "id")))
                            ((FTTypeCon Nothing) (packPTH "QuestionId")))
                           (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                              (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                          [])
                         True)
                        ((ForeignRef (HaskellName (packPTH "Question")))
                           ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))},
        (((((((((EntityDef (HaskellName (packPTH "TestData")))
                  (DBName (packPTH "test_data")))
                 (((((((FieldDef (HaskellName (packPTH "Id")))
                         (DBName (packPTH "id")))
                        ((FTTypeCon Nothing) (packPTH "TestDataId")))
                       SqlInt64)
                      [])
                     True)
                    ((ForeignRef (HaskellName (packPTH "TestData")))
                       ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                [])
               [((((((FieldDef (HaskellName (packPTH "name")))
                       (DBName (packPTH "name")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for name")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "description")))
                       (DBName (packPTH "description")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for description")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "creationDate")))
                       (DBName (packPTH "creation_date")))
                      ((FTTypeCon Nothing) (packPTH "UTCTime")))
                     (SqlOther (packPTH "SqlType unset for creationDate")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "passingNumber")))
                       (DBName (packPTH "passing_number")))
                      ((FTTypeCon Nothing) (packPTH "Int")))
                     (SqlOther (packPTH "SqlType unset for passingNumber")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "question")))
                       (DBName (packPTH "question")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for question")))
                    [])
                   True)
                  NoReference])
              [])
             [])
            [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
           (Data.Map.Internal.fromList []))
          False
          {entityFields = [((((((FieldDef (HaskellName (packPTH "name")))
                                  (DBName (packPTH "name")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "description")))
                                  (DBName (packPTH "description")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "creationDate")))
                                  (DBName (packPTH "creation_date")))
                                 ((FTTypeCon Nothing) (packPTH "UTCTime")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy UTCTime)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "passingNumber")))
                                  (DBName (packPTH "passing_number")))
                                 ((FTTypeCon Nothing) (packPTH "Int")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Int)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "question")))
                                  (DBName (packPTH "question")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference],
           entityId = ((((((FieldDef (HaskellName (packPTH "Id")))
                             (DBName (packPTH "id")))
                            ((FTTypeCon Nothing) (packPTH "TestDataId")))
                           (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                              (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                          [])
                         True)
                        ((ForeignRef (HaskellName (packPTH "TestData")))
                           ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))}])
  ======>
    instance PersistField Question where
      toPersistValue
        = \ ent_aaFV
            -> (PersistMap
                  $ ((Prelude.zip ((Prelude.map pack) []))
                       ((Prelude.map toPersistValue) $ (toPersistFields ent_aaFV))))
      fromPersistValue
        = ((\ x_aaFW
              -> let
                   columns_aaFX
                     = unordered-containers-0.2.9.0:Data.HashMap.Strict.fromList x_aaFW
                 in
                   (fromPersistValues
                      $ ((Prelude.map
                            (\ name_aaFY
                               -> case
                                      (unordered-containers-0.2.9.0:Data.HashMap.Base.lookup
                                         (pack name_aaFY))
                                        columns_aaFX
                                  of
                                    Just v_aaFZ -> v_aaFZ
                                    Nothing -> PersistNull))
                           $ [])))
             <=< getPersistMap)
    instance persistent-2.8.1:Database.Persist.Sql.Class.PersistFieldSql Question where
      persistent-2.8.1:Database.Persist.Sql.Class.sqlType _ = SqlString
    instance PersistField TestData where
      toPersistValue
        = \ ent_aaG0
            -> (PersistMap
                  $ ((Prelude.zip
                        ((Prelude.map pack)
                           ["name", "description", "creationDate", "passingNumber",
                            "question"]))
                       ((Prelude.map toPersistValue) $ (toPersistFields ent_aaG0))))
      fromPersistValue
        = ((\ x_aaG1
              -> let
                   columns_aaG2
                     = unordered-containers-0.2.9.0:Data.HashMap.Strict.fromList x_aaG1
                 in
                   (fromPersistValues
                      $ ((Prelude.map
                            (\ name_aaG3
                               -> case
                                      (unordered-containers-0.2.9.0:Data.HashMap.Base.lookup
                                         (pack name_aaG3))
                                        columns_aaG2
                                  of
                                    Just v_aaG4 -> v_aaG4
                                    Nothing -> PersistNull))
                           $ ["name", "description", "creationDate", "passingNumber",
                              "question"])))
             <=< getPersistMap)
    instance persistent-2.8.1:Database.Persist.Sql.Class.PersistFieldSql TestData where
      persistent-2.8.1:Database.Persist.Sql.Class.sqlType _ = SqlString
    data Question
      = Question {}
      deriving ()
    type QuestionId = Key Question
    instance PersistEntity Question where
      type PersistEntityBackend Question = MongoContext
      data Unique Question
      newtype Key Question
        = QuestionKey {unQuestionKey :: (BackendKey MongoContext)}
        deriving (Show,
                  Read,
                  Eq,
                  Ord,
                  path-pieces-0.2.1:Web.PathPieces.PathPiece,
                  http-api-data-0.3.7.2:Web.Internal.HttpApiData.ToHttpApiData,
                  http-api-data-0.3.7.2:Web.Internal.HttpApiData.FromHttpApiData,
                  PersistField,
                  persistent-2.8.1:Database.Persist.Sql.Class.PersistFieldSql,
                  ToJSON,
                  FromJSON)
      data EntityField Question typ = typ ~ Key Question => QuestionId
      keyToValues
        = ((ghc-prim-0.5.1.1:GHC.Types.: [])
             . (toPersistValue . unQuestionKey))
      keyFromValues
        = ((fmap QuestionKey)
             . (fromPersistValue . Database.Persist.TH.headNote))
      entityDef _
        = (((((((((EntityDef (HaskellName (packPTH "Question")))
                    (DBName (packPTH "question")))
                   (((((((FieldDef (HaskellName (packPTH "Id")))
                           (DBName (packPTH "id")))
                          ((FTTypeCon Nothing) (packPTH "QuestionId")))
                         SqlInt64)
                        [])
                       True)
                      ((ForeignRef (HaskellName (packPTH "Question")))
                         ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                  [])
                 [])
                [])
               [])
              [])
             (Data.Map.Internal.fromList []))
            False
      toPersistFields Question = []
      fromPersistValues [] = Right Question
      fromPersistValues x_aaG5
        = (Left
             $ ((mappend (packPTH "Question: fromPersistValues failed on: "))
                  (pack $ (show x_aaG5))))
      persistUniqueToFieldNames _
        = error "Degenerate case, should never happen"
      persistUniqueToValues _
        = error "Degenerate case, should never happen"
      persistUniqueKeys Question = []
      persistFieldDef QuestionId
        = ((((((FieldDef (HaskellName (packPTH "Id")))
                 (DBName (packPTH "id")))
                ((FTTypeCon Nothing) (packPTH "QuestionId")))
               SqlInt64)
              [])
             True)
            ((ForeignRef (HaskellName (packPTH "Question")))
               ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))
      persistIdField = QuestionId
      fieldLens QuestionId
        = (lensPTH entityKey)
            (\ Entity _ value_aaG6 key_aaG7 -> (Entity key_aaG7) value_aaG6)
    instance ToBackendKey MongoContext Question where
      toBackendKey = unQuestionKey
      fromBackendKey = QuestionKey
    data TestData
      = TestData {testDataName :: !Text,
                  testDataDescription :: !Text,
                  testDataCreationDate :: !UTCTime,
                  testDataPassingNumber :: !Int,
                  testDataQuestion :: !Text}
      deriving (Eq, Read, Show, Generic)
    type TestDataId = Key TestData
    instance PersistEntity TestData where
      type PersistEntityBackend TestData = MongoContext
      data Unique TestData
      newtype Key TestData
        = TestDataKey {unTestDataKey :: (BackendKey MongoContext)}
        deriving (Show,
                  Read,
                  Eq,
                  Ord,
                  path-pieces-0.2.1:Web.PathPieces.PathPiece,
                  http-api-data-0.3.7.2:Web.Internal.HttpApiData.ToHttpApiData,
                  http-api-data-0.3.7.2:Web.Internal.HttpApiData.FromHttpApiData,
                  PersistField,
                  persistent-2.8.1:Database.Persist.Sql.Class.PersistFieldSql,
                  ToJSON,
                  FromJSON)
      data EntityField TestData typ
        = typ ~ Key TestData => TestDataId |
          typ ~ Text => TestDataName |
          typ ~ Text => TestDataDescription |
          typ ~ UTCTime => TestDataCreationDate |
          typ ~ Int => TestDataPassingNumber |
          typ ~ Text => TestDataQuestion
      keyToValues
        = ((ghc-prim-0.5.1.1:GHC.Types.: [])
             . (toPersistValue . unTestDataKey))
      keyFromValues
        = ((fmap TestDataKey)
             . (fromPersistValue . Database.Persist.TH.headNote))
      entityDef _
        = (((((((((EntityDef (HaskellName (packPTH "TestData")))
                    (DBName (packPTH "test_data")))
                   (((((((FieldDef (HaskellName (packPTH "Id")))
                           (DBName (packPTH "id")))
                          ((FTTypeCon Nothing) (packPTH "TestDataId")))
                         SqlInt64)
                        [])
                       True)
                      ((ForeignRef (HaskellName (packPTH "TestData")))
                         ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                  [])
                 [((((((FieldDef (HaskellName (packPTH "name")))
                         (DBName (packPTH "name")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "description")))
                         (DBName (packPTH "description")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "creationDate")))
                         (DBName (packPTH "creation_date")))
                        ((FTTypeCon Nothing) (packPTH "UTCTime")))
                       SqlDayTime)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "passingNumber")))
                         (DBName (packPTH "passing_number")))
                        ((FTTypeCon Nothing) (packPTH "Int")))
                       SqlInt64)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "question")))
                         (DBName (packPTH "question")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference])
                [])
               [])
              [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
             (Data.Map.Internal.fromList []))
            False
      toPersistFields (TestData x_aaGb x_aaGc x_aaGd x_aaGe x_aaGf)
        = [SomePersistField x_aaGb, SomePersistField x_aaGc,
           SomePersistField x_aaGd, SomePersistField x_aaGe,
           SomePersistField x_aaGf]
      fromPersistValues [x1_aaGh, x2_aaGi, x3_aaGj, x4_aaGk, x5_aaGl]
        = TestData
            <$>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "name")))
                 . fromPersistValue)
                x1_aaGh
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "description")))
                 . fromPersistValue)
                x2_aaGi
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "creationDate")))
                 . fromPersistValue)
                x3_aaGj
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "passingNumber")))
                 . fromPersistValue)
                x4_aaGk
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "question")))
                 . fromPersistValue)
                x5_aaGl
      fromPersistValues x_aaGg
        = (Left
             $ ((mappend (packPTH "TestData: fromPersistValues failed on: "))
                  (pack $ (show x_aaGg))))
      persistUniqueToFieldNames _
        = error "Degenerate case, should never happen"
      persistUniqueToValues _
        = error "Degenerate case, should never happen"
      persistUniqueKeys
        (TestData _name_aaGm
                  _description_aaGn
                  _creationDate_aaGo
                  _passingNumber_aaGp
                  _question_aaGq)
        = []
      persistFieldDef TestDataId
        = ((((((FieldDef (HaskellName (packPTH "Id")))
                 (DBName (packPTH "id")))
                ((FTTypeCon Nothing) (packPTH "TestDataId")))
               SqlInt64)
              [])
             True)
            ((ForeignRef (HaskellName (packPTH "TestData")))
               ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))
      persistFieldDef TestDataName
        = ((((((FieldDef (HaskellName (packPTH "name")))
                 (DBName (packPTH "name")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef TestDataDescription
        = ((((((FieldDef (HaskellName (packPTH "description")))
                 (DBName (packPTH "description")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef TestDataCreationDate
        = ((((((FieldDef (HaskellName (packPTH "creationDate")))
                 (DBName (packPTH "creation_date")))
                ((FTTypeCon Nothing) (packPTH "UTCTime")))
               SqlDayTime)
              [])
             True)
            NoReference
      persistFieldDef TestDataPassingNumber
        = ((((((FieldDef (HaskellName (packPTH "passingNumber")))
                 (DBName (packPTH "passing_number")))
                ((FTTypeCon Nothing) (packPTH "Int")))
               SqlInt64)
              [])
             True)
            NoReference
      persistFieldDef TestDataQuestion
        = ((((((FieldDef (HaskellName (packPTH "question")))
                 (DBName (packPTH "question")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistIdField = TestDataId
      fieldLens TestDataId
        = (lensPTH entityKey)
            (\ Entity _ value_aaGr key_aaGs -> (Entity key_aaGs) value_aaGr)
      fieldLens TestDataName
        = (lensPTH (testDataName . entityVal))
            (\ Entity key_aaGt value_aaGu x_aaGv
               -> (Entity key_aaGt) value_aaGu {testDataName = x_aaGv})
      fieldLens TestDataDescription
        = (lensPTH (testDataDescription . entityVal))
            (\ Entity key_aaGt value_aaGu x_aaGv
               -> (Entity key_aaGt) value_aaGu {testDataDescription = x_aaGv})
      fieldLens TestDataCreationDate
        = (lensPTH (testDataCreationDate . entityVal))
            (\ Entity key_aaGt value_aaGu x_aaGv
               -> (Entity key_aaGt) value_aaGu {testDataCreationDate = x_aaGv})
      fieldLens TestDataPassingNumber
        = (lensPTH (testDataPassingNumber . entityVal))
            (\ Entity key_aaGt value_aaGu x_aaGv
               -> (Entity key_aaGt) value_aaGu {testDataPassingNumber = x_aaGv})
      fieldLens TestDataQuestion
        = (lensPTH (testDataQuestion . entityVal))
            (\ Entity key_aaGt value_aaGu x_aaGv
               -> (Entity key_aaGt) value_aaGu {testDataQuestion = x_aaGv})
    instance ToBackendKey MongoContext TestData where
      toBackendKey = unTestDataKey
      fromBackendKey = TestDataKey
    migrateAll :: persistent-2.8.1:Database.Persist.Sql.Types.Migration
    migrateAll
      = do let defs_aaGw
                 = [(((((((((EntityDef (HaskellName (packPTH "Question")))
                              (DBName (packPTH "question")))
                             (((((((FieldDef (HaskellName (packPTH "Id")))
                                     (DBName (packPTH "id")))
                                    ((FTTypeCon Nothing) (packPTH "QuestionId")))
                                   SqlInt64)
                                  [])
                                 True)
                                ((ForeignRef (HaskellName (packPTH "Question")))
                                   ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                            [])
                           [])
                          [])
                         [])
                        [])
                       (Data.Map.Internal.fromList []))
                      False,
                    (((((((((EntityDef (HaskellName (packPTH "TestData")))
                              (DBName (packPTH "test_data")))
                             (((((((FieldDef (HaskellName (packPTH "Id")))
                                     (DBName (packPTH "id")))
                                    ((FTTypeCon Nothing) (packPTH "TestDataId")))
                                   SqlInt64)
                                  [])
                                 True)
                                ((ForeignRef (HaskellName (packPTH "TestData")))
                                   ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                            [])
                           [((((((FieldDef (HaskellName (packPTH "name")))
                                   (DBName (packPTH "name")))
                                  ((FTTypeCon Nothing) (packPTH "Text")))
                                 SqlString)
                                [])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "description")))
                                   (DBName (packPTH "description")))
                                  ((FTTypeCon Nothing) (packPTH "Text")))
                                 SqlString)
                                [])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "creationDate")))
                                   (DBName (packPTH "creation_date")))
                                  ((FTTypeCon Nothing) (packPTH "UTCTime")))
                                 SqlDayTime)
                                [])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "passingNumber")))
                                   (DBName (packPTH "passing_number")))
                                  ((FTTypeCon Nothing) (packPTH "Int")))
                                 SqlInt64)
                                [])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "question")))
                                   (DBName (packPTH "question")))
                                  ((FTTypeCon Nothing) (packPTH "Text")))
                                 SqlString)
                                [])
                               True)
                              NoReference])
                          [])
                         [])
                        [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
                       (Data.Map.Internal.fromList []))
                      False]
           (persistent-2.8.1:Database.Persist.Sql.Migration.migrate defs_aaGw)
             ((((((((((EntityDef (HaskellName (packPTH "Question")))
                        (DBName (packPTH "question")))
                       (((((((FieldDef (HaskellName (packPTH "Id")))
                               (DBName (packPTH "id")))
                              ((FTTypeCon Nothing) (packPTH "QuestionId")))
                             SqlInt64)
                            [])
                           True)
                          ((ForeignRef (HaskellName (packPTH "Question")))
                             ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                      [])
                     [])
                    [])
                   [])
                  [])
                 (Data.Map.Internal.fromList []))
                False)
           (persistent-2.8.1:Database.Persist.Sql.Migration.migrate defs_aaGw)
             ((((((((((EntityDef (HaskellName (packPTH "TestData")))
                        (DBName (packPTH "test_data")))
                       (((((((FieldDef (HaskellName (packPTH "Id")))
                               (DBName (packPTH "id")))
                              ((FTTypeCon Nothing) (packPTH "TestDataId")))
                             SqlInt64)
                            [])
                           True)
                          ((ForeignRef (HaskellName (packPTH "TestData")))
                             ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                      [])
                     [((((((FieldDef (HaskellName (packPTH "name")))
                             (DBName (packPTH "name")))
                            ((FTTypeCon Nothing) (packPTH "Text")))
                           SqlString)
                          [])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "description")))
                             (DBName (packPTH "description")))
                            ((FTTypeCon Nothing) (packPTH "Text")))
                           SqlString)
                          [])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "creationDate")))
                             (DBName (packPTH "creation_date")))
                            ((FTTypeCon Nothing) (packPTH "UTCTime")))
                           SqlDayTime)
                          [])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "passingNumber")))
                             (DBName (packPTH "passing_number")))
                            ((FTTypeCon Nothing) (packPTH "Int")))
                           SqlInt64)
                          [])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "question")))
                             (DBName (packPTH "question")))
                            ((FTTypeCon Nothing) (packPTH "Text")))
                           SqlString)
                          [])
                         True)
                        NoReference])
                    [])
                   [])
                  [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
                 (Data.Map.Internal.fromList []))
                False)
/home/nikita/Projects/labs/Databases/Course-Project/Server/src/Model/TestData.hs:(23,103)-(33,2): Splicing expression
    Language.Haskell.TH.Quote.quoteExp
      persistLowerCase
      "\n\
      \Question\n\
      \\n\
      \TestData\n\
      \  name          Text\n\
      \  description   Text\n\
      \  creationDate  UTCTime\n\
      \  passingNumber Int\n\
      \  question      Text\n\
      \  deriving Eq Read Show Generic\n"
  ======>
    [(((((((((EntityDef (HaskellName (packPTH "Question")))
               (DBName (packPTH "question")))
              (((((((FieldDef (HaskellName (packPTH "Id")))
                      (DBName (packPTH "id")))
                     ((FTTypeCon Nothing) (packPTH "QuestionId")))
                    SqlInt64)
                   [])
                  True)
                 ((ForeignRef (HaskellName (packPTH "Question")))
                    ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
             [])
            [])
           [])
          [])
         [])
        (Data.Map.Internal.fromList []))
       False
       {entityFields = [],
        entityId = ((((((FieldDef (HaskellName (packPTH "Id")))
                          (DBName (packPTH "id")))
                         ((FTTypeCon Nothing) (packPTH "QuestionId")))
                        (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                           (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                       [])
                      True)
                     ((ForeignRef (HaskellName (packPTH "Question")))
                        ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))},
     (((((((((EntityDef (HaskellName (packPTH "TestData")))
               (DBName (packPTH "test_data")))
              (((((((FieldDef (HaskellName (packPTH "Id")))
                      (DBName (packPTH "id")))
                     ((FTTypeCon Nothing) (packPTH "TestDataId")))
                    SqlInt64)
                   [])
                  True)
                 ((ForeignRef (HaskellName (packPTH "TestData")))
                    ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
             [])
            [((((((FieldDef (HaskellName (packPTH "name")))
                    (DBName (packPTH "name")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for name")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "description")))
                    (DBName (packPTH "description")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for description")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "creationDate")))
                    (DBName (packPTH "creation_date")))
                   ((FTTypeCon Nothing) (packPTH "UTCTime")))
                  (SqlOther (packPTH "SqlType unset for creationDate")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "passingNumber")))
                    (DBName (packPTH "passing_number")))
                   ((FTTypeCon Nothing) (packPTH "Int")))
                  (SqlOther (packPTH "SqlType unset for passingNumber")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "question")))
                    (DBName (packPTH "question")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for question")))
                 [])
                True)
               NoReference])
           [])
          [])
         [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
        (Data.Map.Internal.fromList []))
       False
       {entityFields = [((((((FieldDef (HaskellName (packPTH "name")))
                               (DBName (packPTH "name")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "description")))
                               (DBName (packPTH "description")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "creationDate")))
                               (DBName (packPTH "creation_date")))
                              ((FTTypeCon Nothing) (packPTH "UTCTime")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy UTCTime)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "passingNumber")))
                               (DBName (packPTH "passing_number")))
                              ((FTTypeCon Nothing) (packPTH "Int")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Int)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "question")))
                               (DBName (packPTH "question")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference],
        entityId = ((((((FieldDef (HaskellName (packPTH "Id")))
                          (DBName (packPTH "id")))
                         ((FTTypeCon Nothing) (packPTH "TestDataId")))
                        (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                           (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                       [])
                      True)
                     ((ForeignRef (HaskellName (packPTH "TestData")))
                        ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))}]
/home/nikita/Projects/labs/Databases/Course-Project/Server/src/Model/TestData.hs:(23,1)-(33,2): Splicing declarations
    share
      [mkPersist (mkPersistSettings (ConT ''MongoContext)),
       mkMigrate "migrateAll"]
      ([(((((((((EntityDef (HaskellName (packPTH "Question")))
                  (DBName (packPTH "question")))
                 (((((((FieldDef (HaskellName (packPTH "Id")))
                         (DBName (packPTH "id")))
                        ((FTTypeCon Nothing) (packPTH "QuestionId")))
                       SqlInt64)
                      [])
                     True)
                    ((ForeignRef (HaskellName (packPTH "Question")))
                       ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                [])
               [])
              [])
             [])
            [])
           (Data.Map.Internal.fromList []))
          False
          {entityFields = [],
           entityId = ((((((FieldDef (HaskellName (packPTH "Id")))
                             (DBName (packPTH "id")))
                            ((FTTypeCon Nothing) (packPTH "QuestionId")))
                           (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                              (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                          [])
                         True)
                        ((ForeignRef (HaskellName (packPTH "Question")))
                           ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))},
        (((((((((EntityDef (HaskellName (packPTH "TestData")))
                  (DBName (packPTH "test_data")))
                 (((((((FieldDef (HaskellName (packPTH "Id")))
                         (DBName (packPTH "id")))
                        ((FTTypeCon Nothing) (packPTH "TestDataId")))
                       SqlInt64)
                      [])
                     True)
                    ((ForeignRef (HaskellName (packPTH "TestData")))
                       ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                [])
               [((((((FieldDef (HaskellName (packPTH "name")))
                       (DBName (packPTH "name")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for name")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "description")))
                       (DBName (packPTH "description")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for description")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "creationDate")))
                       (DBName (packPTH "creation_date")))
                      ((FTTypeCon Nothing) (packPTH "UTCTime")))
                     (SqlOther (packPTH "SqlType unset for creationDate")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "passingNumber")))
                       (DBName (packPTH "passing_number")))
                      ((FTTypeCon Nothing) (packPTH "Int")))
                     (SqlOther (packPTH "SqlType unset for passingNumber")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "question")))
                       (DBName (packPTH "question")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for question")))
                    [])
                   True)
                  NoReference])
              [])
             [])
            [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
           (Data.Map.Internal.fromList []))
          False
          {entityFields = [((((((FieldDef (HaskellName (packPTH "name")))
                                  (DBName (packPTH "name")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "description")))
                                  (DBName (packPTH "description")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "creationDate")))
                                  (DBName (packPTH "creation_date")))
                                 ((FTTypeCon Nothing) (packPTH "UTCTime")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy UTCTime)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "passingNumber")))
                                  (DBName (packPTH "passing_number")))
                                 ((FTTypeCon Nothing) (packPTH "Int")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Int)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "question")))
                                  (DBName (packPTH "question")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference],
           entityId = ((((((FieldDef (HaskellName (packPTH "Id")))
                             (DBName (packPTH "id")))
                            ((FTTypeCon Nothing) (packPTH "TestDataId")))
                           (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                              (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                          [])
                         True)
                        ((ForeignRef (HaskellName (packPTH "TestData")))
                           ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))}])
  ======>
    instance PersistField Question where
      toPersistValue
        = \ ent_av5p
            -> (PersistMap
                  $ ((Prelude.zip ((Prelude.map pack) []))
                       ((Prelude.map toPersistValue) $ (toPersistFields ent_av5p))))
      fromPersistValue
        = ((\ x_av5q
              -> let
                   columns_av5r
                     = unordered-containers-0.2.9.0:Data.HashMap.Strict.fromList x_av5q
                 in
                   (fromPersistValues
                      $ ((Prelude.map
                            (\ name_av5s
                               -> case
                                      (unordered-containers-0.2.9.0:Data.HashMap.Base.lookup
                                         (pack name_av5s))
                                        columns_av5r
                                  of
                                    Just v_av5t -> v_av5t
                                    Nothing -> PersistNull))
                           $ [])))
             <=< getPersistMap)
    instance persistent-2.8.1:Database.Persist.Sql.Class.PersistFieldSql Question where
      persistent-2.8.1:Database.Persist.Sql.Class.sqlType _ = SqlString
    instance PersistField TestData where
      toPersistValue
        = \ ent_av5u
            -> (PersistMap
                  $ ((Prelude.zip
                        ((Prelude.map pack)
                           ["name", "description", "creationDate", "passingNumber",
                            "question"]))
                       ((Prelude.map toPersistValue) $ (toPersistFields ent_av5u))))
      fromPersistValue
        = ((\ x_av5v
              -> let
                   columns_av5w
                     = unordered-containers-0.2.9.0:Data.HashMap.Strict.fromList x_av5v
                 in
                   (fromPersistValues
                      $ ((Prelude.map
                            (\ name_av5x
                               -> case
                                      (unordered-containers-0.2.9.0:Data.HashMap.Base.lookup
                                         (pack name_av5x))
                                        columns_av5w
                                  of
                                    Just v_av5y -> v_av5y
                                    Nothing -> PersistNull))
                           $ ["name", "description", "creationDate", "passingNumber",
                              "question"])))
             <=< getPersistMap)
    instance persistent-2.8.1:Database.Persist.Sql.Class.PersistFieldSql TestData where
      persistent-2.8.1:Database.Persist.Sql.Class.sqlType _ = SqlString
    data Question
      = Question {}
      deriving ()
    type QuestionId = Key Question
    instance PersistEntity Question where
      type PersistEntityBackend Question = MongoContext
      data Unique Question
      newtype Key Question
        = QuestionKey {unQuestionKey :: (BackendKey MongoContext)}
        deriving (Show,
                  Read,
                  Eq,
                  Ord,
                  path-pieces-0.2.1:Web.PathPieces.PathPiece,
                  http-api-data-0.3.7.2:Web.Internal.HttpApiData.ToHttpApiData,
                  http-api-data-0.3.7.2:Web.Internal.HttpApiData.FromHttpApiData,
                  PersistField,
                  persistent-2.8.1:Database.Persist.Sql.Class.PersistFieldSql,
                  ToJSON,
                  FromJSON)
      data EntityField Question typ = typ ~ Key Question => QuestionId
      keyToValues
        = ((ghc-prim-0.5.1.1:GHC.Types.: [])
             . (toPersistValue . unQuestionKey))
      keyFromValues
        = ((fmap QuestionKey)
             . (fromPersistValue . Database.Persist.TH.headNote))
      entityDef _
        = (((((((((EntityDef (HaskellName (packPTH "Question")))
                    (DBName (packPTH "question")))
                   (((((((FieldDef (HaskellName (packPTH "Id")))
                           (DBName (packPTH "id")))
                          ((FTTypeCon Nothing) (packPTH "QuestionId")))
                         SqlInt64)
                        [])
                       True)
                      ((ForeignRef (HaskellName (packPTH "Question")))
                         ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                  [])
                 [])
                [])
               [])
              [])
             (Data.Map.Internal.fromList []))
            False
      toPersistFields Question = []
      fromPersistValues [] = Right Question
      fromPersistValues x_av5z
        = (Left
             $ ((mappend (packPTH "Question: fromPersistValues failed on: "))
                  (pack $ (show x_av5z))))
      persistUniqueToFieldNames _
        = error "Degenerate case, should never happen"
      persistUniqueToValues _
        = error "Degenerate case, should never happen"
      persistUniqueKeys Question = []
      persistFieldDef QuestionId
        = ((((((FieldDef (HaskellName (packPTH "Id")))
                 (DBName (packPTH "id")))
                ((FTTypeCon Nothing) (packPTH "QuestionId")))
               SqlInt64)
              [])
             True)
            ((ForeignRef (HaskellName (packPTH "Question")))
               ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))
      persistIdField = QuestionId
      fieldLens QuestionId
        = (lensPTH entityKey)
            (\ Entity _ value_av5A key_av5B -> (Entity key_av5B) value_av5A)
    instance ToBackendKey MongoContext Question where
      toBackendKey = unQuestionKey
      fromBackendKey = QuestionKey
    data TestData
      = TestData {testDataName :: !Text,
                  testDataDescription :: !Text,
                  testDataCreationDate :: !UTCTime,
                  testDataPassingNumber :: !Int,
                  testDataQuestion :: !Text}
      deriving (Eq, Read, Show, Generic)
    type TestDataId = Key TestData
    instance PersistEntity TestData where
      type PersistEntityBackend TestData = MongoContext
      data Unique TestData
      newtype Key TestData
        = TestDataKey {unTestDataKey :: (BackendKey MongoContext)}
        deriving (Show,
                  Read,
                  Eq,
                  Ord,
                  path-pieces-0.2.1:Web.PathPieces.PathPiece,
                  http-api-data-0.3.7.2:Web.Internal.HttpApiData.ToHttpApiData,
                  http-api-data-0.3.7.2:Web.Internal.HttpApiData.FromHttpApiData,
                  PersistField,
                  persistent-2.8.1:Database.Persist.Sql.Class.PersistFieldSql,
                  ToJSON,
                  FromJSON)
      data EntityField TestData typ
        = typ ~ Key TestData => TestDataId |
          typ ~ Text => TestDataName |
          typ ~ Text => TestDataDescription |
          typ ~ UTCTime => TestDataCreationDate |
          typ ~ Int => TestDataPassingNumber |
          typ ~ Text => TestDataQuestion
      keyToValues
        = ((ghc-prim-0.5.1.1:GHC.Types.: [])
             . (toPersistValue . unTestDataKey))
      keyFromValues
        = ((fmap TestDataKey)
             . (fromPersistValue . Database.Persist.TH.headNote))
      entityDef _
        = (((((((((EntityDef (HaskellName (packPTH "TestData")))
                    (DBName (packPTH "test_data")))
                   (((((((FieldDef (HaskellName (packPTH "Id")))
                           (DBName (packPTH "id")))
                          ((FTTypeCon Nothing) (packPTH "TestDataId")))
                         SqlInt64)
                        [])
                       True)
                      ((ForeignRef (HaskellName (packPTH "TestData")))
                         ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                  [])
                 [((((((FieldDef (HaskellName (packPTH "name")))
                         (DBName (packPTH "name")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "description")))
                         (DBName (packPTH "description")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "creationDate")))
                         (DBName (packPTH "creation_date")))
                        ((FTTypeCon Nothing) (packPTH "UTCTime")))
                       SqlDayTime)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "passingNumber")))
                         (DBName (packPTH "passing_number")))
                        ((FTTypeCon Nothing) (packPTH "Int")))
                       SqlInt64)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "question")))
                         (DBName (packPTH "question")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference])
                [])
               [])
              [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
             (Data.Map.Internal.fromList []))
            False
      toPersistFields (TestData x_av5F x_av5G x_av5H x_av5I x_av5J)
        = [SomePersistField x_av5F, SomePersistField x_av5G,
           SomePersistField x_av5H, SomePersistField x_av5I,
           SomePersistField x_av5J]
      fromPersistValues [x1_av5L, x2_av5M, x3_av5N, x4_av5O, x5_av5P]
        = TestData
            <$>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "name")))
                 . fromPersistValue)
                x1_av5L
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "description")))
                 . fromPersistValue)
                x2_av5M
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "creationDate")))
                 . fromPersistValue)
                x3_av5N
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "passingNumber")))
                 . fromPersistValue)
                x4_av5O
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "question")))
                 . fromPersistValue)
                x5_av5P
      fromPersistValues x_av5K
        = (Left
             $ ((mappend (packPTH "TestData: fromPersistValues failed on: "))
                  (pack $ (show x_av5K))))
      persistUniqueToFieldNames _
        = error "Degenerate case, should never happen"
      persistUniqueToValues _
        = error "Degenerate case, should never happen"
      persistUniqueKeys
        (TestData _name_av5Q
                  _description_av5R
                  _creationDate_av5S
                  _passingNumber_av5T
                  _question_av5U)
        = []
      persistFieldDef TestDataId
        = ((((((FieldDef (HaskellName (packPTH "Id")))
                 (DBName (packPTH "id")))
                ((FTTypeCon Nothing) (packPTH "TestDataId")))
               SqlInt64)
              [])
             True)
            ((ForeignRef (HaskellName (packPTH "TestData")))
               ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))
      persistFieldDef TestDataName
        = ((((((FieldDef (HaskellName (packPTH "name")))
                 (DBName (packPTH "name")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef TestDataDescription
        = ((((((FieldDef (HaskellName (packPTH "description")))
                 (DBName (packPTH "description")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef TestDataCreationDate
        = ((((((FieldDef (HaskellName (packPTH "creationDate")))
                 (DBName (packPTH "creation_date")))
                ((FTTypeCon Nothing) (packPTH "UTCTime")))
               SqlDayTime)
              [])
             True)
            NoReference
      persistFieldDef TestDataPassingNumber
        = ((((((FieldDef (HaskellName (packPTH "passingNumber")))
                 (DBName (packPTH "passing_number")))
                ((FTTypeCon Nothing) (packPTH "Int")))
               SqlInt64)
              [])
             True)
            NoReference
      persistFieldDef TestDataQuestion
        = ((((((FieldDef (HaskellName (packPTH "question")))
                 (DBName (packPTH "question")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistIdField = TestDataId
      fieldLens TestDataId
        = (lensPTH entityKey)
            (\ Entity _ value_av5V key_av5W -> (Entity key_av5W) value_av5V)
      fieldLens TestDataName
        = (lensPTH (testDataName . entityVal))
            (\ Entity key_av5X value_av5Y x_av5Z
               -> (Entity key_av5X) value_av5Y {testDataName = x_av5Z})
      fieldLens TestDataDescription
        = (lensPTH (testDataDescription . entityVal))
            (\ Entity key_av5X value_av5Y x_av5Z
               -> (Entity key_av5X) value_av5Y {testDataDescription = x_av5Z})
      fieldLens TestDataCreationDate
        = (lensPTH (testDataCreationDate . entityVal))
            (\ Entity key_av5X value_av5Y x_av5Z
               -> (Entity key_av5X) value_av5Y {testDataCreationDate = x_av5Z})
      fieldLens TestDataPassingNumber
        = (lensPTH (testDataPassingNumber . entityVal))
            (\ Entity key_av5X value_av5Y x_av5Z
               -> (Entity key_av5X) value_av5Y {testDataPassingNumber = x_av5Z})
      fieldLens TestDataQuestion
        = (lensPTH (testDataQuestion . entityVal))
            (\ Entity key_av5X value_av5Y x_av5Z
               -> (Entity key_av5X) value_av5Y {testDataQuestion = x_av5Z})
    instance ToBackendKey MongoContext TestData where
      toBackendKey = unTestDataKey
      fromBackendKey = TestDataKey
    migrateAll :: persistent-2.8.1:Database.Persist.Sql.Types.Migration
    migrateAll
      = do let defs_av60
                 = [(((((((((EntityDef (HaskellName (packPTH "Question")))
                              (DBName (packPTH "question")))
                             (((((((FieldDef (HaskellName (packPTH "Id")))
                                     (DBName (packPTH "id")))
                                    ((FTTypeCon Nothing) (packPTH "QuestionId")))
                                   SqlInt64)
                                  [])
                                 True)
                                ((ForeignRef (HaskellName (packPTH "Question")))
                                   ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                            [])
                           [])
                          [])
                         [])
                        [])
                       (Data.Map.Internal.fromList []))
                      False,
                    (((((((((EntityDef (HaskellName (packPTH "TestData")))
                              (DBName (packPTH "test_data")))
                             (((((((FieldDef (HaskellName (packPTH "Id")))
                                     (DBName (packPTH "id")))
                                    ((FTTypeCon Nothing) (packPTH "TestDataId")))
                                   SqlInt64)
                                  [])
                                 True)
                                ((ForeignRef (HaskellName (packPTH "TestData")))
                                   ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                            [])
                           [((((((FieldDef (HaskellName (packPTH "name")))
                                   (DBName (packPTH "name")))
                                  ((FTTypeCon Nothing) (packPTH "Text")))
                                 SqlString)
                                [])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "description")))
                                   (DBName (packPTH "description")))
                                  ((FTTypeCon Nothing) (packPTH "Text")))
                                 SqlString)
                                [])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "creationDate")))
                                   (DBName (packPTH "creation_date")))
                                  ((FTTypeCon Nothing) (packPTH "UTCTime")))
                                 SqlDayTime)
                                [])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "passingNumber")))
                                   (DBName (packPTH "passing_number")))
                                  ((FTTypeCon Nothing) (packPTH "Int")))
                                 SqlInt64)
                                [])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "question")))
                                   (DBName (packPTH "question")))
                                  ((FTTypeCon Nothing) (packPTH "Text")))
                                 SqlString)
                                [])
                               True)
                              NoReference])
                          [])
                         [])
                        [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
                       (Data.Map.Internal.fromList []))
                      False]
           (persistent-2.8.1:Database.Persist.Sql.Migration.migrate defs_av60)
             ((((((((((EntityDef (HaskellName (packPTH "Question")))
                        (DBName (packPTH "question")))
                       (((((((FieldDef (HaskellName (packPTH "Id")))
                               (DBName (packPTH "id")))
                              ((FTTypeCon Nothing) (packPTH "QuestionId")))
                             SqlInt64)
                            [])
                           True)
                          ((ForeignRef (HaskellName (packPTH "Question")))
                             ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                      [])
                     [])
                    [])
                   [])
                  [])
                 (Data.Map.Internal.fromList []))
                False)
           (persistent-2.8.1:Database.Persist.Sql.Migration.migrate defs_av60)
             ((((((((((EntityDef (HaskellName (packPTH "TestData")))
                        (DBName (packPTH "test_data")))
                       (((((((FieldDef (HaskellName (packPTH "Id")))
                               (DBName (packPTH "id")))
                              ((FTTypeCon Nothing) (packPTH "TestDataId")))
                             SqlInt64)
                            [])
                           True)
                          ((ForeignRef (HaskellName (packPTH "TestData")))
                             ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                      [])
                     [((((((FieldDef (HaskellName (packPTH "name")))
                             (DBName (packPTH "name")))
                            ((FTTypeCon Nothing) (packPTH "Text")))
                           SqlString)
                          [])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "description")))
                             (DBName (packPTH "description")))
                            ((FTTypeCon Nothing) (packPTH "Text")))
                           SqlString)
                          [])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "creationDate")))
                             (DBName (packPTH "creation_date")))
                            ((FTTypeCon Nothing) (packPTH "UTCTime")))
                           SqlDayTime)
                          [])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "passingNumber")))
                             (DBName (packPTH "passing_number")))
                            ((FTTypeCon Nothing) (packPTH "Int")))
                           SqlInt64)
                          [])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "question")))
                             (DBName (packPTH "question")))
                            ((FTTypeCon Nothing) (packPTH "Text")))
                           SqlString)
                          [])
                         True)
                        NoReference])
                    [])
                   [])
                  [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
                 (Data.Map.Internal.fromList []))
                False)
/home/nikita/Projects/labs/Databases/Course-Project/Server/src/Model/TestData.hs:(23,103)-(33,2): Splicing expression
    Language.Haskell.TH.Quote.quoteExp
      persistLowerCase
      "\n\
      \Question\n\
      \\n\
      \TestData\n\
      \  name          Text\n\
      \  description   Text\n\
      \  creationDate  UTCTime\n\
      \  passingNumber Int\n\
      \  question      Text\n\
      \  deriving Eq Read Show Generic\n"
  ======>
    [(((((((((EntityDef (HaskellName (packPTH "Question")))
               (DBName (packPTH "question")))
              (((((((FieldDef (HaskellName (packPTH "Id")))
                      (DBName (packPTH "id")))
                     ((FTTypeCon Nothing) (packPTH "QuestionId")))
                    SqlInt64)
                   [])
                  True)
                 ((ForeignRef (HaskellName (packPTH "Question")))
                    ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
             [])
            [])
           [])
          [])
         [])
        (Data.Map.Internal.fromList []))
       False
       {entityFields = [],
        entityId = ((((((FieldDef (HaskellName (packPTH "Id")))
                          (DBName (packPTH "id")))
                         ((FTTypeCon Nothing) (packPTH "QuestionId")))
                        (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                           (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                       [])
                      True)
                     ((ForeignRef (HaskellName (packPTH "Question")))
                        ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))},
     (((((((((EntityDef (HaskellName (packPTH "TestData")))
               (DBName (packPTH "test_data")))
              (((((((FieldDef (HaskellName (packPTH "Id")))
                      (DBName (packPTH "id")))
                     ((FTTypeCon Nothing) (packPTH "TestDataId")))
                    SqlInt64)
                   [])
                  True)
                 ((ForeignRef (HaskellName (packPTH "TestData")))
                    ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
             [])
            [((((((FieldDef (HaskellName (packPTH "name")))
                    (DBName (packPTH "name")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for name")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "description")))
                    (DBName (packPTH "description")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for description")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "creationDate")))
                    (DBName (packPTH "creation_date")))
                   ((FTTypeCon Nothing) (packPTH "UTCTime")))
                  (SqlOther (packPTH "SqlType unset for creationDate")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "passingNumber")))
                    (DBName (packPTH "passing_number")))
                   ((FTTypeCon Nothing) (packPTH "Int")))
                  (SqlOther (packPTH "SqlType unset for passingNumber")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "question")))
                    (DBName (packPTH "question")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for question")))
                 [])
                True)
               NoReference])
           [])
          [])
         [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
        (Data.Map.Internal.fromList []))
       False
       {entityFields = [((((((FieldDef (HaskellName (packPTH "name")))
                               (DBName (packPTH "name")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "description")))
                               (DBName (packPTH "description")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "creationDate")))
                               (DBName (packPTH "creation_date")))
                              ((FTTypeCon Nothing) (packPTH "UTCTime")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy UTCTime)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "passingNumber")))
                               (DBName (packPTH "passing_number")))
                              ((FTTypeCon Nothing) (packPTH "Int")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Int)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "question")))
                               (DBName (packPTH "question")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference],
        entityId = ((((((FieldDef (HaskellName (packPTH "Id")))
                          (DBName (packPTH "id")))
                         ((FTTypeCon Nothing) (packPTH "TestDataId")))
                        (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                           (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                       [])
                      True)
                     ((ForeignRef (HaskellName (packPTH "TestData")))
                        ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))}]
/home/nikita/Projects/labs/Databases/Course-Project/Server/src/Model/TestData.hs:(23,1)-(33,2): Splicing declarations
    share
      [mkPersist (mkPersistSettings (ConT ''MongoContext)),
       mkMigrate "migrateAll"]
      ([(((((((((EntityDef (HaskellName (packPTH "Question")))
                  (DBName (packPTH "question")))
                 (((((((FieldDef (HaskellName (packPTH "Id")))
                         (DBName (packPTH "id")))
                        ((FTTypeCon Nothing) (packPTH "QuestionId")))
                       SqlInt64)
                      [])
                     True)
                    ((ForeignRef (HaskellName (packPTH "Question")))
                       ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                [])
               [])
              [])
             [])
            [])
           (Data.Map.Internal.fromList []))
          False
          {entityFields = [],
           entityId = ((((((FieldDef (HaskellName (packPTH "Id")))
                             (DBName (packPTH "id")))
                            ((FTTypeCon Nothing) (packPTH "QuestionId")))
                           (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                              (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                          [])
                         True)
                        ((ForeignRef (HaskellName (packPTH "Question")))
                           ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))},
        (((((((((EntityDef (HaskellName (packPTH "TestData")))
                  (DBName (packPTH "test_data")))
                 (((((((FieldDef (HaskellName (packPTH "Id")))
                         (DBName (packPTH "id")))
                        ((FTTypeCon Nothing) (packPTH "TestDataId")))
                       SqlInt64)
                      [])
                     True)
                    ((ForeignRef (HaskellName (packPTH "TestData")))
                       ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                [])
               [((((((FieldDef (HaskellName (packPTH "name")))
                       (DBName (packPTH "name")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for name")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "description")))
                       (DBName (packPTH "description")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for description")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "creationDate")))
                       (DBName (packPTH "creation_date")))
                      ((FTTypeCon Nothing) (packPTH "UTCTime")))
                     (SqlOther (packPTH "SqlType unset for creationDate")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "passingNumber")))
                       (DBName (packPTH "passing_number")))
                      ((FTTypeCon Nothing) (packPTH "Int")))
                     (SqlOther (packPTH "SqlType unset for passingNumber")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "question")))
                       (DBName (packPTH "question")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for question")))
                    [])
                   True)
                  NoReference])
              [])
             [])
            [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
           (Data.Map.Internal.fromList []))
          False
          {entityFields = [((((((FieldDef (HaskellName (packPTH "name")))
                                  (DBName (packPTH "name")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "description")))
                                  (DBName (packPTH "description")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "creationDate")))
                                  (DBName (packPTH "creation_date")))
                                 ((FTTypeCon Nothing) (packPTH "UTCTime")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy UTCTime)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "passingNumber")))
                                  (DBName (packPTH "passing_number")))
                                 ((FTTypeCon Nothing) (packPTH "Int")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Int)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "question")))
                                  (DBName (packPTH "question")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference],
           entityId = ((((((FieldDef (HaskellName (packPTH "Id")))
                             (DBName (packPTH "id")))
                            ((FTTypeCon Nothing) (packPTH "TestDataId")))
                           (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                              (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                          [])
                         True)
                        ((ForeignRef (HaskellName (packPTH "TestData")))
                           ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))}])
  ======>
    instance PersistField Question where
      toPersistValue
        = \ ent_aHjG
            -> (PersistMap
                  $ ((Prelude.zip ((Prelude.map pack) []))
                       ((Prelude.map toPersistValue) $ (toPersistFields ent_aHjG))))
      fromPersistValue
        = ((\ x_aHjH
              -> let
                   columns_aHjI
                     = unordered-containers-0.2.9.0:Data.HashMap.Strict.fromList x_aHjH
                 in
                   (fromPersistValues
                      $ ((Prelude.map
                            (\ name_aHjJ
                               -> case
                                      (unordered-containers-0.2.9.0:Data.HashMap.Base.lookup
                                         (pack name_aHjJ))
                                        columns_aHjI
                                  of
                                    Just v_aHjK -> v_aHjK
                                    Nothing -> PersistNull))
                           $ [])))
             <=< getPersistMap)
    instance persistent-2.8.1:Database.Persist.Sql.Class.PersistFieldSql Question where
      persistent-2.8.1:Database.Persist.Sql.Class.sqlType _ = SqlString
    instance PersistField TestData where
      toPersistValue
        = \ ent_aHjL
            -> (PersistMap
                  $ ((Prelude.zip
                        ((Prelude.map pack)
                           ["name", "description", "creationDate", "passingNumber",
                            "question"]))
                       ((Prelude.map toPersistValue) $ (toPersistFields ent_aHjL))))
      fromPersistValue
        = ((\ x_aHjM
              -> let
                   columns_aHjN
                     = unordered-containers-0.2.9.0:Data.HashMap.Strict.fromList x_aHjM
                 in
                   (fromPersistValues
                      $ ((Prelude.map
                            (\ name_aHjO
                               -> case
                                      (unordered-containers-0.2.9.0:Data.HashMap.Base.lookup
                                         (pack name_aHjO))
                                        columns_aHjN
                                  of
                                    Just v_aHjP -> v_aHjP
                                    Nothing -> PersistNull))
                           $ ["name", "description", "creationDate", "passingNumber",
                              "question"])))
             <=< getPersistMap)
    instance persistent-2.8.1:Database.Persist.Sql.Class.PersistFieldSql TestData where
      persistent-2.8.1:Database.Persist.Sql.Class.sqlType _ = SqlString
    data Question
      = Question {}
      deriving ()
    type QuestionId = Key Question
    instance PersistEntity Question where
      type PersistEntityBackend Question = MongoContext
      data Unique Question
      newtype Key Question
        = QuestionKey {unQuestionKey :: (BackendKey MongoContext)}
        deriving (Show,
                  Read,
                  Eq,
                  Ord,
                  path-pieces-0.2.1:Web.PathPieces.PathPiece,
                  http-api-data-0.3.7.2:Web.Internal.HttpApiData.ToHttpApiData,
                  http-api-data-0.3.7.2:Web.Internal.HttpApiData.FromHttpApiData,
                  PersistField,
                  persistent-2.8.1:Database.Persist.Sql.Class.PersistFieldSql,
                  ToJSON,
                  FromJSON)
      data EntityField Question typ = typ ~ Key Question => QuestionId
      keyToValues
        = ((ghc-prim-0.5.1.1:GHC.Types.: [])
             . (toPersistValue . unQuestionKey))
      keyFromValues
        = ((fmap QuestionKey)
             . (fromPersistValue . Database.Persist.TH.headNote))
      entityDef _
        = (((((((((EntityDef (HaskellName (packPTH "Question")))
                    (DBName (packPTH "question")))
                   (((((((FieldDef (HaskellName (packPTH "Id")))
                           (DBName (packPTH "id")))
                          ((FTTypeCon Nothing) (packPTH "QuestionId")))
                         SqlInt64)
                        [])
                       True)
                      ((ForeignRef (HaskellName (packPTH "Question")))
                         ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                  [])
                 [])
                [])
               [])
              [])
             (Data.Map.Internal.fromList []))
            False
      toPersistFields Question = []
      fromPersistValues [] = Right Question
      fromPersistValues x_aHjQ
        = (Left
             $ ((mappend (packPTH "Question: fromPersistValues failed on: "))
                  (pack $ (show x_aHjQ))))
      persistUniqueToFieldNames _
        = error "Degenerate case, should never happen"
      persistUniqueToValues _
        = error "Degenerate case, should never happen"
      persistUniqueKeys Question = []
      persistFieldDef QuestionId
        = ((((((FieldDef (HaskellName (packPTH "Id")))
                 (DBName (packPTH "id")))
                ((FTTypeCon Nothing) (packPTH "QuestionId")))
               SqlInt64)
              [])
             True)
            ((ForeignRef (HaskellName (packPTH "Question")))
               ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))
      persistIdField = QuestionId
      fieldLens QuestionId
        = (lensPTH entityKey)
            (\ Entity _ value_aHjR key_aHjS -> (Entity key_aHjS) value_aHjR)
    instance ToBackendKey MongoContext Question where
      toBackendKey = unQuestionKey
      fromBackendKey = QuestionKey
    data TestData
      = TestData {testDataName :: !Text,
                  testDataDescription :: !Text,
                  testDataCreationDate :: !UTCTime,
                  testDataPassingNumber :: !Int,
                  testDataQuestion :: !Text}
      deriving (Eq, Read, Show, Generic)
    type TestDataId = Key TestData
    instance PersistEntity TestData where
      type PersistEntityBackend TestData = MongoContext
      data Unique TestData
      newtype Key TestData
        = TestDataKey {unTestDataKey :: (BackendKey MongoContext)}
        deriving (Show,
                  Read,
                  Eq,
                  Ord,
                  path-pieces-0.2.1:Web.PathPieces.PathPiece,
                  http-api-data-0.3.7.2:Web.Internal.HttpApiData.ToHttpApiData,
                  http-api-data-0.3.7.2:Web.Internal.HttpApiData.FromHttpApiData,
                  PersistField,
                  persistent-2.8.1:Database.Persist.Sql.Class.PersistFieldSql,
                  ToJSON,
                  FromJSON)
      data EntityField TestData typ
        = typ ~ Key TestData => TestDataId |
          typ ~ Text => TestDataName |
          typ ~ Text => TestDataDescription |
          typ ~ UTCTime => TestDataCreationDate |
          typ ~ Int => TestDataPassingNumber |
          typ ~ Text => TestDataQuestion
      keyToValues
        = ((ghc-prim-0.5.1.1:GHC.Types.: [])
             . (toPersistValue . unTestDataKey))
      keyFromValues
        = ((fmap TestDataKey)
             . (fromPersistValue . Database.Persist.TH.headNote))
      entityDef _
        = (((((((((EntityDef (HaskellName (packPTH "TestData")))
                    (DBName (packPTH "test_data")))
                   (((((((FieldDef (HaskellName (packPTH "Id")))
                           (DBName (packPTH "id")))
                          ((FTTypeCon Nothing) (packPTH "TestDataId")))
                         SqlInt64)
                        [])
                       True)
                      ((ForeignRef (HaskellName (packPTH "TestData")))
                         ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                  [])
                 [((((((FieldDef (HaskellName (packPTH "name")))
                         (DBName (packPTH "name")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "description")))
                         (DBName (packPTH "description")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "creationDate")))
                         (DBName (packPTH "creation_date")))
                        ((FTTypeCon Nothing) (packPTH "UTCTime")))
                       SqlDayTime)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "passingNumber")))
                         (DBName (packPTH "passing_number")))
                        ((FTTypeCon Nothing) (packPTH "Int")))
                       SqlInt64)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "question")))
                         (DBName (packPTH "question")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference])
                [])
               [])
              [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
             (Data.Map.Internal.fromList []))
            False
      toPersistFields (TestData x_aHjW x_aHjX x_aHjY x_aHjZ x_aHk0)
        = [SomePersistField x_aHjW, SomePersistField x_aHjX,
           SomePersistField x_aHjY, SomePersistField x_aHjZ,
           SomePersistField x_aHk0]
      fromPersistValues [x1_aHk2, x2_aHk3, x3_aHk4, x4_aHk5, x5_aHk6]
        = TestData
            <$>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "name")))
                 . fromPersistValue)
                x1_aHk2
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "description")))
                 . fromPersistValue)
                x2_aHk3
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "creationDate")))
                 . fromPersistValue)
                x3_aHk4
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "passingNumber")))
                 . fromPersistValue)
                x4_aHk5
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "question")))
                 . fromPersistValue)
                x5_aHk6
      fromPersistValues x_aHk1
        = (Left
             $ ((mappend (packPTH "TestData: fromPersistValues failed on: "))
                  (pack $ (show x_aHk1))))
      persistUniqueToFieldNames _
        = error "Degenerate case, should never happen"
      persistUniqueToValues _
        = error "Degenerate case, should never happen"
      persistUniqueKeys
        (TestData _name_aHk7
                  _description_aHk8
                  _creationDate_aHk9
                  _passingNumber_aHka
                  _question_aHkb)
        = []
      persistFieldDef TestDataId
        = ((((((FieldDef (HaskellName (packPTH "Id")))
                 (DBName (packPTH "id")))
                ((FTTypeCon Nothing) (packPTH "TestDataId")))
               SqlInt64)
              [])
             True)
            ((ForeignRef (HaskellName (packPTH "TestData")))
               ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))
      persistFieldDef TestDataName
        = ((((((FieldDef (HaskellName (packPTH "name")))
                 (DBName (packPTH "name")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef TestDataDescription
        = ((((((FieldDef (HaskellName (packPTH "description")))
                 (DBName (packPTH "description")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef TestDataCreationDate
        = ((((((FieldDef (HaskellName (packPTH "creationDate")))
                 (DBName (packPTH "creation_date")))
                ((FTTypeCon Nothing) (packPTH "UTCTime")))
               SqlDayTime)
              [])
             True)
            NoReference
      persistFieldDef TestDataPassingNumber
        = ((((((FieldDef (HaskellName (packPTH "passingNumber")))
                 (DBName (packPTH "passing_number")))
                ((FTTypeCon Nothing) (packPTH "Int")))
               SqlInt64)
              [])
             True)
            NoReference
      persistFieldDef TestDataQuestion
        = ((((((FieldDef (HaskellName (packPTH "question")))
                 (DBName (packPTH "question")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistIdField = TestDataId
      fieldLens TestDataId
        = (lensPTH entityKey)
            (\ Entity _ value_aHkc key_aHkd -> (Entity key_aHkd) value_aHkc)
      fieldLens TestDataName
        = (lensPTH (testDataName . entityVal))
            (\ Entity key_aHke value_aHkf x_aHkg
               -> (Entity key_aHke) value_aHkf {testDataName = x_aHkg})
      fieldLens TestDataDescription
        = (lensPTH (testDataDescription . entityVal))
            (\ Entity key_aHke value_aHkf x_aHkg
               -> (Entity key_aHke) value_aHkf {testDataDescription = x_aHkg})
      fieldLens TestDataCreationDate
        = (lensPTH (testDataCreationDate . entityVal))
            (\ Entity key_aHke value_aHkf x_aHkg
               -> (Entity key_aHke) value_aHkf {testDataCreationDate = x_aHkg})
      fieldLens TestDataPassingNumber
        = (lensPTH (testDataPassingNumber . entityVal))
            (\ Entity key_aHke value_aHkf x_aHkg
               -> (Entity key_aHke) value_aHkf {testDataPassingNumber = x_aHkg})
      fieldLens TestDataQuestion
        = (lensPTH (testDataQuestion . entityVal))
            (\ Entity key_aHke value_aHkf x_aHkg
               -> (Entity key_aHke) value_aHkf {testDataQuestion = x_aHkg})
    instance ToBackendKey MongoContext TestData where
      toBackendKey = unTestDataKey
      fromBackendKey = TestDataKey
    migrateAll :: persistent-2.8.1:Database.Persist.Sql.Types.Migration
    migrateAll
      = do let defs_aHkh
                 = [(((((((((EntityDef (HaskellName (packPTH "Question")))
                              (DBName (packPTH "question")))
                             (((((((FieldDef (HaskellName (packPTH "Id")))
                                     (DBName (packPTH "id")))
                                    ((FTTypeCon Nothing) (packPTH "QuestionId")))
                                   SqlInt64)
                                  [])
                                 True)
                                ((ForeignRef (HaskellName (packPTH "Question")))
                                   ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                            [])
                           [])
                          [])
                         [])
                        [])
                       (Data.Map.Internal.fromList []))
                      False,
                    (((((((((EntityDef (HaskellName (packPTH "TestData")))
                              (DBName (packPTH "test_data")))
                             (((((((FieldDef (HaskellName (packPTH "Id")))
                                     (DBName (packPTH "id")))
                                    ((FTTypeCon Nothing) (packPTH "TestDataId")))
                                   SqlInt64)
                                  [])
                                 True)
                                ((ForeignRef (HaskellName (packPTH "TestData")))
                                   ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                            [])
                           [((((((FieldDef (HaskellName (packPTH "name")))
                                   (DBName (packPTH "name")))
                                  ((FTTypeCon Nothing) (packPTH "Text")))
                                 SqlString)
                                [])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "description")))
                                   (DBName (packPTH "description")))
                                  ((FTTypeCon Nothing) (packPTH "Text")))
                                 SqlString)
                                [])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "creationDate")))
                                   (DBName (packPTH "creation_date")))
                                  ((FTTypeCon Nothing) (packPTH "UTCTime")))
                                 SqlDayTime)
                                [])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "passingNumber")))
                                   (DBName (packPTH "passing_number")))
                                  ((FTTypeCon Nothing) (packPTH "Int")))
                                 SqlInt64)
                                [])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "question")))
                                   (DBName (packPTH "question")))
                                  ((FTTypeCon Nothing) (packPTH "Text")))
                                 SqlString)
                                [])
                               True)
                              NoReference])
                          [])
                         [])
                        [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
                       (Data.Map.Internal.fromList []))
                      False]
           (persistent-2.8.1:Database.Persist.Sql.Migration.migrate defs_aHkh)
             ((((((((((EntityDef (HaskellName (packPTH "Question")))
                        (DBName (packPTH "question")))
                       (((((((FieldDef (HaskellName (packPTH "Id")))
                               (DBName (packPTH "id")))
                              ((FTTypeCon Nothing) (packPTH "QuestionId")))
                             SqlInt64)
                            [])
                           True)
                          ((ForeignRef (HaskellName (packPTH "Question")))
                             ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                      [])
                     [])
                    [])
                   [])
                  [])
                 (Data.Map.Internal.fromList []))
                False)
           (persistent-2.8.1:Database.Persist.Sql.Migration.migrate defs_aHkh)
             ((((((((((EntityDef (HaskellName (packPTH "TestData")))
                        (DBName (packPTH "test_data")))
                       (((((((FieldDef (HaskellName (packPTH "Id")))
                               (DBName (packPTH "id")))
                              ((FTTypeCon Nothing) (packPTH "TestDataId")))
                             SqlInt64)
                            [])
                           True)
                          ((ForeignRef (HaskellName (packPTH "TestData")))
                             ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                      [])
                     [((((((FieldDef (HaskellName (packPTH "name")))
                             (DBName (packPTH "name")))
                            ((FTTypeCon Nothing) (packPTH "Text")))
                           SqlString)
                          [])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "description")))
                             (DBName (packPTH "description")))
                            ((FTTypeCon Nothing) (packPTH "Text")))
                           SqlString)
                          [])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "creationDate")))
                             (DBName (packPTH "creation_date")))
                            ((FTTypeCon Nothing) (packPTH "UTCTime")))
                           SqlDayTime)
                          [])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "passingNumber")))
                             (DBName (packPTH "passing_number")))
                            ((FTTypeCon Nothing) (packPTH "Int")))
                           SqlInt64)
                          [])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "question")))
                             (DBName (packPTH "question")))
                            ((FTTypeCon Nothing) (packPTH "Text")))
                           SqlString)
                          [])
                         True)
                        NoReference])
                    [])
                   [])
                  [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
                 (Data.Map.Internal.fromList []))
                False)
/home/nikita/Projects/labs/Databases/Course-Project/Server/src/Model/TestData.hs:(23,103)-(33,2): Splicing expression
    Language.Haskell.TH.Quote.quoteExp
      persistLowerCase
      "\n\
      \Question\n\
      \\n\
      \TestData\n\
      \  name          Text\n\
      \  description   Text\n\
      \  creationDate  UTCTime\n\
      \  passingNumber Int\n\
      \  question      Text\n\
      \  deriving Eq Read Show Generic\n"
  ======>
    [(((((((((EntityDef (HaskellName (packPTH "Question")))
               (DBName (packPTH "question")))
              (((((((FieldDef (HaskellName (packPTH "Id")))
                      (DBName (packPTH "id")))
                     ((FTTypeCon Nothing) (packPTH "QuestionId")))
                    SqlInt64)
                   [])
                  True)
                 ((ForeignRef (HaskellName (packPTH "Question")))
                    ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
             [])
            [])
           [])
          [])
         [])
        (Data.Map.Internal.fromList []))
       False
       {entityFields = [],
        entityId = ((((((FieldDef (HaskellName (packPTH "Id")))
                          (DBName (packPTH "id")))
                         ((FTTypeCon Nothing) (packPTH "QuestionId")))
                        (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                           (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                       [])
                      True)
                     ((ForeignRef (HaskellName (packPTH "Question")))
                        ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))},
     (((((((((EntityDef (HaskellName (packPTH "TestData")))
               (DBName (packPTH "test_data")))
              (((((((FieldDef (HaskellName (packPTH "Id")))
                      (DBName (packPTH "id")))
                     ((FTTypeCon Nothing) (packPTH "TestDataId")))
                    SqlInt64)
                   [])
                  True)
                 ((ForeignRef (HaskellName (packPTH "TestData")))
                    ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
             [])
            [((((((FieldDef (HaskellName (packPTH "name")))
                    (DBName (packPTH "name")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for name")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "description")))
                    (DBName (packPTH "description")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for description")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "creationDate")))
                    (DBName (packPTH "creation_date")))
                   ((FTTypeCon Nothing) (packPTH "UTCTime")))
                  (SqlOther (packPTH "SqlType unset for creationDate")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "passingNumber")))
                    (DBName (packPTH "passing_number")))
                   ((FTTypeCon Nothing) (packPTH "Int")))
                  (SqlOther (packPTH "SqlType unset for passingNumber")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "question")))
                    (DBName (packPTH "question")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for question")))
                 [])
                True)
               NoReference])
           [])
          [])
         [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
        (Data.Map.Internal.fromList []))
       False
       {entityFields = [((((((FieldDef (HaskellName (packPTH "name")))
                               (DBName (packPTH "name")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "description")))
                               (DBName (packPTH "description")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "creationDate")))
                               (DBName (packPTH "creation_date")))
                              ((FTTypeCon Nothing) (packPTH "UTCTime")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy UTCTime)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "passingNumber")))
                               (DBName (packPTH "passing_number")))
                              ((FTTypeCon Nothing) (packPTH "Int")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Int)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "question")))
                               (DBName (packPTH "question")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference],
        entityId = ((((((FieldDef (HaskellName (packPTH "Id")))
                          (DBName (packPTH "id")))
                         ((FTTypeCon Nothing) (packPTH "TestDataId")))
                        (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                           (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                       [])
                      True)
                     ((ForeignRef (HaskellName (packPTH "TestData")))
                        ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))}]
/home/nikita/Projects/labs/Databases/Course-Project/Server/src/Model/TestData.hs:(23,1)-(33,2): Splicing declarations
    share
      [mkPersist (mkPersistSettings (ConT ''MongoContext)),
       mkMigrate "migrateAll"]
      ([(((((((((EntityDef (HaskellName (packPTH "Question")))
                  (DBName (packPTH "question")))
                 (((((((FieldDef (HaskellName (packPTH "Id")))
                         (DBName (packPTH "id")))
                        ((FTTypeCon Nothing) (packPTH "QuestionId")))
                       SqlInt64)
                      [])
                     True)
                    ((ForeignRef (HaskellName (packPTH "Question")))
                       ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                [])
               [])
              [])
             [])
            [])
           (Data.Map.Internal.fromList []))
          False
          {entityFields = [],
           entityId = ((((((FieldDef (HaskellName (packPTH "Id")))
                             (DBName (packPTH "id")))
                            ((FTTypeCon Nothing) (packPTH "QuestionId")))
                           (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                              (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                          [])
                         True)
                        ((ForeignRef (HaskellName (packPTH "Question")))
                           ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))},
        (((((((((EntityDef (HaskellName (packPTH "TestData")))
                  (DBName (packPTH "test_data")))
                 (((((((FieldDef (HaskellName (packPTH "Id")))
                         (DBName (packPTH "id")))
                        ((FTTypeCon Nothing) (packPTH "TestDataId")))
                       SqlInt64)
                      [])
                     True)
                    ((ForeignRef (HaskellName (packPTH "TestData")))
                       ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                [])
               [((((((FieldDef (HaskellName (packPTH "name")))
                       (DBName (packPTH "name")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for name")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "description")))
                       (DBName (packPTH "description")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for description")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "creationDate")))
                       (DBName (packPTH "creation_date")))
                      ((FTTypeCon Nothing) (packPTH "UTCTime")))
                     (SqlOther (packPTH "SqlType unset for creationDate")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "passingNumber")))
                       (DBName (packPTH "passing_number")))
                      ((FTTypeCon Nothing) (packPTH "Int")))
                     (SqlOther (packPTH "SqlType unset for passingNumber")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "question")))
                       (DBName (packPTH "question")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for question")))
                    [])
                   True)
                  NoReference])
              [])
             [])
            [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
           (Data.Map.Internal.fromList []))
          False
          {entityFields = [((((((FieldDef (HaskellName (packPTH "name")))
                                  (DBName (packPTH "name")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "description")))
                                  (DBName (packPTH "description")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "creationDate")))
                                  (DBName (packPTH "creation_date")))
                                 ((FTTypeCon Nothing) (packPTH "UTCTime")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy UTCTime)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "passingNumber")))
                                  (DBName (packPTH "passing_number")))
                                 ((FTTypeCon Nothing) (packPTH "Int")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Int)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "question")))
                                  (DBName (packPTH "question")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference],
           entityId = ((((((FieldDef (HaskellName (packPTH "Id")))
                             (DBName (packPTH "id")))
                            ((FTTypeCon Nothing) (packPTH "TestDataId")))
                           (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                              (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                          [])
                         True)
                        ((ForeignRef (HaskellName (packPTH "TestData")))
                           ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))}])
  ======>
    instance PersistField Question where
      toPersistValue
        = \ ent_aJl5
            -> (PersistMap
                  $ ((Prelude.zip ((Prelude.map pack) []))
                       ((Prelude.map toPersistValue) $ (toPersistFields ent_aJl5))))
      fromPersistValue
        = ((\ x_aJl6
              -> let
                   columns_aJl7
                     = unordered-containers-0.2.9.0:Data.HashMap.Strict.fromList x_aJl6
                 in
                   (fromPersistValues
                      $ ((Prelude.map
                            (\ name_aJl8
                               -> case
                                      (unordered-containers-0.2.9.0:Data.HashMap.Base.lookup
                                         (pack name_aJl8))
                                        columns_aJl7
                                  of
                                    Just v_aJl9 -> v_aJl9
                                    Nothing -> PersistNull))
                           $ [])))
             <=< getPersistMap)
    instance persistent-2.8.1:Database.Persist.Sql.Class.PersistFieldSql Question where
      persistent-2.8.1:Database.Persist.Sql.Class.sqlType _ = SqlString
    instance PersistField TestData where
      toPersistValue
        = \ ent_aJla
            -> (PersistMap
                  $ ((Prelude.zip
                        ((Prelude.map pack)
                           ["name", "description", "creationDate", "passingNumber",
                            "question"]))
                       ((Prelude.map toPersistValue) $ (toPersistFields ent_aJla))))
      fromPersistValue
        = ((\ x_aJlb
              -> let
                   columns_aJlc
                     = unordered-containers-0.2.9.0:Data.HashMap.Strict.fromList x_aJlb
                 in
                   (fromPersistValues
                      $ ((Prelude.map
                            (\ name_aJld
                               -> case
                                      (unordered-containers-0.2.9.0:Data.HashMap.Base.lookup
                                         (pack name_aJld))
                                        columns_aJlc
                                  of
                                    Just v_aJle -> v_aJle
                                    Nothing -> PersistNull))
                           $ ["name", "description", "creationDate", "passingNumber",
                              "question"])))
             <=< getPersistMap)
    instance persistent-2.8.1:Database.Persist.Sql.Class.PersistFieldSql TestData where
      persistent-2.8.1:Database.Persist.Sql.Class.sqlType _ = SqlString
    data Question
      = Question {}
      deriving ()
    type QuestionId = Key Question
    instance PersistEntity Question where
      type PersistEntityBackend Question = MongoContext
      data Unique Question
      newtype Key Question
        = QuestionKey {unQuestionKey :: (BackendKey MongoContext)}
        deriving (Show,
                  Read,
                  Eq,
                  Ord,
                  path-pieces-0.2.1:Web.PathPieces.PathPiece,
                  http-api-data-0.3.7.2:Web.Internal.HttpApiData.ToHttpApiData,
                  http-api-data-0.3.7.2:Web.Internal.HttpApiData.FromHttpApiData,
                  PersistField,
                  persistent-2.8.1:Database.Persist.Sql.Class.PersistFieldSql,
                  ToJSON,
                  FromJSON)
      data EntityField Question typ = typ ~ Key Question => QuestionId
      keyToValues
        = ((ghc-prim-0.5.1.1:GHC.Types.: [])
             . (toPersistValue . unQuestionKey))
      keyFromValues
        = ((fmap QuestionKey)
             . (fromPersistValue . Database.Persist.TH.headNote))
      entityDef _
        = (((((((((EntityDef (HaskellName (packPTH "Question")))
                    (DBName (packPTH "question")))
                   (((((((FieldDef (HaskellName (packPTH "Id")))
                           (DBName (packPTH "id")))
                          ((FTTypeCon Nothing) (packPTH "QuestionId")))
                         SqlInt64)
                        [])
                       True)
                      ((ForeignRef (HaskellName (packPTH "Question")))
                         ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                  [])
                 [])
                [])
               [])
              [])
             (Data.Map.Internal.fromList []))
            False
      toPersistFields Question = []
      fromPersistValues [] = Right Question
      fromPersistValues x_aJlf
        = (Left
             $ ((mappend (packPTH "Question: fromPersistValues failed on: "))
                  (pack $ (show x_aJlf))))
      persistUniqueToFieldNames _
        = error "Degenerate case, should never happen"
      persistUniqueToValues _
        = error "Degenerate case, should never happen"
      persistUniqueKeys Question = []
      persistFieldDef QuestionId
        = ((((((FieldDef (HaskellName (packPTH "Id")))
                 (DBName (packPTH "id")))
                ((FTTypeCon Nothing) (packPTH "QuestionId")))
               SqlInt64)
              [])
             True)
            ((ForeignRef (HaskellName (packPTH "Question")))
               ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))
      persistIdField = QuestionId
      fieldLens QuestionId
        = (lensPTH entityKey)
            (\ Entity _ value_aJlg key_aJlh -> (Entity key_aJlh) value_aJlg)
    instance ToBackendKey MongoContext Question where
      toBackendKey = unQuestionKey
      fromBackendKey = QuestionKey
    data TestData
      = TestData {testDataName :: !Text,
                  testDataDescription :: !Text,
                  testDataCreationDate :: !UTCTime,
                  testDataPassingNumber :: !Int,
                  testDataQuestion :: !Text}
      deriving (Eq, Read, Show, Generic)
    type TestDataId = Key TestData
    instance PersistEntity TestData where
      type PersistEntityBackend TestData = MongoContext
      data Unique TestData
      newtype Key TestData
        = TestDataKey {unTestDataKey :: (BackendKey MongoContext)}
        deriving (Show,
                  Read,
                  Eq,
                  Ord,
                  path-pieces-0.2.1:Web.PathPieces.PathPiece,
                  http-api-data-0.3.7.2:Web.Internal.HttpApiData.ToHttpApiData,
                  http-api-data-0.3.7.2:Web.Internal.HttpApiData.FromHttpApiData,
                  PersistField,
                  persistent-2.8.1:Database.Persist.Sql.Class.PersistFieldSql,
                  ToJSON,
                  FromJSON)
      data EntityField TestData typ
        = typ ~ Key TestData => TestDataId |
          typ ~ Text => TestDataName |
          typ ~ Text => TestDataDescription |
          typ ~ UTCTime => TestDataCreationDate |
          typ ~ Int => TestDataPassingNumber |
          typ ~ Text => TestDataQuestion
      keyToValues
        = ((ghc-prim-0.5.1.1:GHC.Types.: [])
             . (toPersistValue . unTestDataKey))
      keyFromValues
        = ((fmap TestDataKey)
             . (fromPersistValue . Database.Persist.TH.headNote))
      entityDef _
        = (((((((((EntityDef (HaskellName (packPTH "TestData")))
                    (DBName (packPTH "test_data")))
                   (((((((FieldDef (HaskellName (packPTH "Id")))
                           (DBName (packPTH "id")))
                          ((FTTypeCon Nothing) (packPTH "TestDataId")))
                         SqlInt64)
                        [])
                       True)
                      ((ForeignRef (HaskellName (packPTH "TestData")))
                         ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                  [])
                 [((((((FieldDef (HaskellName (packPTH "name")))
                         (DBName (packPTH "name")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "description")))
                         (DBName (packPTH "description")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "creationDate")))
                         (DBName (packPTH "creation_date")))
                        ((FTTypeCon Nothing) (packPTH "UTCTime")))
                       SqlDayTime)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "passingNumber")))
                         (DBName (packPTH "passing_number")))
                        ((FTTypeCon Nothing) (packPTH "Int")))
                       SqlInt64)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "question")))
                         (DBName (packPTH "question")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference])
                [])
               [])
              [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
             (Data.Map.Internal.fromList []))
            False
      toPersistFields (TestData x_aJll x_aJlm x_aJln x_aJlo x_aJlp)
        = [SomePersistField x_aJll, SomePersistField x_aJlm,
           SomePersistField x_aJln, SomePersistField x_aJlo,
           SomePersistField x_aJlp]
      fromPersistValues [x1_aJlr, x2_aJls, x3_aJlt, x4_aJlu, x5_aJlv]
        = TestData
            <$>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "name")))
                 . fromPersistValue)
                x1_aJlr
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "description")))
                 . fromPersistValue)
                x2_aJls
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "creationDate")))
                 . fromPersistValue)
                x3_aJlt
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "passingNumber")))
                 . fromPersistValue)
                x4_aJlu
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "question")))
                 . fromPersistValue)
                x5_aJlv
      fromPersistValues x_aJlq
        = (Left
             $ ((mappend (packPTH "TestData: fromPersistValues failed on: "))
                  (pack $ (show x_aJlq))))
      persistUniqueToFieldNames _
        = error "Degenerate case, should never happen"
      persistUniqueToValues _
        = error "Degenerate case, should never happen"
      persistUniqueKeys
        (TestData _name_aJlw
                  _description_aJlx
                  _creationDate_aJly
                  _passingNumber_aJlz
                  _question_aJlA)
        = []
      persistFieldDef TestDataId
        = ((((((FieldDef (HaskellName (packPTH "Id")))
                 (DBName (packPTH "id")))
                ((FTTypeCon Nothing) (packPTH "TestDataId")))
               SqlInt64)
              [])
             True)
            ((ForeignRef (HaskellName (packPTH "TestData")))
               ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))
      persistFieldDef TestDataName
        = ((((((FieldDef (HaskellName (packPTH "name")))
                 (DBName (packPTH "name")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef TestDataDescription
        = ((((((FieldDef (HaskellName (packPTH "description")))
                 (DBName (packPTH "description")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef TestDataCreationDate
        = ((((((FieldDef (HaskellName (packPTH "creationDate")))
                 (DBName (packPTH "creation_date")))
                ((FTTypeCon Nothing) (packPTH "UTCTime")))
               SqlDayTime)
              [])
             True)
            NoReference
      persistFieldDef TestDataPassingNumber
        = ((((((FieldDef (HaskellName (packPTH "passingNumber")))
                 (DBName (packPTH "passing_number")))
                ((FTTypeCon Nothing) (packPTH "Int")))
               SqlInt64)
              [])
             True)
            NoReference
      persistFieldDef TestDataQuestion
        = ((((((FieldDef (HaskellName (packPTH "question")))
                 (DBName (packPTH "question")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistIdField = TestDataId
      fieldLens TestDataId
        = (lensPTH entityKey)
            (\ Entity _ value_aJlB key_aJlC -> (Entity key_aJlC) value_aJlB)
      fieldLens TestDataName
        = (lensPTH (testDataName . entityVal))
            (\ Entity key_aJlD value_aJlE x_aJlF
               -> (Entity key_aJlD) value_aJlE {testDataName = x_aJlF})
      fieldLens TestDataDescription
        = (lensPTH (testDataDescription . entityVal))
            (\ Entity key_aJlD value_aJlE x_aJlF
               -> (Entity key_aJlD) value_aJlE {testDataDescription = x_aJlF})
      fieldLens TestDataCreationDate
        = (lensPTH (testDataCreationDate . entityVal))
            (\ Entity key_aJlD value_aJlE x_aJlF
               -> (Entity key_aJlD) value_aJlE {testDataCreationDate = x_aJlF})
      fieldLens TestDataPassingNumber
        = (lensPTH (testDataPassingNumber . entityVal))
            (\ Entity key_aJlD value_aJlE x_aJlF
               -> (Entity key_aJlD) value_aJlE {testDataPassingNumber = x_aJlF})
      fieldLens TestDataQuestion
        = (lensPTH (testDataQuestion . entityVal))
            (\ Entity key_aJlD value_aJlE x_aJlF
               -> (Entity key_aJlD) value_aJlE {testDataQuestion = x_aJlF})
    instance ToBackendKey MongoContext TestData where
      toBackendKey = unTestDataKey
      fromBackendKey = TestDataKey
    migrateAll :: persistent-2.8.1:Database.Persist.Sql.Types.Migration
    migrateAll
      = do let defs_aJlG
                 = [(((((((((EntityDef (HaskellName (packPTH "Question")))
                              (DBName (packPTH "question")))
                             (((((((FieldDef (HaskellName (packPTH "Id")))
                                     (DBName (packPTH "id")))
                                    ((FTTypeCon Nothing) (packPTH "QuestionId")))
                                   SqlInt64)
                                  [])
                                 True)
                                ((ForeignRef (HaskellName (packPTH "Question")))
                                   ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                            [])
                           [])
                          [])
                         [])
                        [])
                       (Data.Map.Internal.fromList []))
                      False,
                    (((((((((EntityDef (HaskellName (packPTH "TestData")))
                              (DBName (packPTH "test_data")))
                             (((((((FieldDef (HaskellName (packPTH "Id")))
                                     (DBName (packPTH "id")))
                                    ((FTTypeCon Nothing) (packPTH "TestDataId")))
                                   SqlInt64)
                                  [])
                                 True)
                                ((ForeignRef (HaskellName (packPTH "TestData")))
                                   ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                            [])
                           [((((((FieldDef (HaskellName (packPTH "name")))
                                   (DBName (packPTH "name")))
                                  ((FTTypeCon Nothing) (packPTH "Text")))
                                 SqlString)
                                [])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "description")))
                                   (DBName (packPTH "description")))
                                  ((FTTypeCon Nothing) (packPTH "Text")))
                                 SqlString)
                                [])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "creationDate")))
                                   (DBName (packPTH "creation_date")))
                                  ((FTTypeCon Nothing) (packPTH "UTCTime")))
                                 SqlDayTime)
                                [])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "passingNumber")))
                                   (DBName (packPTH "passing_number")))
                                  ((FTTypeCon Nothing) (packPTH "Int")))
                                 SqlInt64)
                                [])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "question")))
                                   (DBName (packPTH "question")))
                                  ((FTTypeCon Nothing) (packPTH "Text")))
                                 SqlString)
                                [])
                               True)
                              NoReference])
                          [])
                         [])
                        [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
                       (Data.Map.Internal.fromList []))
                      False]
           (persistent-2.8.1:Database.Persist.Sql.Migration.migrate defs_aJlG)
             ((((((((((EntityDef (HaskellName (packPTH "Question")))
                        (DBName (packPTH "question")))
                       (((((((FieldDef (HaskellName (packPTH "Id")))
                               (DBName (packPTH "id")))
                              ((FTTypeCon Nothing) (packPTH "QuestionId")))
                             SqlInt64)
                            [])
                           True)
                          ((ForeignRef (HaskellName (packPTH "Question")))
                             ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                      [])
                     [])
                    [])
                   [])
                  [])
                 (Data.Map.Internal.fromList []))
                False)
           (persistent-2.8.1:Database.Persist.Sql.Migration.migrate defs_aJlG)
             ((((((((((EntityDef (HaskellName (packPTH "TestData")))
                        (DBName (packPTH "test_data")))
                       (((((((FieldDef (HaskellName (packPTH "Id")))
                               (DBName (packPTH "id")))
                              ((FTTypeCon Nothing) (packPTH "TestDataId")))
                             SqlInt64)
                            [])
                           True)
                          ((ForeignRef (HaskellName (packPTH "TestData")))
                             ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                      [])
                     [((((((FieldDef (HaskellName (packPTH "name")))
                             (DBName (packPTH "name")))
                            ((FTTypeCon Nothing) (packPTH "Text")))
                           SqlString)
                          [])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "description")))
                             (DBName (packPTH "description")))
                            ((FTTypeCon Nothing) (packPTH "Text")))
                           SqlString)
                          [])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "creationDate")))
                             (DBName (packPTH "creation_date")))
                            ((FTTypeCon Nothing) (packPTH "UTCTime")))
                           SqlDayTime)
                          [])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "passingNumber")))
                             (DBName (packPTH "passing_number")))
                            ((FTTypeCon Nothing) (packPTH "Int")))
                           SqlInt64)
                          [])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "question")))
                             (DBName (packPTH "question")))
                            ((FTTypeCon Nothing) (packPTH "Text")))
                           SqlString)
                          [])
                         True)
                        NoReference])
                    [])
                   [])
                  [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
                 (Data.Map.Internal.fromList []))
                False)
/home/nikita/Projects/labs/Databases/Course-Project/Server/src/Model/TestData.hs:(23,103)-(33,2): Splicing expression
    Language.Haskell.TH.Quote.quoteExp
      persistLowerCase
      "\n\
      \Question\n\
      \\n\
      \TestData\n\
      \  name          Text\n\
      \  description   Text\n\
      \  creationDate  UTCTime\n\
      \  passingNumber Int\n\
      \  question      Text\n\
      \  deriving Eq Read Show Generic\n"
  ======>
    [(((((((((EntityDef (HaskellName (packPTH "Question")))
               (DBName (packPTH "question")))
              (((((((FieldDef (HaskellName (packPTH "Id")))
                      (DBName (packPTH "id")))
                     ((FTTypeCon Nothing) (packPTH "QuestionId")))
                    SqlInt64)
                   [])
                  True)
                 ((ForeignRef (HaskellName (packPTH "Question")))
                    ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
             [])
            [])
           [])
          [])
         [])
        (Data.Map.Internal.fromList []))
       False
       {entityFields = [],
        entityId = ((((((FieldDef (HaskellName (packPTH "Id")))
                          (DBName (packPTH "id")))
                         ((FTTypeCon Nothing) (packPTH "QuestionId")))
                        (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                           (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                       [])
                      True)
                     ((ForeignRef (HaskellName (packPTH "Question")))
                        ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))},
     (((((((((EntityDef (HaskellName (packPTH "TestData")))
               (DBName (packPTH "test_data")))
              (((((((FieldDef (HaskellName (packPTH "Id")))
                      (DBName (packPTH "id")))
                     ((FTTypeCon Nothing) (packPTH "TestDataId")))
                    SqlInt64)
                   [])
                  True)
                 ((ForeignRef (HaskellName (packPTH "TestData")))
                    ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
             [])
            [((((((FieldDef (HaskellName (packPTH "name")))
                    (DBName (packPTH "name")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for name")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "description")))
                    (DBName (packPTH "description")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for description")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "creationDate")))
                    (DBName (packPTH "creation_date")))
                   ((FTTypeCon Nothing) (packPTH "UTCTime")))
                  (SqlOther (packPTH "SqlType unset for creationDate")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "passingNumber")))
                    (DBName (packPTH "passing_number")))
                   ((FTTypeCon Nothing) (packPTH "Int")))
                  (SqlOther (packPTH "SqlType unset for passingNumber")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "question")))
                    (DBName (packPTH "question")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for question")))
                 [])
                True)
               NoReference])
           [])
          [])
         [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
        (Data.Map.Internal.fromList []))
       False
       {entityFields = [((((((FieldDef (HaskellName (packPTH "name")))
                               (DBName (packPTH "name")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "description")))
                               (DBName (packPTH "description")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "creationDate")))
                               (DBName (packPTH "creation_date")))
                              ((FTTypeCon Nothing) (packPTH "UTCTime")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy UTCTime)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "passingNumber")))
                               (DBName (packPTH "passing_number")))
                              ((FTTypeCon Nothing) (packPTH "Int")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Int)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "question")))
                               (DBName (packPTH "question")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference],
        entityId = ((((((FieldDef (HaskellName (packPTH "Id")))
                          (DBName (packPTH "id")))
                         ((FTTypeCon Nothing) (packPTH "TestDataId")))
                        (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                           (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                       [])
                      True)
                     ((ForeignRef (HaskellName (packPTH "TestData")))
                        ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))}]
/home/nikita/Projects/labs/Databases/Course-Project/Server/src/Model/TestData.hs:(23,1)-(33,2): Splicing declarations
    share
      [mkPersist (mkPersistSettings (ConT ''MongoContext)),
       mkMigrate "migrateAll"]
      ([(((((((((EntityDef (HaskellName (packPTH "Question")))
                  (DBName (packPTH "question")))
                 (((((((FieldDef (HaskellName (packPTH "Id")))
                         (DBName (packPTH "id")))
                        ((FTTypeCon Nothing) (packPTH "QuestionId")))
                       SqlInt64)
                      [])
                     True)
                    ((ForeignRef (HaskellName (packPTH "Question")))
                       ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                [])
               [])
              [])
             [])
            [])
           (Data.Map.Internal.fromList []))
          False
          {entityFields = [],
           entityId = ((((((FieldDef (HaskellName (packPTH "Id")))
                             (DBName (packPTH "id")))
                            ((FTTypeCon Nothing) (packPTH "QuestionId")))
                           (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                              (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                          [])
                         True)
                        ((ForeignRef (HaskellName (packPTH "Question")))
                           ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))},
        (((((((((EntityDef (HaskellName (packPTH "TestData")))
                  (DBName (packPTH "test_data")))
                 (((((((FieldDef (HaskellName (packPTH "Id")))
                         (DBName (packPTH "id")))
                        ((FTTypeCon Nothing) (packPTH "TestDataId")))
                       SqlInt64)
                      [])
                     True)
                    ((ForeignRef (HaskellName (packPTH "TestData")))
                       ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                [])
               [((((((FieldDef (HaskellName (packPTH "name")))
                       (DBName (packPTH "name")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for name")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "description")))
                       (DBName (packPTH "description")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for description")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "creationDate")))
                       (DBName (packPTH "creation_date")))
                      ((FTTypeCon Nothing) (packPTH "UTCTime")))
                     (SqlOther (packPTH "SqlType unset for creationDate")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "passingNumber")))
                       (DBName (packPTH "passing_number")))
                      ((FTTypeCon Nothing) (packPTH "Int")))
                     (SqlOther (packPTH "SqlType unset for passingNumber")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "question")))
                       (DBName (packPTH "question")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for question")))
                    [])
                   True)
                  NoReference])
              [])
             [])
            [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
           (Data.Map.Internal.fromList []))
          False
          {entityFields = [((((((FieldDef (HaskellName (packPTH "name")))
                                  (DBName (packPTH "name")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "description")))
                                  (DBName (packPTH "description")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "creationDate")))
                                  (DBName (packPTH "creation_date")))
                                 ((FTTypeCon Nothing) (packPTH "UTCTime")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy UTCTime)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "passingNumber")))
                                  (DBName (packPTH "passing_number")))
                                 ((FTTypeCon Nothing) (packPTH "Int")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Int)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "question")))
                                  (DBName (packPTH "question")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference],
           entityId = ((((((FieldDef (HaskellName (packPTH "Id")))
                             (DBName (packPTH "id")))
                            ((FTTypeCon Nothing) (packPTH "TestDataId")))
                           (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                              (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                          [])
                         True)
                        ((ForeignRef (HaskellName (packPTH "TestData")))
                           ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))}])
  ======>
    instance PersistField Question where
      toPersistValue
        = \ ent_a2uIO
            -> (PersistMap
                  $ ((Prelude.zip ((Prelude.map pack) []))
                       ((Prelude.map toPersistValue) $ (toPersistFields ent_a2uIO))))
      fromPersistValue
        = ((\ x_a2uIP
              -> let
                   columns_a2uIQ
                     = unordered-containers-0.2.9.0:Data.HashMap.Strict.fromList x_a2uIP
                 in
                   (fromPersistValues
                      $ ((Prelude.map
                            (\ name_a2uIR
                               -> case
                                      (unordered-containers-0.2.9.0:Data.HashMap.Base.lookup
                                         (pack name_a2uIR))
                                        columns_a2uIQ
                                  of
                                    Just v_a2uIS -> v_a2uIS
                                    Nothing -> PersistNull))
                           $ [])))
             <=< getPersistMap)
    instance persistent-2.8.1:Database.Persist.Sql.Class.PersistFieldSql Question where
      persistent-2.8.1:Database.Persist.Sql.Class.sqlType _ = SqlString
    instance PersistField TestData where
      toPersistValue
        = \ ent_a2uIT
            -> (PersistMap
                  $ ((Prelude.zip
                        ((Prelude.map pack)
                           ["name", "description", "creationDate", "passingNumber",
                            "question"]))
                       ((Prelude.map toPersistValue) $ (toPersistFields ent_a2uIT))))
      fromPersistValue
        = ((\ x_a2uIU
              -> let
                   columns_a2uIV
                     = unordered-containers-0.2.9.0:Data.HashMap.Strict.fromList x_a2uIU
                 in
                   (fromPersistValues
                      $ ((Prelude.map
                            (\ name_a2uIW
                               -> case
                                      (unordered-containers-0.2.9.0:Data.HashMap.Base.lookup
                                         (pack name_a2uIW))
                                        columns_a2uIV
                                  of
                                    Just v_a2uIX -> v_a2uIX
                                    Nothing -> PersistNull))
                           $ ["name", "description", "creationDate", "passingNumber",
                              "question"])))
             <=< getPersistMap)
    instance persistent-2.8.1:Database.Persist.Sql.Class.PersistFieldSql TestData where
      persistent-2.8.1:Database.Persist.Sql.Class.sqlType _ = SqlString
    data Question
      = Question {}
      deriving ()
    type QuestionId = Key Question
    instance PersistEntity Question where
      type PersistEntityBackend Question = MongoContext
      data Unique Question
      newtype Key Question
        = QuestionKey {unQuestionKey :: (BackendKey MongoContext)}
        deriving (Show,
                  Read,
                  Eq,
                  Ord,
                  path-pieces-0.2.1:Web.PathPieces.PathPiece,
                  http-api-data-0.3.7.2:Web.Internal.HttpApiData.ToHttpApiData,
                  http-api-data-0.3.7.2:Web.Internal.HttpApiData.FromHttpApiData,
                  PersistField,
                  persistent-2.8.1:Database.Persist.Sql.Class.PersistFieldSql,
                  ToJSON,
                  FromJSON)
      data EntityField Question typ = typ ~ Key Question => QuestionId
      keyToValues
        = ((ghc-prim-0.5.1.1:GHC.Types.: [])
             . (toPersistValue . unQuestionKey))
      keyFromValues
        = ((fmap QuestionKey)
             . (fromPersistValue . Database.Persist.TH.headNote))
      entityDef _
        = (((((((((EntityDef (HaskellName (packPTH "Question")))
                    (DBName (packPTH "question")))
                   (((((((FieldDef (HaskellName (packPTH "Id")))
                           (DBName (packPTH "id")))
                          ((FTTypeCon Nothing) (packPTH "QuestionId")))
                         SqlInt64)
                        [])
                       True)
                      ((ForeignRef (HaskellName (packPTH "Question")))
                         ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                  [])
                 [])
                [])
               [])
              [])
             (Data.Map.Internal.fromList []))
            False
      toPersistFields Question = []
      fromPersistValues [] = Right Question
      fromPersistValues x_a2uIY
        = (Left
             $ ((mappend (packPTH "Question: fromPersistValues failed on: "))
                  (pack $ (show x_a2uIY))))
      persistUniqueToFieldNames _
        = error "Degenerate case, should never happen"
      persistUniqueToValues _
        = error "Degenerate case, should never happen"
      persistUniqueKeys Question = []
      persistFieldDef QuestionId
        = ((((((FieldDef (HaskellName (packPTH "Id")))
                 (DBName (packPTH "id")))
                ((FTTypeCon Nothing) (packPTH "QuestionId")))
               SqlInt64)
              [])
             True)
            ((ForeignRef (HaskellName (packPTH "Question")))
               ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))
      persistIdField = QuestionId
      fieldLens QuestionId
        = (lensPTH entityKey)
            (\ Entity _ value_a2uIZ key_a2uJ0
               -> (Entity key_a2uJ0) value_a2uIZ)
    instance ToBackendKey MongoContext Question where
      toBackendKey = unQuestionKey
      fromBackendKey = QuestionKey
    data TestData
      = TestData {testDataName :: !Text,
                  testDataDescription :: !Text,
                  testDataCreationDate :: !UTCTime,
                  testDataPassingNumber :: !Int,
                  testDataQuestion :: !Text}
      deriving (Eq, Read, Show, Generic)
    type TestDataId = Key TestData
    instance PersistEntity TestData where
      type PersistEntityBackend TestData = MongoContext
      data Unique TestData
      newtype Key TestData
        = TestDataKey {unTestDataKey :: (BackendKey MongoContext)}
        deriving (Show,
                  Read,
                  Eq,
                  Ord,
                  path-pieces-0.2.1:Web.PathPieces.PathPiece,
                  http-api-data-0.3.7.2:Web.Internal.HttpApiData.ToHttpApiData,
                  http-api-data-0.3.7.2:Web.Internal.HttpApiData.FromHttpApiData,
                  PersistField,
                  persistent-2.8.1:Database.Persist.Sql.Class.PersistFieldSql,
                  ToJSON,
                  FromJSON)
      data EntityField TestData typ
        = typ ~ Key TestData => TestDataId |
          typ ~ Text => TestDataName |
          typ ~ Text => TestDataDescription |
          typ ~ UTCTime => TestDataCreationDate |
          typ ~ Int => TestDataPassingNumber |
          typ ~ Text => TestDataQuestion
      keyToValues
        = ((ghc-prim-0.5.1.1:GHC.Types.: [])
             . (toPersistValue . unTestDataKey))
      keyFromValues
        = ((fmap TestDataKey)
             . (fromPersistValue . Database.Persist.TH.headNote))
      entityDef _
        = (((((((((EntityDef (HaskellName (packPTH "TestData")))
                    (DBName (packPTH "test_data")))
                   (((((((FieldDef (HaskellName (packPTH "Id")))
                           (DBName (packPTH "id")))
                          ((FTTypeCon Nothing) (packPTH "TestDataId")))
                         SqlInt64)
                        [])
                       True)
                      ((ForeignRef (HaskellName (packPTH "TestData")))
                         ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                  [])
                 [((((((FieldDef (HaskellName (packPTH "name")))
                         (DBName (packPTH "name")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "description")))
                         (DBName (packPTH "description")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "creationDate")))
                         (DBName (packPTH "creation_date")))
                        ((FTTypeCon Nothing) (packPTH "UTCTime")))
                       SqlDayTime)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "passingNumber")))
                         (DBName (packPTH "passing_number")))
                        ((FTTypeCon Nothing) (packPTH "Int")))
                       SqlInt64)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "question")))
                         (DBName (packPTH "question")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference])
                [])
               [])
              [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
             (Data.Map.Internal.fromList []))
            False
      toPersistFields (TestData x_a2uJ4 x_a2uJ5 x_a2uJ6 x_a2uJ7 x_a2uJ8)
        = [SomePersistField x_a2uJ4, SomePersistField x_a2uJ5,
           SomePersistField x_a2uJ6, SomePersistField x_a2uJ7,
           SomePersistField x_a2uJ8]
      fromPersistValues
        [x1_a2uJa, x2_a2uJb, x3_a2uJc, x4_a2uJd, x5_a2uJe]
        = TestData
            <$>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "name")))
                 . fromPersistValue)
                x1_a2uJa
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "description")))
                 . fromPersistValue)
                x2_a2uJb
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "creationDate")))
                 . fromPersistValue)
                x3_a2uJc
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "passingNumber")))
                 . fromPersistValue)
                x4_a2uJd
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "question")))
                 . fromPersistValue)
                x5_a2uJe
      fromPersistValues x_a2uJ9
        = (Left
             $ ((mappend (packPTH "TestData: fromPersistValues failed on: "))
                  (pack $ (show x_a2uJ9))))
      persistUniqueToFieldNames _
        = error "Degenerate case, should never happen"
      persistUniqueToValues _
        = error "Degenerate case, should never happen"
      persistUniqueKeys
        (TestData _name_a2uJf
                  _description_a2uJg
                  _creationDate_a2uJh
                  _passingNumber_a2uJi
                  _question_a2uJj)
        = []
      persistFieldDef TestDataId
        = ((((((FieldDef (HaskellName (packPTH "Id")))
                 (DBName (packPTH "id")))
                ((FTTypeCon Nothing) (packPTH "TestDataId")))
               SqlInt64)
              [])
             True)
            ((ForeignRef (HaskellName (packPTH "TestData")))
               ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))
      persistFieldDef TestDataName
        = ((((((FieldDef (HaskellName (packPTH "name")))
                 (DBName (packPTH "name")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef TestDataDescription
        = ((((((FieldDef (HaskellName (packPTH "description")))
                 (DBName (packPTH "description")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef TestDataCreationDate
        = ((((((FieldDef (HaskellName (packPTH "creationDate")))
                 (DBName (packPTH "creation_date")))
                ((FTTypeCon Nothing) (packPTH "UTCTime")))
               SqlDayTime)
              [])
             True)
            NoReference
      persistFieldDef TestDataPassingNumber
        = ((((((FieldDef (HaskellName (packPTH "passingNumber")))
                 (DBName (packPTH "passing_number")))
                ((FTTypeCon Nothing) (packPTH "Int")))
               SqlInt64)
              [])
             True)
            NoReference
      persistFieldDef TestDataQuestion
        = ((((((FieldDef (HaskellName (packPTH "question")))
                 (DBName (packPTH "question")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistIdField = TestDataId
      fieldLens TestDataId
        = (lensPTH entityKey)
            (\ Entity _ value_a2uJk key_a2uJl
               -> (Entity key_a2uJl) value_a2uJk)
      fieldLens TestDataName
        = (lensPTH (testDataName . entityVal))
            (\ Entity key_a2uJm value_a2uJn x_a2uJo
               -> (Entity key_a2uJm) value_a2uJn {testDataName = x_a2uJo})
      fieldLens TestDataDescription
        = (lensPTH (testDataDescription . entityVal))
            (\ Entity key_a2uJm value_a2uJn x_a2uJo
               -> (Entity key_a2uJm) value_a2uJn {testDataDescription = x_a2uJo})
      fieldLens TestDataCreationDate
        = (lensPTH (testDataCreationDate . entityVal))
            (\ Entity key_a2uJm value_a2uJn x_a2uJo
               -> (Entity key_a2uJm) value_a2uJn {testDataCreationDate = x_a2uJo})
      fieldLens TestDataPassingNumber
        = (lensPTH (testDataPassingNumber . entityVal))
            (\ Entity key_a2uJm value_a2uJn x_a2uJo
               -> (Entity key_a2uJm)
                    value_a2uJn {testDataPassingNumber = x_a2uJo})
      fieldLens TestDataQuestion
        = (lensPTH (testDataQuestion . entityVal))
            (\ Entity key_a2uJm value_a2uJn x_a2uJo
               -> (Entity key_a2uJm) value_a2uJn {testDataQuestion = x_a2uJo})
    instance ToBackendKey MongoContext TestData where
      toBackendKey = unTestDataKey
      fromBackendKey = TestDataKey
    migrateAll :: persistent-2.8.1:Database.Persist.Sql.Types.Migration
    migrateAll
      = do let defs_a2uJp
                 = [(((((((((EntityDef (HaskellName (packPTH "Question")))
                              (DBName (packPTH "question")))
                             (((((((FieldDef (HaskellName (packPTH "Id")))
                                     (DBName (packPTH "id")))
                                    ((FTTypeCon Nothing) (packPTH "QuestionId")))
                                   SqlInt64)
                                  [])
                                 True)
                                ((ForeignRef (HaskellName (packPTH "Question")))
                                   ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                            [])
                           [])
                          [])
                         [])
                        [])
                       (Data.Map.Internal.fromList []))
                      False,
                    (((((((((EntityDef (HaskellName (packPTH "TestData")))
                              (DBName (packPTH "test_data")))
                             (((((((FieldDef (HaskellName (packPTH "Id")))
                                     (DBName (packPTH "id")))
                                    ((FTTypeCon Nothing) (packPTH "TestDataId")))
                                   SqlInt64)
                                  [])
                                 True)
                                ((ForeignRef (HaskellName (packPTH "TestData")))
                                   ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                            [])
                           [((((((FieldDef (HaskellName (packPTH "name")))
                                   (DBName (packPTH "name")))
                                  ((FTTypeCon Nothing) (packPTH "Text")))
                                 SqlString)
                                [])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "description")))
                                   (DBName (packPTH "description")))
                                  ((FTTypeCon Nothing) (packPTH "Text")))
                                 SqlString)
                                [])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "creationDate")))
                                   (DBName (packPTH "creation_date")))
                                  ((FTTypeCon Nothing) (packPTH "UTCTime")))
                                 SqlDayTime)
                                [])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "passingNumber")))
                                   (DBName (packPTH "passing_number")))
                                  ((FTTypeCon Nothing) (packPTH "Int")))
                                 SqlInt64)
                                [])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "question")))
                                   (DBName (packPTH "question")))
                                  ((FTTypeCon Nothing) (packPTH "Text")))
                                 SqlString)
                                [])
                               True)
                              NoReference])
                          [])
                         [])
                        [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
                       (Data.Map.Internal.fromList []))
                      False]
           (persistent-2.8.1:Database.Persist.Sql.Migration.migrate
              defs_a2uJp)
             ((((((((((EntityDef (HaskellName (packPTH "Question")))
                        (DBName (packPTH "question")))
                       (((((((FieldDef (HaskellName (packPTH "Id")))
                               (DBName (packPTH "id")))
                              ((FTTypeCon Nothing) (packPTH "QuestionId")))
                             SqlInt64)
                            [])
                           True)
                          ((ForeignRef (HaskellName (packPTH "Question")))
                             ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                      [])
                     [])
                    [])
                   [])
                  [])
                 (Data.Map.Internal.fromList []))
                False)
           (persistent-2.8.1:Database.Persist.Sql.Migration.migrate
              defs_a2uJp)
             ((((((((((EntityDef (HaskellName (packPTH "TestData")))
                        (DBName (packPTH "test_data")))
                       (((((((FieldDef (HaskellName (packPTH "Id")))
                               (DBName (packPTH "id")))
                              ((FTTypeCon Nothing) (packPTH "TestDataId")))
                             SqlInt64)
                            [])
                           True)
                          ((ForeignRef (HaskellName (packPTH "TestData")))
                             ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                      [])
                     [((((((FieldDef (HaskellName (packPTH "name")))
                             (DBName (packPTH "name")))
                            ((FTTypeCon Nothing) (packPTH "Text")))
                           SqlString)
                          [])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "description")))
                             (DBName (packPTH "description")))
                            ((FTTypeCon Nothing) (packPTH "Text")))
                           SqlString)
                          [])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "creationDate")))
                             (DBName (packPTH "creation_date")))
                            ((FTTypeCon Nothing) (packPTH "UTCTime")))
                           SqlDayTime)
                          [])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "passingNumber")))
                             (DBName (packPTH "passing_number")))
                            ((FTTypeCon Nothing) (packPTH "Int")))
                           SqlInt64)
                          [])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "question")))
                             (DBName (packPTH "question")))
                            ((FTTypeCon Nothing) (packPTH "Text")))
                           SqlString)
                          [])
                         True)
                        NoReference])
                    [])
                   [])
                  [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
                 (Data.Map.Internal.fromList []))
                False)
/home/nikita/Projects/labs/Databases/Course-Project/Server/src/Model/TestData.hs:(23,103)-(33,2): Splicing expression
    Language.Haskell.TH.Quote.quoteExp
      persistLowerCase
      "\n\
      \Question\n\
      \\n\
      \TestData\n\
      \  name          Text\n\
      \  description   Text\n\
      \  creationDate  UTCTime\n\
      \  passingNumber Int\n\
      \  question      Text\n\
      \  deriving Eq Read Show Generic\n"
  ======>
    [(((((((((EntityDef (HaskellName (packPTH "Question")))
               (DBName (packPTH "question")))
              (((((((FieldDef (HaskellName (packPTH "Id")))
                      (DBName (packPTH "id")))
                     ((FTTypeCon Nothing) (packPTH "QuestionId")))
                    SqlInt64)
                   [])
                  True)
                 ((ForeignRef (HaskellName (packPTH "Question")))
                    ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
             [])
            [])
           [])
          [])
         [])
        (Data.Map.Internal.fromList []))
       False
       {entityFields = [],
        entityId = ((((((FieldDef (HaskellName (packPTH "Id")))
                          (DBName (packPTH "id")))
                         ((FTTypeCon Nothing) (packPTH "QuestionId")))
                        (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                           (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                       [])
                      True)
                     ((ForeignRef (HaskellName (packPTH "Question")))
                        ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))},
     (((((((((EntityDef (HaskellName (packPTH "TestData")))
               (DBName (packPTH "test_data")))
              (((((((FieldDef (HaskellName (packPTH "Id")))
                      (DBName (packPTH "id")))
                     ((FTTypeCon Nothing) (packPTH "TestDataId")))
                    SqlInt64)
                   [])
                  True)
                 ((ForeignRef (HaskellName (packPTH "TestData")))
                    ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
             [])
            [((((((FieldDef (HaskellName (packPTH "name")))
                    (DBName (packPTH "name")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for name")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "description")))
                    (DBName (packPTH "description")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for description")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "creationDate")))
                    (DBName (packPTH "creation_date")))
                   ((FTTypeCon Nothing) (packPTH "UTCTime")))
                  (SqlOther (packPTH "SqlType unset for creationDate")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "passingNumber")))
                    (DBName (packPTH "passing_number")))
                   ((FTTypeCon Nothing) (packPTH "Int")))
                  (SqlOther (packPTH "SqlType unset for passingNumber")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "question")))
                    (DBName (packPTH "question")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for question")))
                 [])
                True)
               NoReference])
           [])
          [])
         [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
        (Data.Map.Internal.fromList []))
       False
       {entityFields = [((((((FieldDef (HaskellName (packPTH "name")))
                               (DBName (packPTH "name")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "description")))
                               (DBName (packPTH "description")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "creationDate")))
                               (DBName (packPTH "creation_date")))
                              ((FTTypeCon Nothing) (packPTH "UTCTime")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy UTCTime)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "passingNumber")))
                               (DBName (packPTH "passing_number")))
                              ((FTTypeCon Nothing) (packPTH "Int")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Int)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "question")))
                               (DBName (packPTH "question")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference],
        entityId = ((((((FieldDef (HaskellName (packPTH "Id")))
                          (DBName (packPTH "id")))
                         ((FTTypeCon Nothing) (packPTH "TestDataId")))
                        (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                           (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                       [])
                      True)
                     ((ForeignRef (HaskellName (packPTH "TestData")))
                        ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))}]
/home/nikita/Projects/labs/Databases/Course-Project/Server/src/Model/TestData.hs:(23,1)-(33,2): Splicing declarations
    share
      [mkPersist (mkPersistSettings (ConT ''MongoContext)),
       mkMigrate "migrateAll"]
      ([(((((((((EntityDef (HaskellName (packPTH "Question")))
                  (DBName (packPTH "question")))
                 (((((((FieldDef (HaskellName (packPTH "Id")))
                         (DBName (packPTH "id")))
                        ((FTTypeCon Nothing) (packPTH "QuestionId")))
                       SqlInt64)
                      [])
                     True)
                    ((ForeignRef (HaskellName (packPTH "Question")))
                       ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                [])
               [])
              [])
             [])
            [])
           (Data.Map.Internal.fromList []))
          False
          {entityFields = [],
           entityId = ((((((FieldDef (HaskellName (packPTH "Id")))
                             (DBName (packPTH "id")))
                            ((FTTypeCon Nothing) (packPTH "QuestionId")))
                           (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                              (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                          [])
                         True)
                        ((ForeignRef (HaskellName (packPTH "Question")))
                           ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))},
        (((((((((EntityDef (HaskellName (packPTH "TestData")))
                  (DBName (packPTH "test_data")))
                 (((((((FieldDef (HaskellName (packPTH "Id")))
                         (DBName (packPTH "id")))
                        ((FTTypeCon Nothing) (packPTH "TestDataId")))
                       SqlInt64)
                      [])
                     True)
                    ((ForeignRef (HaskellName (packPTH "TestData")))
                       ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                [])
               [((((((FieldDef (HaskellName (packPTH "name")))
                       (DBName (packPTH "name")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for name")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "description")))
                       (DBName (packPTH "description")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for description")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "creationDate")))
                       (DBName (packPTH "creation_date")))
                      ((FTTypeCon Nothing) (packPTH "UTCTime")))
                     (SqlOther (packPTH "SqlType unset for creationDate")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "passingNumber")))
                       (DBName (packPTH "passing_number")))
                      ((FTTypeCon Nothing) (packPTH "Int")))
                     (SqlOther (packPTH "SqlType unset for passingNumber")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "question")))
                       (DBName (packPTH "question")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for question")))
                    [])
                   True)
                  NoReference])
              [])
             [])
            [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
           (Data.Map.Internal.fromList []))
          False
          {entityFields = [((((((FieldDef (HaskellName (packPTH "name")))
                                  (DBName (packPTH "name")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "description")))
                                  (DBName (packPTH "description")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "creationDate")))
                                  (DBName (packPTH "creation_date")))
                                 ((FTTypeCon Nothing) (packPTH "UTCTime")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy UTCTime)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "passingNumber")))
                                  (DBName (packPTH "passing_number")))
                                 ((FTTypeCon Nothing) (packPTH "Int")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Int)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "question")))
                                  (DBName (packPTH "question")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference],
           entityId = ((((((FieldDef (HaskellName (packPTH "Id")))
                             (DBName (packPTH "id")))
                            ((FTTypeCon Nothing) (packPTH "TestDataId")))
                           (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                              (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                          [])
                         True)
                        ((ForeignRef (HaskellName (packPTH "TestData")))
                           ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))}])
  ======>
    instance PersistField Question where
      toPersistValue
        = \ ent_a2wJt
            -> (PersistMap
                  $ ((Prelude.zip ((Prelude.map pack) []))
                       ((Prelude.map toPersistValue) $ (toPersistFields ent_a2wJt))))
      fromPersistValue
        = ((\ x_a2wJu
              -> let
                   columns_a2wJv
                     = unordered-containers-0.2.9.0:Data.HashMap.Strict.fromList x_a2wJu
                 in
                   (fromPersistValues
                      $ ((Prelude.map
                            (\ name_a2wJw
                               -> case
                                      (unordered-containers-0.2.9.0:Data.HashMap.Base.lookup
                                         (pack name_a2wJw))
                                        columns_a2wJv
                                  of
                                    Just v_a2wJx -> v_a2wJx
                                    Nothing -> PersistNull))
                           $ [])))
             <=< getPersistMap)
    instance persistent-2.8.1:Database.Persist.Sql.Class.PersistFieldSql Question where
      persistent-2.8.1:Database.Persist.Sql.Class.sqlType _ = SqlString
    instance PersistField TestData where
      toPersistValue
        = \ ent_a2wJy
            -> (PersistMap
                  $ ((Prelude.zip
                        ((Prelude.map pack)
                           ["name", "description", "creationDate", "passingNumber",
                            "question"]))
                       ((Prelude.map toPersistValue) $ (toPersistFields ent_a2wJy))))
      fromPersistValue
        = ((\ x_a2wJz
              -> let
                   columns_a2wJA
                     = unordered-containers-0.2.9.0:Data.HashMap.Strict.fromList x_a2wJz
                 in
                   (fromPersistValues
                      $ ((Prelude.map
                            (\ name_a2wJB
                               -> case
                                      (unordered-containers-0.2.9.0:Data.HashMap.Base.lookup
                                         (pack name_a2wJB))
                                        columns_a2wJA
                                  of
                                    Just v_a2wJC -> v_a2wJC
                                    Nothing -> PersistNull))
                           $ ["name", "description", "creationDate", "passingNumber",
                              "question"])))
             <=< getPersistMap)
    instance persistent-2.8.1:Database.Persist.Sql.Class.PersistFieldSql TestData where
      persistent-2.8.1:Database.Persist.Sql.Class.sqlType _ = SqlString
    data Question
      = Question {}
      deriving ()
    type QuestionId = Key Question
    instance PersistEntity Question where
      type PersistEntityBackend Question = MongoContext
      data Unique Question
      newtype Key Question
        = QuestionKey {unQuestionKey :: (BackendKey MongoContext)}
        deriving (Show,
                  Read,
                  Eq,
                  Ord,
                  path-pieces-0.2.1:Web.PathPieces.PathPiece,
                  http-api-data-0.3.7.2:Web.Internal.HttpApiData.ToHttpApiData,
                  http-api-data-0.3.7.2:Web.Internal.HttpApiData.FromHttpApiData,
                  PersistField,
                  persistent-2.8.1:Database.Persist.Sql.Class.PersistFieldSql,
                  ToJSON,
                  FromJSON)
      data EntityField Question typ = typ ~ Key Question => QuestionId
      keyToValues
        = ((ghc-prim-0.5.1.1:GHC.Types.: [])
             . (toPersistValue . unQuestionKey))
      keyFromValues
        = ((fmap QuestionKey)
             . (fromPersistValue . Database.Persist.TH.headNote))
      entityDef _
        = (((((((((EntityDef (HaskellName (packPTH "Question")))
                    (DBName (packPTH "question")))
                   (((((((FieldDef (HaskellName (packPTH "Id")))
                           (DBName (packPTH "id")))
                          ((FTTypeCon Nothing) (packPTH "QuestionId")))
                         SqlInt64)
                        [])
                       True)
                      ((ForeignRef (HaskellName (packPTH "Question")))
                         ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                  [])
                 [])
                [])
               [])
              [])
             (Data.Map.Internal.fromList []))
            False
      toPersistFields Question = []
      fromPersistValues [] = Right Question
      fromPersistValues x_a2wJD
        = (Left
             $ ((mappend (packPTH "Question: fromPersistValues failed on: "))
                  (pack $ (show x_a2wJD))))
      persistUniqueToFieldNames _
        = error "Degenerate case, should never happen"
      persistUniqueToValues _
        = error "Degenerate case, should never happen"
      persistUniqueKeys Question = []
      persistFieldDef QuestionId
        = ((((((FieldDef (HaskellName (packPTH "Id")))
                 (DBName (packPTH "id")))
                ((FTTypeCon Nothing) (packPTH "QuestionId")))
               SqlInt64)
              [])
             True)
            ((ForeignRef (HaskellName (packPTH "Question")))
               ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))
      persistIdField = QuestionId
      fieldLens QuestionId
        = (lensPTH entityKey)
            (\ Entity _ value_a2wJE key_a2wJF
               -> (Entity key_a2wJF) value_a2wJE)
    instance ToBackendKey MongoContext Question where
      toBackendKey = unQuestionKey
      fromBackendKey = QuestionKey
    data TestData
      = TestData {testDataName :: !Text,
                  testDataDescription :: !Text,
                  testDataCreationDate :: !UTCTime,
                  testDataPassingNumber :: !Int,
                  testDataQuestion :: !Text}
      deriving (Eq, Read, Show, Generic)
    type TestDataId = Key TestData
    instance PersistEntity TestData where
      type PersistEntityBackend TestData = MongoContext
      data Unique TestData
      newtype Key TestData
        = TestDataKey {unTestDataKey :: (BackendKey MongoContext)}
        deriving (Show,
                  Read,
                  Eq,
                  Ord,
                  path-pieces-0.2.1:Web.PathPieces.PathPiece,
                  http-api-data-0.3.7.2:Web.Internal.HttpApiData.ToHttpApiData,
                  http-api-data-0.3.7.2:Web.Internal.HttpApiData.FromHttpApiData,
                  PersistField,
                  persistent-2.8.1:Database.Persist.Sql.Class.PersistFieldSql,
                  ToJSON,
                  FromJSON)
      data EntityField TestData typ
        = typ ~ Key TestData => TestDataId |
          typ ~ Text => TestDataName |
          typ ~ Text => TestDataDescription |
          typ ~ UTCTime => TestDataCreationDate |
          typ ~ Int => TestDataPassingNumber |
          typ ~ Text => TestDataQuestion
      keyToValues
        = ((ghc-prim-0.5.1.1:GHC.Types.: [])
             . (toPersistValue . unTestDataKey))
      keyFromValues
        = ((fmap TestDataKey)
             . (fromPersistValue . Database.Persist.TH.headNote))
      entityDef _
        = (((((((((EntityDef (HaskellName (packPTH "TestData")))
                    (DBName (packPTH "test_data")))
                   (((((((FieldDef (HaskellName (packPTH "Id")))
                           (DBName (packPTH "id")))
                          ((FTTypeCon Nothing) (packPTH "TestDataId")))
                         SqlInt64)
                        [])
                       True)
                      ((ForeignRef (HaskellName (packPTH "TestData")))
                         ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                  [])
                 [((((((FieldDef (HaskellName (packPTH "name")))
                         (DBName (packPTH "name")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "description")))
                         (DBName (packPTH "description")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "creationDate")))
                         (DBName (packPTH "creation_date")))
                        ((FTTypeCon Nothing) (packPTH "UTCTime")))
                       SqlDayTime)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "passingNumber")))
                         (DBName (packPTH "passing_number")))
                        ((FTTypeCon Nothing) (packPTH "Int")))
                       SqlInt64)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "question")))
                         (DBName (packPTH "question")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference])
                [])
               [])
              [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
             (Data.Map.Internal.fromList []))
            False
      toPersistFields (TestData x_a2wJJ x_a2wJK x_a2wJL x_a2wJM x_a2wJN)
        = [SomePersistField x_a2wJJ, SomePersistField x_a2wJK,
           SomePersistField x_a2wJL, SomePersistField x_a2wJM,
           SomePersistField x_a2wJN]
      fromPersistValues
        [x1_a2wJP, x2_a2wJQ, x3_a2wJR, x4_a2wJS, x5_a2wJT]
        = TestData
            <$>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "name")))
                 . fromPersistValue)
                x1_a2wJP
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "description")))
                 . fromPersistValue)
                x2_a2wJQ
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "creationDate")))
                 . fromPersistValue)
                x3_a2wJR
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "passingNumber")))
                 . fromPersistValue)
                x4_a2wJS
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "question")))
                 . fromPersistValue)
                x5_a2wJT
      fromPersistValues x_a2wJO
        = (Left
             $ ((mappend (packPTH "TestData: fromPersistValues failed on: "))
                  (pack $ (show x_a2wJO))))
      persistUniqueToFieldNames _
        = error "Degenerate case, should never happen"
      persistUniqueToValues _
        = error "Degenerate case, should never happen"
      persistUniqueKeys
        (TestData _name_a2wJU
                  _description_a2wJV
                  _creationDate_a2wJW
                  _passingNumber_a2wJX
                  _question_a2wJY)
        = []
      persistFieldDef TestDataId
        = ((((((FieldDef (HaskellName (packPTH "Id")))
                 (DBName (packPTH "id")))
                ((FTTypeCon Nothing) (packPTH "TestDataId")))
               SqlInt64)
              [])
             True)
            ((ForeignRef (HaskellName (packPTH "TestData")))
               ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))
      persistFieldDef TestDataName
        = ((((((FieldDef (HaskellName (packPTH "name")))
                 (DBName (packPTH "name")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef TestDataDescription
        = ((((((FieldDef (HaskellName (packPTH "description")))
                 (DBName (packPTH "description")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef TestDataCreationDate
        = ((((((FieldDef (HaskellName (packPTH "creationDate")))
                 (DBName (packPTH "creation_date")))
                ((FTTypeCon Nothing) (packPTH "UTCTime")))
               SqlDayTime)
              [])
             True)
            NoReference
      persistFieldDef TestDataPassingNumber
        = ((((((FieldDef (HaskellName (packPTH "passingNumber")))
                 (DBName (packPTH "passing_number")))
                ((FTTypeCon Nothing) (packPTH "Int")))
               SqlInt64)
              [])
             True)
            NoReference
      persistFieldDef TestDataQuestion
        = ((((((FieldDef (HaskellName (packPTH "question")))
                 (DBName (packPTH "question")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistIdField = TestDataId
      fieldLens TestDataId
        = (lensPTH entityKey)
            (\ Entity _ value_a2wJZ key_a2wK0
               -> (Entity key_a2wK0) value_a2wJZ)
      fieldLens TestDataName
        = (lensPTH (testDataName . entityVal))
            (\ Entity key_a2wK1 value_a2wK2 x_a2wK3
               -> (Entity key_a2wK1) value_a2wK2 {testDataName = x_a2wK3})
      fieldLens TestDataDescription
        = (lensPTH (testDataDescription . entityVal))
            (\ Entity key_a2wK1 value_a2wK2 x_a2wK3
               -> (Entity key_a2wK1) value_a2wK2 {testDataDescription = x_a2wK3})
      fieldLens TestDataCreationDate
        = (lensPTH (testDataCreationDate . entityVal))
            (\ Entity key_a2wK1 value_a2wK2 x_a2wK3
               -> (Entity key_a2wK1) value_a2wK2 {testDataCreationDate = x_a2wK3})
      fieldLens TestDataPassingNumber
        = (lensPTH (testDataPassingNumber . entityVal))
            (\ Entity key_a2wK1 value_a2wK2 x_a2wK3
               -> (Entity key_a2wK1)
                    value_a2wK2 {testDataPassingNumber = x_a2wK3})
      fieldLens TestDataQuestion
        = (lensPTH (testDataQuestion . entityVal))
            (\ Entity key_a2wK1 value_a2wK2 x_a2wK3
               -> (Entity key_a2wK1) value_a2wK2 {testDataQuestion = x_a2wK3})
    instance ToBackendKey MongoContext TestData where
      toBackendKey = unTestDataKey
      fromBackendKey = TestDataKey
    migrateAll :: persistent-2.8.1:Database.Persist.Sql.Types.Migration
    migrateAll
      = do let defs_a2wK4
                 = [(((((((((EntityDef (HaskellName (packPTH "Question")))
                              (DBName (packPTH "question")))
                             (((((((FieldDef (HaskellName (packPTH "Id")))
                                     (DBName (packPTH "id")))
                                    ((FTTypeCon Nothing) (packPTH "QuestionId")))
                                   SqlInt64)
                                  [])
                                 True)
                                ((ForeignRef (HaskellName (packPTH "Question")))
                                   ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                            [])
                           [])
                          [])
                         [])
                        [])
                       (Data.Map.Internal.fromList []))
                      False,
                    (((((((((EntityDef (HaskellName (packPTH "TestData")))
                              (DBName (packPTH "test_data")))
                             (((((((FieldDef (HaskellName (packPTH "Id")))
                                     (DBName (packPTH "id")))
                                    ((FTTypeCon Nothing) (packPTH "TestDataId")))
                                   SqlInt64)
                                  [])
                                 True)
                                ((ForeignRef (HaskellName (packPTH "TestData")))
                                   ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                            [])
                           [((((((FieldDef (HaskellName (packPTH "name")))
                                   (DBName (packPTH "name")))
                                  ((FTTypeCon Nothing) (packPTH "Text")))
                                 SqlString)
                                [])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "description")))
                                   (DBName (packPTH "description")))
                                  ((FTTypeCon Nothing) (packPTH "Text")))
                                 SqlString)
                                [])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "creationDate")))
                                   (DBName (packPTH "creation_date")))
                                  ((FTTypeCon Nothing) (packPTH "UTCTime")))
                                 SqlDayTime)
                                [])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "passingNumber")))
                                   (DBName (packPTH "passing_number")))
                                  ((FTTypeCon Nothing) (packPTH "Int")))
                                 SqlInt64)
                                [])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "question")))
                                   (DBName (packPTH "question")))
                                  ((FTTypeCon Nothing) (packPTH "Text")))
                                 SqlString)
                                [])
                               True)
                              NoReference])
                          [])
                         [])
                        [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
                       (Data.Map.Internal.fromList []))
                      False]
           (persistent-2.8.1:Database.Persist.Sql.Migration.migrate
              defs_a2wK4)
             ((((((((((EntityDef (HaskellName (packPTH "Question")))
                        (DBName (packPTH "question")))
                       (((((((FieldDef (HaskellName (packPTH "Id")))
                               (DBName (packPTH "id")))
                              ((FTTypeCon Nothing) (packPTH "QuestionId")))
                             SqlInt64)
                            [])
                           True)
                          ((ForeignRef (HaskellName (packPTH "Question")))
                             ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                      [])
                     [])
                    [])
                   [])
                  [])
                 (Data.Map.Internal.fromList []))
                False)
           (persistent-2.8.1:Database.Persist.Sql.Migration.migrate
              defs_a2wK4)
             ((((((((((EntityDef (HaskellName (packPTH "TestData")))
                        (DBName (packPTH "test_data")))
                       (((((((FieldDef (HaskellName (packPTH "Id")))
                               (DBName (packPTH "id")))
                              ((FTTypeCon Nothing) (packPTH "TestDataId")))
                             SqlInt64)
                            [])
                           True)
                          ((ForeignRef (HaskellName (packPTH "TestData")))
                             ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                      [])
                     [((((((FieldDef (HaskellName (packPTH "name")))
                             (DBName (packPTH "name")))
                            ((FTTypeCon Nothing) (packPTH "Text")))
                           SqlString)
                          [])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "description")))
                             (DBName (packPTH "description")))
                            ((FTTypeCon Nothing) (packPTH "Text")))
                           SqlString)
                          [])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "creationDate")))
                             (DBName (packPTH "creation_date")))
                            ((FTTypeCon Nothing) (packPTH "UTCTime")))
                           SqlDayTime)
                          [])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "passingNumber")))
                             (DBName (packPTH "passing_number")))
                            ((FTTypeCon Nothing) (packPTH "Int")))
                           SqlInt64)
                          [])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "question")))
                             (DBName (packPTH "question")))
                            ((FTTypeCon Nothing) (packPTH "Text")))
                           SqlString)
                          [])
                         True)
                        NoReference])
                    [])
                   [])
                  [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
                 (Data.Map.Internal.fromList []))
                False)
/home/nikita/Projects/labs/Databases/Course-Project/Server/src/Model/TestData.hs:(23,103)-(33,2): Splicing expression
    Language.Haskell.TH.Quote.quoteExp
      persistLowerCase
      "\n\
      \Question\n\
      \\n\
      \TestData\n\
      \  name          Text\n\
      \  description   Text\n\
      \  creationDate  UTCTime\n\
      \  passingNumber Int\n\
      \  question      Text\n\
      \  deriving Eq Read Show Generic\n"
  ======>
    [(((((((((EntityDef (HaskellName (packPTH "Question")))
               (DBName (packPTH "question")))
              (((((((FieldDef (HaskellName (packPTH "Id")))
                      (DBName (packPTH "id")))
                     ((FTTypeCon Nothing) (packPTH "QuestionId")))
                    SqlInt64)
                   [])
                  True)
                 ((ForeignRef (HaskellName (packPTH "Question")))
                    ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
             [])
            [])
           [])
          [])
         [])
        (Data.Map.Internal.fromList []))
       False
       {entityFields = [],
        entityId = ((((((FieldDef (HaskellName (packPTH "Id")))
                          (DBName (packPTH "id")))
                         ((FTTypeCon Nothing) (packPTH "QuestionId")))
                        (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                           (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                       [])
                      True)
                     ((ForeignRef (HaskellName (packPTH "Question")))
                        ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))},
     (((((((((EntityDef (HaskellName (packPTH "TestData")))
               (DBName (packPTH "test_data")))
              (((((((FieldDef (HaskellName (packPTH "Id")))
                      (DBName (packPTH "id")))
                     ((FTTypeCon Nothing) (packPTH "TestDataId")))
                    SqlInt64)
                   [])
                  True)
                 ((ForeignRef (HaskellName (packPTH "TestData")))
                    ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
             [])
            [((((((FieldDef (HaskellName (packPTH "name")))
                    (DBName (packPTH "name")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for name")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "description")))
                    (DBName (packPTH "description")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for description")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "creationDate")))
                    (DBName (packPTH "creation_date")))
                   ((FTTypeCon Nothing) (packPTH "UTCTime")))
                  (SqlOther (packPTH "SqlType unset for creationDate")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "passingNumber")))
                    (DBName (packPTH "passing_number")))
                   ((FTTypeCon Nothing) (packPTH "Int")))
                  (SqlOther (packPTH "SqlType unset for passingNumber")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "question")))
                    (DBName (packPTH "question")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for question")))
                 [])
                True)
               NoReference])
           [])
          [])
         [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
        (Data.Map.Internal.fromList []))
       False
       {entityFields = [((((((FieldDef (HaskellName (packPTH "name")))
                               (DBName (packPTH "name")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "description")))
                               (DBName (packPTH "description")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "creationDate")))
                               (DBName (packPTH "creation_date")))
                              ((FTTypeCon Nothing) (packPTH "UTCTime")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy UTCTime)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "passingNumber")))
                               (DBName (packPTH "passing_number")))
                              ((FTTypeCon Nothing) (packPTH "Int")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Int)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "question")))
                               (DBName (packPTH "question")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference],
        entityId = ((((((FieldDef (HaskellName (packPTH "Id")))
                          (DBName (packPTH "id")))
                         ((FTTypeCon Nothing) (packPTH "TestDataId")))
                        (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                           (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                       [])
                      True)
                     ((ForeignRef (HaskellName (packPTH "TestData")))
                        ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))}]
/home/nikita/Projects/labs/Databases/Course-Project/Server/src/Model/TestData.hs:(23,1)-(33,2): Splicing declarations
    share
      [mkPersist (mkPersistSettings (ConT ''MongoContext)),
       mkMigrate "migrateAll"]
      ([(((((((((EntityDef (HaskellName (packPTH "Question")))
                  (DBName (packPTH "question")))
                 (((((((FieldDef (HaskellName (packPTH "Id")))
                         (DBName (packPTH "id")))
                        ((FTTypeCon Nothing) (packPTH "QuestionId")))
                       SqlInt64)
                      [])
                     True)
                    ((ForeignRef (HaskellName (packPTH "Question")))
                       ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                [])
               [])
              [])
             [])
            [])
           (Data.Map.Internal.fromList []))
          False
          {entityFields = [],
           entityId = ((((((FieldDef (HaskellName (packPTH "Id")))
                             (DBName (packPTH "id")))
                            ((FTTypeCon Nothing) (packPTH "QuestionId")))
                           (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                              (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                          [])
                         True)
                        ((ForeignRef (HaskellName (packPTH "Question")))
                           ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))},
        (((((((((EntityDef (HaskellName (packPTH "TestData")))
                  (DBName (packPTH "test_data")))
                 (((((((FieldDef (HaskellName (packPTH "Id")))
                         (DBName (packPTH "id")))
                        ((FTTypeCon Nothing) (packPTH "TestDataId")))
                       SqlInt64)
                      [])
                     True)
                    ((ForeignRef (HaskellName (packPTH "TestData")))
                       ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                [])
               [((((((FieldDef (HaskellName (packPTH "name")))
                       (DBName (packPTH "name")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for name")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "description")))
                       (DBName (packPTH "description")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for description")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "creationDate")))
                       (DBName (packPTH "creation_date")))
                      ((FTTypeCon Nothing) (packPTH "UTCTime")))
                     (SqlOther (packPTH "SqlType unset for creationDate")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "passingNumber")))
                       (DBName (packPTH "passing_number")))
                      ((FTTypeCon Nothing) (packPTH "Int")))
                     (SqlOther (packPTH "SqlType unset for passingNumber")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "question")))
                       (DBName (packPTH "question")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for question")))
                    [])
                   True)
                  NoReference])
              [])
             [])
            [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
           (Data.Map.Internal.fromList []))
          False
          {entityFields = [((((((FieldDef (HaskellName (packPTH "name")))
                                  (DBName (packPTH "name")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "description")))
                                  (DBName (packPTH "description")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "creationDate")))
                                  (DBName (packPTH "creation_date")))
                                 ((FTTypeCon Nothing) (packPTH "UTCTime")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy UTCTime)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "passingNumber")))
                                  (DBName (packPTH "passing_number")))
                                 ((FTTypeCon Nothing) (packPTH "Int")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Int)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "question")))
                                  (DBName (packPTH "question")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference],
           entityId = ((((((FieldDef (HaskellName (packPTH "Id")))
                             (DBName (packPTH "id")))
                            ((FTTypeCon Nothing) (packPTH "TestDataId")))
                           (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                              (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                          [])
                         True)
                        ((ForeignRef (HaskellName (packPTH "TestData")))
                           ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))}])
  ======>
    instance PersistField Question where
      toPersistValue
        = \ ent_a2y06
            -> (PersistMap
                  $ ((Prelude.zip ((Prelude.map pack) []))
                       ((Prelude.map toPersistValue) $ (toPersistFields ent_a2y06))))
      fromPersistValue
        = ((\ x_a2y07
              -> let
                   columns_a2y08
                     = unordered-containers-0.2.9.0:Data.HashMap.Strict.fromList x_a2y07
                 in
                   (fromPersistValues
                      $ ((Prelude.map
                            (\ name_a2y09
                               -> case
                                      (unordered-containers-0.2.9.0:Data.HashMap.Base.lookup
                                         (pack name_a2y09))
                                        columns_a2y08
                                  of
                                    Just v_a2y0a -> v_a2y0a
                                    Nothing -> PersistNull))
                           $ [])))
             <=< getPersistMap)
    instance persistent-2.8.1:Database.Persist.Sql.Class.PersistFieldSql Question where
      persistent-2.8.1:Database.Persist.Sql.Class.sqlType _ = SqlString
    instance PersistField TestData where
      toPersistValue
        = \ ent_a2y0b
            -> (PersistMap
                  $ ((Prelude.zip
                        ((Prelude.map pack)
                           ["name", "description", "creationDate", "passingNumber",
                            "question"]))
                       ((Prelude.map toPersistValue) $ (toPersistFields ent_a2y0b))))
      fromPersistValue
        = ((\ x_a2y0c
              -> let
                   columns_a2y0d
                     = unordered-containers-0.2.9.0:Data.HashMap.Strict.fromList x_a2y0c
                 in
                   (fromPersistValues
                      $ ((Prelude.map
                            (\ name_a2y0e
                               -> case
                                      (unordered-containers-0.2.9.0:Data.HashMap.Base.lookup
                                         (pack name_a2y0e))
                                        columns_a2y0d
                                  of
                                    Just v_a2y0f -> v_a2y0f
                                    Nothing -> PersistNull))
                           $ ["name", "description", "creationDate", "passingNumber",
                              "question"])))
             <=< getPersistMap)
    instance persistent-2.8.1:Database.Persist.Sql.Class.PersistFieldSql TestData where
      persistent-2.8.1:Database.Persist.Sql.Class.sqlType _ = SqlString
    data Question
      = Question {}
      deriving ()
    type QuestionId = Key Question
    instance PersistEntity Question where
      type PersistEntityBackend Question = MongoContext
      data Unique Question
      newtype Key Question
        = QuestionKey {unQuestionKey :: (BackendKey MongoContext)}
        deriving (Show,
                  Read,
                  Eq,
                  Ord,
                  path-pieces-0.2.1:Web.PathPieces.PathPiece,
                  http-api-data-0.3.7.2:Web.Internal.HttpApiData.ToHttpApiData,
                  http-api-data-0.3.7.2:Web.Internal.HttpApiData.FromHttpApiData,
                  PersistField,
                  persistent-2.8.1:Database.Persist.Sql.Class.PersistFieldSql,
                  ToJSON,
                  FromJSON)
      data EntityField Question typ = typ ~ Key Question => QuestionId
      keyToValues
        = ((ghc-prim-0.5.1.1:GHC.Types.: [])
             . (toPersistValue . unQuestionKey))
      keyFromValues
        = ((fmap QuestionKey)
             . (fromPersistValue . Database.Persist.TH.headNote))
      entityDef _
        = (((((((((EntityDef (HaskellName (packPTH "Question")))
                    (DBName (packPTH "question")))
                   (((((((FieldDef (HaskellName (packPTH "Id")))
                           (DBName (packPTH "id")))
                          ((FTTypeCon Nothing) (packPTH "QuestionId")))
                         SqlInt64)
                        [])
                       True)
                      ((ForeignRef (HaskellName (packPTH "Question")))
                         ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                  [])
                 [])
                [])
               [])
              [])
             (Data.Map.Internal.fromList []))
            False
      toPersistFields Question = []
      fromPersistValues [] = Right Question
      fromPersistValues x_a2y0g
        = (Left
             $ ((mappend (packPTH "Question: fromPersistValues failed on: "))
                  (pack $ (show x_a2y0g))))
      persistUniqueToFieldNames _
        = error "Degenerate case, should never happen"
      persistUniqueToValues _
        = error "Degenerate case, should never happen"
      persistUniqueKeys Question = []
      persistFieldDef QuestionId
        = ((((((FieldDef (HaskellName (packPTH "Id")))
                 (DBName (packPTH "id")))
                ((FTTypeCon Nothing) (packPTH "QuestionId")))
               SqlInt64)
              [])
             True)
            ((ForeignRef (HaskellName (packPTH "Question")))
               ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))
      persistIdField = QuestionId
      fieldLens QuestionId
        = (lensPTH entityKey)
            (\ Entity _ value_a2y0h key_a2y0i
               -> (Entity key_a2y0i) value_a2y0h)
    instance ToBackendKey MongoContext Question where
      toBackendKey = unQuestionKey
      fromBackendKey = QuestionKey
    data TestData
      = TestData {testDataName :: !Text,
                  testDataDescription :: !Text,
                  testDataCreationDate :: !UTCTime,
                  testDataPassingNumber :: !Int,
                  testDataQuestion :: !Text}
      deriving (Eq, Read, Show, Generic)
    type TestDataId = Key TestData
    instance PersistEntity TestData where
      type PersistEntityBackend TestData = MongoContext
      data Unique TestData
      newtype Key TestData
        = TestDataKey {unTestDataKey :: (BackendKey MongoContext)}
        deriving (Show,
                  Read,
                  Eq,
                  Ord,
                  path-pieces-0.2.1:Web.PathPieces.PathPiece,
                  http-api-data-0.3.7.2:Web.Internal.HttpApiData.ToHttpApiData,
                  http-api-data-0.3.7.2:Web.Internal.HttpApiData.FromHttpApiData,
                  PersistField,
                  persistent-2.8.1:Database.Persist.Sql.Class.PersistFieldSql,
                  ToJSON,
                  FromJSON)
      data EntityField TestData typ
        = typ ~ Key TestData => TestDataId |
          typ ~ Text => TestDataName |
          typ ~ Text => TestDataDescription |
          typ ~ UTCTime => TestDataCreationDate |
          typ ~ Int => TestDataPassingNumber |
          typ ~ Text => TestDataQuestion
      keyToValues
        = ((ghc-prim-0.5.1.1:GHC.Types.: [])
             . (toPersistValue . unTestDataKey))
      keyFromValues
        = ((fmap TestDataKey)
             . (fromPersistValue . Database.Persist.TH.headNote))
      entityDef _
        = (((((((((EntityDef (HaskellName (packPTH "TestData")))
                    (DBName (packPTH "test_data")))
                   (((((((FieldDef (HaskellName (packPTH "Id")))
                           (DBName (packPTH "id")))
                          ((FTTypeCon Nothing) (packPTH "TestDataId")))
                         SqlInt64)
                        [])
                       True)
                      ((ForeignRef (HaskellName (packPTH "TestData")))
                         ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                  [])
                 [((((((FieldDef (HaskellName (packPTH "name")))
                         (DBName (packPTH "name")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "description")))
                         (DBName (packPTH "description")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "creationDate")))
                         (DBName (packPTH "creation_date")))
                        ((FTTypeCon Nothing) (packPTH "UTCTime")))
                       SqlDayTime)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "passingNumber")))
                         (DBName (packPTH "passing_number")))
                        ((FTTypeCon Nothing) (packPTH "Int")))
                       SqlInt64)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "question")))
                         (DBName (packPTH "question")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference])
                [])
               [])
              [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
             (Data.Map.Internal.fromList []))
            False
      toPersistFields (TestData x_a2y0m x_a2y0n x_a2y0o x_a2y0p x_a2y0q)
        = [SomePersistField x_a2y0m, SomePersistField x_a2y0n,
           SomePersistField x_a2y0o, SomePersistField x_a2y0p,
           SomePersistField x_a2y0q]
      fromPersistValues
        [x1_a2y0s, x2_a2y0t, x3_a2y0u, x4_a2y0v, x5_a2y0w]
        = TestData
            <$>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "name")))
                 . fromPersistValue)
                x1_a2y0s
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "description")))
                 . fromPersistValue)
                x2_a2y0t
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "creationDate")))
                 . fromPersistValue)
                x3_a2y0u
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "passingNumber")))
                 . fromPersistValue)
                x4_a2y0v
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "question")))
                 . fromPersistValue)
                x5_a2y0w
      fromPersistValues x_a2y0r
        = (Left
             $ ((mappend (packPTH "TestData: fromPersistValues failed on: "))
                  (pack $ (show x_a2y0r))))
      persistUniqueToFieldNames _
        = error "Degenerate case, should never happen"
      persistUniqueToValues _
        = error "Degenerate case, should never happen"
      persistUniqueKeys
        (TestData _name_a2y0x
                  _description_a2y0y
                  _creationDate_a2y0z
                  _passingNumber_a2y0A
                  _question_a2y0B)
        = []
      persistFieldDef TestDataId
        = ((((((FieldDef (HaskellName (packPTH "Id")))
                 (DBName (packPTH "id")))
                ((FTTypeCon Nothing) (packPTH "TestDataId")))
               SqlInt64)
              [])
             True)
            ((ForeignRef (HaskellName (packPTH "TestData")))
               ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))
      persistFieldDef TestDataName
        = ((((((FieldDef (HaskellName (packPTH "name")))
                 (DBName (packPTH "name")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef TestDataDescription
        = ((((((FieldDef (HaskellName (packPTH "description")))
                 (DBName (packPTH "description")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef TestDataCreationDate
        = ((((((FieldDef (HaskellName (packPTH "creationDate")))
                 (DBName (packPTH "creation_date")))
                ((FTTypeCon Nothing) (packPTH "UTCTime")))
               SqlDayTime)
              [])
             True)
            NoReference
      persistFieldDef TestDataPassingNumber
        = ((((((FieldDef (HaskellName (packPTH "passingNumber")))
                 (DBName (packPTH "passing_number")))
                ((FTTypeCon Nothing) (packPTH "Int")))
               SqlInt64)
              [])
             True)
            NoReference
      persistFieldDef TestDataQuestion
        = ((((((FieldDef (HaskellName (packPTH "question")))
                 (DBName (packPTH "question")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistIdField = TestDataId
      fieldLens TestDataId
        = (lensPTH entityKey)
            (\ Entity _ value_a2y0C key_a2y0D
               -> (Entity key_a2y0D) value_a2y0C)
      fieldLens TestDataName
        = (lensPTH (testDataName . entityVal))
            (\ Entity key_a2y0E value_a2y0F x_a2y0G
               -> (Entity key_a2y0E) value_a2y0F {testDataName = x_a2y0G})
      fieldLens TestDataDescription
        = (lensPTH (testDataDescription . entityVal))
            (\ Entity key_a2y0E value_a2y0F x_a2y0G
               -> (Entity key_a2y0E) value_a2y0F {testDataDescription = x_a2y0G})
      fieldLens TestDataCreationDate
        = (lensPTH (testDataCreationDate . entityVal))
            (\ Entity key_a2y0E value_a2y0F x_a2y0G
               -> (Entity key_a2y0E) value_a2y0F {testDataCreationDate = x_a2y0G})
      fieldLens TestDataPassingNumber
        = (lensPTH (testDataPassingNumber . entityVal))
            (\ Entity key_a2y0E value_a2y0F x_a2y0G
               -> (Entity key_a2y0E)
                    value_a2y0F {testDataPassingNumber = x_a2y0G})
      fieldLens TestDataQuestion
        = (lensPTH (testDataQuestion . entityVal))
            (\ Entity key_a2y0E value_a2y0F x_a2y0G
               -> (Entity key_a2y0E) value_a2y0F {testDataQuestion = x_a2y0G})
    instance ToBackendKey MongoContext TestData where
      toBackendKey = unTestDataKey
      fromBackendKey = TestDataKey
    migrateAll :: persistent-2.8.1:Database.Persist.Sql.Types.Migration
    migrateAll
      = do let defs_a2y0H
                 = [(((((((((EntityDef (HaskellName (packPTH "Question")))
                              (DBName (packPTH "question")))
                             (((((((FieldDef (HaskellName (packPTH "Id")))
                                     (DBName (packPTH "id")))
                                    ((FTTypeCon Nothing) (packPTH "QuestionId")))
                                   SqlInt64)
                                  [])
                                 True)
                                ((ForeignRef (HaskellName (packPTH "Question")))
                                   ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                            [])
                           [])
                          [])
                         [])
                        [])
                       (Data.Map.Internal.fromList []))
                      False,
                    (((((((((EntityDef (HaskellName (packPTH "TestData")))
                              (DBName (packPTH "test_data")))
                             (((((((FieldDef (HaskellName (packPTH "Id")))
                                     (DBName (packPTH "id")))
                                    ((FTTypeCon Nothing) (packPTH "TestDataId")))
                                   SqlInt64)
                                  [])
                                 True)
                                ((ForeignRef (HaskellName (packPTH "TestData")))
                                   ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                            [])
                           [((((((FieldDef (HaskellName (packPTH "name")))
                                   (DBName (packPTH "name")))
                                  ((FTTypeCon Nothing) (packPTH "Text")))
                                 SqlString)
                                [])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "description")))
                                   (DBName (packPTH "description")))
                                  ((FTTypeCon Nothing) (packPTH "Text")))
                                 SqlString)
                                [])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "creationDate")))
                                   (DBName (packPTH "creation_date")))
                                  ((FTTypeCon Nothing) (packPTH "UTCTime")))
                                 SqlDayTime)
                                [])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "passingNumber")))
                                   (DBName (packPTH "passing_number")))
                                  ((FTTypeCon Nothing) (packPTH "Int")))
                                 SqlInt64)
                                [])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "question")))
                                   (DBName (packPTH "question")))
                                  ((FTTypeCon Nothing) (packPTH "Text")))
                                 SqlString)
                                [])
                               True)
                              NoReference])
                          [])
                         [])
                        [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
                       (Data.Map.Internal.fromList []))
                      False]
           (persistent-2.8.1:Database.Persist.Sql.Migration.migrate
              defs_a2y0H)
             ((((((((((EntityDef (HaskellName (packPTH "Question")))
                        (DBName (packPTH "question")))
                       (((((((FieldDef (HaskellName (packPTH "Id")))
                               (DBName (packPTH "id")))
                              ((FTTypeCon Nothing) (packPTH "QuestionId")))
                             SqlInt64)
                            [])
                           True)
                          ((ForeignRef (HaskellName (packPTH "Question")))
                             ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                      [])
                     [])
                    [])
                   [])
                  [])
                 (Data.Map.Internal.fromList []))
                False)
           (persistent-2.8.1:Database.Persist.Sql.Migration.migrate
              defs_a2y0H)
             ((((((((((EntityDef (HaskellName (packPTH "TestData")))
                        (DBName (packPTH "test_data")))
                       (((((((FieldDef (HaskellName (packPTH "Id")))
                               (DBName (packPTH "id")))
                              ((FTTypeCon Nothing) (packPTH "TestDataId")))
                             SqlInt64)
                            [])
                           True)
                          ((ForeignRef (HaskellName (packPTH "TestData")))
                             ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                      [])
                     [((((((FieldDef (HaskellName (packPTH "name")))
                             (DBName (packPTH "name")))
                            ((FTTypeCon Nothing) (packPTH "Text")))
                           SqlString)
                          [])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "description")))
                             (DBName (packPTH "description")))
                            ((FTTypeCon Nothing) (packPTH "Text")))
                           SqlString)
                          [])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "creationDate")))
                             (DBName (packPTH "creation_date")))
                            ((FTTypeCon Nothing) (packPTH "UTCTime")))
                           SqlDayTime)
                          [])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "passingNumber")))
                             (DBName (packPTH "passing_number")))
                            ((FTTypeCon Nothing) (packPTH "Int")))
                           SqlInt64)
                          [])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "question")))
                             (DBName (packPTH "question")))
                            ((FTTypeCon Nothing) (packPTH "Text")))
                           SqlString)
                          [])
                         True)
                        NoReference])
                    [])
                   [])
                  [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
                 (Data.Map.Internal.fromList []))
                False)
/home/nikita/Projects/labs/Databases/Course-Project/Server/src/Model/TestData.hs:(23,103)-(33,2): Splicing expression
    Language.Haskell.TH.Quote.quoteExp
      persistLowerCase
      "\n\
      \Question\n\
      \\n\
      \TestData\n\
      \  name          Text\n\
      \  description   Text\n\
      \  creationDate  UTCTime\n\
      \  passingNumber Int\n\
      \  question      Text\n\
      \  deriving Eq Read Show Generic\n"
  ======>
    [(((((((((EntityDef (HaskellName (packPTH "Question")))
               (DBName (packPTH "question")))
              (((((((FieldDef (HaskellName (packPTH "Id")))
                      (DBName (packPTH "id")))
                     ((FTTypeCon Nothing) (packPTH "QuestionId")))
                    SqlInt64)
                   [])
                  True)
                 ((ForeignRef (HaskellName (packPTH "Question")))
                    ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
             [])
            [])
           [])
          [])
         [])
        (Data.Map.Internal.fromList []))
       False
       {entityFields = [],
        entityId = ((((((FieldDef (HaskellName (packPTH "Id")))
                          (DBName (packPTH "id")))
                         ((FTTypeCon Nothing) (packPTH "QuestionId")))
                        (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                           (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                       [])
                      True)
                     ((ForeignRef (HaskellName (packPTH "Question")))
                        ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))},
     (((((((((EntityDef (HaskellName (packPTH "TestData")))
               (DBName (packPTH "test_data")))
              (((((((FieldDef (HaskellName (packPTH "Id")))
                      (DBName (packPTH "id")))
                     ((FTTypeCon Nothing) (packPTH "TestDataId")))
                    SqlInt64)
                   [])
                  True)
                 ((ForeignRef (HaskellName (packPTH "TestData")))
                    ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
             [])
            [((((((FieldDef (HaskellName (packPTH "name")))
                    (DBName (packPTH "name")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for name")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "description")))
                    (DBName (packPTH "description")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for description")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "creationDate")))
                    (DBName (packPTH "creation_date")))
                   ((FTTypeCon Nothing) (packPTH "UTCTime")))
                  (SqlOther (packPTH "SqlType unset for creationDate")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "passingNumber")))
                    (DBName (packPTH "passing_number")))
                   ((FTTypeCon Nothing) (packPTH "Int")))
                  (SqlOther (packPTH "SqlType unset for passingNumber")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "question")))
                    (DBName (packPTH "question")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for question")))
                 [])
                True)
               NoReference])
           [])
          [])
         [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
        (Data.Map.Internal.fromList []))
       False
       {entityFields = [((((((FieldDef (HaskellName (packPTH "name")))
                               (DBName (packPTH "name")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "description")))
                               (DBName (packPTH "description")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "creationDate")))
                               (DBName (packPTH "creation_date")))
                              ((FTTypeCon Nothing) (packPTH "UTCTime")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy UTCTime)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "passingNumber")))
                               (DBName (packPTH "passing_number")))
                              ((FTTypeCon Nothing) (packPTH "Int")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Int)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "question")))
                               (DBName (packPTH "question")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference],
        entityId = ((((((FieldDef (HaskellName (packPTH "Id")))
                          (DBName (packPTH "id")))
                         ((FTTypeCon Nothing) (packPTH "TestDataId")))
                        (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                           (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                       [])
                      True)
                     ((ForeignRef (HaskellName (packPTH "TestData")))
                        ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))}]
/home/nikita/Projects/labs/Databases/Course-Project/Server/src/Model/TestData.hs:(23,1)-(33,2): Splicing declarations
    share
      [mkPersist (mkPersistSettings (ConT ''MongoContext)),
       mkMigrate "migrateAll"]
      ([(((((((((EntityDef (HaskellName (packPTH "Question")))
                  (DBName (packPTH "question")))
                 (((((((FieldDef (HaskellName (packPTH "Id")))
                         (DBName (packPTH "id")))
                        ((FTTypeCon Nothing) (packPTH "QuestionId")))
                       SqlInt64)
                      [])
                     True)
                    ((ForeignRef (HaskellName (packPTH "Question")))
                       ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                [])
               [])
              [])
             [])
            [])
           (Data.Map.Internal.fromList []))
          False
          {entityFields = [],
           entityId = ((((((FieldDef (HaskellName (packPTH "Id")))
                             (DBName (packPTH "id")))
                            ((FTTypeCon Nothing) (packPTH "QuestionId")))
                           (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                              (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                          [])
                         True)
                        ((ForeignRef (HaskellName (packPTH "Question")))
                           ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))},
        (((((((((EntityDef (HaskellName (packPTH "TestData")))
                  (DBName (packPTH "test_data")))
                 (((((((FieldDef (HaskellName (packPTH "Id")))
                         (DBName (packPTH "id")))
                        ((FTTypeCon Nothing) (packPTH "TestDataId")))
                       SqlInt64)
                      [])
                     True)
                    ((ForeignRef (HaskellName (packPTH "TestData")))
                       ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                [])
               [((((((FieldDef (HaskellName (packPTH "name")))
                       (DBName (packPTH "name")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for name")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "description")))
                       (DBName (packPTH "description")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for description")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "creationDate")))
                       (DBName (packPTH "creation_date")))
                      ((FTTypeCon Nothing) (packPTH "UTCTime")))
                     (SqlOther (packPTH "SqlType unset for creationDate")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "passingNumber")))
                       (DBName (packPTH "passing_number")))
                      ((FTTypeCon Nothing) (packPTH "Int")))
                     (SqlOther (packPTH "SqlType unset for passingNumber")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "question")))
                       (DBName (packPTH "question")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for question")))
                    [])
                   True)
                  NoReference])
              [])
             [])
            [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
           (Data.Map.Internal.fromList []))
          False
          {entityFields = [((((((FieldDef (HaskellName (packPTH "name")))
                                  (DBName (packPTH "name")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "description")))
                                  (DBName (packPTH "description")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "creationDate")))
                                  (DBName (packPTH "creation_date")))
                                 ((FTTypeCon Nothing) (packPTH "UTCTime")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy UTCTime)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "passingNumber")))
                                  (DBName (packPTH "passing_number")))
                                 ((FTTypeCon Nothing) (packPTH "Int")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Int)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "question")))
                                  (DBName (packPTH "question")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference],
           entityId = ((((((FieldDef (HaskellName (packPTH "Id")))
                             (DBName (packPTH "id")))
                            ((FTTypeCon Nothing) (packPTH "TestDataId")))
                           (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                              (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                          [])
                         True)
                        ((ForeignRef (HaskellName (packPTH "TestData")))
                           ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))}])
  ======>
    instance PersistField Question where
      toPersistValue
        = \ ent_a2A0L
            -> (PersistMap
                  $ ((Prelude.zip ((Prelude.map pack) []))
                       ((Prelude.map toPersistValue) $ (toPersistFields ent_a2A0L))))
      fromPersistValue
        = ((\ x_a2A0M
              -> let
                   columns_a2A0N
                     = unordered-containers-0.2.9.0:Data.HashMap.Strict.fromList x_a2A0M
                 in
                   (fromPersistValues
                      $ ((Prelude.map
                            (\ name_a2A0O
                               -> case
                                      (unordered-containers-0.2.9.0:Data.HashMap.Base.lookup
                                         (pack name_a2A0O))
                                        columns_a2A0N
                                  of
                                    Just v_a2A0P -> v_a2A0P
                                    Nothing -> PersistNull))
                           $ [])))
             <=< getPersistMap)
    instance persistent-2.8.1:Database.Persist.Sql.Class.PersistFieldSql Question where
      persistent-2.8.1:Database.Persist.Sql.Class.sqlType _ = SqlString
    instance PersistField TestData where
      toPersistValue
        = \ ent_a2A0Q
            -> (PersistMap
                  $ ((Prelude.zip
                        ((Prelude.map pack)
                           ["name", "description", "creationDate", "passingNumber",
                            "question"]))
                       ((Prelude.map toPersistValue) $ (toPersistFields ent_a2A0Q))))
      fromPersistValue
        = ((\ x_a2A0R
              -> let
                   columns_a2A0S
                     = unordered-containers-0.2.9.0:Data.HashMap.Strict.fromList x_a2A0R
                 in
                   (fromPersistValues
                      $ ((Prelude.map
                            (\ name_a2A0T
                               -> case
                                      (unordered-containers-0.2.9.0:Data.HashMap.Base.lookup
                                         (pack name_a2A0T))
                                        columns_a2A0S
                                  of
                                    Just v_a2A0U -> v_a2A0U
                                    Nothing -> PersistNull))
                           $ ["name", "description", "creationDate", "passingNumber",
                              "question"])))
             <=< getPersistMap)
    instance persistent-2.8.1:Database.Persist.Sql.Class.PersistFieldSql TestData where
      persistent-2.8.1:Database.Persist.Sql.Class.sqlType _ = SqlString
    data Question
      = Question {}
      deriving ()
    type QuestionId = Key Question
    instance PersistEntity Question where
      type PersistEntityBackend Question = MongoContext
      data Unique Question
      newtype Key Question
        = QuestionKey {unQuestionKey :: (BackendKey MongoContext)}
        deriving (Show,
                  Read,
                  Eq,
                  Ord,
                  path-pieces-0.2.1:Web.PathPieces.PathPiece,
                  http-api-data-0.3.7.2:Web.Internal.HttpApiData.ToHttpApiData,
                  http-api-data-0.3.7.2:Web.Internal.HttpApiData.FromHttpApiData,
                  PersistField,
                  persistent-2.8.1:Database.Persist.Sql.Class.PersistFieldSql,
                  ToJSON,
                  FromJSON)
      data EntityField Question typ = typ ~ Key Question => QuestionId
      keyToValues
        = ((ghc-prim-0.5.1.1:GHC.Types.: [])
             . (toPersistValue . unQuestionKey))
      keyFromValues
        = ((fmap QuestionKey)
             . (fromPersistValue . Database.Persist.TH.headNote))
      entityDef _
        = (((((((((EntityDef (HaskellName (packPTH "Question")))
                    (DBName (packPTH "question")))
                   (((((((FieldDef (HaskellName (packPTH "Id")))
                           (DBName (packPTH "id")))
                          ((FTTypeCon Nothing) (packPTH "QuestionId")))
                         SqlInt64)
                        [])
                       True)
                      ((ForeignRef (HaskellName (packPTH "Question")))
                         ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                  [])
                 [])
                [])
               [])
              [])
             (Data.Map.Internal.fromList []))
            False
      toPersistFields Question = []
      fromPersistValues [] = Right Question
      fromPersistValues x_a2A0V
        = (Left
             $ ((mappend (packPTH "Question: fromPersistValues failed on: "))
                  (pack $ (show x_a2A0V))))
      persistUniqueToFieldNames _
        = error "Degenerate case, should never happen"
      persistUniqueToValues _
        = error "Degenerate case, should never happen"
      persistUniqueKeys Question = []
      persistFieldDef QuestionId
        = ((((((FieldDef (HaskellName (packPTH "Id")))
                 (DBName (packPTH "id")))
                ((FTTypeCon Nothing) (packPTH "QuestionId")))
               SqlInt64)
              [])
             True)
            ((ForeignRef (HaskellName (packPTH "Question")))
               ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))
      persistIdField = QuestionId
      fieldLens QuestionId
        = (lensPTH entityKey)
            (\ Entity _ value_a2A0W key_a2A0X
               -> (Entity key_a2A0X) value_a2A0W)
    instance ToBackendKey MongoContext Question where
      toBackendKey = unQuestionKey
      fromBackendKey = QuestionKey
    data TestData
      = TestData {testDataName :: !Text,
                  testDataDescription :: !Text,
                  testDataCreationDate :: !UTCTime,
                  testDataPassingNumber :: !Int,
                  testDataQuestion :: !Text}
      deriving (Eq, Read, Show, Generic)
    type TestDataId = Key TestData
    instance PersistEntity TestData where
      type PersistEntityBackend TestData = MongoContext
      data Unique TestData
      newtype Key TestData
        = TestDataKey {unTestDataKey :: (BackendKey MongoContext)}
        deriving (Show,
                  Read,
                  Eq,
                  Ord,
                  path-pieces-0.2.1:Web.PathPieces.PathPiece,
                  http-api-data-0.3.7.2:Web.Internal.HttpApiData.ToHttpApiData,
                  http-api-data-0.3.7.2:Web.Internal.HttpApiData.FromHttpApiData,
                  PersistField,
                  persistent-2.8.1:Database.Persist.Sql.Class.PersistFieldSql,
                  ToJSON,
                  FromJSON)
      data EntityField TestData typ
        = typ ~ Key TestData => TestDataId |
          typ ~ Text => TestDataName |
          typ ~ Text => TestDataDescription |
          typ ~ UTCTime => TestDataCreationDate |
          typ ~ Int => TestDataPassingNumber |
          typ ~ Text => TestDataQuestion
      keyToValues
        = ((ghc-prim-0.5.1.1:GHC.Types.: [])
             . (toPersistValue . unTestDataKey))
      keyFromValues
        = ((fmap TestDataKey)
             . (fromPersistValue . Database.Persist.TH.headNote))
      entityDef _
        = (((((((((EntityDef (HaskellName (packPTH "TestData")))
                    (DBName (packPTH "test_data")))
                   (((((((FieldDef (HaskellName (packPTH "Id")))
                           (DBName (packPTH "id")))
                          ((FTTypeCon Nothing) (packPTH "TestDataId")))
                         SqlInt64)
                        [])
                       True)
                      ((ForeignRef (HaskellName (packPTH "TestData")))
                         ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                  [])
                 [((((((FieldDef (HaskellName (packPTH "name")))
                         (DBName (packPTH "name")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "description")))
                         (DBName (packPTH "description")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "creationDate")))
                         (DBName (packPTH "creation_date")))
                        ((FTTypeCon Nothing) (packPTH "UTCTime")))
                       SqlDayTime)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "passingNumber")))
                         (DBName (packPTH "passing_number")))
                        ((FTTypeCon Nothing) (packPTH "Int")))
                       SqlInt64)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "question")))
                         (DBName (packPTH "question")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference])
                [])
               [])
              [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
             (Data.Map.Internal.fromList []))
            False
      toPersistFields (TestData x_a2A11 x_a2A12 x_a2A13 x_a2A14 x_a2A15)
        = [SomePersistField x_a2A11, SomePersistField x_a2A12,
           SomePersistField x_a2A13, SomePersistField x_a2A14,
           SomePersistField x_a2A15]
      fromPersistValues
        [x1_a2A17, x2_a2A18, x3_a2A19, x4_a2A1a, x5_a2A1b]
        = TestData
            <$>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "name")))
                 . fromPersistValue)
                x1_a2A17
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "description")))
                 . fromPersistValue)
                x2_a2A18
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "creationDate")))
                 . fromPersistValue)
                x3_a2A19
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "passingNumber")))
                 . fromPersistValue)
                x4_a2A1a
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "question")))
                 . fromPersistValue)
                x5_a2A1b
      fromPersistValues x_a2A16
        = (Left
             $ ((mappend (packPTH "TestData: fromPersistValues failed on: "))
                  (pack $ (show x_a2A16))))
      persistUniqueToFieldNames _
        = error "Degenerate case, should never happen"
      persistUniqueToValues _
        = error "Degenerate case, should never happen"
      persistUniqueKeys
        (TestData _name_a2A1c
                  _description_a2A1d
                  _creationDate_a2A1e
                  _passingNumber_a2A1f
                  _question_a2A1g)
        = []
      persistFieldDef TestDataId
        = ((((((FieldDef (HaskellName (packPTH "Id")))
                 (DBName (packPTH "id")))
                ((FTTypeCon Nothing) (packPTH "TestDataId")))
               SqlInt64)
              [])
             True)
            ((ForeignRef (HaskellName (packPTH "TestData")))
               ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))
      persistFieldDef TestDataName
        = ((((((FieldDef (HaskellName (packPTH "name")))
                 (DBName (packPTH "name")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef TestDataDescription
        = ((((((FieldDef (HaskellName (packPTH "description")))
                 (DBName (packPTH "description")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef TestDataCreationDate
        = ((((((FieldDef (HaskellName (packPTH "creationDate")))
                 (DBName (packPTH "creation_date")))
                ((FTTypeCon Nothing) (packPTH "UTCTime")))
               SqlDayTime)
              [])
             True)
            NoReference
      persistFieldDef TestDataPassingNumber
        = ((((((FieldDef (HaskellName (packPTH "passingNumber")))
                 (DBName (packPTH "passing_number")))
                ((FTTypeCon Nothing) (packPTH "Int")))
               SqlInt64)
              [])
             True)
            NoReference
      persistFieldDef TestDataQuestion
        = ((((((FieldDef (HaskellName (packPTH "question")))
                 (DBName (packPTH "question")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistIdField = TestDataId
      fieldLens TestDataId
        = (lensPTH entityKey)
            (\ Entity _ value_a2A1h key_a2A1i
               -> (Entity key_a2A1i) value_a2A1h)
      fieldLens TestDataName
        = (lensPTH (testDataName . entityVal))
            (\ Entity key_a2A1j value_a2A1k x_a2A1l
               -> (Entity key_a2A1j) value_a2A1k {testDataName = x_a2A1l})
      fieldLens TestDataDescription
        = (lensPTH (testDataDescription . entityVal))
            (\ Entity key_a2A1j value_a2A1k x_a2A1l
               -> (Entity key_a2A1j) value_a2A1k {testDataDescription = x_a2A1l})
      fieldLens TestDataCreationDate
        = (lensPTH (testDataCreationDate . entityVal))
            (\ Entity key_a2A1j value_a2A1k x_a2A1l
               -> (Entity key_a2A1j) value_a2A1k {testDataCreationDate = x_a2A1l})
      fieldLens TestDataPassingNumber
        = (lensPTH (testDataPassingNumber . entityVal))
            (\ Entity key_a2A1j value_a2A1k x_a2A1l
               -> (Entity key_a2A1j)
                    value_a2A1k {testDataPassingNumber = x_a2A1l})
      fieldLens TestDataQuestion
        = (lensPTH (testDataQuestion . entityVal))
            (\ Entity key_a2A1j value_a2A1k x_a2A1l
               -> (Entity key_a2A1j) value_a2A1k {testDataQuestion = x_a2A1l})
    instance ToBackendKey MongoContext TestData where
      toBackendKey = unTestDataKey
      fromBackendKey = TestDataKey
    migrateAll :: persistent-2.8.1:Database.Persist.Sql.Types.Migration
    migrateAll
      = do let defs_a2A1m
                 = [(((((((((EntityDef (HaskellName (packPTH "Question")))
                              (DBName (packPTH "question")))
                             (((((((FieldDef (HaskellName (packPTH "Id")))
                                     (DBName (packPTH "id")))
                                    ((FTTypeCon Nothing) (packPTH "QuestionId")))
                                   SqlInt64)
                                  [])
                                 True)
                                ((ForeignRef (HaskellName (packPTH "Question")))
                                   ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                            [])
                           [])
                          [])
                         [])
                        [])
                       (Data.Map.Internal.fromList []))
                      False,
                    (((((((((EntityDef (HaskellName (packPTH "TestData")))
                              (DBName (packPTH "test_data")))
                             (((((((FieldDef (HaskellName (packPTH "Id")))
                                     (DBName (packPTH "id")))
                                    ((FTTypeCon Nothing) (packPTH "TestDataId")))
                                   SqlInt64)
                                  [])
                                 True)
                                ((ForeignRef (HaskellName (packPTH "TestData")))
                                   ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                            [])
                           [((((((FieldDef (HaskellName (packPTH "name")))
                                   (DBName (packPTH "name")))
                                  ((FTTypeCon Nothing) (packPTH "Text")))
                                 SqlString)
                                [])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "description")))
                                   (DBName (packPTH "description")))
                                  ((FTTypeCon Nothing) (packPTH "Text")))
                                 SqlString)
                                [])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "creationDate")))
                                   (DBName (packPTH "creation_date")))
                                  ((FTTypeCon Nothing) (packPTH "UTCTime")))
                                 SqlDayTime)
                                [])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "passingNumber")))
                                   (DBName (packPTH "passing_number")))
                                  ((FTTypeCon Nothing) (packPTH "Int")))
                                 SqlInt64)
                                [])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "question")))
                                   (DBName (packPTH "question")))
                                  ((FTTypeCon Nothing) (packPTH "Text")))
                                 SqlString)
                                [])
                               True)
                              NoReference])
                          [])
                         [])
                        [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
                       (Data.Map.Internal.fromList []))
                      False]
           (persistent-2.8.1:Database.Persist.Sql.Migration.migrate
              defs_a2A1m)
             ((((((((((EntityDef (HaskellName (packPTH "Question")))
                        (DBName (packPTH "question")))
                       (((((((FieldDef (HaskellName (packPTH "Id")))
                               (DBName (packPTH "id")))
                              ((FTTypeCon Nothing) (packPTH "QuestionId")))
                             SqlInt64)
                            [])
                           True)
                          ((ForeignRef (HaskellName (packPTH "Question")))
                             ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                      [])
                     [])
                    [])
                   [])
                  [])
                 (Data.Map.Internal.fromList []))
                False)
           (persistent-2.8.1:Database.Persist.Sql.Migration.migrate
              defs_a2A1m)
             ((((((((((EntityDef (HaskellName (packPTH "TestData")))
                        (DBName (packPTH "test_data")))
                       (((((((FieldDef (HaskellName (packPTH "Id")))
                               (DBName (packPTH "id")))
                              ((FTTypeCon Nothing) (packPTH "TestDataId")))
                             SqlInt64)
                            [])
                           True)
                          ((ForeignRef (HaskellName (packPTH "TestData")))
                             ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                      [])
                     [((((((FieldDef (HaskellName (packPTH "name")))
                             (DBName (packPTH "name")))
                            ((FTTypeCon Nothing) (packPTH "Text")))
                           SqlString)
                          [])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "description")))
                             (DBName (packPTH "description")))
                            ((FTTypeCon Nothing) (packPTH "Text")))
                           SqlString)
                          [])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "creationDate")))
                             (DBName (packPTH "creation_date")))
                            ((FTTypeCon Nothing) (packPTH "UTCTime")))
                           SqlDayTime)
                          [])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "passingNumber")))
                             (DBName (packPTH "passing_number")))
                            ((FTTypeCon Nothing) (packPTH "Int")))
                           SqlInt64)
                          [])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "question")))
                             (DBName (packPTH "question")))
                            ((FTTypeCon Nothing) (packPTH "Text")))
                           SqlString)
                          [])
                         True)
                        NoReference])
                    [])
                   [])
                  [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
                 (Data.Map.Internal.fromList []))
                False)
/home/nikita/Projects/labs/Databases/Course-Project/Server/src/Model/TestData.hs:(23,103)-(33,2): Splicing expression
    Language.Haskell.TH.Quote.quoteExp
      persistLowerCase
      "\n\
      \Question\n\
      \  \n\
      \TestData\n\
      \  name          Text\n\
      \  description   Text\n\
      \  creationDate  UTCTime\n\
      \  passingNumber Int\n\
      \  question      Text\n\
      \  deriving Eq Read Show Generic\n"
  ======>
    [(((((((((EntityDef (HaskellName (packPTH "Question")))
               (DBName (packPTH "question")))
              (((((((FieldDef (HaskellName (packPTH "Id")))
                      (DBName (packPTH "id")))
                     ((FTTypeCon Nothing) (packPTH "QuestionId")))
                    SqlInt64)
                   [])
                  True)
                 ((ForeignRef (HaskellName (packPTH "Question")))
                    ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
             [])
            [])
           [])
          [])
         [])
        (Data.Map.Internal.fromList []))
       False
       {entityFields = [],
        entityId = ((((((FieldDef (HaskellName (packPTH "Id")))
                          (DBName (packPTH "id")))
                         ((FTTypeCon Nothing) (packPTH "QuestionId")))
                        (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                           (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                       [])
                      True)
                     ((ForeignRef (HaskellName (packPTH "Question")))
                        ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))},
     (((((((((EntityDef (HaskellName (packPTH "TestData")))
               (DBName (packPTH "test_data")))
              (((((((FieldDef (HaskellName (packPTH "Id")))
                      (DBName (packPTH "id")))
                     ((FTTypeCon Nothing) (packPTH "TestDataId")))
                    SqlInt64)
                   [])
                  True)
                 ((ForeignRef (HaskellName (packPTH "TestData")))
                    ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
             [])
            [((((((FieldDef (HaskellName (packPTH "name")))
                    (DBName (packPTH "name")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for name")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "description")))
                    (DBName (packPTH "description")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for description")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "creationDate")))
                    (DBName (packPTH "creation_date")))
                   ((FTTypeCon Nothing) (packPTH "UTCTime")))
                  (SqlOther (packPTH "SqlType unset for creationDate")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "passingNumber")))
                    (DBName (packPTH "passing_number")))
                   ((FTTypeCon Nothing) (packPTH "Int")))
                  (SqlOther (packPTH "SqlType unset for passingNumber")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "question")))
                    (DBName (packPTH "question")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for question")))
                 [])
                True)
               NoReference])
           [])
          [])
         [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
        (Data.Map.Internal.fromList []))
       False
       {entityFields = [((((((FieldDef (HaskellName (packPTH "name")))
                               (DBName (packPTH "name")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "description")))
                               (DBName (packPTH "description")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "creationDate")))
                               (DBName (packPTH "creation_date")))
                              ((FTTypeCon Nothing) (packPTH "UTCTime")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy UTCTime)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "passingNumber")))
                               (DBName (packPTH "passing_number")))
                              ((FTTypeCon Nothing) (packPTH "Int")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Int)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "question")))
                               (DBName (packPTH "question")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference],
        entityId = ((((((FieldDef (HaskellName (packPTH "Id")))
                          (DBName (packPTH "id")))
                         ((FTTypeCon Nothing) (packPTH "TestDataId")))
                        (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                           (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                       [])
                      True)
                     ((ForeignRef (HaskellName (packPTH "TestData")))
                        ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))}]
/home/nikita/Projects/labs/Databases/Course-Project/Server/src/Model/TestData.hs:(23,1)-(33,2): Splicing declarations
    share
      [mkPersist (mkPersistSettings (ConT ''MongoContext)),
       mkMigrate "migrateAll"]
      ([(((((((((EntityDef (HaskellName (packPTH "Question")))
                  (DBName (packPTH "question")))
                 (((((((FieldDef (HaskellName (packPTH "Id")))
                         (DBName (packPTH "id")))
                        ((FTTypeCon Nothing) (packPTH "QuestionId")))
                       SqlInt64)
                      [])
                     True)
                    ((ForeignRef (HaskellName (packPTH "Question")))
                       ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                [])
               [])
              [])
             [])
            [])
           (Data.Map.Internal.fromList []))
          False
          {entityFields = [],
           entityId = ((((((FieldDef (HaskellName (packPTH "Id")))
                             (DBName (packPTH "id")))
                            ((FTTypeCon Nothing) (packPTH "QuestionId")))
                           (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                              (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                          [])
                         True)
                        ((ForeignRef (HaskellName (packPTH "Question")))
                           ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))},
        (((((((((EntityDef (HaskellName (packPTH "TestData")))
                  (DBName (packPTH "test_data")))
                 (((((((FieldDef (HaskellName (packPTH "Id")))
                         (DBName (packPTH "id")))
                        ((FTTypeCon Nothing) (packPTH "TestDataId")))
                       SqlInt64)
                      [])
                     True)
                    ((ForeignRef (HaskellName (packPTH "TestData")))
                       ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                [])
               [((((((FieldDef (HaskellName (packPTH "name")))
                       (DBName (packPTH "name")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for name")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "description")))
                       (DBName (packPTH "description")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for description")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "creationDate")))
                       (DBName (packPTH "creation_date")))
                      ((FTTypeCon Nothing) (packPTH "UTCTime")))
                     (SqlOther (packPTH "SqlType unset for creationDate")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "passingNumber")))
                       (DBName (packPTH "passing_number")))
                      ((FTTypeCon Nothing) (packPTH "Int")))
                     (SqlOther (packPTH "SqlType unset for passingNumber")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "question")))
                       (DBName (packPTH "question")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for question")))
                    [])
                   True)
                  NoReference])
              [])
             [])
            [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
           (Data.Map.Internal.fromList []))
          False
          {entityFields = [((((((FieldDef (HaskellName (packPTH "name")))
                                  (DBName (packPTH "name")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "description")))
                                  (DBName (packPTH "description")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "creationDate")))
                                  (DBName (packPTH "creation_date")))
                                 ((FTTypeCon Nothing) (packPTH "UTCTime")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy UTCTime)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "passingNumber")))
                                  (DBName (packPTH "passing_number")))
                                 ((FTTypeCon Nothing) (packPTH "Int")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Int)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "question")))
                                  (DBName (packPTH "question")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference],
           entityId = ((((((FieldDef (HaskellName (packPTH "Id")))
                             (DBName (packPTH "id")))
                            ((FTTypeCon Nothing) (packPTH "TestDataId")))
                           (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                              (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                          [])
                         True)
                        ((ForeignRef (HaskellName (packPTH "TestData")))
                           ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))}])
  ======>
    instance PersistField Question where
      toPersistValue
        = \ ent_a2Bho
            -> (PersistMap
                  $ ((Prelude.zip ((Prelude.map pack) []))
                       ((Prelude.map toPersistValue) $ (toPersistFields ent_a2Bho))))
      fromPersistValue
        = ((\ x_a2Bhp
              -> let
                   columns_a2Bhq
                     = unordered-containers-0.2.9.0:Data.HashMap.Strict.fromList x_a2Bhp
                 in
                   (fromPersistValues
                      $ ((Prelude.map
                            (\ name_a2Bhr
                               -> case
                                      (unordered-containers-0.2.9.0:Data.HashMap.Base.lookup
                                         (pack name_a2Bhr))
                                        columns_a2Bhq
                                  of
                                    Just v_a2Bhs -> v_a2Bhs
                                    Nothing -> PersistNull))
                           $ [])))
             <=< getPersistMap)
    instance persistent-2.8.1:Database.Persist.Sql.Class.PersistFieldSql Question where
      persistent-2.8.1:Database.Persist.Sql.Class.sqlType _ = SqlString
    instance PersistField TestData where
      toPersistValue
        = \ ent_a2Bht
            -> (PersistMap
                  $ ((Prelude.zip
                        ((Prelude.map pack)
                           ["name", "description", "creationDate", "passingNumber",
                            "question"]))
                       ((Prelude.map toPersistValue) $ (toPersistFields ent_a2Bht))))
      fromPersistValue
        = ((\ x_a2Bhu
              -> let
                   columns_a2Bhv
                     = unordered-containers-0.2.9.0:Data.HashMap.Strict.fromList x_a2Bhu
                 in
                   (fromPersistValues
                      $ ((Prelude.map
                            (\ name_a2Bhw
                               -> case
                                      (unordered-containers-0.2.9.0:Data.HashMap.Base.lookup
                                         (pack name_a2Bhw))
                                        columns_a2Bhv
                                  of
                                    Just v_a2Bhx -> v_a2Bhx
                                    Nothing -> PersistNull))
                           $ ["name", "description", "creationDate", "passingNumber",
                              "question"])))
             <=< getPersistMap)
    instance persistent-2.8.1:Database.Persist.Sql.Class.PersistFieldSql TestData where
      persistent-2.8.1:Database.Persist.Sql.Class.sqlType _ = SqlString
    data Question
      = Question {}
      deriving ()
    type QuestionId = Key Question
    instance PersistEntity Question where
      type PersistEntityBackend Question = MongoContext
      data Unique Question
      newtype Key Question
        = QuestionKey {unQuestionKey :: (BackendKey MongoContext)}
        deriving (Show,
                  Read,
                  Eq,
                  Ord,
                  path-pieces-0.2.1:Web.PathPieces.PathPiece,
                  http-api-data-0.3.7.2:Web.Internal.HttpApiData.ToHttpApiData,
                  http-api-data-0.3.7.2:Web.Internal.HttpApiData.FromHttpApiData,
                  PersistField,
                  persistent-2.8.1:Database.Persist.Sql.Class.PersistFieldSql,
                  ToJSON,
                  FromJSON)
      data EntityField Question typ = typ ~ Key Question => QuestionId
      keyToValues
        = ((ghc-prim-0.5.1.1:GHC.Types.: [])
             . (toPersistValue . unQuestionKey))
      keyFromValues
        = ((fmap QuestionKey)
             . (fromPersistValue . Database.Persist.TH.headNote))
      entityDef _
        = (((((((((EntityDef (HaskellName (packPTH "Question")))
                    (DBName (packPTH "question")))
                   (((((((FieldDef (HaskellName (packPTH "Id")))
                           (DBName (packPTH "id")))
                          ((FTTypeCon Nothing) (packPTH "QuestionId")))
                         SqlInt64)
                        [])
                       True)
                      ((ForeignRef (HaskellName (packPTH "Question")))
                         ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                  [])
                 [])
                [])
               [])
              [])
             (Data.Map.Internal.fromList []))
            False
      toPersistFields Question = []
      fromPersistValues [] = Right Question
      fromPersistValues x_a2Bhy
        = (Left
             $ ((mappend (packPTH "Question: fromPersistValues failed on: "))
                  (pack $ (show x_a2Bhy))))
      persistUniqueToFieldNames _
        = error "Degenerate case, should never happen"
      persistUniqueToValues _
        = error "Degenerate case, should never happen"
      persistUniqueKeys Question = []
      persistFieldDef QuestionId
        = ((((((FieldDef (HaskellName (packPTH "Id")))
                 (DBName (packPTH "id")))
                ((FTTypeCon Nothing) (packPTH "QuestionId")))
               SqlInt64)
              [])
             True)
            ((ForeignRef (HaskellName (packPTH "Question")))
               ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))
      persistIdField = QuestionId
      fieldLens QuestionId
        = (lensPTH entityKey)
            (\ Entity _ value_a2Bhz key_a2BhA
               -> (Entity key_a2BhA) value_a2Bhz)
    instance ToBackendKey MongoContext Question where
      toBackendKey = unQuestionKey
      fromBackendKey = QuestionKey
    data TestData
      = TestData {testDataName :: !Text,
                  testDataDescription :: !Text,
                  testDataCreationDate :: !UTCTime,
                  testDataPassingNumber :: !Int,
                  testDataQuestion :: !Text}
      deriving (Eq, Read, Show, Generic)
    type TestDataId = Key TestData
    instance PersistEntity TestData where
      type PersistEntityBackend TestData = MongoContext
      data Unique TestData
      newtype Key TestData
        = TestDataKey {unTestDataKey :: (BackendKey MongoContext)}
        deriving (Show,
                  Read,
                  Eq,
                  Ord,
                  path-pieces-0.2.1:Web.PathPieces.PathPiece,
                  http-api-data-0.3.7.2:Web.Internal.HttpApiData.ToHttpApiData,
                  http-api-data-0.3.7.2:Web.Internal.HttpApiData.FromHttpApiData,
                  PersistField,
                  persistent-2.8.1:Database.Persist.Sql.Class.PersistFieldSql,
                  ToJSON,
                  FromJSON)
      data EntityField TestData typ
        = typ ~ Key TestData => TestDataId |
          typ ~ Text => TestDataName |
          typ ~ Text => TestDataDescription |
          typ ~ UTCTime => TestDataCreationDate |
          typ ~ Int => TestDataPassingNumber |
          typ ~ Text => TestDataQuestion
      keyToValues
        = ((ghc-prim-0.5.1.1:GHC.Types.: [])
             . (toPersistValue . unTestDataKey))
      keyFromValues
        = ((fmap TestDataKey)
             . (fromPersistValue . Database.Persist.TH.headNote))
      entityDef _
        = (((((((((EntityDef (HaskellName (packPTH "TestData")))
                    (DBName (packPTH "test_data")))
                   (((((((FieldDef (HaskellName (packPTH "Id")))
                           (DBName (packPTH "id")))
                          ((FTTypeCon Nothing) (packPTH "TestDataId")))
                         SqlInt64)
                        [])
                       True)
                      ((ForeignRef (HaskellName (packPTH "TestData")))
                         ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                  [])
                 [((((((FieldDef (HaskellName (packPTH "name")))
                         (DBName (packPTH "name")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "description")))
                         (DBName (packPTH "description")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "creationDate")))
                         (DBName (packPTH "creation_date")))
                        ((FTTypeCon Nothing) (packPTH "UTCTime")))
                       SqlDayTime)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "passingNumber")))
                         (DBName (packPTH "passing_number")))
                        ((FTTypeCon Nothing) (packPTH "Int")))
                       SqlInt64)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "question")))
                         (DBName (packPTH "question")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference])
                [])
               [])
              [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
             (Data.Map.Internal.fromList []))
            False
      toPersistFields (TestData x_a2BhE x_a2BhF x_a2BhG x_a2BhH x_a2BhI)
        = [SomePersistField x_a2BhE, SomePersistField x_a2BhF,
           SomePersistField x_a2BhG, SomePersistField x_a2BhH,
           SomePersistField x_a2BhI]
      fromPersistValues
        [x1_a2BhK, x2_a2BhL, x3_a2BhM, x4_a2BhN, x5_a2BhO]
        = TestData
            <$>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "name")))
                 . fromPersistValue)
                x1_a2BhK
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "description")))
                 . fromPersistValue)
                x2_a2BhL
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "creationDate")))
                 . fromPersistValue)
                x3_a2BhM
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "passingNumber")))
                 . fromPersistValue)
                x4_a2BhN
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "question")))
                 . fromPersistValue)
                x5_a2BhO
      fromPersistValues x_a2BhJ
        = (Left
             $ ((mappend (packPTH "TestData: fromPersistValues failed on: "))
                  (pack $ (show x_a2BhJ))))
      persistUniqueToFieldNames _
        = error "Degenerate case, should never happen"
      persistUniqueToValues _
        = error "Degenerate case, should never happen"
      persistUniqueKeys
        (TestData _name_a2BhP
                  _description_a2BhQ
                  _creationDate_a2BhR
                  _passingNumber_a2BhS
                  _question_a2BhT)
        = []
      persistFieldDef TestDataId
        = ((((((FieldDef (HaskellName (packPTH "Id")))
                 (DBName (packPTH "id")))
                ((FTTypeCon Nothing) (packPTH "TestDataId")))
               SqlInt64)
              [])
             True)
            ((ForeignRef (HaskellName (packPTH "TestData")))
               ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))
      persistFieldDef TestDataName
        = ((((((FieldDef (HaskellName (packPTH "name")))
                 (DBName (packPTH "name")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef TestDataDescription
        = ((((((FieldDef (HaskellName (packPTH "description")))
                 (DBName (packPTH "description")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef TestDataCreationDate
        = ((((((FieldDef (HaskellName (packPTH "creationDate")))
                 (DBName (packPTH "creation_date")))
                ((FTTypeCon Nothing) (packPTH "UTCTime")))
               SqlDayTime)
              [])
             True)
            NoReference
      persistFieldDef TestDataPassingNumber
        = ((((((FieldDef (HaskellName (packPTH "passingNumber")))
                 (DBName (packPTH "passing_number")))
                ((FTTypeCon Nothing) (packPTH "Int")))
               SqlInt64)
              [])
             True)
            NoReference
      persistFieldDef TestDataQuestion
        = ((((((FieldDef (HaskellName (packPTH "question")))
                 (DBName (packPTH "question")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistIdField = TestDataId
      fieldLens TestDataId
        = (lensPTH entityKey)
            (\ Entity _ value_a2BhU key_a2BhV
               -> (Entity key_a2BhV) value_a2BhU)
      fieldLens TestDataName
        = (lensPTH (testDataName . entityVal))
            (\ Entity key_a2BhW value_a2BhX x_a2BhY
               -> (Entity key_a2BhW) value_a2BhX {testDataName = x_a2BhY})
      fieldLens TestDataDescription
        = (lensPTH (testDataDescription . entityVal))
            (\ Entity key_a2BhW value_a2BhX x_a2BhY
               -> (Entity key_a2BhW) value_a2BhX {testDataDescription = x_a2BhY})
      fieldLens TestDataCreationDate
        = (lensPTH (testDataCreationDate . entityVal))
            (\ Entity key_a2BhW value_a2BhX x_a2BhY
               -> (Entity key_a2BhW) value_a2BhX {testDataCreationDate = x_a2BhY})
      fieldLens TestDataPassingNumber
        = (lensPTH (testDataPassingNumber . entityVal))
            (\ Entity key_a2BhW value_a2BhX x_a2BhY
               -> (Entity key_a2BhW)
                    value_a2BhX {testDataPassingNumber = x_a2BhY})
      fieldLens TestDataQuestion
        = (lensPTH (testDataQuestion . entityVal))
            (\ Entity key_a2BhW value_a2BhX x_a2BhY
               -> (Entity key_a2BhW) value_a2BhX {testDataQuestion = x_a2BhY})
    instance ToBackendKey MongoContext TestData where
      toBackendKey = unTestDataKey
      fromBackendKey = TestDataKey
    migrateAll :: persistent-2.8.1:Database.Persist.Sql.Types.Migration
    migrateAll
      = do let defs_a2BhZ
                 = [(((((((((EntityDef (HaskellName (packPTH "Question")))
                              (DBName (packPTH "question")))
                             (((((((FieldDef (HaskellName (packPTH "Id")))
                                     (DBName (packPTH "id")))
                                    ((FTTypeCon Nothing) (packPTH "QuestionId")))
                                   SqlInt64)
                                  [])
                                 True)
                                ((ForeignRef (HaskellName (packPTH "Question")))
                                   ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                            [])
                           [])
                          [])
                         [])
                        [])
                       (Data.Map.Internal.fromList []))
                      False,
                    (((((((((EntityDef (HaskellName (packPTH "TestData")))
                              (DBName (packPTH "test_data")))
                             (((((((FieldDef (HaskellName (packPTH "Id")))
                                     (DBName (packPTH "id")))
                                    ((FTTypeCon Nothing) (packPTH "TestDataId")))
                                   SqlInt64)
                                  [])
                                 True)
                                ((ForeignRef (HaskellName (packPTH "TestData")))
                                   ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                            [])
                           [((((((FieldDef (HaskellName (packPTH "name")))
                                   (DBName (packPTH "name")))
                                  ((FTTypeCon Nothing) (packPTH "Text")))
                                 SqlString)
                                [])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "description")))
                                   (DBName (packPTH "description")))
                                  ((FTTypeCon Nothing) (packPTH "Text")))
                                 SqlString)
                                [])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "creationDate")))
                                   (DBName (packPTH "creation_date")))
                                  ((FTTypeCon Nothing) (packPTH "UTCTime")))
                                 SqlDayTime)
                                [])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "passingNumber")))
                                   (DBName (packPTH "passing_number")))
                                  ((FTTypeCon Nothing) (packPTH "Int")))
                                 SqlInt64)
                                [])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "question")))
                                   (DBName (packPTH "question")))
                                  ((FTTypeCon Nothing) (packPTH "Text")))
                                 SqlString)
                                [])
                               True)
                              NoReference])
                          [])
                         [])
                        [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
                       (Data.Map.Internal.fromList []))
                      False]
           (persistent-2.8.1:Database.Persist.Sql.Migration.migrate
              defs_a2BhZ)
             ((((((((((EntityDef (HaskellName (packPTH "Question")))
                        (DBName (packPTH "question")))
                       (((((((FieldDef (HaskellName (packPTH "Id")))
                               (DBName (packPTH "id")))
                              ((FTTypeCon Nothing) (packPTH "QuestionId")))
                             SqlInt64)
                            [])
                           True)
                          ((ForeignRef (HaskellName (packPTH "Question")))
                             ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                      [])
                     [])
                    [])
                   [])
                  [])
                 (Data.Map.Internal.fromList []))
                False)
           (persistent-2.8.1:Database.Persist.Sql.Migration.migrate
              defs_a2BhZ)
             ((((((((((EntityDef (HaskellName (packPTH "TestData")))
                        (DBName (packPTH "test_data")))
                       (((((((FieldDef (HaskellName (packPTH "Id")))
                               (DBName (packPTH "id")))
                              ((FTTypeCon Nothing) (packPTH "TestDataId")))
                             SqlInt64)
                            [])
                           True)
                          ((ForeignRef (HaskellName (packPTH "TestData")))
                             ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                      [])
                     [((((((FieldDef (HaskellName (packPTH "name")))
                             (DBName (packPTH "name")))
                            ((FTTypeCon Nothing) (packPTH "Text")))
                           SqlString)
                          [])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "description")))
                             (DBName (packPTH "description")))
                            ((FTTypeCon Nothing) (packPTH "Text")))
                           SqlString)
                          [])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "creationDate")))
                             (DBName (packPTH "creation_date")))
                            ((FTTypeCon Nothing) (packPTH "UTCTime")))
                           SqlDayTime)
                          [])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "passingNumber")))
                             (DBName (packPTH "passing_number")))
                            ((FTTypeCon Nothing) (packPTH "Int")))
                           SqlInt64)
                          [])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "question")))
                             (DBName (packPTH "question")))
                            ((FTTypeCon Nothing) (packPTH "Text")))
                           SqlString)
                          [])
                         True)
                        NoReference])
                    [])
                   [])
                  [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
                 (Data.Map.Internal.fromList []))
                False)
/home/nikita/Projects/labs/Databases/Course-Project/Server/src/Model/TestData.hs:(23,103)-(33,2): Splicing expression
    Language.Haskell.TH.Quote.quoteExp
      persistLowerCase
      "\n\
      \Question\n\
      \  \n\
      \TestData\n\
      \  name          Text\n\
      \  description   Text\n\
      \  creationDate  UTCTime\n\
      \  passingNumber Int\n\
      \  question      Text\n\
      \  deriving Eq Read Show Generic\n"
  ======>
    [(((((((((EntityDef (HaskellName (packPTH "Question")))
               (DBName (packPTH "question")))
              (((((((FieldDef (HaskellName (packPTH "Id")))
                      (DBName (packPTH "id")))
                     ((FTTypeCon Nothing) (packPTH "QuestionId")))
                    SqlInt64)
                   [])
                  True)
                 ((ForeignRef (HaskellName (packPTH "Question")))
                    ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
             [])
            [])
           [])
          [])
         [])
        (Data.Map.Internal.fromList []))
       False
       {entityFields = [],
        entityId = ((((((FieldDef (HaskellName (packPTH "Id")))
                          (DBName (packPTH "id")))
                         ((FTTypeCon Nothing) (packPTH "QuestionId")))
                        (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                           (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                       [])
                      True)
                     ((ForeignRef (HaskellName (packPTH "Question")))
                        ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))},
     (((((((((EntityDef (HaskellName (packPTH "TestData")))
               (DBName (packPTH "test_data")))
              (((((((FieldDef (HaskellName (packPTH "Id")))
                      (DBName (packPTH "id")))
                     ((FTTypeCon Nothing) (packPTH "TestDataId")))
                    SqlInt64)
                   [])
                  True)
                 ((ForeignRef (HaskellName (packPTH "TestData")))
                    ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
             [])
            [((((((FieldDef (HaskellName (packPTH "name")))
                    (DBName (packPTH "name")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for name")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "description")))
                    (DBName (packPTH "description")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for description")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "creationDate")))
                    (DBName (packPTH "creation_date")))
                   ((FTTypeCon Nothing) (packPTH "UTCTime")))
                  (SqlOther (packPTH "SqlType unset for creationDate")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "passingNumber")))
                    (DBName (packPTH "passing_number")))
                   ((FTTypeCon Nothing) (packPTH "Int")))
                  (SqlOther (packPTH "SqlType unset for passingNumber")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "question")))
                    (DBName (packPTH "question")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for question")))
                 [])
                True)
               NoReference])
           [])
          [])
         [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
        (Data.Map.Internal.fromList []))
       False
       {entityFields = [((((((FieldDef (HaskellName (packPTH "name")))
                               (DBName (packPTH "name")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "description")))
                               (DBName (packPTH "description")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "creationDate")))
                               (DBName (packPTH "creation_date")))
                              ((FTTypeCon Nothing) (packPTH "UTCTime")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy UTCTime)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "passingNumber")))
                               (DBName (packPTH "passing_number")))
                              ((FTTypeCon Nothing) (packPTH "Int")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Int)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "question")))
                               (DBName (packPTH "question")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference],
        entityId = ((((((FieldDef (HaskellName (packPTH "Id")))
                          (DBName (packPTH "id")))
                         ((FTTypeCon Nothing) (packPTH "TestDataId")))
                        (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                           (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                       [])
                      True)
                     ((ForeignRef (HaskellName (packPTH "TestData")))
                        ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))}]
/home/nikita/Projects/labs/Databases/Course-Project/Server/src/Model/TestData.hs:(23,1)-(33,2): Splicing declarations
    share
      [mkPersist (mkPersistSettings (ConT ''MongoContext)),
       mkMigrate "migrateAll"]
      ([(((((((((EntityDef (HaskellName (packPTH "Question")))
                  (DBName (packPTH "question")))
                 (((((((FieldDef (HaskellName (packPTH "Id")))
                         (DBName (packPTH "id")))
                        ((FTTypeCon Nothing) (packPTH "QuestionId")))
                       SqlInt64)
                      [])
                     True)
                    ((ForeignRef (HaskellName (packPTH "Question")))
                       ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                [])
               [])
              [])
             [])
            [])
           (Data.Map.Internal.fromList []))
          False
          {entityFields = [],
           entityId = ((((((FieldDef (HaskellName (packPTH "Id")))
                             (DBName (packPTH "id")))
                            ((FTTypeCon Nothing) (packPTH "QuestionId")))
                           (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                              (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                          [])
                         True)
                        ((ForeignRef (HaskellName (packPTH "Question")))
                           ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))},
        (((((((((EntityDef (HaskellName (packPTH "TestData")))
                  (DBName (packPTH "test_data")))
                 (((((((FieldDef (HaskellName (packPTH "Id")))
                         (DBName (packPTH "id")))
                        ((FTTypeCon Nothing) (packPTH "TestDataId")))
                       SqlInt64)
                      [])
                     True)
                    ((ForeignRef (HaskellName (packPTH "TestData")))
                       ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                [])
               [((((((FieldDef (HaskellName (packPTH "name")))
                       (DBName (packPTH "name")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for name")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "description")))
                       (DBName (packPTH "description")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for description")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "creationDate")))
                       (DBName (packPTH "creation_date")))
                      ((FTTypeCon Nothing) (packPTH "UTCTime")))
                     (SqlOther (packPTH "SqlType unset for creationDate")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "passingNumber")))
                       (DBName (packPTH "passing_number")))
                      ((FTTypeCon Nothing) (packPTH "Int")))
                     (SqlOther (packPTH "SqlType unset for passingNumber")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "question")))
                       (DBName (packPTH "question")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for question")))
                    [])
                   True)
                  NoReference])
              [])
             [])
            [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
           (Data.Map.Internal.fromList []))
          False
          {entityFields = [((((((FieldDef (HaskellName (packPTH "name")))
                                  (DBName (packPTH "name")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "description")))
                                  (DBName (packPTH "description")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "creationDate")))
                                  (DBName (packPTH "creation_date")))
                                 ((FTTypeCon Nothing) (packPTH "UTCTime")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy UTCTime)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "passingNumber")))
                                  (DBName (packPTH "passing_number")))
                                 ((FTTypeCon Nothing) (packPTH "Int")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Int)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "question")))
                                  (DBName (packPTH "question")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference],
           entityId = ((((((FieldDef (HaskellName (packPTH "Id")))
                             (DBName (packPTH "id")))
                            ((FTTypeCon Nothing) (packPTH "TestDataId")))
                           (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                              (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                          [])
                         True)
                        ((ForeignRef (HaskellName (packPTH "TestData")))
                           ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))}])
  ======>
    instance PersistField Question where
      toPersistValue
        = \ ent_a2Di3
            -> (PersistMap
                  $ ((Prelude.zip ((Prelude.map pack) []))
                       ((Prelude.map toPersistValue) $ (toPersistFields ent_a2Di3))))
      fromPersistValue
        = ((\ x_a2Di4
              -> let
                   columns_a2Di5
                     = unordered-containers-0.2.9.0:Data.HashMap.Strict.fromList x_a2Di4
                 in
                   (fromPersistValues
                      $ ((Prelude.map
                            (\ name_a2Di6
                               -> case
                                      (unordered-containers-0.2.9.0:Data.HashMap.Base.lookup
                                         (pack name_a2Di6))
                                        columns_a2Di5
                                  of
                                    Just v_a2Di7 -> v_a2Di7
                                    Nothing -> PersistNull))
                           $ [])))
             <=< getPersistMap)
    instance persistent-2.8.1:Database.Persist.Sql.Class.PersistFieldSql Question where
      persistent-2.8.1:Database.Persist.Sql.Class.sqlType _ = SqlString
    instance PersistField TestData where
      toPersistValue
        = \ ent_a2Di8
            -> (PersistMap
                  $ ((Prelude.zip
                        ((Prelude.map pack)
                           ["name", "description", "creationDate", "passingNumber",
                            "question"]))
                       ((Prelude.map toPersistValue) $ (toPersistFields ent_a2Di8))))
      fromPersistValue
        = ((\ x_a2Di9
              -> let
                   columns_a2Dia
                     = unordered-containers-0.2.9.0:Data.HashMap.Strict.fromList x_a2Di9
                 in
                   (fromPersistValues
                      $ ((Prelude.map
                            (\ name_a2Dib
                               -> case
                                      (unordered-containers-0.2.9.0:Data.HashMap.Base.lookup
                                         (pack name_a2Dib))
                                        columns_a2Dia
                                  of
                                    Just v_a2Dic -> v_a2Dic
                                    Nothing -> PersistNull))
                           $ ["name", "description", "creationDate", "passingNumber",
                              "question"])))
             <=< getPersistMap)
    instance persistent-2.8.1:Database.Persist.Sql.Class.PersistFieldSql TestData where
      persistent-2.8.1:Database.Persist.Sql.Class.sqlType _ = SqlString
    data Question
      = Question {}
      deriving ()
    type QuestionId = Key Question
    instance PersistEntity Question where
      type PersistEntityBackend Question = MongoContext
      data Unique Question
      newtype Key Question
        = QuestionKey {unQuestionKey :: (BackendKey MongoContext)}
        deriving (Show,
                  Read,
                  Eq,
                  Ord,
                  path-pieces-0.2.1:Web.PathPieces.PathPiece,
                  http-api-data-0.3.7.2:Web.Internal.HttpApiData.ToHttpApiData,
                  http-api-data-0.3.7.2:Web.Internal.HttpApiData.FromHttpApiData,
                  PersistField,
                  persistent-2.8.1:Database.Persist.Sql.Class.PersistFieldSql,
                  ToJSON,
                  FromJSON)
      data EntityField Question typ = typ ~ Key Question => QuestionId
      keyToValues
        = ((ghc-prim-0.5.1.1:GHC.Types.: [])
             . (toPersistValue . unQuestionKey))
      keyFromValues
        = ((fmap QuestionKey)
             . (fromPersistValue . Database.Persist.TH.headNote))
      entityDef _
        = (((((((((EntityDef (HaskellName (packPTH "Question")))
                    (DBName (packPTH "question")))
                   (((((((FieldDef (HaskellName (packPTH "Id")))
                           (DBName (packPTH "id")))
                          ((FTTypeCon Nothing) (packPTH "QuestionId")))
                         SqlInt64)
                        [])
                       True)
                      ((ForeignRef (HaskellName (packPTH "Question")))
                         ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                  [])
                 [])
                [])
               [])
              [])
             (Data.Map.Internal.fromList []))
            False
      toPersistFields Question = []
      fromPersistValues [] = Right Question
      fromPersistValues x_a2Did
        = (Left
             $ ((mappend (packPTH "Question: fromPersistValues failed on: "))
                  (pack $ (show x_a2Did))))
      persistUniqueToFieldNames _
        = error "Degenerate case, should never happen"
      persistUniqueToValues _
        = error "Degenerate case, should never happen"
      persistUniqueKeys Question = []
      persistFieldDef QuestionId
        = ((((((FieldDef (HaskellName (packPTH "Id")))
                 (DBName (packPTH "id")))
                ((FTTypeCon Nothing) (packPTH "QuestionId")))
               SqlInt64)
              [])
             True)
            ((ForeignRef (HaskellName (packPTH "Question")))
               ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))
      persistIdField = QuestionId
      fieldLens QuestionId
        = (lensPTH entityKey)
            (\ Entity _ value_a2Die key_a2Dif
               -> (Entity key_a2Dif) value_a2Die)
    instance ToBackendKey MongoContext Question where
      toBackendKey = unQuestionKey
      fromBackendKey = QuestionKey
    data TestData
      = TestData {testDataName :: !Text,
                  testDataDescription :: !Text,
                  testDataCreationDate :: !UTCTime,
                  testDataPassingNumber :: !Int,
                  testDataQuestion :: !Text}
      deriving (Eq, Read, Show, Generic)
    type TestDataId = Key TestData
    instance PersistEntity TestData where
      type PersistEntityBackend TestData = MongoContext
      data Unique TestData
      newtype Key TestData
        = TestDataKey {unTestDataKey :: (BackendKey MongoContext)}
        deriving (Show,
                  Read,
                  Eq,
                  Ord,
                  path-pieces-0.2.1:Web.PathPieces.PathPiece,
                  http-api-data-0.3.7.2:Web.Internal.HttpApiData.ToHttpApiData,
                  http-api-data-0.3.7.2:Web.Internal.HttpApiData.FromHttpApiData,
                  PersistField,
                  persistent-2.8.1:Database.Persist.Sql.Class.PersistFieldSql,
                  ToJSON,
                  FromJSON)
      data EntityField TestData typ
        = typ ~ Key TestData => TestDataId |
          typ ~ Text => TestDataName |
          typ ~ Text => TestDataDescription |
          typ ~ UTCTime => TestDataCreationDate |
          typ ~ Int => TestDataPassingNumber |
          typ ~ Text => TestDataQuestion
      keyToValues
        = ((ghc-prim-0.5.1.1:GHC.Types.: [])
             . (toPersistValue . unTestDataKey))
      keyFromValues
        = ((fmap TestDataKey)
             . (fromPersistValue . Database.Persist.TH.headNote))
      entityDef _
        = (((((((((EntityDef (HaskellName (packPTH "TestData")))
                    (DBName (packPTH "test_data")))
                   (((((((FieldDef (HaskellName (packPTH "Id")))
                           (DBName (packPTH "id")))
                          ((FTTypeCon Nothing) (packPTH "TestDataId")))
                         SqlInt64)
                        [])
                       True)
                      ((ForeignRef (HaskellName (packPTH "TestData")))
                         ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                  [])
                 [((((((FieldDef (HaskellName (packPTH "name")))
                         (DBName (packPTH "name")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "description")))
                         (DBName (packPTH "description")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "creationDate")))
                         (DBName (packPTH "creation_date")))
                        ((FTTypeCon Nothing) (packPTH "UTCTime")))
                       SqlDayTime)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "passingNumber")))
                         (DBName (packPTH "passing_number")))
                        ((FTTypeCon Nothing) (packPTH "Int")))
                       SqlInt64)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "question")))
                         (DBName (packPTH "question")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference])
                [])
               [])
              [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
             (Data.Map.Internal.fromList []))
            False
      toPersistFields (TestData x_a2Dij x_a2Dik x_a2Dil x_a2Dim x_a2Din)
        = [SomePersistField x_a2Dij, SomePersistField x_a2Dik,
           SomePersistField x_a2Dil, SomePersistField x_a2Dim,
           SomePersistField x_a2Din]
      fromPersistValues
        [x1_a2Dip, x2_a2Diq, x3_a2Dir, x4_a2Dis, x5_a2Dit]
        = TestData
            <$>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "name")))
                 . fromPersistValue)
                x1_a2Dip
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "description")))
                 . fromPersistValue)
                x2_a2Diq
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "creationDate")))
                 . fromPersistValue)
                x3_a2Dir
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "passingNumber")))
                 . fromPersistValue)
                x4_a2Dis
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "question")))
                 . fromPersistValue)
                x5_a2Dit
      fromPersistValues x_a2Dio
        = (Left
             $ ((mappend (packPTH "TestData: fromPersistValues failed on: "))
                  (pack $ (show x_a2Dio))))
      persistUniqueToFieldNames _
        = error "Degenerate case, should never happen"
      persistUniqueToValues _
        = error "Degenerate case, should never happen"
      persistUniqueKeys
        (TestData _name_a2Diu
                  _description_a2Div
                  _creationDate_a2Diw
                  _passingNumber_a2Dix
                  _question_a2Diy)
        = []
      persistFieldDef TestDataId
        = ((((((FieldDef (HaskellName (packPTH "Id")))
                 (DBName (packPTH "id")))
                ((FTTypeCon Nothing) (packPTH "TestDataId")))
               SqlInt64)
              [])
             True)
            ((ForeignRef (HaskellName (packPTH "TestData")))
               ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))
      persistFieldDef TestDataName
        = ((((((FieldDef (HaskellName (packPTH "name")))
                 (DBName (packPTH "name")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef TestDataDescription
        = ((((((FieldDef (HaskellName (packPTH "description")))
                 (DBName (packPTH "description")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef TestDataCreationDate
        = ((((((FieldDef (HaskellName (packPTH "creationDate")))
                 (DBName (packPTH "creation_date")))
                ((FTTypeCon Nothing) (packPTH "UTCTime")))
               SqlDayTime)
              [])
             True)
            NoReference
      persistFieldDef TestDataPassingNumber
        = ((((((FieldDef (HaskellName (packPTH "passingNumber")))
                 (DBName (packPTH "passing_number")))
                ((FTTypeCon Nothing) (packPTH "Int")))
               SqlInt64)
              [])
             True)
            NoReference
      persistFieldDef TestDataQuestion
        = ((((((FieldDef (HaskellName (packPTH "question")))
                 (DBName (packPTH "question")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistIdField = TestDataId
      fieldLens TestDataId
        = (lensPTH entityKey)
            (\ Entity _ value_a2Diz key_a2DiA
               -> (Entity key_a2DiA) value_a2Diz)
      fieldLens TestDataName
        = (lensPTH (testDataName . entityVal))
            (\ Entity key_a2DiB value_a2DiC x_a2DiD
               -> (Entity key_a2DiB) value_a2DiC {testDataName = x_a2DiD})
      fieldLens TestDataDescription
        = (lensPTH (testDataDescription . entityVal))
            (\ Entity key_a2DiB value_a2DiC x_a2DiD
               -> (Entity key_a2DiB) value_a2DiC {testDataDescription = x_a2DiD})
      fieldLens TestDataCreationDate
        = (lensPTH (testDataCreationDate . entityVal))
            (\ Entity key_a2DiB value_a2DiC x_a2DiD
               -> (Entity key_a2DiB) value_a2DiC {testDataCreationDate = x_a2DiD})
      fieldLens TestDataPassingNumber
        = (lensPTH (testDataPassingNumber . entityVal))
            (\ Entity key_a2DiB value_a2DiC x_a2DiD
               -> (Entity key_a2DiB)
                    value_a2DiC {testDataPassingNumber = x_a2DiD})
      fieldLens TestDataQuestion
        = (lensPTH (testDataQuestion . entityVal))
            (\ Entity key_a2DiB value_a2DiC x_a2DiD
               -> (Entity key_a2DiB) value_a2DiC {testDataQuestion = x_a2DiD})
    instance ToBackendKey MongoContext TestData where
      toBackendKey = unTestDataKey
      fromBackendKey = TestDataKey
    migrateAll :: persistent-2.8.1:Database.Persist.Sql.Types.Migration
    migrateAll
      = do let defs_a2DiE
                 = [(((((((((EntityDef (HaskellName (packPTH "Question")))
                              (DBName (packPTH "question")))
                             (((((((FieldDef (HaskellName (packPTH "Id")))
                                     (DBName (packPTH "id")))
                                    ((FTTypeCon Nothing) (packPTH "QuestionId")))
                                   SqlInt64)
                                  [])
                                 True)
                                ((ForeignRef (HaskellName (packPTH "Question")))
                                   ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                            [])
                           [])
                          [])
                         [])
                        [])
                       (Data.Map.Internal.fromList []))
                      False,
                    (((((((((EntityDef (HaskellName (packPTH "TestData")))
                              (DBName (packPTH "test_data")))
                             (((((((FieldDef (HaskellName (packPTH "Id")))
                                     (DBName (packPTH "id")))
                                    ((FTTypeCon Nothing) (packPTH "TestDataId")))
                                   SqlInt64)
                                  [])
                                 True)
                                ((ForeignRef (HaskellName (packPTH "TestData")))
                                   ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                            [])
                           [((((((FieldDef (HaskellName (packPTH "name")))
                                   (DBName (packPTH "name")))
                                  ((FTTypeCon Nothing) (packPTH "Text")))
                                 SqlString)
                                [])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "description")))
                                   (DBName (packPTH "description")))
                                  ((FTTypeCon Nothing) (packPTH "Text")))
                                 SqlString)
                                [])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "creationDate")))
                                   (DBName (packPTH "creation_date")))
                                  ((FTTypeCon Nothing) (packPTH "UTCTime")))
                                 SqlDayTime)
                                [])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "passingNumber")))
                                   (DBName (packPTH "passing_number")))
                                  ((FTTypeCon Nothing) (packPTH "Int")))
                                 SqlInt64)
                                [])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "question")))
                                   (DBName (packPTH "question")))
                                  ((FTTypeCon Nothing) (packPTH "Text")))
                                 SqlString)
                                [])
                               True)
                              NoReference])
                          [])
                         [])
                        [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
                       (Data.Map.Internal.fromList []))
                      False]
           (persistent-2.8.1:Database.Persist.Sql.Migration.migrate
              defs_a2DiE)
             ((((((((((EntityDef (HaskellName (packPTH "Question")))
                        (DBName (packPTH "question")))
                       (((((((FieldDef (HaskellName (packPTH "Id")))
                               (DBName (packPTH "id")))
                              ((FTTypeCon Nothing) (packPTH "QuestionId")))
                             SqlInt64)
                            [])
                           True)
                          ((ForeignRef (HaskellName (packPTH "Question")))
                             ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                      [])
                     [])
                    [])
                   [])
                  [])
                 (Data.Map.Internal.fromList []))
                False)
           (persistent-2.8.1:Database.Persist.Sql.Migration.migrate
              defs_a2DiE)
             ((((((((((EntityDef (HaskellName (packPTH "TestData")))
                        (DBName (packPTH "test_data")))
                       (((((((FieldDef (HaskellName (packPTH "Id")))
                               (DBName (packPTH "id")))
                              ((FTTypeCon Nothing) (packPTH "TestDataId")))
                             SqlInt64)
                            [])
                           True)
                          ((ForeignRef (HaskellName (packPTH "TestData")))
                             ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                      [])
                     [((((((FieldDef (HaskellName (packPTH "name")))
                             (DBName (packPTH "name")))
                            ((FTTypeCon Nothing) (packPTH "Text")))
                           SqlString)
                          [])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "description")))
                             (DBName (packPTH "description")))
                            ((FTTypeCon Nothing) (packPTH "Text")))
                           SqlString)
                          [])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "creationDate")))
                             (DBName (packPTH "creation_date")))
                            ((FTTypeCon Nothing) (packPTH "UTCTime")))
                           SqlDayTime)
                          [])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "passingNumber")))
                             (DBName (packPTH "passing_number")))
                            ((FTTypeCon Nothing) (packPTH "Int")))
                           SqlInt64)
                          [])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "question")))
                             (DBName (packPTH "question")))
                            ((FTTypeCon Nothing) (packPTH "Text")))
                           SqlString)
                          [])
                         True)
                        NoReference])
                    [])
                   [])
                  [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
                 (Data.Map.Internal.fromList []))
                False)
/home/nikita/Projects/labs/Databases/Course-Project/Server/src/Model/TestData.hs:(23,103)-(31,2): Splicing expression
    Language.Haskell.TH.Quote.quoteExp
      persistLowerCase
      "\n\
      \TestData\n\
      \  name          Text\n\
      \  description   Text\n\
      \  creationDate  UTCTime\n\
      \  passingNumber Int\n\
      \  question      Text\n\
      \  deriving Eq Read Show Generic\n"
  ======>
    [(((((((((EntityDef (HaskellName (packPTH "TestData")))
               (DBName (packPTH "test_data")))
              (((((((FieldDef (HaskellName (packPTH "Id")))
                      (DBName (packPTH "id")))
                     ((FTTypeCon Nothing) (packPTH "TestDataId")))
                    SqlInt64)
                   [])
                  True)
                 ((ForeignRef (HaskellName (packPTH "TestData")))
                    ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
             [])
            [((((((FieldDef (HaskellName (packPTH "name")))
                    (DBName (packPTH "name")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for name")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "description")))
                    (DBName (packPTH "description")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for description")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "creationDate")))
                    (DBName (packPTH "creation_date")))
                   ((FTTypeCon Nothing) (packPTH "UTCTime")))
                  (SqlOther (packPTH "SqlType unset for creationDate")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "passingNumber")))
                    (DBName (packPTH "passing_number")))
                   ((FTTypeCon Nothing) (packPTH "Int")))
                  (SqlOther (packPTH "SqlType unset for passingNumber")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "question")))
                    (DBName (packPTH "question")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for question")))
                 [])
                True)
               NoReference])
           [])
          [])
         [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
        (Data.Map.Internal.fromList []))
       False
       {entityFields = [((((((FieldDef (HaskellName (packPTH "name")))
                               (DBName (packPTH "name")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "description")))
                               (DBName (packPTH "description")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "creationDate")))
                               (DBName (packPTH "creation_date")))
                              ((FTTypeCon Nothing) (packPTH "UTCTime")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy UTCTime)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "passingNumber")))
                               (DBName (packPTH "passing_number")))
                              ((FTTypeCon Nothing) (packPTH "Int")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Int)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "question")))
                               (DBName (packPTH "question")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference],
        entityId = ((((((FieldDef (HaskellName (packPTH "Id")))
                          (DBName (packPTH "id")))
                         ((FTTypeCon Nothing) (packPTH "TestDataId")))
                        (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                           (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                       [])
                      True)
                     ((ForeignRef (HaskellName (packPTH "TestData")))
                        ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))}]
/home/nikita/Projects/labs/Databases/Course-Project/Server/src/Model/TestData.hs:(23,1)-(31,2): Splicing declarations
    share
      [mkPersist (mkPersistSettings (ConT ''MongoContext)),
       mkMigrate "migrateAll"]
      ([(((((((((EntityDef (HaskellName (packPTH "TestData")))
                  (DBName (packPTH "test_data")))
                 (((((((FieldDef (HaskellName (packPTH "Id")))
                         (DBName (packPTH "id")))
                        ((FTTypeCon Nothing) (packPTH "TestDataId")))
                       SqlInt64)
                      [])
                     True)
                    ((ForeignRef (HaskellName (packPTH "TestData")))
                       ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                [])
               [((((((FieldDef (HaskellName (packPTH "name")))
                       (DBName (packPTH "name")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for name")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "description")))
                       (DBName (packPTH "description")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for description")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "creationDate")))
                       (DBName (packPTH "creation_date")))
                      ((FTTypeCon Nothing) (packPTH "UTCTime")))
                     (SqlOther (packPTH "SqlType unset for creationDate")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "passingNumber")))
                       (DBName (packPTH "passing_number")))
                      ((FTTypeCon Nothing) (packPTH "Int")))
                     (SqlOther (packPTH "SqlType unset for passingNumber")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "question")))
                       (DBName (packPTH "question")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for question")))
                    [])
                   True)
                  NoReference])
              [])
             [])
            [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
           (Data.Map.Internal.fromList []))
          False
          {entityFields = [((((((FieldDef (HaskellName (packPTH "name")))
                                  (DBName (packPTH "name")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "description")))
                                  (DBName (packPTH "description")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "creationDate")))
                                  (DBName (packPTH "creation_date")))
                                 ((FTTypeCon Nothing) (packPTH "UTCTime")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy UTCTime)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "passingNumber")))
                                  (DBName (packPTH "passing_number")))
                                 ((FTTypeCon Nothing) (packPTH "Int")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Int)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "question")))
                                  (DBName (packPTH "question")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference],
           entityId = ((((((FieldDef (HaskellName (packPTH "Id")))
                             (DBName (packPTH "id")))
                            ((FTTypeCon Nothing) (packPTH "TestDataId")))
                           (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                              (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                          [])
                         True)
                        ((ForeignRef (HaskellName (packPTH "TestData")))
                           ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))}])
  ======>
    instance PersistField TestData where
      toPersistValue
        = \ ent_a2Ex4
            -> (PersistMap
                  $ ((Prelude.zip
                        ((Prelude.map pack)
                           ["name", "description", "creationDate", "passingNumber",
                            "question"]))
                       ((Prelude.map toPersistValue) $ (toPersistFields ent_a2Ex4))))
      fromPersistValue
        = ((\ x_a2Ex5
              -> let
                   columns_a2Ex6
                     = unordered-containers-0.2.9.0:Data.HashMap.Strict.fromList x_a2Ex5
                 in
                   (fromPersistValues
                      $ ((Prelude.map
                            (\ name_a2Ex7
                               -> case
                                      (unordered-containers-0.2.9.0:Data.HashMap.Base.lookup
                                         (pack name_a2Ex7))
                                        columns_a2Ex6
                                  of
                                    Just v_a2Ex8 -> v_a2Ex8
                                    Nothing -> PersistNull))
                           $ ["name", "description", "creationDate", "passingNumber",
                              "question"])))
             <=< getPersistMap)
    instance persistent-2.8.1:Database.Persist.Sql.Class.PersistFieldSql TestData where
      persistent-2.8.1:Database.Persist.Sql.Class.sqlType _ = SqlString
    data TestData
      = TestData {testDataName :: !Text,
                  testDataDescription :: !Text,
                  testDataCreationDate :: !UTCTime,
                  testDataPassingNumber :: !Int,
                  testDataQuestion :: !Text}
      deriving (Eq, Read, Show, Generic)
    type TestDataId = Key TestData
    instance PersistEntity TestData where
      type PersistEntityBackend TestData = MongoContext
      data Unique TestData
      newtype Key TestData
        = TestDataKey {unTestDataKey :: (BackendKey MongoContext)}
        deriving (Show,
                  Read,
                  Eq,
                  Ord,
                  path-pieces-0.2.1:Web.PathPieces.PathPiece,
                  http-api-data-0.3.7.2:Web.Internal.HttpApiData.ToHttpApiData,
                  http-api-data-0.3.7.2:Web.Internal.HttpApiData.FromHttpApiData,
                  PersistField,
                  persistent-2.8.1:Database.Persist.Sql.Class.PersistFieldSql,
                  ToJSON,
                  FromJSON)
      data EntityField TestData typ
        = typ ~ Key TestData => TestDataId |
          typ ~ Text => TestDataName |
          typ ~ Text => TestDataDescription |
          typ ~ UTCTime => TestDataCreationDate |
          typ ~ Int => TestDataPassingNumber |
          typ ~ Text => TestDataQuestion
      keyToValues
        = ((ghc-prim-0.5.1.1:GHC.Types.: [])
             . (toPersistValue . unTestDataKey))
      keyFromValues
        = ((fmap TestDataKey)
             . (fromPersistValue . Database.Persist.TH.headNote))
      entityDef _
        = (((((((((EntityDef (HaskellName (packPTH "TestData")))
                    (DBName (packPTH "test_data")))
                   (((((((FieldDef (HaskellName (packPTH "Id")))
                           (DBName (packPTH "id")))
                          ((FTTypeCon Nothing) (packPTH "TestDataId")))
                         SqlInt64)
                        [])
                       True)
                      ((ForeignRef (HaskellName (packPTH "TestData")))
                         ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                  [])
                 [((((((FieldDef (HaskellName (packPTH "name")))
                         (DBName (packPTH "name")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "description")))
                         (DBName (packPTH "description")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "creationDate")))
                         (DBName (packPTH "creation_date")))
                        ((FTTypeCon Nothing) (packPTH "UTCTime")))
                       SqlDayTime)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "passingNumber")))
                         (DBName (packPTH "passing_number")))
                        ((FTTypeCon Nothing) (packPTH "Int")))
                       SqlInt64)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "question")))
                         (DBName (packPTH "question")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference])
                [])
               [])
              [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
             (Data.Map.Internal.fromList []))
            False
      toPersistFields (TestData x_a2Ex9 x_a2Exa x_a2Exb x_a2Exc x_a2Exd)
        = [SomePersistField x_a2Ex9, SomePersistField x_a2Exa,
           SomePersistField x_a2Exb, SomePersistField x_a2Exc,
           SomePersistField x_a2Exd]
      fromPersistValues
        [x1_a2Exf, x2_a2Exg, x3_a2Exh, x4_a2Exi, x5_a2Exj]
        = TestData
            <$>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "name")))
                 . fromPersistValue)
                x1_a2Exf
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "description")))
                 . fromPersistValue)
                x2_a2Exg
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "creationDate")))
                 . fromPersistValue)
                x3_a2Exh
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "passingNumber")))
                 . fromPersistValue)
                x4_a2Exi
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "question")))
                 . fromPersistValue)
                x5_a2Exj
      fromPersistValues x_a2Exe
        = (Left
             $ ((mappend (packPTH "TestData: fromPersistValues failed on: "))
                  (pack $ (show x_a2Exe))))
      persistUniqueToFieldNames _
        = error "Degenerate case, should never happen"
      persistUniqueToValues _
        = error "Degenerate case, should never happen"
      persistUniqueKeys
        (TestData _name_a2Exk
                  _description_a2Exl
                  _creationDate_a2Exm
                  _passingNumber_a2Exn
                  _question_a2Exo)
        = []
      persistFieldDef TestDataId
        = ((((((FieldDef (HaskellName (packPTH "Id")))
                 (DBName (packPTH "id")))
                ((FTTypeCon Nothing) (packPTH "TestDataId")))
               SqlInt64)
              [])
             True)
            ((ForeignRef (HaskellName (packPTH "TestData")))
               ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))
      persistFieldDef TestDataName
        = ((((((FieldDef (HaskellName (packPTH "name")))
                 (DBName (packPTH "name")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef TestDataDescription
        = ((((((FieldDef (HaskellName (packPTH "description")))
                 (DBName (packPTH "description")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef TestDataCreationDate
        = ((((((FieldDef (HaskellName (packPTH "creationDate")))
                 (DBName (packPTH "creation_date")))
                ((FTTypeCon Nothing) (packPTH "UTCTime")))
               SqlDayTime)
              [])
             True)
            NoReference
      persistFieldDef TestDataPassingNumber
        = ((((((FieldDef (HaskellName (packPTH "passingNumber")))
                 (DBName (packPTH "passing_number")))
                ((FTTypeCon Nothing) (packPTH "Int")))
               SqlInt64)
              [])
             True)
            NoReference
      persistFieldDef TestDataQuestion
        = ((((((FieldDef (HaskellName (packPTH "question")))
                 (DBName (packPTH "question")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistIdField = TestDataId
      fieldLens TestDataId
        = (lensPTH entityKey)
            (\ Entity _ value_a2Exp key_a2Exq
               -> (Entity key_a2Exq) value_a2Exp)
      fieldLens TestDataName
        = (lensPTH (testDataName . entityVal))
            (\ Entity key_a2Exr value_a2Exs x_a2Ext
               -> (Entity key_a2Exr) value_a2Exs {testDataName = x_a2Ext})
      fieldLens TestDataDescription
        = (lensPTH (testDataDescription . entityVal))
            (\ Entity key_a2Exr value_a2Exs x_a2Ext
               -> (Entity key_a2Exr) value_a2Exs {testDataDescription = x_a2Ext})
      fieldLens TestDataCreationDate
        = (lensPTH (testDataCreationDate . entityVal))
            (\ Entity key_a2Exr value_a2Exs x_a2Ext
               -> (Entity key_a2Exr) value_a2Exs {testDataCreationDate = x_a2Ext})
      fieldLens TestDataPassingNumber
        = (lensPTH (testDataPassingNumber . entityVal))
            (\ Entity key_a2Exr value_a2Exs x_a2Ext
               -> (Entity key_a2Exr)
                    value_a2Exs {testDataPassingNumber = x_a2Ext})
      fieldLens TestDataQuestion
        = (lensPTH (testDataQuestion . entityVal))
            (\ Entity key_a2Exr value_a2Exs x_a2Ext
               -> (Entity key_a2Exr) value_a2Exs {testDataQuestion = x_a2Ext})
    instance ToBackendKey MongoContext TestData where
      toBackendKey = unTestDataKey
      fromBackendKey = TestDataKey
    migrateAll :: persistent-2.8.1:Database.Persist.Sql.Types.Migration
    migrateAll
      = do let defs_a2Exu
                 = [(((((((((EntityDef (HaskellName (packPTH "TestData")))
                              (DBName (packPTH "test_data")))
                             (((((((FieldDef (HaskellName (packPTH "Id")))
                                     (DBName (packPTH "id")))
                                    ((FTTypeCon Nothing) (packPTH "TestDataId")))
                                   SqlInt64)
                                  [])
                                 True)
                                ((ForeignRef (HaskellName (packPTH "TestData")))
                                   ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                            [])
                           [((((((FieldDef (HaskellName (packPTH "name")))
                                   (DBName (packPTH "name")))
                                  ((FTTypeCon Nothing) (packPTH "Text")))
                                 SqlString)
                                [])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "description")))
                                   (DBName (packPTH "description")))
                                  ((FTTypeCon Nothing) (packPTH "Text")))
                                 SqlString)
                                [])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "creationDate")))
                                   (DBName (packPTH "creation_date")))
                                  ((FTTypeCon Nothing) (packPTH "UTCTime")))
                                 SqlDayTime)
                                [])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "passingNumber")))
                                   (DBName (packPTH "passing_number")))
                                  ((FTTypeCon Nothing) (packPTH "Int")))
                                 SqlInt64)
                                [])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "question")))
                                   (DBName (packPTH "question")))
                                  ((FTTypeCon Nothing) (packPTH "Text")))
                                 SqlString)
                                [])
                               True)
                              NoReference])
                          [])
                         [])
                        [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
                       (Data.Map.Internal.fromList []))
                      False]
           (persistent-2.8.1:Database.Persist.Sql.Migration.migrate
              defs_a2Exu)
             ((((((((((EntityDef (HaskellName (packPTH "TestData")))
                        (DBName (packPTH "test_data")))
                       (((((((FieldDef (HaskellName (packPTH "Id")))
                               (DBName (packPTH "id")))
                              ((FTTypeCon Nothing) (packPTH "TestDataId")))
                             SqlInt64)
                            [])
                           True)
                          ((ForeignRef (HaskellName (packPTH "TestData")))
                             ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                      [])
                     [((((((FieldDef (HaskellName (packPTH "name")))
                             (DBName (packPTH "name")))
                            ((FTTypeCon Nothing) (packPTH "Text")))
                           SqlString)
                          [])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "description")))
                             (DBName (packPTH "description")))
                            ((FTTypeCon Nothing) (packPTH "Text")))
                           SqlString)
                          [])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "creationDate")))
                             (DBName (packPTH "creation_date")))
                            ((FTTypeCon Nothing) (packPTH "UTCTime")))
                           SqlDayTime)
                          [])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "passingNumber")))
                             (DBName (packPTH "passing_number")))
                            ((FTTypeCon Nothing) (packPTH "Int")))
                           SqlInt64)
                          [])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "question")))
                             (DBName (packPTH "question")))
                            ((FTTypeCon Nothing) (packPTH "Text")))
                           SqlString)
                          [])
                         True)
                        NoReference])
                    [])
                   [])
                  [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
                 (Data.Map.Internal.fromList []))
                False)
/home/nikita/Projects/labs/Databases/Course-Project/Server/src/Model/TestData.hs:(23,103)-(31,2): Splicing expression
    Language.Haskell.TH.Quote.quoteExp
      persistLowerCase
      "\n\
      \TestData\n\
      \  name          Text\n\
      \  description   Text\n\
      \  creationDate  UTCTime\n\
      \  passingNumber Int\n\
      \  question      Text\n\
      \  deriving Eq Read Show Generic\n"
  ======>
    [(((((((((EntityDef (HaskellName (packPTH "TestData")))
               (DBName (packPTH "test_data")))
              (((((((FieldDef (HaskellName (packPTH "Id")))
                      (DBName (packPTH "id")))
                     ((FTTypeCon Nothing) (packPTH "TestDataId")))
                    SqlInt64)
                   [])
                  True)
                 ((ForeignRef (HaskellName (packPTH "TestData")))
                    ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
             [])
            [((((((FieldDef (HaskellName (packPTH "name")))
                    (DBName (packPTH "name")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for name")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "description")))
                    (DBName (packPTH "description")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for description")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "creationDate")))
                    (DBName (packPTH "creation_date")))
                   ((FTTypeCon Nothing) (packPTH "UTCTime")))
                  (SqlOther (packPTH "SqlType unset for creationDate")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "passingNumber")))
                    (DBName (packPTH "passing_number")))
                   ((FTTypeCon Nothing) (packPTH "Int")))
                  (SqlOther (packPTH "SqlType unset for passingNumber")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "question")))
                    (DBName (packPTH "question")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for question")))
                 [])
                True)
               NoReference])
           [])
          [])
         [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
        (Data.Map.Internal.fromList []))
       False
       {entityFields = [((((((FieldDef (HaskellName (packPTH "name")))
                               (DBName (packPTH "name")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "description")))
                               (DBName (packPTH "description")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "creationDate")))
                               (DBName (packPTH "creation_date")))
                              ((FTTypeCon Nothing) (packPTH "UTCTime")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy UTCTime)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "passingNumber")))
                               (DBName (packPTH "passing_number")))
                              ((FTTypeCon Nothing) (packPTH "Int")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Int)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "question")))
                               (DBName (packPTH "question")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference],
        entityId = ((((((FieldDef (HaskellName (packPTH "Id")))
                          (DBName (packPTH "id")))
                         ((FTTypeCon Nothing) (packPTH "TestDataId")))
                        (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                           (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                       [])
                      True)
                     ((ForeignRef (HaskellName (packPTH "TestData")))
                        ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))}]
/home/nikita/Projects/labs/Databases/Course-Project/Server/src/Model/TestData.hs:(23,1)-(31,2): Splicing declarations
    share
      [mkPersist (mkPersistSettings (ConT ''MongoContext)),
       mkMigrate "migrateAll"]
      ([(((((((((EntityDef (HaskellName (packPTH "TestData")))
                  (DBName (packPTH "test_data")))
                 (((((((FieldDef (HaskellName (packPTH "Id")))
                         (DBName (packPTH "id")))
                        ((FTTypeCon Nothing) (packPTH "TestDataId")))
                       SqlInt64)
                      [])
                     True)
                    ((ForeignRef (HaskellName (packPTH "TestData")))
                       ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                [])
               [((((((FieldDef (HaskellName (packPTH "name")))
                       (DBName (packPTH "name")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for name")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "description")))
                       (DBName (packPTH "description")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for description")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "creationDate")))
                       (DBName (packPTH "creation_date")))
                      ((FTTypeCon Nothing) (packPTH "UTCTime")))
                     (SqlOther (packPTH "SqlType unset for creationDate")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "passingNumber")))
                       (DBName (packPTH "passing_number")))
                      ((FTTypeCon Nothing) (packPTH "Int")))
                     (SqlOther (packPTH "SqlType unset for passingNumber")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "question")))
                       (DBName (packPTH "question")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for question")))
                    [])
                   True)
                  NoReference])
              [])
             [])
            [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
           (Data.Map.Internal.fromList []))
          False
          {entityFields = [((((((FieldDef (HaskellName (packPTH "name")))
                                  (DBName (packPTH "name")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "description")))
                                  (DBName (packPTH "description")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "creationDate")))
                                  (DBName (packPTH "creation_date")))
                                 ((FTTypeCon Nothing) (packPTH "UTCTime")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy UTCTime)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "passingNumber")))
                                  (DBName (packPTH "passing_number")))
                                 ((FTTypeCon Nothing) (packPTH "Int")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Int)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "question")))
                                  (DBName (packPTH "question")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference],
           entityId = ((((((FieldDef (HaskellName (packPTH "Id")))
                             (DBName (packPTH "id")))
                            ((FTTypeCon Nothing) (packPTH "TestDataId")))
                           (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                              (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                          [])
                         True)
                        ((ForeignRef (HaskellName (packPTH "TestData")))
                           ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))}])
  ======>
    instance PersistField TestData where
      toPersistValue
        = \ ent_a2FYz
            -> (PersistMap
                  $ ((Prelude.zip
                        ((Prelude.map pack)
                           ["name", "description", "creationDate", "passingNumber",
                            "question"]))
                       ((Prelude.map toPersistValue) $ (toPersistFields ent_a2FYz))))
      fromPersistValue
        = ((\ x_a2FYA
              -> let
                   columns_a2FYB
                     = unordered-containers-0.2.9.0:Data.HashMap.Strict.fromList x_a2FYA
                 in
                   (fromPersistValues
                      $ ((Prelude.map
                            (\ name_a2FYC
                               -> case
                                      (unordered-containers-0.2.9.0:Data.HashMap.Base.lookup
                                         (pack name_a2FYC))
                                        columns_a2FYB
                                  of
                                    Just v_a2FYD -> v_a2FYD
                                    Nothing -> PersistNull))
                           $ ["name", "description", "creationDate", "passingNumber",
                              "question"])))
             <=< getPersistMap)
    instance persistent-2.8.1:Database.Persist.Sql.Class.PersistFieldSql TestData where
      persistent-2.8.1:Database.Persist.Sql.Class.sqlType _ = SqlString
    data TestData
      = TestData {testDataName :: !Text,
                  testDataDescription :: !Text,
                  testDataCreationDate :: !UTCTime,
                  testDataPassingNumber :: !Int,
                  testDataQuestion :: !Text}
      deriving (Eq, Read, Show, Generic)
    type TestDataId = Key TestData
    instance PersistEntity TestData where
      type PersistEntityBackend TestData = MongoContext
      data Unique TestData
      newtype Key TestData
        = TestDataKey {unTestDataKey :: (BackendKey MongoContext)}
        deriving (Show,
                  Read,
                  Eq,
                  Ord,
                  path-pieces-0.2.1:Web.PathPieces.PathPiece,
                  http-api-data-0.3.7.2:Web.Internal.HttpApiData.ToHttpApiData,
                  http-api-data-0.3.7.2:Web.Internal.HttpApiData.FromHttpApiData,
                  PersistField,
                  persistent-2.8.1:Database.Persist.Sql.Class.PersistFieldSql,
                  ToJSON,
                  FromJSON)
      data EntityField TestData typ
        = typ ~ Key TestData => TestDataId |
          typ ~ Text => TestDataName |
          typ ~ Text => TestDataDescription |
          typ ~ UTCTime => TestDataCreationDate |
          typ ~ Int => TestDataPassingNumber |
          typ ~ Text => TestDataQuestion
      keyToValues
        = ((ghc-prim-0.5.1.1:GHC.Types.: [])
             . (toPersistValue . unTestDataKey))
      keyFromValues
        = ((fmap TestDataKey)
             . (fromPersistValue . Database.Persist.TH.headNote))
      entityDef _
        = (((((((((EntityDef (HaskellName (packPTH "TestData")))
                    (DBName (packPTH "test_data")))
                   (((((((FieldDef (HaskellName (packPTH "Id")))
                           (DBName (packPTH "id")))
                          ((FTTypeCon Nothing) (packPTH "TestDataId")))
                         SqlInt64)
                        [])
                       True)
                      ((ForeignRef (HaskellName (packPTH "TestData")))
                         ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                  [])
                 [((((((FieldDef (HaskellName (packPTH "name")))
                         (DBName (packPTH "name")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "description")))
                         (DBName (packPTH "description")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "creationDate")))
                         (DBName (packPTH "creation_date")))
                        ((FTTypeCon Nothing) (packPTH "UTCTime")))
                       SqlDayTime)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "passingNumber")))
                         (DBName (packPTH "passing_number")))
                        ((FTTypeCon Nothing) (packPTH "Int")))
                       SqlInt64)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "question")))
                         (DBName (packPTH "question")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference])
                [])
               [])
              [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
             (Data.Map.Internal.fromList []))
            False
      toPersistFields (TestData x_a2FYE x_a2FYF x_a2FYG x_a2FYH x_a2FYI)
        = [SomePersistField x_a2FYE, SomePersistField x_a2FYF,
           SomePersistField x_a2FYG, SomePersistField x_a2FYH,
           SomePersistField x_a2FYI]
      fromPersistValues
        [x1_a2FYK, x2_a2FYL, x3_a2FYM, x4_a2FYN, x5_a2FYO]
        = TestData
            <$>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "name")))
                 . fromPersistValue)
                x1_a2FYK
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "description")))
                 . fromPersistValue)
                x2_a2FYL
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "creationDate")))
                 . fromPersistValue)
                x3_a2FYM
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "passingNumber")))
                 . fromPersistValue)
                x4_a2FYN
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "question")))
                 . fromPersistValue)
                x5_a2FYO
      fromPersistValues x_a2FYJ
        = (Left
             $ ((mappend (packPTH "TestData: fromPersistValues failed on: "))
                  (pack $ (show x_a2FYJ))))
      persistUniqueToFieldNames _
        = error "Degenerate case, should never happen"
      persistUniqueToValues _
        = error "Degenerate case, should never happen"
      persistUniqueKeys
        (TestData _name_a2FYP
                  _description_a2FYQ
                  _creationDate_a2FYR
                  _passingNumber_a2FYS
                  _question_a2FYT)
        = []
      persistFieldDef TestDataId
        = ((((((FieldDef (HaskellName (packPTH "Id")))
                 (DBName (packPTH "id")))
                ((FTTypeCon Nothing) (packPTH "TestDataId")))
               SqlInt64)
              [])
             True)
            ((ForeignRef (HaskellName (packPTH "TestData")))
               ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))
      persistFieldDef TestDataName
        = ((((((FieldDef (HaskellName (packPTH "name")))
                 (DBName (packPTH "name")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef TestDataDescription
        = ((((((FieldDef (HaskellName (packPTH "description")))
                 (DBName (packPTH "description")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef TestDataCreationDate
        = ((((((FieldDef (HaskellName (packPTH "creationDate")))
                 (DBName (packPTH "creation_date")))
                ((FTTypeCon Nothing) (packPTH "UTCTime")))
               SqlDayTime)
              [])
             True)
            NoReference
      persistFieldDef TestDataPassingNumber
        = ((((((FieldDef (HaskellName (packPTH "passingNumber")))
                 (DBName (packPTH "passing_number")))
                ((FTTypeCon Nothing) (packPTH "Int")))
               SqlInt64)
              [])
             True)
            NoReference
      persistFieldDef TestDataQuestion
        = ((((((FieldDef (HaskellName (packPTH "question")))
                 (DBName (packPTH "question")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistIdField = TestDataId
      fieldLens TestDataId
        = (lensPTH entityKey)
            (\ Entity _ value_a2FYU key_a2FYV
               -> (Entity key_a2FYV) value_a2FYU)
      fieldLens TestDataName
        = (lensPTH (testDataName . entityVal))
            (\ Entity key_a2FYW value_a2FYX x_a2FYY
               -> (Entity key_a2FYW) value_a2FYX {testDataName = x_a2FYY})
      fieldLens TestDataDescription
        = (lensPTH (testDataDescription . entityVal))
            (\ Entity key_a2FYW value_a2FYX x_a2FYY
               -> (Entity key_a2FYW) value_a2FYX {testDataDescription = x_a2FYY})
      fieldLens TestDataCreationDate
        = (lensPTH (testDataCreationDate . entityVal))
            (\ Entity key_a2FYW value_a2FYX x_a2FYY
               -> (Entity key_a2FYW) value_a2FYX {testDataCreationDate = x_a2FYY})
      fieldLens TestDataPassingNumber
        = (lensPTH (testDataPassingNumber . entityVal))
            (\ Entity key_a2FYW value_a2FYX x_a2FYY
               -> (Entity key_a2FYW)
                    value_a2FYX {testDataPassingNumber = x_a2FYY})
      fieldLens TestDataQuestion
        = (lensPTH (testDataQuestion . entityVal))
            (\ Entity key_a2FYW value_a2FYX x_a2FYY
               -> (Entity key_a2FYW) value_a2FYX {testDataQuestion = x_a2FYY})
    instance ToBackendKey MongoContext TestData where
      toBackendKey = unTestDataKey
      fromBackendKey = TestDataKey
    migrateAll :: persistent-2.8.1:Database.Persist.Sql.Types.Migration
    migrateAll
      = do let defs_a2FYZ
                 = [(((((((((EntityDef (HaskellName (packPTH "TestData")))
                              (DBName (packPTH "test_data")))
                             (((((((FieldDef (HaskellName (packPTH "Id")))
                                     (DBName (packPTH "id")))
                                    ((FTTypeCon Nothing) (packPTH "TestDataId")))
                                   SqlInt64)
                                  [])
                                 True)
                                ((ForeignRef (HaskellName (packPTH "TestData")))
                                   ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                            [])
                           [((((((FieldDef (HaskellName (packPTH "name")))
                                   (DBName (packPTH "name")))
                                  ((FTTypeCon Nothing) (packPTH "Text")))
                                 SqlString)
                                [])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "description")))
                                   (DBName (packPTH "description")))
                                  ((FTTypeCon Nothing) (packPTH "Text")))
                                 SqlString)
                                [])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "creationDate")))
                                   (DBName (packPTH "creation_date")))
                                  ((FTTypeCon Nothing) (packPTH "UTCTime")))
                                 SqlDayTime)
                                [])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "passingNumber")))
                                   (DBName (packPTH "passing_number")))
                                  ((FTTypeCon Nothing) (packPTH "Int")))
                                 SqlInt64)
                                [])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "question")))
                                   (DBName (packPTH "question")))
                                  ((FTTypeCon Nothing) (packPTH "Text")))
                                 SqlString)
                                [])
                               True)
                              NoReference])
                          [])
                         [])
                        [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
                       (Data.Map.Internal.fromList []))
                      False]
           (persistent-2.8.1:Database.Persist.Sql.Migration.migrate
              defs_a2FYZ)
             ((((((((((EntityDef (HaskellName (packPTH "TestData")))
                        (DBName (packPTH "test_data")))
                       (((((((FieldDef (HaskellName (packPTH "Id")))
                               (DBName (packPTH "id")))
                              ((FTTypeCon Nothing) (packPTH "TestDataId")))
                             SqlInt64)
                            [])
                           True)
                          ((ForeignRef (HaskellName (packPTH "TestData")))
                             ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                      [])
                     [((((((FieldDef (HaskellName (packPTH "name")))
                             (DBName (packPTH "name")))
                            ((FTTypeCon Nothing) (packPTH "Text")))
                           SqlString)
                          [])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "description")))
                             (DBName (packPTH "description")))
                            ((FTTypeCon Nothing) (packPTH "Text")))
                           SqlString)
                          [])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "creationDate")))
                             (DBName (packPTH "creation_date")))
                            ((FTTypeCon Nothing) (packPTH "UTCTime")))
                           SqlDayTime)
                          [])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "passingNumber")))
                             (DBName (packPTH "passing_number")))
                            ((FTTypeCon Nothing) (packPTH "Int")))
                           SqlInt64)
                          [])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "question")))
                             (DBName (packPTH "question")))
                            ((FTTypeCon Nothing) (packPTH "Text")))
                           SqlString)
                          [])
                         True)
                        NoReference])
                    [])
                   [])
                  [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
                 (Data.Map.Internal.fromList []))
                False)
