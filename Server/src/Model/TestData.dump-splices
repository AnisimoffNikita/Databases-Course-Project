/home/nikita/Projects/labs/Databases/Course-Project/Server/src/Model/TestData.hs:(23,103)-(33,2): Splicing expression
    Language.Haskell.TH.Quote.quoteExp
      persistLowerCase
      "\n\
      \Question\n\
      \  \n\
      \TestData\n\
      \  name          Text\n\
      \  description   Text\n\
      \  creationDate  UTCTime\n\
      \  passingNumber Int\n\
      \  question      Text\n\
      \  deriving Eq Read Show Generic\n"
  ======>
    [(((((((((EntityDef (HaskellName (packPTH "Question")))
               (DBName (packPTH "question")))
              (((((((FieldDef (HaskellName (packPTH "Id")))
                      (DBName (packPTH "id")))
                     ((FTTypeCon Nothing) (packPTH "QuestionId")))
                    SqlInt64)
                   [])
                  True)
                 ((ForeignRef (HaskellName (packPTH "Question")))
                    ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
             [])
            [])
           [])
          [])
         [])
        (Data.Map.Internal.fromList []))
       False
       {entityFields = [],
        entityId = ((((((FieldDef (HaskellName (packPTH "Id")))
                          (DBName (packPTH "id")))
                         ((FTTypeCon Nothing) (packPTH "QuestionId")))
                        (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                           (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                       [])
                      True)
                     ((ForeignRef (HaskellName (packPTH "Question")))
                        ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))},
     (((((((((EntityDef (HaskellName (packPTH "TestData")))
               (DBName (packPTH "test_data")))
              (((((((FieldDef (HaskellName (packPTH "Id")))
                      (DBName (packPTH "id")))
                     ((FTTypeCon Nothing) (packPTH "TestDataId")))
                    SqlInt64)
                   [])
                  True)
                 ((ForeignRef (HaskellName (packPTH "TestData")))
                    ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
             [])
            [((((((FieldDef (HaskellName (packPTH "name")))
                    (DBName (packPTH "name")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for name")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "description")))
                    (DBName (packPTH "description")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for description")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "creationDate")))
                    (DBName (packPTH "creation_date")))
                   ((FTTypeCon Nothing) (packPTH "UTCTime")))
                  (SqlOther (packPTH "SqlType unset for creationDate")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "passingNumber")))
                    (DBName (packPTH "passing_number")))
                   ((FTTypeCon Nothing) (packPTH "Int")))
                  (SqlOther (packPTH "SqlType unset for passingNumber")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "question")))
                    (DBName (packPTH "question")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for question")))
                 [])
                True)
               NoReference])
           [])
          [])
         [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
        (Data.Map.Internal.fromList []))
       False
       {entityFields = [((((((FieldDef (HaskellName (packPTH "name")))
                               (DBName (packPTH "name")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "description")))
                               (DBName (packPTH "description")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "creationDate")))
                               (DBName (packPTH "creation_date")))
                              ((FTTypeCon Nothing) (packPTH "UTCTime")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy UTCTime)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "passingNumber")))
                               (DBName (packPTH "passing_number")))
                              ((FTTypeCon Nothing) (packPTH "Int")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Int)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "question")))
                               (DBName (packPTH "question")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference],
        entityId = ((((((FieldDef (HaskellName (packPTH "Id")))
                          (DBName (packPTH "id")))
                         ((FTTypeCon Nothing) (packPTH "TestDataId")))
                        (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                           (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                       [])
                      True)
                     ((ForeignRef (HaskellName (packPTH "TestData")))
                        ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))}]
/home/nikita/Projects/labs/Databases/Course-Project/Server/src/Model/TestData.hs:(23,1)-(33,2): Splicing declarations
    share
      [mkPersist (mkPersistSettings (ConT ''MongoContext)),
       mkMigrate "migrateAll"]
      ([(((((((((EntityDef (HaskellName (packPTH "Question")))
                  (DBName (packPTH "question")))
                 (((((((FieldDef (HaskellName (packPTH "Id")))
                         (DBName (packPTH "id")))
                        ((FTTypeCon Nothing) (packPTH "QuestionId")))
                       SqlInt64)
                      [])
                     True)
                    ((ForeignRef (HaskellName (packPTH "Question")))
                       ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                [])
               [])
              [])
             [])
            [])
           (Data.Map.Internal.fromList []))
          False
          {entityFields = [],
           entityId = ((((((FieldDef (HaskellName (packPTH "Id")))
                             (DBName (packPTH "id")))
                            ((FTTypeCon Nothing) (packPTH "QuestionId")))
                           (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                              (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                          [])
                         True)
                        ((ForeignRef (HaskellName (packPTH "Question")))
                           ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))},
        (((((((((EntityDef (HaskellName (packPTH "TestData")))
                  (DBName (packPTH "test_data")))
                 (((((((FieldDef (HaskellName (packPTH "Id")))
                         (DBName (packPTH "id")))
                        ((FTTypeCon Nothing) (packPTH "TestDataId")))
                       SqlInt64)
                      [])
                     True)
                    ((ForeignRef (HaskellName (packPTH "TestData")))
                       ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                [])
               [((((((FieldDef (HaskellName (packPTH "name")))
                       (DBName (packPTH "name")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for name")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "description")))
                       (DBName (packPTH "description")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for description")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "creationDate")))
                       (DBName (packPTH "creation_date")))
                      ((FTTypeCon Nothing) (packPTH "UTCTime")))
                     (SqlOther (packPTH "SqlType unset for creationDate")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "passingNumber")))
                       (DBName (packPTH "passing_number")))
                      ((FTTypeCon Nothing) (packPTH "Int")))
                     (SqlOther (packPTH "SqlType unset for passingNumber")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "question")))
                       (DBName (packPTH "question")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for question")))
                    [])
                   True)
                  NoReference])
              [])
             [])
            [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
           (Data.Map.Internal.fromList []))
          False
          {entityFields = [((((((FieldDef (HaskellName (packPTH "name")))
                                  (DBName (packPTH "name")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "description")))
                                  (DBName (packPTH "description")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "creationDate")))
                                  (DBName (packPTH "creation_date")))
                                 ((FTTypeCon Nothing) (packPTH "UTCTime")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy UTCTime)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "passingNumber")))
                                  (DBName (packPTH "passing_number")))
                                 ((FTTypeCon Nothing) (packPTH "Int")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Int)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "question")))
                                  (DBName (packPTH "question")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference],
           entityId = ((((((FieldDef (HaskellName (packPTH "Id")))
                             (DBName (packPTH "id")))
                            ((FTTypeCon Nothing) (packPTH "TestDataId")))
                           (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                              (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                          [])
                         True)
                        ((ForeignRef (HaskellName (packPTH "TestData")))
                           ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))}])
  ======>
    instance PersistField Question where
      toPersistValue
        = \ ent_aaFV
            -> (PersistMap
                  $ ((Prelude.zip ((Prelude.map pack) []))
                       ((Prelude.map toPersistValue) $ (toPersistFields ent_aaFV))))
      fromPersistValue
        = ((\ x_aaFW
              -> let
                   columns_aaFX
                     = unordered-containers-0.2.9.0:Data.HashMap.Strict.fromList x_aaFW
                 in
                   (fromPersistValues
                      $ ((Prelude.map
                            (\ name_aaFY
                               -> case
                                      (unordered-containers-0.2.9.0:Data.HashMap.Base.lookup
                                         (pack name_aaFY))
                                        columns_aaFX
                                  of
                                    Just v_aaFZ -> v_aaFZ
                                    Nothing -> PersistNull))
                           $ [])))
             <=< getPersistMap)
    instance persistent-2.8.1:Database.Persist.Sql.Class.PersistFieldSql Question where
      persistent-2.8.1:Database.Persist.Sql.Class.sqlType _ = SqlString
    instance PersistField TestData where
      toPersistValue
        = \ ent_aaG0
            -> (PersistMap
                  $ ((Prelude.zip
                        ((Prelude.map pack)
                           ["name", "description", "creationDate", "passingNumber",
                            "question"]))
                       ((Prelude.map toPersistValue) $ (toPersistFields ent_aaG0))))
      fromPersistValue
        = ((\ x_aaG1
              -> let
                   columns_aaG2
                     = unordered-containers-0.2.9.0:Data.HashMap.Strict.fromList x_aaG1
                 in
                   (fromPersistValues
                      $ ((Prelude.map
                            (\ name_aaG3
                               -> case
                                      (unordered-containers-0.2.9.0:Data.HashMap.Base.lookup
                                         (pack name_aaG3))
                                        columns_aaG2
                                  of
                                    Just v_aaG4 -> v_aaG4
                                    Nothing -> PersistNull))
                           $ ["name", "description", "creationDate", "passingNumber",
                              "question"])))
             <=< getPersistMap)
    instance persistent-2.8.1:Database.Persist.Sql.Class.PersistFieldSql TestData where
      persistent-2.8.1:Database.Persist.Sql.Class.sqlType _ = SqlString
    data Question
      = Question {}
      deriving ()
    type QuestionId = Key Question
    instance PersistEntity Question where
      type PersistEntityBackend Question = MongoContext
      data Unique Question
      newtype Key Question
        = QuestionKey {unQuestionKey :: (BackendKey MongoContext)}
        deriving (Show,
                  Read,
                  Eq,
                  Ord,
                  path-pieces-0.2.1:Web.PathPieces.PathPiece,
                  http-api-data-0.3.7.2:Web.Internal.HttpApiData.ToHttpApiData,
                  http-api-data-0.3.7.2:Web.Internal.HttpApiData.FromHttpApiData,
                  PersistField,
                  persistent-2.8.1:Database.Persist.Sql.Class.PersistFieldSql,
                  ToJSON,
                  FromJSON)
      data EntityField Question typ = typ ~ Key Question => QuestionId
      keyToValues
        = ((ghc-prim-0.5.1.1:GHC.Types.: [])
             . (toPersistValue . unQuestionKey))
      keyFromValues
        = ((fmap QuestionKey)
             . (fromPersistValue . Database.Persist.TH.headNote))
      entityDef _
        = (((((((((EntityDef (HaskellName (packPTH "Question")))
                    (DBName (packPTH "question")))
                   (((((((FieldDef (HaskellName (packPTH "Id")))
                           (DBName (packPTH "id")))
                          ((FTTypeCon Nothing) (packPTH "QuestionId")))
                         SqlInt64)
                        [])
                       True)
                      ((ForeignRef (HaskellName (packPTH "Question")))
                         ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                  [])
                 [])
                [])
               [])
              [])
             (Data.Map.Internal.fromList []))
            False
      toPersistFields Question = []
      fromPersistValues [] = Right Question
      fromPersistValues x_aaG5
        = (Left
             $ ((mappend (packPTH "Question: fromPersistValues failed on: "))
                  (pack $ (show x_aaG5))))
      persistUniqueToFieldNames _
        = error "Degenerate case, should never happen"
      persistUniqueToValues _
        = error "Degenerate case, should never happen"
      persistUniqueKeys Question = []
      persistFieldDef QuestionId
        = ((((((FieldDef (HaskellName (packPTH "Id")))
                 (DBName (packPTH "id")))
                ((FTTypeCon Nothing) (packPTH "QuestionId")))
               SqlInt64)
              [])
             True)
            ((ForeignRef (HaskellName (packPTH "Question")))
               ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))
      persistIdField = QuestionId
      fieldLens QuestionId
        = (lensPTH entityKey)
            (\ Entity _ value_aaG6 key_aaG7 -> (Entity key_aaG7) value_aaG6)
    instance ToBackendKey MongoContext Question where
      toBackendKey = unQuestionKey
      fromBackendKey = QuestionKey
    data TestData
      = TestData {testDataName :: !Text,
                  testDataDescription :: !Text,
                  testDataCreationDate :: !UTCTime,
                  testDataPassingNumber :: !Int,
                  testDataQuestion :: !Text}
      deriving (Eq, Read, Show, Generic)
    type TestDataId = Key TestData
    instance PersistEntity TestData where
      type PersistEntityBackend TestData = MongoContext
      data Unique TestData
      newtype Key TestData
        = TestDataKey {unTestDataKey :: (BackendKey MongoContext)}
        deriving (Show,
                  Read,
                  Eq,
                  Ord,
                  path-pieces-0.2.1:Web.PathPieces.PathPiece,
                  http-api-data-0.3.7.2:Web.Internal.HttpApiData.ToHttpApiData,
                  http-api-data-0.3.7.2:Web.Internal.HttpApiData.FromHttpApiData,
                  PersistField,
                  persistent-2.8.1:Database.Persist.Sql.Class.PersistFieldSql,
                  ToJSON,
                  FromJSON)
      data EntityField TestData typ
        = typ ~ Key TestData => TestDataId |
          typ ~ Text => TestDataName |
          typ ~ Text => TestDataDescription |
          typ ~ UTCTime => TestDataCreationDate |
          typ ~ Int => TestDataPassingNumber |
          typ ~ Text => TestDataQuestion
      keyToValues
        = ((ghc-prim-0.5.1.1:GHC.Types.: [])
             . (toPersistValue . unTestDataKey))
      keyFromValues
        = ((fmap TestDataKey)
             . (fromPersistValue . Database.Persist.TH.headNote))
      entityDef _
        = (((((((((EntityDef (HaskellName (packPTH "TestData")))
                    (DBName (packPTH "test_data")))
                   (((((((FieldDef (HaskellName (packPTH "Id")))
                           (DBName (packPTH "id")))
                          ((FTTypeCon Nothing) (packPTH "TestDataId")))
                         SqlInt64)
                        [])
                       True)
                      ((ForeignRef (HaskellName (packPTH "TestData")))
                         ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                  [])
                 [((((((FieldDef (HaskellName (packPTH "name")))
                         (DBName (packPTH "name")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "description")))
                         (DBName (packPTH "description")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "creationDate")))
                         (DBName (packPTH "creation_date")))
                        ((FTTypeCon Nothing) (packPTH "UTCTime")))
                       SqlDayTime)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "passingNumber")))
                         (DBName (packPTH "passing_number")))
                        ((FTTypeCon Nothing) (packPTH "Int")))
                       SqlInt64)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "question")))
                         (DBName (packPTH "question")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference])
                [])
               [])
              [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
             (Data.Map.Internal.fromList []))
            False
      toPersistFields (TestData x_aaGb x_aaGc x_aaGd x_aaGe x_aaGf)
        = [SomePersistField x_aaGb, SomePersistField x_aaGc,
           SomePersistField x_aaGd, SomePersistField x_aaGe,
           SomePersistField x_aaGf]
      fromPersistValues [x1_aaGh, x2_aaGi, x3_aaGj, x4_aaGk, x5_aaGl]
        = TestData
            <$>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "name")))
                 . fromPersistValue)
                x1_aaGh
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "description")))
                 . fromPersistValue)
                x2_aaGi
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "creationDate")))
                 . fromPersistValue)
                x3_aaGj
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "passingNumber")))
                 . fromPersistValue)
                x4_aaGk
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "question")))
                 . fromPersistValue)
                x5_aaGl
      fromPersistValues x_aaGg
        = (Left
             $ ((mappend (packPTH "TestData: fromPersistValues failed on: "))
                  (pack $ (show x_aaGg))))
      persistUniqueToFieldNames _
        = error "Degenerate case, should never happen"
      persistUniqueToValues _
        = error "Degenerate case, should never happen"
      persistUniqueKeys
        (TestData _name_aaGm
                  _description_aaGn
                  _creationDate_aaGo
                  _passingNumber_aaGp
                  _question_aaGq)
        = []
      persistFieldDef TestDataId
        = ((((((FieldDef (HaskellName (packPTH "Id")))
                 (DBName (packPTH "id")))
                ((FTTypeCon Nothing) (packPTH "TestDataId")))
               SqlInt64)
              [])
             True)
            ((ForeignRef (HaskellName (packPTH "TestData")))
               ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))
      persistFieldDef TestDataName
        = ((((((FieldDef (HaskellName (packPTH "name")))
                 (DBName (packPTH "name")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef TestDataDescription
        = ((((((FieldDef (HaskellName (packPTH "description")))
                 (DBName (packPTH "description")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef TestDataCreationDate
        = ((((((FieldDef (HaskellName (packPTH "creationDate")))
                 (DBName (packPTH "creation_date")))
                ((FTTypeCon Nothing) (packPTH "UTCTime")))
               SqlDayTime)
              [])
             True)
            NoReference
      persistFieldDef TestDataPassingNumber
        = ((((((FieldDef (HaskellName (packPTH "passingNumber")))
                 (DBName (packPTH "passing_number")))
                ((FTTypeCon Nothing) (packPTH "Int")))
               SqlInt64)
              [])
             True)
            NoReference
      persistFieldDef TestDataQuestion
        = ((((((FieldDef (HaskellName (packPTH "question")))
                 (DBName (packPTH "question")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistIdField = TestDataId
      fieldLens TestDataId
        = (lensPTH entityKey)
            (\ Entity _ value_aaGr key_aaGs -> (Entity key_aaGs) value_aaGr)
      fieldLens TestDataName
        = (lensPTH (testDataName . entityVal))
            (\ Entity key_aaGt value_aaGu x_aaGv
               -> (Entity key_aaGt) value_aaGu {testDataName = x_aaGv})
      fieldLens TestDataDescription
        = (lensPTH (testDataDescription . entityVal))
            (\ Entity key_aaGt value_aaGu x_aaGv
               -> (Entity key_aaGt) value_aaGu {testDataDescription = x_aaGv})
      fieldLens TestDataCreationDate
        = (lensPTH (testDataCreationDate . entityVal))
            (\ Entity key_aaGt value_aaGu x_aaGv
               -> (Entity key_aaGt) value_aaGu {testDataCreationDate = x_aaGv})
      fieldLens TestDataPassingNumber
        = (lensPTH (testDataPassingNumber . entityVal))
            (\ Entity key_aaGt value_aaGu x_aaGv
               -> (Entity key_aaGt) value_aaGu {testDataPassingNumber = x_aaGv})
      fieldLens TestDataQuestion
        = (lensPTH (testDataQuestion . entityVal))
            (\ Entity key_aaGt value_aaGu x_aaGv
               -> (Entity key_aaGt) value_aaGu {testDataQuestion = x_aaGv})
    instance ToBackendKey MongoContext TestData where
      toBackendKey = unTestDataKey
      fromBackendKey = TestDataKey
    migrateAll :: persistent-2.8.1:Database.Persist.Sql.Types.Migration
    migrateAll
      = do let defs_aaGw
                 = [(((((((((EntityDef (HaskellName (packPTH "Question")))
                              (DBName (packPTH "question")))
                             (((((((FieldDef (HaskellName (packPTH "Id")))
                                     (DBName (packPTH "id")))
                                    ((FTTypeCon Nothing) (packPTH "QuestionId")))
                                   SqlInt64)
                                  [])
                                 True)
                                ((ForeignRef (HaskellName (packPTH "Question")))
                                   ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                            [])
                           [])
                          [])
                         [])
                        [])
                       (Data.Map.Internal.fromList []))
                      False,
                    (((((((((EntityDef (HaskellName (packPTH "TestData")))
                              (DBName (packPTH "test_data")))
                             (((((((FieldDef (HaskellName (packPTH "Id")))
                                     (DBName (packPTH "id")))
                                    ((FTTypeCon Nothing) (packPTH "TestDataId")))
                                   SqlInt64)
                                  [])
                                 True)
                                ((ForeignRef (HaskellName (packPTH "TestData")))
                                   ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                            [])
                           [((((((FieldDef (HaskellName (packPTH "name")))
                                   (DBName (packPTH "name")))
                                  ((FTTypeCon Nothing) (packPTH "Text")))
                                 SqlString)
                                [])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "description")))
                                   (DBName (packPTH "description")))
                                  ((FTTypeCon Nothing) (packPTH "Text")))
                                 SqlString)
                                [])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "creationDate")))
                                   (DBName (packPTH "creation_date")))
                                  ((FTTypeCon Nothing) (packPTH "UTCTime")))
                                 SqlDayTime)
                                [])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "passingNumber")))
                                   (DBName (packPTH "passing_number")))
                                  ((FTTypeCon Nothing) (packPTH "Int")))
                                 SqlInt64)
                                [])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "question")))
                                   (DBName (packPTH "question")))
                                  ((FTTypeCon Nothing) (packPTH "Text")))
                                 SqlString)
                                [])
                               True)
                              NoReference])
                          [])
                         [])
                        [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
                       (Data.Map.Internal.fromList []))
                      False]
           (persistent-2.8.1:Database.Persist.Sql.Migration.migrate defs_aaGw)
             ((((((((((EntityDef (HaskellName (packPTH "Question")))
                        (DBName (packPTH "question")))
                       (((((((FieldDef (HaskellName (packPTH "Id")))
                               (DBName (packPTH "id")))
                              ((FTTypeCon Nothing) (packPTH "QuestionId")))
                             SqlInt64)
                            [])
                           True)
                          ((ForeignRef (HaskellName (packPTH "Question")))
                             ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                      [])
                     [])
                    [])
                   [])
                  [])
                 (Data.Map.Internal.fromList []))
                False)
           (persistent-2.8.1:Database.Persist.Sql.Migration.migrate defs_aaGw)
             ((((((((((EntityDef (HaskellName (packPTH "TestData")))
                        (DBName (packPTH "test_data")))
                       (((((((FieldDef (HaskellName (packPTH "Id")))
                               (DBName (packPTH "id")))
                              ((FTTypeCon Nothing) (packPTH "TestDataId")))
                             SqlInt64)
                            [])
                           True)
                          ((ForeignRef (HaskellName (packPTH "TestData")))
                             ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                      [])
                     [((((((FieldDef (HaskellName (packPTH "name")))
                             (DBName (packPTH "name")))
                            ((FTTypeCon Nothing) (packPTH "Text")))
                           SqlString)
                          [])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "description")))
                             (DBName (packPTH "description")))
                            ((FTTypeCon Nothing) (packPTH "Text")))
                           SqlString)
                          [])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "creationDate")))
                             (DBName (packPTH "creation_date")))
                            ((FTTypeCon Nothing) (packPTH "UTCTime")))
                           SqlDayTime)
                          [])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "passingNumber")))
                             (DBName (packPTH "passing_number")))
                            ((FTTypeCon Nothing) (packPTH "Int")))
                           SqlInt64)
                          [])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "question")))
                             (DBName (packPTH "question")))
                            ((FTTypeCon Nothing) (packPTH "Text")))
                           SqlString)
                          [])
                         True)
                        NoReference])
                    [])
                   [])
                  [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
                 (Data.Map.Internal.fromList []))
                False)
/home/nikita/Projects/labs/Databases/Course-Project/Server/src/Model/TestData.hs:(23,103)-(33,2): Splicing expression
    Language.Haskell.TH.Quote.quoteExp
      persistLowerCase
      "\n\
      \Question\n\
      \  \n\
      \TestData\n\
      \  name          Text\n\
      \  description   Text\n\
      \  creationDate  UTCTime\n\
      \  passingNumber Int\n\
      \  question      Text\n\
      \  deriving Eq Read Show Generic\n"
  ======>
    [(((((((((EntityDef (HaskellName (packPTH "Question")))
               (DBName (packPTH "question")))
              (((((((FieldDef (HaskellName (packPTH "Id")))
                      (DBName (packPTH "id")))
                     ((FTTypeCon Nothing) (packPTH "QuestionId")))
                    SqlInt64)
                   [])
                  True)
                 ((ForeignRef (HaskellName (packPTH "Question")))
                    ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
             [])
            [])
           [])
          [])
         [])
        (Data.Map.Internal.fromList []))
       False
       {entityFields = [],
        entityId = ((((((FieldDef (HaskellName (packPTH "Id")))
                          (DBName (packPTH "id")))
                         ((FTTypeCon Nothing) (packPTH "QuestionId")))
                        (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                           (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                       [])
                      True)
                     ((ForeignRef (HaskellName (packPTH "Question")))
                        ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))},
     (((((((((EntityDef (HaskellName (packPTH "TestData")))
               (DBName (packPTH "test_data")))
              (((((((FieldDef (HaskellName (packPTH "Id")))
                      (DBName (packPTH "id")))
                     ((FTTypeCon Nothing) (packPTH "TestDataId")))
                    SqlInt64)
                   [])
                  True)
                 ((ForeignRef (HaskellName (packPTH "TestData")))
                    ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
             [])
            [((((((FieldDef (HaskellName (packPTH "name")))
                    (DBName (packPTH "name")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for name")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "description")))
                    (DBName (packPTH "description")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for description")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "creationDate")))
                    (DBName (packPTH "creation_date")))
                   ((FTTypeCon Nothing) (packPTH "UTCTime")))
                  (SqlOther (packPTH "SqlType unset for creationDate")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "passingNumber")))
                    (DBName (packPTH "passing_number")))
                   ((FTTypeCon Nothing) (packPTH "Int")))
                  (SqlOther (packPTH "SqlType unset for passingNumber")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "question")))
                    (DBName (packPTH "question")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for question")))
                 [])
                True)
               NoReference])
           [])
          [])
         [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
        (Data.Map.Internal.fromList []))
       False
       {entityFields = [((((((FieldDef (HaskellName (packPTH "name")))
                               (DBName (packPTH "name")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "description")))
                               (DBName (packPTH "description")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "creationDate")))
                               (DBName (packPTH "creation_date")))
                              ((FTTypeCon Nothing) (packPTH "UTCTime")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy UTCTime)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "passingNumber")))
                               (DBName (packPTH "passing_number")))
                              ((FTTypeCon Nothing) (packPTH "Int")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Int)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "question")))
                               (DBName (packPTH "question")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference],
        entityId = ((((((FieldDef (HaskellName (packPTH "Id")))
                          (DBName (packPTH "id")))
                         ((FTTypeCon Nothing) (packPTH "TestDataId")))
                        (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                           (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                       [])
                      True)
                     ((ForeignRef (HaskellName (packPTH "TestData")))
                        ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))}]
/home/nikita/Projects/labs/Databases/Course-Project/Server/src/Model/TestData.hs:(23,1)-(33,2): Splicing declarations
    share
      [mkPersist (mkPersistSettings (ConT ''MongoContext)),
       mkMigrate "migrateAll"]
      ([(((((((((EntityDef (HaskellName (packPTH "Question")))
                  (DBName (packPTH "question")))
                 (((((((FieldDef (HaskellName (packPTH "Id")))
                         (DBName (packPTH "id")))
                        ((FTTypeCon Nothing) (packPTH "QuestionId")))
                       SqlInt64)
                      [])
                     True)
                    ((ForeignRef (HaskellName (packPTH "Question")))
                       ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                [])
               [])
              [])
             [])
            [])
           (Data.Map.Internal.fromList []))
          False
          {entityFields = [],
           entityId = ((((((FieldDef (HaskellName (packPTH "Id")))
                             (DBName (packPTH "id")))
                            ((FTTypeCon Nothing) (packPTH "QuestionId")))
                           (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                              (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                          [])
                         True)
                        ((ForeignRef (HaskellName (packPTH "Question")))
                           ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))},
        (((((((((EntityDef (HaskellName (packPTH "TestData")))
                  (DBName (packPTH "test_data")))
                 (((((((FieldDef (HaskellName (packPTH "Id")))
                         (DBName (packPTH "id")))
                        ((FTTypeCon Nothing) (packPTH "TestDataId")))
                       SqlInt64)
                      [])
                     True)
                    ((ForeignRef (HaskellName (packPTH "TestData")))
                       ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                [])
               [((((((FieldDef (HaskellName (packPTH "name")))
                       (DBName (packPTH "name")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for name")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "description")))
                       (DBName (packPTH "description")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for description")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "creationDate")))
                       (DBName (packPTH "creation_date")))
                      ((FTTypeCon Nothing) (packPTH "UTCTime")))
                     (SqlOther (packPTH "SqlType unset for creationDate")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "passingNumber")))
                       (DBName (packPTH "passing_number")))
                      ((FTTypeCon Nothing) (packPTH "Int")))
                     (SqlOther (packPTH "SqlType unset for passingNumber")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "question")))
                       (DBName (packPTH "question")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for question")))
                    [])
                   True)
                  NoReference])
              [])
             [])
            [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
           (Data.Map.Internal.fromList []))
          False
          {entityFields = [((((((FieldDef (HaskellName (packPTH "name")))
                                  (DBName (packPTH "name")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "description")))
                                  (DBName (packPTH "description")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "creationDate")))
                                  (DBName (packPTH "creation_date")))
                                 ((FTTypeCon Nothing) (packPTH "UTCTime")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy UTCTime)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "passingNumber")))
                                  (DBName (packPTH "passing_number")))
                                 ((FTTypeCon Nothing) (packPTH "Int")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Int)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "question")))
                                  (DBName (packPTH "question")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference],
           entityId = ((((((FieldDef (HaskellName (packPTH "Id")))
                             (DBName (packPTH "id")))
                            ((FTTypeCon Nothing) (packPTH "TestDataId")))
                           (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                              (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                          [])
                         True)
                        ((ForeignRef (HaskellName (packPTH "TestData")))
                           ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))}])
  ======>
    instance PersistField Question where
      toPersistValue
        = \ ent_av5p
            -> (PersistMap
                  $ ((Prelude.zip ((Prelude.map pack) []))
                       ((Prelude.map toPersistValue) $ (toPersistFields ent_av5p))))
      fromPersistValue
        = ((\ x_av5q
              -> let
                   columns_av5r
                     = unordered-containers-0.2.9.0:Data.HashMap.Strict.fromList x_av5q
                 in
                   (fromPersistValues
                      $ ((Prelude.map
                            (\ name_av5s
                               -> case
                                      (unordered-containers-0.2.9.0:Data.HashMap.Base.lookup
                                         (pack name_av5s))
                                        columns_av5r
                                  of
                                    Just v_av5t -> v_av5t
                                    Nothing -> PersistNull))
                           $ [])))
             <=< getPersistMap)
    instance persistent-2.8.1:Database.Persist.Sql.Class.PersistFieldSql Question where
      persistent-2.8.1:Database.Persist.Sql.Class.sqlType _ = SqlString
    instance PersistField TestData where
      toPersistValue
        = \ ent_av5u
            -> (PersistMap
                  $ ((Prelude.zip
                        ((Prelude.map pack)
                           ["name", "description", "creationDate", "passingNumber",
                            "question"]))
                       ((Prelude.map toPersistValue) $ (toPersistFields ent_av5u))))
      fromPersistValue
        = ((\ x_av5v
              -> let
                   columns_av5w
                     = unordered-containers-0.2.9.0:Data.HashMap.Strict.fromList x_av5v
                 in
                   (fromPersistValues
                      $ ((Prelude.map
                            (\ name_av5x
                               -> case
                                      (unordered-containers-0.2.9.0:Data.HashMap.Base.lookup
                                         (pack name_av5x))
                                        columns_av5w
                                  of
                                    Just v_av5y -> v_av5y
                                    Nothing -> PersistNull))
                           $ ["name", "description", "creationDate", "passingNumber",
                              "question"])))
             <=< getPersistMap)
    instance persistent-2.8.1:Database.Persist.Sql.Class.PersistFieldSql TestData where
      persistent-2.8.1:Database.Persist.Sql.Class.sqlType _ = SqlString
    data Question
      = Question {}
      deriving ()
    type QuestionId = Key Question
    instance PersistEntity Question where
      type PersistEntityBackend Question = MongoContext
      data Unique Question
      newtype Key Question
        = QuestionKey {unQuestionKey :: (BackendKey MongoContext)}
        deriving (Show,
                  Read,
                  Eq,
                  Ord,
                  path-pieces-0.2.1:Web.PathPieces.PathPiece,
                  http-api-data-0.3.7.2:Web.Internal.HttpApiData.ToHttpApiData,
                  http-api-data-0.3.7.2:Web.Internal.HttpApiData.FromHttpApiData,
                  PersistField,
                  persistent-2.8.1:Database.Persist.Sql.Class.PersistFieldSql,
                  ToJSON,
                  FromJSON)
      data EntityField Question typ = typ ~ Key Question => QuestionId
      keyToValues
        = ((ghc-prim-0.5.1.1:GHC.Types.: [])
             . (toPersistValue . unQuestionKey))
      keyFromValues
        = ((fmap QuestionKey)
             . (fromPersistValue . Database.Persist.TH.headNote))
      entityDef _
        = (((((((((EntityDef (HaskellName (packPTH "Question")))
                    (DBName (packPTH "question")))
                   (((((((FieldDef (HaskellName (packPTH "Id")))
                           (DBName (packPTH "id")))
                          ((FTTypeCon Nothing) (packPTH "QuestionId")))
                         SqlInt64)
                        [])
                       True)
                      ((ForeignRef (HaskellName (packPTH "Question")))
                         ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                  [])
                 [])
                [])
               [])
              [])
             (Data.Map.Internal.fromList []))
            False
      toPersistFields Question = []
      fromPersistValues [] = Right Question
      fromPersistValues x_av5z
        = (Left
             $ ((mappend (packPTH "Question: fromPersistValues failed on: "))
                  (pack $ (show x_av5z))))
      persistUniqueToFieldNames _
        = error "Degenerate case, should never happen"
      persistUniqueToValues _
        = error "Degenerate case, should never happen"
      persistUniqueKeys Question = []
      persistFieldDef QuestionId
        = ((((((FieldDef (HaskellName (packPTH "Id")))
                 (DBName (packPTH "id")))
                ((FTTypeCon Nothing) (packPTH "QuestionId")))
               SqlInt64)
              [])
             True)
            ((ForeignRef (HaskellName (packPTH "Question")))
               ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))
      persistIdField = QuestionId
      fieldLens QuestionId
        = (lensPTH entityKey)
            (\ Entity _ value_av5A key_av5B -> (Entity key_av5B) value_av5A)
    instance ToBackendKey MongoContext Question where
      toBackendKey = unQuestionKey
      fromBackendKey = QuestionKey
    data TestData
      = TestData {testDataName :: !Text,
                  testDataDescription :: !Text,
                  testDataCreationDate :: !UTCTime,
                  testDataPassingNumber :: !Int,
                  testDataQuestion :: !Text}
      deriving (Eq, Read, Show, Generic)
    type TestDataId = Key TestData
    instance PersistEntity TestData where
      type PersistEntityBackend TestData = MongoContext
      data Unique TestData
      newtype Key TestData
        = TestDataKey {unTestDataKey :: (BackendKey MongoContext)}
        deriving (Show,
                  Read,
                  Eq,
                  Ord,
                  path-pieces-0.2.1:Web.PathPieces.PathPiece,
                  http-api-data-0.3.7.2:Web.Internal.HttpApiData.ToHttpApiData,
                  http-api-data-0.3.7.2:Web.Internal.HttpApiData.FromHttpApiData,
                  PersistField,
                  persistent-2.8.1:Database.Persist.Sql.Class.PersistFieldSql,
                  ToJSON,
                  FromJSON)
      data EntityField TestData typ
        = typ ~ Key TestData => TestDataId |
          typ ~ Text => TestDataName |
          typ ~ Text => TestDataDescription |
          typ ~ UTCTime => TestDataCreationDate |
          typ ~ Int => TestDataPassingNumber |
          typ ~ Text => TestDataQuestion
      keyToValues
        = ((ghc-prim-0.5.1.1:GHC.Types.: [])
             . (toPersistValue . unTestDataKey))
      keyFromValues
        = ((fmap TestDataKey)
             . (fromPersistValue . Database.Persist.TH.headNote))
      entityDef _
        = (((((((((EntityDef (HaskellName (packPTH "TestData")))
                    (DBName (packPTH "test_data")))
                   (((((((FieldDef (HaskellName (packPTH "Id")))
                           (DBName (packPTH "id")))
                          ((FTTypeCon Nothing) (packPTH "TestDataId")))
                         SqlInt64)
                        [])
                       True)
                      ((ForeignRef (HaskellName (packPTH "TestData")))
                         ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                  [])
                 [((((((FieldDef (HaskellName (packPTH "name")))
                         (DBName (packPTH "name")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "description")))
                         (DBName (packPTH "description")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "creationDate")))
                         (DBName (packPTH "creation_date")))
                        ((FTTypeCon Nothing) (packPTH "UTCTime")))
                       SqlDayTime)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "passingNumber")))
                         (DBName (packPTH "passing_number")))
                        ((FTTypeCon Nothing) (packPTH "Int")))
                       SqlInt64)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "question")))
                         (DBName (packPTH "question")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference])
                [])
               [])
              [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
             (Data.Map.Internal.fromList []))
            False
      toPersistFields (TestData x_av5F x_av5G x_av5H x_av5I x_av5J)
        = [SomePersistField x_av5F, SomePersistField x_av5G,
           SomePersistField x_av5H, SomePersistField x_av5I,
           SomePersistField x_av5J]
      fromPersistValues [x1_av5L, x2_av5M, x3_av5N, x4_av5O, x5_av5P]
        = TestData
            <$>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "name")))
                 . fromPersistValue)
                x1_av5L
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "description")))
                 . fromPersistValue)
                x2_av5M
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "creationDate")))
                 . fromPersistValue)
                x3_av5N
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "passingNumber")))
                 . fromPersistValue)
                x4_av5O
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "question")))
                 . fromPersistValue)
                x5_av5P
      fromPersistValues x_av5K
        = (Left
             $ ((mappend (packPTH "TestData: fromPersistValues failed on: "))
                  (pack $ (show x_av5K))))
      persistUniqueToFieldNames _
        = error "Degenerate case, should never happen"
      persistUniqueToValues _
        = error "Degenerate case, should never happen"
      persistUniqueKeys
        (TestData _name_av5Q
                  _description_av5R
                  _creationDate_av5S
                  _passingNumber_av5T
                  _question_av5U)
        = []
      persistFieldDef TestDataId
        = ((((((FieldDef (HaskellName (packPTH "Id")))
                 (DBName (packPTH "id")))
                ((FTTypeCon Nothing) (packPTH "TestDataId")))
               SqlInt64)
              [])
             True)
            ((ForeignRef (HaskellName (packPTH "TestData")))
               ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))
      persistFieldDef TestDataName
        = ((((((FieldDef (HaskellName (packPTH "name")))
                 (DBName (packPTH "name")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef TestDataDescription
        = ((((((FieldDef (HaskellName (packPTH "description")))
                 (DBName (packPTH "description")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef TestDataCreationDate
        = ((((((FieldDef (HaskellName (packPTH "creationDate")))
                 (DBName (packPTH "creation_date")))
                ((FTTypeCon Nothing) (packPTH "UTCTime")))
               SqlDayTime)
              [])
             True)
            NoReference
      persistFieldDef TestDataPassingNumber
        = ((((((FieldDef (HaskellName (packPTH "passingNumber")))
                 (DBName (packPTH "passing_number")))
                ((FTTypeCon Nothing) (packPTH "Int")))
               SqlInt64)
              [])
             True)
            NoReference
      persistFieldDef TestDataQuestion
        = ((((((FieldDef (HaskellName (packPTH "question")))
                 (DBName (packPTH "question")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistIdField = TestDataId
      fieldLens TestDataId
        = (lensPTH entityKey)
            (\ Entity _ value_av5V key_av5W -> (Entity key_av5W) value_av5V)
      fieldLens TestDataName
        = (lensPTH (testDataName . entityVal))
            (\ Entity key_av5X value_av5Y x_av5Z
               -> (Entity key_av5X) value_av5Y {testDataName = x_av5Z})
      fieldLens TestDataDescription
        = (lensPTH (testDataDescription . entityVal))
            (\ Entity key_av5X value_av5Y x_av5Z
               -> (Entity key_av5X) value_av5Y {testDataDescription = x_av5Z})
      fieldLens TestDataCreationDate
        = (lensPTH (testDataCreationDate . entityVal))
            (\ Entity key_av5X value_av5Y x_av5Z
               -> (Entity key_av5X) value_av5Y {testDataCreationDate = x_av5Z})
      fieldLens TestDataPassingNumber
        = (lensPTH (testDataPassingNumber . entityVal))
            (\ Entity key_av5X value_av5Y x_av5Z
               -> (Entity key_av5X) value_av5Y {testDataPassingNumber = x_av5Z})
      fieldLens TestDataQuestion
        = (lensPTH (testDataQuestion . entityVal))
            (\ Entity key_av5X value_av5Y x_av5Z
               -> (Entity key_av5X) value_av5Y {testDataQuestion = x_av5Z})
    instance ToBackendKey MongoContext TestData where
      toBackendKey = unTestDataKey
      fromBackendKey = TestDataKey
    migrateAll :: persistent-2.8.1:Database.Persist.Sql.Types.Migration
    migrateAll
      = do let defs_av60
                 = [(((((((((EntityDef (HaskellName (packPTH "Question")))
                              (DBName (packPTH "question")))
                             (((((((FieldDef (HaskellName (packPTH "Id")))
                                     (DBName (packPTH "id")))
                                    ((FTTypeCon Nothing) (packPTH "QuestionId")))
                                   SqlInt64)
                                  [])
                                 True)
                                ((ForeignRef (HaskellName (packPTH "Question")))
                                   ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                            [])
                           [])
                          [])
                         [])
                        [])
                       (Data.Map.Internal.fromList []))
                      False,
                    (((((((((EntityDef (HaskellName (packPTH "TestData")))
                              (DBName (packPTH "test_data")))
                             (((((((FieldDef (HaskellName (packPTH "Id")))
                                     (DBName (packPTH "id")))
                                    ((FTTypeCon Nothing) (packPTH "TestDataId")))
                                   SqlInt64)
                                  [])
                                 True)
                                ((ForeignRef (HaskellName (packPTH "TestData")))
                                   ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                            [])
                           [((((((FieldDef (HaskellName (packPTH "name")))
                                   (DBName (packPTH "name")))
                                  ((FTTypeCon Nothing) (packPTH "Text")))
                                 SqlString)
                                [])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "description")))
                                   (DBName (packPTH "description")))
                                  ((FTTypeCon Nothing) (packPTH "Text")))
                                 SqlString)
                                [])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "creationDate")))
                                   (DBName (packPTH "creation_date")))
                                  ((FTTypeCon Nothing) (packPTH "UTCTime")))
                                 SqlDayTime)
                                [])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "passingNumber")))
                                   (DBName (packPTH "passing_number")))
                                  ((FTTypeCon Nothing) (packPTH "Int")))
                                 SqlInt64)
                                [])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "question")))
                                   (DBName (packPTH "question")))
                                  ((FTTypeCon Nothing) (packPTH "Text")))
                                 SqlString)
                                [])
                               True)
                              NoReference])
                          [])
                         [])
                        [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
                       (Data.Map.Internal.fromList []))
                      False]
           (persistent-2.8.1:Database.Persist.Sql.Migration.migrate defs_av60)
             ((((((((((EntityDef (HaskellName (packPTH "Question")))
                        (DBName (packPTH "question")))
                       (((((((FieldDef (HaskellName (packPTH "Id")))
                               (DBName (packPTH "id")))
                              ((FTTypeCon Nothing) (packPTH "QuestionId")))
                             SqlInt64)
                            [])
                           True)
                          ((ForeignRef (HaskellName (packPTH "Question")))
                             ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                      [])
                     [])
                    [])
                   [])
                  [])
                 (Data.Map.Internal.fromList []))
                False)
           (persistent-2.8.1:Database.Persist.Sql.Migration.migrate defs_av60)
             ((((((((((EntityDef (HaskellName (packPTH "TestData")))
                        (DBName (packPTH "test_data")))
                       (((((((FieldDef (HaskellName (packPTH "Id")))
                               (DBName (packPTH "id")))
                              ((FTTypeCon Nothing) (packPTH "TestDataId")))
                             SqlInt64)
                            [])
                           True)
                          ((ForeignRef (HaskellName (packPTH "TestData")))
                             ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                      [])
                     [((((((FieldDef (HaskellName (packPTH "name")))
                             (DBName (packPTH "name")))
                            ((FTTypeCon Nothing) (packPTH "Text")))
                           SqlString)
                          [])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "description")))
                             (DBName (packPTH "description")))
                            ((FTTypeCon Nothing) (packPTH "Text")))
                           SqlString)
                          [])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "creationDate")))
                             (DBName (packPTH "creation_date")))
                            ((FTTypeCon Nothing) (packPTH "UTCTime")))
                           SqlDayTime)
                          [])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "passingNumber")))
                             (DBName (packPTH "passing_number")))
                            ((FTTypeCon Nothing) (packPTH "Int")))
                           SqlInt64)
                          [])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "question")))
                             (DBName (packPTH "question")))
                            ((FTTypeCon Nothing) (packPTH "Text")))
                           SqlString)
                          [])
                         True)
                        NoReference])
                    [])
                   [])
                  [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
                 (Data.Map.Internal.fromList []))
                False)
/home/nikita/Projects/labs/Databases/Course-Project/Server/src/Model/TestData.hs:(23,103)-(33,2): Splicing expression
    Language.Haskell.TH.Quote.quoteExp
      persistLowerCase
      "\n\
      \Question\n\
      \\n\
      \TestData\n\
      \  name          Text\n\
      \  description   Text\n\
      \  creationDate  UTCTime\n\
      \  passingNumber Int\n\
      \  question      Text\n\
      \  deriving Eq Read Show Generic\n"
  ======>
    [(((((((((EntityDef (HaskellName (packPTH "Question")))
               (DBName (packPTH "question")))
              (((((((FieldDef (HaskellName (packPTH "Id")))
                      (DBName (packPTH "id")))
                     ((FTTypeCon Nothing) (packPTH "QuestionId")))
                    SqlInt64)
                   [])
                  True)
                 ((ForeignRef (HaskellName (packPTH "Question")))
                    ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
             [])
            [])
           [])
          [])
         [])
        (Data.Map.Internal.fromList []))
       False
       {entityFields = [],
        entityId = ((((((FieldDef (HaskellName (packPTH "Id")))
                          (DBName (packPTH "id")))
                         ((FTTypeCon Nothing) (packPTH "QuestionId")))
                        (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                           (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                       [])
                      True)
                     ((ForeignRef (HaskellName (packPTH "Question")))
                        ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))},
     (((((((((EntityDef (HaskellName (packPTH "TestData")))
               (DBName (packPTH "test_data")))
              (((((((FieldDef (HaskellName (packPTH "Id")))
                      (DBName (packPTH "id")))
                     ((FTTypeCon Nothing) (packPTH "TestDataId")))
                    SqlInt64)
                   [])
                  True)
                 ((ForeignRef (HaskellName (packPTH "TestData")))
                    ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
             [])
            [((((((FieldDef (HaskellName (packPTH "name")))
                    (DBName (packPTH "name")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for name")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "description")))
                    (DBName (packPTH "description")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for description")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "creationDate")))
                    (DBName (packPTH "creation_date")))
                   ((FTTypeCon Nothing) (packPTH "UTCTime")))
                  (SqlOther (packPTH "SqlType unset for creationDate")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "passingNumber")))
                    (DBName (packPTH "passing_number")))
                   ((FTTypeCon Nothing) (packPTH "Int")))
                  (SqlOther (packPTH "SqlType unset for passingNumber")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "question")))
                    (DBName (packPTH "question")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for question")))
                 [])
                True)
               NoReference])
           [])
          [])
         [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
        (Data.Map.Internal.fromList []))
       False
       {entityFields = [((((((FieldDef (HaskellName (packPTH "name")))
                               (DBName (packPTH "name")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "description")))
                               (DBName (packPTH "description")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "creationDate")))
                               (DBName (packPTH "creation_date")))
                              ((FTTypeCon Nothing) (packPTH "UTCTime")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy UTCTime)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "passingNumber")))
                               (DBName (packPTH "passing_number")))
                              ((FTTypeCon Nothing) (packPTH "Int")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Int)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "question")))
                               (DBName (packPTH "question")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference],
        entityId = ((((((FieldDef (HaskellName (packPTH "Id")))
                          (DBName (packPTH "id")))
                         ((FTTypeCon Nothing) (packPTH "TestDataId")))
                        (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                           (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                       [])
                      True)
                     ((ForeignRef (HaskellName (packPTH "TestData")))
                        ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))}]
/home/nikita/Projects/labs/Databases/Course-Project/Server/src/Model/TestData.hs:(23,1)-(33,2): Splicing declarations
    share
      [mkPersist (mkPersistSettings (ConT ''MongoContext)),
       mkMigrate "migrateAll"]
      ([(((((((((EntityDef (HaskellName (packPTH "Question")))
                  (DBName (packPTH "question")))
                 (((((((FieldDef (HaskellName (packPTH "Id")))
                         (DBName (packPTH "id")))
                        ((FTTypeCon Nothing) (packPTH "QuestionId")))
                       SqlInt64)
                      [])
                     True)
                    ((ForeignRef (HaskellName (packPTH "Question")))
                       ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                [])
               [])
              [])
             [])
            [])
           (Data.Map.Internal.fromList []))
          False
          {entityFields = [],
           entityId = ((((((FieldDef (HaskellName (packPTH "Id")))
                             (DBName (packPTH "id")))
                            ((FTTypeCon Nothing) (packPTH "QuestionId")))
                           (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                              (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                          [])
                         True)
                        ((ForeignRef (HaskellName (packPTH "Question")))
                           ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))},
        (((((((((EntityDef (HaskellName (packPTH "TestData")))
                  (DBName (packPTH "test_data")))
                 (((((((FieldDef (HaskellName (packPTH "Id")))
                         (DBName (packPTH "id")))
                        ((FTTypeCon Nothing) (packPTH "TestDataId")))
                       SqlInt64)
                      [])
                     True)
                    ((ForeignRef (HaskellName (packPTH "TestData")))
                       ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                [])
               [((((((FieldDef (HaskellName (packPTH "name")))
                       (DBName (packPTH "name")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for name")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "description")))
                       (DBName (packPTH "description")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for description")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "creationDate")))
                       (DBName (packPTH "creation_date")))
                      ((FTTypeCon Nothing) (packPTH "UTCTime")))
                     (SqlOther (packPTH "SqlType unset for creationDate")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "passingNumber")))
                       (DBName (packPTH "passing_number")))
                      ((FTTypeCon Nothing) (packPTH "Int")))
                     (SqlOther (packPTH "SqlType unset for passingNumber")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "question")))
                       (DBName (packPTH "question")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for question")))
                    [])
                   True)
                  NoReference])
              [])
             [])
            [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
           (Data.Map.Internal.fromList []))
          False
          {entityFields = [((((((FieldDef (HaskellName (packPTH "name")))
                                  (DBName (packPTH "name")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "description")))
                                  (DBName (packPTH "description")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "creationDate")))
                                  (DBName (packPTH "creation_date")))
                                 ((FTTypeCon Nothing) (packPTH "UTCTime")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy UTCTime)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "passingNumber")))
                                  (DBName (packPTH "passing_number")))
                                 ((FTTypeCon Nothing) (packPTH "Int")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Int)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "question")))
                                  (DBName (packPTH "question")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference],
           entityId = ((((((FieldDef (HaskellName (packPTH "Id")))
                             (DBName (packPTH "id")))
                            ((FTTypeCon Nothing) (packPTH "TestDataId")))
                           (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                              (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                          [])
                         True)
                        ((ForeignRef (HaskellName (packPTH "TestData")))
                           ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))}])
  ======>
    instance PersistField Question where
      toPersistValue
        = \ ent_aHjG
            -> (PersistMap
                  $ ((Prelude.zip ((Prelude.map pack) []))
                       ((Prelude.map toPersistValue) $ (toPersistFields ent_aHjG))))
      fromPersistValue
        = ((\ x_aHjH
              -> let
                   columns_aHjI
                     = unordered-containers-0.2.9.0:Data.HashMap.Strict.fromList x_aHjH
                 in
                   (fromPersistValues
                      $ ((Prelude.map
                            (\ name_aHjJ
                               -> case
                                      (unordered-containers-0.2.9.0:Data.HashMap.Base.lookup
                                         (pack name_aHjJ))
                                        columns_aHjI
                                  of
                                    Just v_aHjK -> v_aHjK
                                    Nothing -> PersistNull))
                           $ [])))
             <=< getPersistMap)
    instance persistent-2.8.1:Database.Persist.Sql.Class.PersistFieldSql Question where
      persistent-2.8.1:Database.Persist.Sql.Class.sqlType _ = SqlString
    instance PersistField TestData where
      toPersistValue
        = \ ent_aHjL
            -> (PersistMap
                  $ ((Prelude.zip
                        ((Prelude.map pack)
                           ["name", "description", "creationDate", "passingNumber",
                            "question"]))
                       ((Prelude.map toPersistValue) $ (toPersistFields ent_aHjL))))
      fromPersistValue
        = ((\ x_aHjM
              -> let
                   columns_aHjN
                     = unordered-containers-0.2.9.0:Data.HashMap.Strict.fromList x_aHjM
                 in
                   (fromPersistValues
                      $ ((Prelude.map
                            (\ name_aHjO
                               -> case
                                      (unordered-containers-0.2.9.0:Data.HashMap.Base.lookup
                                         (pack name_aHjO))
                                        columns_aHjN
                                  of
                                    Just v_aHjP -> v_aHjP
                                    Nothing -> PersistNull))
                           $ ["name", "description", "creationDate", "passingNumber",
                              "question"])))
             <=< getPersistMap)
    instance persistent-2.8.1:Database.Persist.Sql.Class.PersistFieldSql TestData where
      persistent-2.8.1:Database.Persist.Sql.Class.sqlType _ = SqlString
    data Question
      = Question {}
      deriving ()
    type QuestionId = Key Question
    instance PersistEntity Question where
      type PersistEntityBackend Question = MongoContext
      data Unique Question
      newtype Key Question
        = QuestionKey {unQuestionKey :: (BackendKey MongoContext)}
        deriving (Show,
                  Read,
                  Eq,
                  Ord,
                  path-pieces-0.2.1:Web.PathPieces.PathPiece,
                  http-api-data-0.3.7.2:Web.Internal.HttpApiData.ToHttpApiData,
                  http-api-data-0.3.7.2:Web.Internal.HttpApiData.FromHttpApiData,
                  PersistField,
                  persistent-2.8.1:Database.Persist.Sql.Class.PersistFieldSql,
                  ToJSON,
                  FromJSON)
      data EntityField Question typ = typ ~ Key Question => QuestionId
      keyToValues
        = ((ghc-prim-0.5.1.1:GHC.Types.: [])
             . (toPersistValue . unQuestionKey))
      keyFromValues
        = ((fmap QuestionKey)
             . (fromPersistValue . Database.Persist.TH.headNote))
      entityDef _
        = (((((((((EntityDef (HaskellName (packPTH "Question")))
                    (DBName (packPTH "question")))
                   (((((((FieldDef (HaskellName (packPTH "Id")))
                           (DBName (packPTH "id")))
                          ((FTTypeCon Nothing) (packPTH "QuestionId")))
                         SqlInt64)
                        [])
                       True)
                      ((ForeignRef (HaskellName (packPTH "Question")))
                         ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                  [])
                 [])
                [])
               [])
              [])
             (Data.Map.Internal.fromList []))
            False
      toPersistFields Question = []
      fromPersistValues [] = Right Question
      fromPersistValues x_aHjQ
        = (Left
             $ ((mappend (packPTH "Question: fromPersistValues failed on: "))
                  (pack $ (show x_aHjQ))))
      persistUniqueToFieldNames _
        = error "Degenerate case, should never happen"
      persistUniqueToValues _
        = error "Degenerate case, should never happen"
      persistUniqueKeys Question = []
      persistFieldDef QuestionId
        = ((((((FieldDef (HaskellName (packPTH "Id")))
                 (DBName (packPTH "id")))
                ((FTTypeCon Nothing) (packPTH "QuestionId")))
               SqlInt64)
              [])
             True)
            ((ForeignRef (HaskellName (packPTH "Question")))
               ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))
      persistIdField = QuestionId
      fieldLens QuestionId
        = (lensPTH entityKey)
            (\ Entity _ value_aHjR key_aHjS -> (Entity key_aHjS) value_aHjR)
    instance ToBackendKey MongoContext Question where
      toBackendKey = unQuestionKey
      fromBackendKey = QuestionKey
    data TestData
      = TestData {testDataName :: !Text,
                  testDataDescription :: !Text,
                  testDataCreationDate :: !UTCTime,
                  testDataPassingNumber :: !Int,
                  testDataQuestion :: !Text}
      deriving (Eq, Read, Show, Generic)
    type TestDataId = Key TestData
    instance PersistEntity TestData where
      type PersistEntityBackend TestData = MongoContext
      data Unique TestData
      newtype Key TestData
        = TestDataKey {unTestDataKey :: (BackendKey MongoContext)}
        deriving (Show,
                  Read,
                  Eq,
                  Ord,
                  path-pieces-0.2.1:Web.PathPieces.PathPiece,
                  http-api-data-0.3.7.2:Web.Internal.HttpApiData.ToHttpApiData,
                  http-api-data-0.3.7.2:Web.Internal.HttpApiData.FromHttpApiData,
                  PersistField,
                  persistent-2.8.1:Database.Persist.Sql.Class.PersistFieldSql,
                  ToJSON,
                  FromJSON)
      data EntityField TestData typ
        = typ ~ Key TestData => TestDataId |
          typ ~ Text => TestDataName |
          typ ~ Text => TestDataDescription |
          typ ~ UTCTime => TestDataCreationDate |
          typ ~ Int => TestDataPassingNumber |
          typ ~ Text => TestDataQuestion
      keyToValues
        = ((ghc-prim-0.5.1.1:GHC.Types.: [])
             . (toPersistValue . unTestDataKey))
      keyFromValues
        = ((fmap TestDataKey)
             . (fromPersistValue . Database.Persist.TH.headNote))
      entityDef _
        = (((((((((EntityDef (HaskellName (packPTH "TestData")))
                    (DBName (packPTH "test_data")))
                   (((((((FieldDef (HaskellName (packPTH "Id")))
                           (DBName (packPTH "id")))
                          ((FTTypeCon Nothing) (packPTH "TestDataId")))
                         SqlInt64)
                        [])
                       True)
                      ((ForeignRef (HaskellName (packPTH "TestData")))
                         ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                  [])
                 [((((((FieldDef (HaskellName (packPTH "name")))
                         (DBName (packPTH "name")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "description")))
                         (DBName (packPTH "description")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "creationDate")))
                         (DBName (packPTH "creation_date")))
                        ((FTTypeCon Nothing) (packPTH "UTCTime")))
                       SqlDayTime)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "passingNumber")))
                         (DBName (packPTH "passing_number")))
                        ((FTTypeCon Nothing) (packPTH "Int")))
                       SqlInt64)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "question")))
                         (DBName (packPTH "question")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference])
                [])
               [])
              [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
             (Data.Map.Internal.fromList []))
            False
      toPersistFields (TestData x_aHjW x_aHjX x_aHjY x_aHjZ x_aHk0)
        = [SomePersistField x_aHjW, SomePersistField x_aHjX,
           SomePersistField x_aHjY, SomePersistField x_aHjZ,
           SomePersistField x_aHk0]
      fromPersistValues [x1_aHk2, x2_aHk3, x3_aHk4, x4_aHk5, x5_aHk6]
        = TestData
            <$>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "name")))
                 . fromPersistValue)
                x1_aHk2
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "description")))
                 . fromPersistValue)
                x2_aHk3
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "creationDate")))
                 . fromPersistValue)
                x3_aHk4
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "passingNumber")))
                 . fromPersistValue)
                x4_aHk5
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "question")))
                 . fromPersistValue)
                x5_aHk6
      fromPersistValues x_aHk1
        = (Left
             $ ((mappend (packPTH "TestData: fromPersistValues failed on: "))
                  (pack $ (show x_aHk1))))
      persistUniqueToFieldNames _
        = error "Degenerate case, should never happen"
      persistUniqueToValues _
        = error "Degenerate case, should never happen"
      persistUniqueKeys
        (TestData _name_aHk7
                  _description_aHk8
                  _creationDate_aHk9
                  _passingNumber_aHka
                  _question_aHkb)
        = []
      persistFieldDef TestDataId
        = ((((((FieldDef (HaskellName (packPTH "Id")))
                 (DBName (packPTH "id")))
                ((FTTypeCon Nothing) (packPTH "TestDataId")))
               SqlInt64)
              [])
             True)
            ((ForeignRef (HaskellName (packPTH "TestData")))
               ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))
      persistFieldDef TestDataName
        = ((((((FieldDef (HaskellName (packPTH "name")))
                 (DBName (packPTH "name")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef TestDataDescription
        = ((((((FieldDef (HaskellName (packPTH "description")))
                 (DBName (packPTH "description")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef TestDataCreationDate
        = ((((((FieldDef (HaskellName (packPTH "creationDate")))
                 (DBName (packPTH "creation_date")))
                ((FTTypeCon Nothing) (packPTH "UTCTime")))
               SqlDayTime)
              [])
             True)
            NoReference
      persistFieldDef TestDataPassingNumber
        = ((((((FieldDef (HaskellName (packPTH "passingNumber")))
                 (DBName (packPTH "passing_number")))
                ((FTTypeCon Nothing) (packPTH "Int")))
               SqlInt64)
              [])
             True)
            NoReference
      persistFieldDef TestDataQuestion
        = ((((((FieldDef (HaskellName (packPTH "question")))
                 (DBName (packPTH "question")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistIdField = TestDataId
      fieldLens TestDataId
        = (lensPTH entityKey)
            (\ Entity _ value_aHkc key_aHkd -> (Entity key_aHkd) value_aHkc)
      fieldLens TestDataName
        = (lensPTH (testDataName . entityVal))
            (\ Entity key_aHke value_aHkf x_aHkg
               -> (Entity key_aHke) value_aHkf {testDataName = x_aHkg})
      fieldLens TestDataDescription
        = (lensPTH (testDataDescription . entityVal))
            (\ Entity key_aHke value_aHkf x_aHkg
               -> (Entity key_aHke) value_aHkf {testDataDescription = x_aHkg})
      fieldLens TestDataCreationDate
        = (lensPTH (testDataCreationDate . entityVal))
            (\ Entity key_aHke value_aHkf x_aHkg
               -> (Entity key_aHke) value_aHkf {testDataCreationDate = x_aHkg})
      fieldLens TestDataPassingNumber
        = (lensPTH (testDataPassingNumber . entityVal))
            (\ Entity key_aHke value_aHkf x_aHkg
               -> (Entity key_aHke) value_aHkf {testDataPassingNumber = x_aHkg})
      fieldLens TestDataQuestion
        = (lensPTH (testDataQuestion . entityVal))
            (\ Entity key_aHke value_aHkf x_aHkg
               -> (Entity key_aHke) value_aHkf {testDataQuestion = x_aHkg})
    instance ToBackendKey MongoContext TestData where
      toBackendKey = unTestDataKey
      fromBackendKey = TestDataKey
    migrateAll :: persistent-2.8.1:Database.Persist.Sql.Types.Migration
    migrateAll
      = do let defs_aHkh
                 = [(((((((((EntityDef (HaskellName (packPTH "Question")))
                              (DBName (packPTH "question")))
                             (((((((FieldDef (HaskellName (packPTH "Id")))
                                     (DBName (packPTH "id")))
                                    ((FTTypeCon Nothing) (packPTH "QuestionId")))
                                   SqlInt64)
                                  [])
                                 True)
                                ((ForeignRef (HaskellName (packPTH "Question")))
                                   ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                            [])
                           [])
                          [])
                         [])
                        [])
                       (Data.Map.Internal.fromList []))
                      False,
                    (((((((((EntityDef (HaskellName (packPTH "TestData")))
                              (DBName (packPTH "test_data")))
                             (((((((FieldDef (HaskellName (packPTH "Id")))
                                     (DBName (packPTH "id")))
                                    ((FTTypeCon Nothing) (packPTH "TestDataId")))
                                   SqlInt64)
                                  [])
                                 True)
                                ((ForeignRef (HaskellName (packPTH "TestData")))
                                   ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                            [])
                           [((((((FieldDef (HaskellName (packPTH "name")))
                                   (DBName (packPTH "name")))
                                  ((FTTypeCon Nothing) (packPTH "Text")))
                                 SqlString)
                                [])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "description")))
                                   (DBName (packPTH "description")))
                                  ((FTTypeCon Nothing) (packPTH "Text")))
                                 SqlString)
                                [])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "creationDate")))
                                   (DBName (packPTH "creation_date")))
                                  ((FTTypeCon Nothing) (packPTH "UTCTime")))
                                 SqlDayTime)
                                [])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "passingNumber")))
                                   (DBName (packPTH "passing_number")))
                                  ((FTTypeCon Nothing) (packPTH "Int")))
                                 SqlInt64)
                                [])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "question")))
                                   (DBName (packPTH "question")))
                                  ((FTTypeCon Nothing) (packPTH "Text")))
                                 SqlString)
                                [])
                               True)
                              NoReference])
                          [])
                         [])
                        [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
                       (Data.Map.Internal.fromList []))
                      False]
           (persistent-2.8.1:Database.Persist.Sql.Migration.migrate defs_aHkh)
             ((((((((((EntityDef (HaskellName (packPTH "Question")))
                        (DBName (packPTH "question")))
                       (((((((FieldDef (HaskellName (packPTH "Id")))
                               (DBName (packPTH "id")))
                              ((FTTypeCon Nothing) (packPTH "QuestionId")))
                             SqlInt64)
                            [])
                           True)
                          ((ForeignRef (HaskellName (packPTH "Question")))
                             ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                      [])
                     [])
                    [])
                   [])
                  [])
                 (Data.Map.Internal.fromList []))
                False)
           (persistent-2.8.1:Database.Persist.Sql.Migration.migrate defs_aHkh)
             ((((((((((EntityDef (HaskellName (packPTH "TestData")))
                        (DBName (packPTH "test_data")))
                       (((((((FieldDef (HaskellName (packPTH "Id")))
                               (DBName (packPTH "id")))
                              ((FTTypeCon Nothing) (packPTH "TestDataId")))
                             SqlInt64)
                            [])
                           True)
                          ((ForeignRef (HaskellName (packPTH "TestData")))
                             ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                      [])
                     [((((((FieldDef (HaskellName (packPTH "name")))
                             (DBName (packPTH "name")))
                            ((FTTypeCon Nothing) (packPTH "Text")))
                           SqlString)
                          [])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "description")))
                             (DBName (packPTH "description")))
                            ((FTTypeCon Nothing) (packPTH "Text")))
                           SqlString)
                          [])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "creationDate")))
                             (DBName (packPTH "creation_date")))
                            ((FTTypeCon Nothing) (packPTH "UTCTime")))
                           SqlDayTime)
                          [])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "passingNumber")))
                             (DBName (packPTH "passing_number")))
                            ((FTTypeCon Nothing) (packPTH "Int")))
                           SqlInt64)
                          [])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "question")))
                             (DBName (packPTH "question")))
                            ((FTTypeCon Nothing) (packPTH "Text")))
                           SqlString)
                          [])
                         True)
                        NoReference])
                    [])
                   [])
                  [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
                 (Data.Map.Internal.fromList []))
                False)
/home/nikita/Projects/labs/Databases/Course-Project/Server/src/Model/TestData.hs:(23,103)-(33,2): Splicing expression
    Language.Haskell.TH.Quote.quoteExp
      persistLowerCase
      "\n\
      \Question\n\
      \\n\
      \TestData\n\
      \  name          Text\n\
      \  description   Text\n\
      \  creationDate  UTCTime\n\
      \  passingNumber Int\n\
      \  question      Text\n\
      \  deriving Eq Read Show Generic\n"
  ======>
    [(((((((((EntityDef (HaskellName (packPTH "Question")))
               (DBName (packPTH "question")))
              (((((((FieldDef (HaskellName (packPTH "Id")))
                      (DBName (packPTH "id")))
                     ((FTTypeCon Nothing) (packPTH "QuestionId")))
                    SqlInt64)
                   [])
                  True)
                 ((ForeignRef (HaskellName (packPTH "Question")))
                    ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
             [])
            [])
           [])
          [])
         [])
        (Data.Map.Internal.fromList []))
       False
       {entityFields = [],
        entityId = ((((((FieldDef (HaskellName (packPTH "Id")))
                          (DBName (packPTH "id")))
                         ((FTTypeCon Nothing) (packPTH "QuestionId")))
                        (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                           (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                       [])
                      True)
                     ((ForeignRef (HaskellName (packPTH "Question")))
                        ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))},
     (((((((((EntityDef (HaskellName (packPTH "TestData")))
               (DBName (packPTH "test_data")))
              (((((((FieldDef (HaskellName (packPTH "Id")))
                      (DBName (packPTH "id")))
                     ((FTTypeCon Nothing) (packPTH "TestDataId")))
                    SqlInt64)
                   [])
                  True)
                 ((ForeignRef (HaskellName (packPTH "TestData")))
                    ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
             [])
            [((((((FieldDef (HaskellName (packPTH "name")))
                    (DBName (packPTH "name")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for name")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "description")))
                    (DBName (packPTH "description")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for description")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "creationDate")))
                    (DBName (packPTH "creation_date")))
                   ((FTTypeCon Nothing) (packPTH "UTCTime")))
                  (SqlOther (packPTH "SqlType unset for creationDate")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "passingNumber")))
                    (DBName (packPTH "passing_number")))
                   ((FTTypeCon Nothing) (packPTH "Int")))
                  (SqlOther (packPTH "SqlType unset for passingNumber")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "question")))
                    (DBName (packPTH "question")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for question")))
                 [])
                True)
               NoReference])
           [])
          [])
         [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
        (Data.Map.Internal.fromList []))
       False
       {entityFields = [((((((FieldDef (HaskellName (packPTH "name")))
                               (DBName (packPTH "name")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "description")))
                               (DBName (packPTH "description")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "creationDate")))
                               (DBName (packPTH "creation_date")))
                              ((FTTypeCon Nothing) (packPTH "UTCTime")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy UTCTime)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "passingNumber")))
                               (DBName (packPTH "passing_number")))
                              ((FTTypeCon Nothing) (packPTH "Int")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Int)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "question")))
                               (DBName (packPTH "question")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference],
        entityId = ((((((FieldDef (HaskellName (packPTH "Id")))
                          (DBName (packPTH "id")))
                         ((FTTypeCon Nothing) (packPTH "TestDataId")))
                        (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                           (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                       [])
                      True)
                     ((ForeignRef (HaskellName (packPTH "TestData")))
                        ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))}]
/home/nikita/Projects/labs/Databases/Course-Project/Server/src/Model/TestData.hs:(23,1)-(33,2): Splicing declarations
    share
      [mkPersist (mkPersistSettings (ConT ''MongoContext)),
       mkMigrate "migrateAll"]
      ([(((((((((EntityDef (HaskellName (packPTH "Question")))
                  (DBName (packPTH "question")))
                 (((((((FieldDef (HaskellName (packPTH "Id")))
                         (DBName (packPTH "id")))
                        ((FTTypeCon Nothing) (packPTH "QuestionId")))
                       SqlInt64)
                      [])
                     True)
                    ((ForeignRef (HaskellName (packPTH "Question")))
                       ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                [])
               [])
              [])
             [])
            [])
           (Data.Map.Internal.fromList []))
          False
          {entityFields = [],
           entityId = ((((((FieldDef (HaskellName (packPTH "Id")))
                             (DBName (packPTH "id")))
                            ((FTTypeCon Nothing) (packPTH "QuestionId")))
                           (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                              (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                          [])
                         True)
                        ((ForeignRef (HaskellName (packPTH "Question")))
                           ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))},
        (((((((((EntityDef (HaskellName (packPTH "TestData")))
                  (DBName (packPTH "test_data")))
                 (((((((FieldDef (HaskellName (packPTH "Id")))
                         (DBName (packPTH "id")))
                        ((FTTypeCon Nothing) (packPTH "TestDataId")))
                       SqlInt64)
                      [])
                     True)
                    ((ForeignRef (HaskellName (packPTH "TestData")))
                       ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                [])
               [((((((FieldDef (HaskellName (packPTH "name")))
                       (DBName (packPTH "name")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for name")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "description")))
                       (DBName (packPTH "description")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for description")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "creationDate")))
                       (DBName (packPTH "creation_date")))
                      ((FTTypeCon Nothing) (packPTH "UTCTime")))
                     (SqlOther (packPTH "SqlType unset for creationDate")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "passingNumber")))
                       (DBName (packPTH "passing_number")))
                      ((FTTypeCon Nothing) (packPTH "Int")))
                     (SqlOther (packPTH "SqlType unset for passingNumber")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "question")))
                       (DBName (packPTH "question")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for question")))
                    [])
                   True)
                  NoReference])
              [])
             [])
            [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
           (Data.Map.Internal.fromList []))
          False
          {entityFields = [((((((FieldDef (HaskellName (packPTH "name")))
                                  (DBName (packPTH "name")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "description")))
                                  (DBName (packPTH "description")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "creationDate")))
                                  (DBName (packPTH "creation_date")))
                                 ((FTTypeCon Nothing) (packPTH "UTCTime")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy UTCTime)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "passingNumber")))
                                  (DBName (packPTH "passing_number")))
                                 ((FTTypeCon Nothing) (packPTH "Int")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Int)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "question")))
                                  (DBName (packPTH "question")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference],
           entityId = ((((((FieldDef (HaskellName (packPTH "Id")))
                             (DBName (packPTH "id")))
                            ((FTTypeCon Nothing) (packPTH "TestDataId")))
                           (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                              (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                          [])
                         True)
                        ((ForeignRef (HaskellName (packPTH "TestData")))
                           ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))}])
  ======>
    instance PersistField Question where
      toPersistValue
        = \ ent_aJmT
            -> (PersistMap
                  $ ((Prelude.zip ((Prelude.map pack) []))
                       ((Prelude.map toPersistValue) $ (toPersistFields ent_aJmT))))
      fromPersistValue
        = ((\ x_aJmU
              -> let
                   columns_aJmV
                     = unordered-containers-0.2.9.0:Data.HashMap.Strict.fromList x_aJmU
                 in
                   (fromPersistValues
                      $ ((Prelude.map
                            (\ name_aJmW
                               -> case
                                      (unordered-containers-0.2.9.0:Data.HashMap.Base.lookup
                                         (pack name_aJmW))
                                        columns_aJmV
                                  of
                                    Just v_aJmX -> v_aJmX
                                    Nothing -> PersistNull))
                           $ [])))
             <=< getPersistMap)
    instance persistent-2.8.1:Database.Persist.Sql.Class.PersistFieldSql Question where
      persistent-2.8.1:Database.Persist.Sql.Class.sqlType _ = SqlString
    instance PersistField TestData where
      toPersistValue
        = \ ent_aJmY
            -> (PersistMap
                  $ ((Prelude.zip
                        ((Prelude.map pack)
                           ["name", "description", "creationDate", "passingNumber",
                            "question"]))
                       ((Prelude.map toPersistValue) $ (toPersistFields ent_aJmY))))
      fromPersistValue
        = ((\ x_aJmZ
              -> let
                   columns_aJn0
                     = unordered-containers-0.2.9.0:Data.HashMap.Strict.fromList x_aJmZ
                 in
                   (fromPersistValues
                      $ ((Prelude.map
                            (\ name_aJn1
                               -> case
                                      (unordered-containers-0.2.9.0:Data.HashMap.Base.lookup
                                         (pack name_aJn1))
                                        columns_aJn0
                                  of
                                    Just v_aJn2 -> v_aJn2
                                    Nothing -> PersistNull))
                           $ ["name", "description", "creationDate", "passingNumber",
                              "question"])))
             <=< getPersistMap)
    instance persistent-2.8.1:Database.Persist.Sql.Class.PersistFieldSql TestData where
      persistent-2.8.1:Database.Persist.Sql.Class.sqlType _ = SqlString
    data Question
      = Question {}
      deriving ()
    type QuestionId = Key Question
    instance PersistEntity Question where
      type PersistEntityBackend Question = MongoContext
      data Unique Question
      newtype Key Question
        = QuestionKey {unQuestionKey :: (BackendKey MongoContext)}
        deriving (Show,
                  Read,
                  Eq,
                  Ord,
                  path-pieces-0.2.1:Web.PathPieces.PathPiece,
                  http-api-data-0.3.7.2:Web.Internal.HttpApiData.ToHttpApiData,
                  http-api-data-0.3.7.2:Web.Internal.HttpApiData.FromHttpApiData,
                  PersistField,
                  persistent-2.8.1:Database.Persist.Sql.Class.PersistFieldSql,
                  ToJSON,
                  FromJSON)
      data EntityField Question typ = typ ~ Key Question => QuestionId
      keyToValues
        = ((ghc-prim-0.5.1.1:GHC.Types.: [])
             . (toPersistValue . unQuestionKey))
      keyFromValues
        = ((fmap QuestionKey)
             . (fromPersistValue . Database.Persist.TH.headNote))
      entityDef _
        = (((((((((EntityDef (HaskellName (packPTH "Question")))
                    (DBName (packPTH "question")))
                   (((((((FieldDef (HaskellName (packPTH "Id")))
                           (DBName (packPTH "id")))
                          ((FTTypeCon Nothing) (packPTH "QuestionId")))
                         SqlInt64)
                        [])
                       True)
                      ((ForeignRef (HaskellName (packPTH "Question")))
                         ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                  [])
                 [])
                [])
               [])
              [])
             (Data.Map.Internal.fromList []))
            False
      toPersistFields Question = []
      fromPersistValues [] = Right Question
      fromPersistValues x_aJn3
        = (Left
             $ ((mappend (packPTH "Question: fromPersistValues failed on: "))
                  (pack $ (show x_aJn3))))
      persistUniqueToFieldNames _
        = error "Degenerate case, should never happen"
      persistUniqueToValues _
        = error "Degenerate case, should never happen"
      persistUniqueKeys Question = []
      persistFieldDef QuestionId
        = ((((((FieldDef (HaskellName (packPTH "Id")))
                 (DBName (packPTH "id")))
                ((FTTypeCon Nothing) (packPTH "QuestionId")))
               SqlInt64)
              [])
             True)
            ((ForeignRef (HaskellName (packPTH "Question")))
               ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))
      persistIdField = QuestionId
      fieldLens QuestionId
        = (lensPTH entityKey)
            (\ Entity _ value_aJn4 key_aJn5 -> (Entity key_aJn5) value_aJn4)
    instance ToBackendKey MongoContext Question where
      toBackendKey = unQuestionKey
      fromBackendKey = QuestionKey
    data TestData
      = TestData {testDataName :: !Text,
                  testDataDescription :: !Text,
                  testDataCreationDate :: !UTCTime,
                  testDataPassingNumber :: !Int,
                  testDataQuestion :: !Text}
      deriving (Eq, Read, Show, Generic)
    type TestDataId = Key TestData
    instance PersistEntity TestData where
      type PersistEntityBackend TestData = MongoContext
      data Unique TestData
      newtype Key TestData
        = TestDataKey {unTestDataKey :: (BackendKey MongoContext)}
        deriving (Show,
                  Read,
                  Eq,
                  Ord,
                  path-pieces-0.2.1:Web.PathPieces.PathPiece,
                  http-api-data-0.3.7.2:Web.Internal.HttpApiData.ToHttpApiData,
                  http-api-data-0.3.7.2:Web.Internal.HttpApiData.FromHttpApiData,
                  PersistField,
                  persistent-2.8.1:Database.Persist.Sql.Class.PersistFieldSql,
                  ToJSON,
                  FromJSON)
      data EntityField TestData typ
        = typ ~ Key TestData => TestDataId |
          typ ~ Text => TestDataName |
          typ ~ Text => TestDataDescription |
          typ ~ UTCTime => TestDataCreationDate |
          typ ~ Int => TestDataPassingNumber |
          typ ~ Text => TestDataQuestion
      keyToValues
        = ((ghc-prim-0.5.1.1:GHC.Types.: [])
             . (toPersistValue . unTestDataKey))
      keyFromValues
        = ((fmap TestDataKey)
             . (fromPersistValue . Database.Persist.TH.headNote))
      entityDef _
        = (((((((((EntityDef (HaskellName (packPTH "TestData")))
                    (DBName (packPTH "test_data")))
                   (((((((FieldDef (HaskellName (packPTH "Id")))
                           (DBName (packPTH "id")))
                          ((FTTypeCon Nothing) (packPTH "TestDataId")))
                         SqlInt64)
                        [])
                       True)
                      ((ForeignRef (HaskellName (packPTH "TestData")))
                         ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                  [])
                 [((((((FieldDef (HaskellName (packPTH "name")))
                         (DBName (packPTH "name")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "description")))
                         (DBName (packPTH "description")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "creationDate")))
                         (DBName (packPTH "creation_date")))
                        ((FTTypeCon Nothing) (packPTH "UTCTime")))
                       SqlDayTime)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "passingNumber")))
                         (DBName (packPTH "passing_number")))
                        ((FTTypeCon Nothing) (packPTH "Int")))
                       SqlInt64)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "question")))
                         (DBName (packPTH "question")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference])
                [])
               [])
              [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
             (Data.Map.Internal.fromList []))
            False
      toPersistFields (TestData x_aJn9 x_aJna x_aJnb x_aJnc x_aJnd)
        = [SomePersistField x_aJn9, SomePersistField x_aJna,
           SomePersistField x_aJnb, SomePersistField x_aJnc,
           SomePersistField x_aJnd]
      fromPersistValues [x1_aJnf, x2_aJng, x3_aJnh, x4_aJni, x5_aJnj]
        = TestData
            <$>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "name")))
                 . fromPersistValue)
                x1_aJnf
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "description")))
                 . fromPersistValue)
                x2_aJng
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "creationDate")))
                 . fromPersistValue)
                x3_aJnh
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "passingNumber")))
                 . fromPersistValue)
                x4_aJni
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "question")))
                 . fromPersistValue)
                x5_aJnj
      fromPersistValues x_aJne
        = (Left
             $ ((mappend (packPTH "TestData: fromPersistValues failed on: "))
                  (pack $ (show x_aJne))))
      persistUniqueToFieldNames _
        = error "Degenerate case, should never happen"
      persistUniqueToValues _
        = error "Degenerate case, should never happen"
      persistUniqueKeys
        (TestData _name_aJnk
                  _description_aJnl
                  _creationDate_aJnm
                  _passingNumber_aJnn
                  _question_aJno)
        = []
      persistFieldDef TestDataId
        = ((((((FieldDef (HaskellName (packPTH "Id")))
                 (DBName (packPTH "id")))
                ((FTTypeCon Nothing) (packPTH "TestDataId")))
               SqlInt64)
              [])
             True)
            ((ForeignRef (HaskellName (packPTH "TestData")))
               ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))
      persistFieldDef TestDataName
        = ((((((FieldDef (HaskellName (packPTH "name")))
                 (DBName (packPTH "name")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef TestDataDescription
        = ((((((FieldDef (HaskellName (packPTH "description")))
                 (DBName (packPTH "description")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef TestDataCreationDate
        = ((((((FieldDef (HaskellName (packPTH "creationDate")))
                 (DBName (packPTH "creation_date")))
                ((FTTypeCon Nothing) (packPTH "UTCTime")))
               SqlDayTime)
              [])
             True)
            NoReference
      persistFieldDef TestDataPassingNumber
        = ((((((FieldDef (HaskellName (packPTH "passingNumber")))
                 (DBName (packPTH "passing_number")))
                ((FTTypeCon Nothing) (packPTH "Int")))
               SqlInt64)
              [])
             True)
            NoReference
      persistFieldDef TestDataQuestion
        = ((((((FieldDef (HaskellName (packPTH "question")))
                 (DBName (packPTH "question")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistIdField = TestDataId
      fieldLens TestDataId
        = (lensPTH entityKey)
            (\ Entity _ value_aJnp key_aJnq -> (Entity key_aJnq) value_aJnp)
      fieldLens TestDataName
        = (lensPTH (testDataName . entityVal))
            (\ Entity key_aJnr value_aJns x_aJnt
               -> (Entity key_aJnr) value_aJns {testDataName = x_aJnt})
      fieldLens TestDataDescription
        = (lensPTH (testDataDescription . entityVal))
            (\ Entity key_aJnr value_aJns x_aJnt
               -> (Entity key_aJnr) value_aJns {testDataDescription = x_aJnt})
      fieldLens TestDataCreationDate
        = (lensPTH (testDataCreationDate . entityVal))
            (\ Entity key_aJnr value_aJns x_aJnt
               -> (Entity key_aJnr) value_aJns {testDataCreationDate = x_aJnt})
      fieldLens TestDataPassingNumber
        = (lensPTH (testDataPassingNumber . entityVal))
            (\ Entity key_aJnr value_aJns x_aJnt
               -> (Entity key_aJnr) value_aJns {testDataPassingNumber = x_aJnt})
      fieldLens TestDataQuestion
        = (lensPTH (testDataQuestion . entityVal))
            (\ Entity key_aJnr value_aJns x_aJnt
               -> (Entity key_aJnr) value_aJns {testDataQuestion = x_aJnt})
    instance ToBackendKey MongoContext TestData where
      toBackendKey = unTestDataKey
      fromBackendKey = TestDataKey
    migrateAll :: persistent-2.8.1:Database.Persist.Sql.Types.Migration
    migrateAll
      = do let defs_aJnu
                 = [(((((((((EntityDef (HaskellName (packPTH "Question")))
                              (DBName (packPTH "question")))
                             (((((((FieldDef (HaskellName (packPTH "Id")))
                                     (DBName (packPTH "id")))
                                    ((FTTypeCon Nothing) (packPTH "QuestionId")))
                                   SqlInt64)
                                  [])
                                 True)
                                ((ForeignRef (HaskellName (packPTH "Question")))
                                   ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                            [])
                           [])
                          [])
                         [])
                        [])
                       (Data.Map.Internal.fromList []))
                      False,
                    (((((((((EntityDef (HaskellName (packPTH "TestData")))
                              (DBName (packPTH "test_data")))
                             (((((((FieldDef (HaskellName (packPTH "Id")))
                                     (DBName (packPTH "id")))
                                    ((FTTypeCon Nothing) (packPTH "TestDataId")))
                                   SqlInt64)
                                  [])
                                 True)
                                ((ForeignRef (HaskellName (packPTH "TestData")))
                                   ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                            [])
                           [((((((FieldDef (HaskellName (packPTH "name")))
                                   (DBName (packPTH "name")))
                                  ((FTTypeCon Nothing) (packPTH "Text")))
                                 SqlString)
                                [])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "description")))
                                   (DBName (packPTH "description")))
                                  ((FTTypeCon Nothing) (packPTH "Text")))
                                 SqlString)
                                [])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "creationDate")))
                                   (DBName (packPTH "creation_date")))
                                  ((FTTypeCon Nothing) (packPTH "UTCTime")))
                                 SqlDayTime)
                                [])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "passingNumber")))
                                   (DBName (packPTH "passing_number")))
                                  ((FTTypeCon Nothing) (packPTH "Int")))
                                 SqlInt64)
                                [])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "question")))
                                   (DBName (packPTH "question")))
                                  ((FTTypeCon Nothing) (packPTH "Text")))
                                 SqlString)
                                [])
                               True)
                              NoReference])
                          [])
                         [])
                        [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
                       (Data.Map.Internal.fromList []))
                      False]
           (persistent-2.8.1:Database.Persist.Sql.Migration.migrate defs_aJnu)
             ((((((((((EntityDef (HaskellName (packPTH "Question")))
                        (DBName (packPTH "question")))
                       (((((((FieldDef (HaskellName (packPTH "Id")))
                               (DBName (packPTH "id")))
                              ((FTTypeCon Nothing) (packPTH "QuestionId")))
                             SqlInt64)
                            [])
                           True)
                          ((ForeignRef (HaskellName (packPTH "Question")))
                             ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                      [])
                     [])
                    [])
                   [])
                  [])
                 (Data.Map.Internal.fromList []))
                False)
           (persistent-2.8.1:Database.Persist.Sql.Migration.migrate defs_aJnu)
             ((((((((((EntityDef (HaskellName (packPTH "TestData")))
                        (DBName (packPTH "test_data")))
                       (((((((FieldDef (HaskellName (packPTH "Id")))
                               (DBName (packPTH "id")))
                              ((FTTypeCon Nothing) (packPTH "TestDataId")))
                             SqlInt64)
                            [])
                           True)
                          ((ForeignRef (HaskellName (packPTH "TestData")))
                             ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                      [])
                     [((((((FieldDef (HaskellName (packPTH "name")))
                             (DBName (packPTH "name")))
                            ((FTTypeCon Nothing) (packPTH "Text")))
                           SqlString)
                          [])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "description")))
                             (DBName (packPTH "description")))
                            ((FTTypeCon Nothing) (packPTH "Text")))
                           SqlString)
                          [])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "creationDate")))
                             (DBName (packPTH "creation_date")))
                            ((FTTypeCon Nothing) (packPTH "UTCTime")))
                           SqlDayTime)
                          [])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "passingNumber")))
                             (DBName (packPTH "passing_number")))
                            ((FTTypeCon Nothing) (packPTH "Int")))
                           SqlInt64)
                          [])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "question")))
                             (DBName (packPTH "question")))
                            ((FTTypeCon Nothing) (packPTH "Text")))
                           SqlString)
                          [])
                         True)
                        NoReference])
                    [])
                   [])
                  [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
                 (Data.Map.Internal.fromList []))
                False)
/home/nikita/Projects/labs/Databases/Course-Project/Server/src/Model/TestData.hs:(23,103)-(33,2): Splicing expression
    Language.Haskell.TH.Quote.quoteExp
      persistLowerCase
      "\n\
      \Question\n\
      \\n\
      \TestData\n\
      \  name          Text\n\
      \  description   Text\n\
      \  creationDate  UTCTime\n\
      \  passingNumber Int\n\
      \  question      Text\n\
      \  deriving Eq Read Show Generic\n"
  ======>
    [(((((((((EntityDef (HaskellName (packPTH "Question")))
               (DBName (packPTH "question")))
              (((((((FieldDef (HaskellName (packPTH "Id")))
                      (DBName (packPTH "id")))
                     ((FTTypeCon Nothing) (packPTH "QuestionId")))
                    SqlInt64)
                   [])
                  True)
                 ((ForeignRef (HaskellName (packPTH "Question")))
                    ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
             [])
            [])
           [])
          [])
         [])
        (Data.Map.Internal.fromList []))
       False
       {entityFields = [],
        entityId = ((((((FieldDef (HaskellName (packPTH "Id")))
                          (DBName (packPTH "id")))
                         ((FTTypeCon Nothing) (packPTH "QuestionId")))
                        (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                           (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                       [])
                      True)
                     ((ForeignRef (HaskellName (packPTH "Question")))
                        ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))},
     (((((((((EntityDef (HaskellName (packPTH "TestData")))
               (DBName (packPTH "test_data")))
              (((((((FieldDef (HaskellName (packPTH "Id")))
                      (DBName (packPTH "id")))
                     ((FTTypeCon Nothing) (packPTH "TestDataId")))
                    SqlInt64)
                   [])
                  True)
                 ((ForeignRef (HaskellName (packPTH "TestData")))
                    ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
             [])
            [((((((FieldDef (HaskellName (packPTH "name")))
                    (DBName (packPTH "name")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for name")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "description")))
                    (DBName (packPTH "description")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for description")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "creationDate")))
                    (DBName (packPTH "creation_date")))
                   ((FTTypeCon Nothing) (packPTH "UTCTime")))
                  (SqlOther (packPTH "SqlType unset for creationDate")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "passingNumber")))
                    (DBName (packPTH "passing_number")))
                   ((FTTypeCon Nothing) (packPTH "Int")))
                  (SqlOther (packPTH "SqlType unset for passingNumber")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "question")))
                    (DBName (packPTH "question")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for question")))
                 [])
                True)
               NoReference])
           [])
          [])
         [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
        (Data.Map.Internal.fromList []))
       False
       {entityFields = [((((((FieldDef (HaskellName (packPTH "name")))
                               (DBName (packPTH "name")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "description")))
                               (DBName (packPTH "description")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "creationDate")))
                               (DBName (packPTH "creation_date")))
                              ((FTTypeCon Nothing) (packPTH "UTCTime")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy UTCTime)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "passingNumber")))
                               (DBName (packPTH "passing_number")))
                              ((FTTypeCon Nothing) (packPTH "Int")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Int)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "question")))
                               (DBName (packPTH "question")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference],
        entityId = ((((((FieldDef (HaskellName (packPTH "Id")))
                          (DBName (packPTH "id")))
                         ((FTTypeCon Nothing) (packPTH "TestDataId")))
                        (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                           (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                       [])
                      True)
                     ((ForeignRef (HaskellName (packPTH "TestData")))
                        ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))}]
/home/nikita/Projects/labs/Databases/Course-Project/Server/src/Model/TestData.hs:(23,1)-(33,2): Splicing declarations
    share
      [mkPersist (mkPersistSettings (ConT ''MongoContext)),
       mkMigrate "migrateAll"]
      ([(((((((((EntityDef (HaskellName (packPTH "Question")))
                  (DBName (packPTH "question")))
                 (((((((FieldDef (HaskellName (packPTH "Id")))
                         (DBName (packPTH "id")))
                        ((FTTypeCon Nothing) (packPTH "QuestionId")))
                       SqlInt64)
                      [])
                     True)
                    ((ForeignRef (HaskellName (packPTH "Question")))
                       ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                [])
               [])
              [])
             [])
            [])
           (Data.Map.Internal.fromList []))
          False
          {entityFields = [],
           entityId = ((((((FieldDef (HaskellName (packPTH "Id")))
                             (DBName (packPTH "id")))
                            ((FTTypeCon Nothing) (packPTH "QuestionId")))
                           (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                              (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                          [])
                         True)
                        ((ForeignRef (HaskellName (packPTH "Question")))
                           ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))},
        (((((((((EntityDef (HaskellName (packPTH "TestData")))
                  (DBName (packPTH "test_data")))
                 (((((((FieldDef (HaskellName (packPTH "Id")))
                         (DBName (packPTH "id")))
                        ((FTTypeCon Nothing) (packPTH "TestDataId")))
                       SqlInt64)
                      [])
                     True)
                    ((ForeignRef (HaskellName (packPTH "TestData")))
                       ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                [])
               [((((((FieldDef (HaskellName (packPTH "name")))
                       (DBName (packPTH "name")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for name")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "description")))
                       (DBName (packPTH "description")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for description")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "creationDate")))
                       (DBName (packPTH "creation_date")))
                      ((FTTypeCon Nothing) (packPTH "UTCTime")))
                     (SqlOther (packPTH "SqlType unset for creationDate")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "passingNumber")))
                       (DBName (packPTH "passing_number")))
                      ((FTTypeCon Nothing) (packPTH "Int")))
                     (SqlOther (packPTH "SqlType unset for passingNumber")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "question")))
                       (DBName (packPTH "question")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for question")))
                    [])
                   True)
                  NoReference])
              [])
             [])
            [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
           (Data.Map.Internal.fromList []))
          False
          {entityFields = [((((((FieldDef (HaskellName (packPTH "name")))
                                  (DBName (packPTH "name")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "description")))
                                  (DBName (packPTH "description")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "creationDate")))
                                  (DBName (packPTH "creation_date")))
                                 ((FTTypeCon Nothing) (packPTH "UTCTime")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy UTCTime)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "passingNumber")))
                                  (DBName (packPTH "passing_number")))
                                 ((FTTypeCon Nothing) (packPTH "Int")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Int)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "question")))
                                  (DBName (packPTH "question")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference],
           entityId = ((((((FieldDef (HaskellName (packPTH "Id")))
                             (DBName (packPTH "id")))
                            ((FTTypeCon Nothing) (packPTH "TestDataId")))
                           (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                              (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                          [])
                         True)
                        ((ForeignRef (HaskellName (packPTH "TestData")))
                           ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))}])
  ======>
    instance PersistField Question where
      toPersistValue
        = \ ent_aLD3
            -> (PersistMap
                  $ ((Prelude.zip ((Prelude.map pack) []))
                       ((Prelude.map toPersistValue) $ (toPersistFields ent_aLD3))))
      fromPersistValue
        = ((\ x_aLD4
              -> let
                   columns_aLD5
                     = unordered-containers-0.2.9.0:Data.HashMap.Strict.fromList x_aLD4
                 in
                   (fromPersistValues
                      $ ((Prelude.map
                            (\ name_aLD6
                               -> case
                                      (unordered-containers-0.2.9.0:Data.HashMap.Base.lookup
                                         (pack name_aLD6))
                                        columns_aLD5
                                  of
                                    Just v_aLD7 -> v_aLD7
                                    Nothing -> PersistNull))
                           $ [])))
             <=< getPersistMap)
    instance persistent-2.8.1:Database.Persist.Sql.Class.PersistFieldSql Question where
      persistent-2.8.1:Database.Persist.Sql.Class.sqlType _ = SqlString
    instance PersistField TestData where
      toPersistValue
        = \ ent_aLD8
            -> (PersistMap
                  $ ((Prelude.zip
                        ((Prelude.map pack)
                           ["name", "description", "creationDate", "passingNumber",
                            "question"]))
                       ((Prelude.map toPersistValue) $ (toPersistFields ent_aLD8))))
      fromPersistValue
        = ((\ x_aLD9
              -> let
                   columns_aLDa
                     = unordered-containers-0.2.9.0:Data.HashMap.Strict.fromList x_aLD9
                 in
                   (fromPersistValues
                      $ ((Prelude.map
                            (\ name_aLDb
                               -> case
                                      (unordered-containers-0.2.9.0:Data.HashMap.Base.lookup
                                         (pack name_aLDb))
                                        columns_aLDa
                                  of
                                    Just v_aLDc -> v_aLDc
                                    Nothing -> PersistNull))
                           $ ["name", "description", "creationDate", "passingNumber",
                              "question"])))
             <=< getPersistMap)
    instance persistent-2.8.1:Database.Persist.Sql.Class.PersistFieldSql TestData where
      persistent-2.8.1:Database.Persist.Sql.Class.sqlType _ = SqlString
    data Question
      = Question {}
      deriving ()
    type QuestionId = Key Question
    instance PersistEntity Question where
      type PersistEntityBackend Question = MongoContext
      data Unique Question
      newtype Key Question
        = QuestionKey {unQuestionKey :: (BackendKey MongoContext)}
        deriving (Show,
                  Read,
                  Eq,
                  Ord,
                  path-pieces-0.2.1:Web.PathPieces.PathPiece,
                  http-api-data-0.3.7.2:Web.Internal.HttpApiData.ToHttpApiData,
                  http-api-data-0.3.7.2:Web.Internal.HttpApiData.FromHttpApiData,
                  PersistField,
                  persistent-2.8.1:Database.Persist.Sql.Class.PersistFieldSql,
                  ToJSON,
                  FromJSON)
      data EntityField Question typ = typ ~ Key Question => QuestionId
      keyToValues
        = ((ghc-prim-0.5.1.1:GHC.Types.: [])
             . (toPersistValue . unQuestionKey))
      keyFromValues
        = ((fmap QuestionKey)
             . (fromPersistValue . Database.Persist.TH.headNote))
      entityDef _
        = (((((((((EntityDef (HaskellName (packPTH "Question")))
                    (DBName (packPTH "question")))
                   (((((((FieldDef (HaskellName (packPTH "Id")))
                           (DBName (packPTH "id")))
                          ((FTTypeCon Nothing) (packPTH "QuestionId")))
                         SqlInt64)
                        [])
                       True)
                      ((ForeignRef (HaskellName (packPTH "Question")))
                         ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                  [])
                 [])
                [])
               [])
              [])
             (Data.Map.Internal.fromList []))
            False
      toPersistFields Question = []
      fromPersistValues [] = Right Question
      fromPersistValues x_aLDd
        = (Left
             $ ((mappend (packPTH "Question: fromPersistValues failed on: "))
                  (pack $ (show x_aLDd))))
      persistUniqueToFieldNames _
        = error "Degenerate case, should never happen"
      persistUniqueToValues _
        = error "Degenerate case, should never happen"
      persistUniqueKeys Question = []
      persistFieldDef QuestionId
        = ((((((FieldDef (HaskellName (packPTH "Id")))
                 (DBName (packPTH "id")))
                ((FTTypeCon Nothing) (packPTH "QuestionId")))
               SqlInt64)
              [])
             True)
            ((ForeignRef (HaskellName (packPTH "Question")))
               ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))
      persistIdField = QuestionId
      fieldLens QuestionId
        = (lensPTH entityKey)
            (\ Entity _ value_aLDe key_aLDf -> (Entity key_aLDf) value_aLDe)
    instance ToBackendKey MongoContext Question where
      toBackendKey = unQuestionKey
      fromBackendKey = QuestionKey
    data TestData
      = TestData {testDataName :: !Text,
                  testDataDescription :: !Text,
                  testDataCreationDate :: !UTCTime,
                  testDataPassingNumber :: !Int,
                  testDataQuestion :: !Text}
      deriving (Eq, Read, Show, Generic)
    type TestDataId = Key TestData
    instance PersistEntity TestData where
      type PersistEntityBackend TestData = MongoContext
      data Unique TestData
      newtype Key TestData
        = TestDataKey {unTestDataKey :: (BackendKey MongoContext)}
        deriving (Show,
                  Read,
                  Eq,
                  Ord,
                  path-pieces-0.2.1:Web.PathPieces.PathPiece,
                  http-api-data-0.3.7.2:Web.Internal.HttpApiData.ToHttpApiData,
                  http-api-data-0.3.7.2:Web.Internal.HttpApiData.FromHttpApiData,
                  PersistField,
                  persistent-2.8.1:Database.Persist.Sql.Class.PersistFieldSql,
                  ToJSON,
                  FromJSON)
      data EntityField TestData typ
        = typ ~ Key TestData => TestDataId |
          typ ~ Text => TestDataName |
          typ ~ Text => TestDataDescription |
          typ ~ UTCTime => TestDataCreationDate |
          typ ~ Int => TestDataPassingNumber |
          typ ~ Text => TestDataQuestion
      keyToValues
        = ((ghc-prim-0.5.1.1:GHC.Types.: [])
             . (toPersistValue . unTestDataKey))
      keyFromValues
        = ((fmap TestDataKey)
             . (fromPersistValue . Database.Persist.TH.headNote))
      entityDef _
        = (((((((((EntityDef (HaskellName (packPTH "TestData")))
                    (DBName (packPTH "test_data")))
                   (((((((FieldDef (HaskellName (packPTH "Id")))
                           (DBName (packPTH "id")))
                          ((FTTypeCon Nothing) (packPTH "TestDataId")))
                         SqlInt64)
                        [])
                       True)
                      ((ForeignRef (HaskellName (packPTH "TestData")))
                         ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                  [])
                 [((((((FieldDef (HaskellName (packPTH "name")))
                         (DBName (packPTH "name")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "description")))
                         (DBName (packPTH "description")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "creationDate")))
                         (DBName (packPTH "creation_date")))
                        ((FTTypeCon Nothing) (packPTH "UTCTime")))
                       SqlDayTime)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "passingNumber")))
                         (DBName (packPTH "passing_number")))
                        ((FTTypeCon Nothing) (packPTH "Int")))
                       SqlInt64)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "question")))
                         (DBName (packPTH "question")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference])
                [])
               [])
              [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
             (Data.Map.Internal.fromList []))
            False
      toPersistFields (TestData x_aLDj x_aLDk x_aLDl x_aLDm x_aLDn)
        = [SomePersistField x_aLDj, SomePersistField x_aLDk,
           SomePersistField x_aLDl, SomePersistField x_aLDm,
           SomePersistField x_aLDn]
      fromPersistValues [x1_aLDp, x2_aLDq, x3_aLDr, x4_aLDs, x5_aLDt]
        = TestData
            <$>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "name")))
                 . fromPersistValue)
                x1_aLDp
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "description")))
                 . fromPersistValue)
                x2_aLDq
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "creationDate")))
                 . fromPersistValue)
                x3_aLDr
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "passingNumber")))
                 . fromPersistValue)
                x4_aLDs
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "question")))
                 . fromPersistValue)
                x5_aLDt
      fromPersistValues x_aLDo
        = (Left
             $ ((mappend (packPTH "TestData: fromPersistValues failed on: "))
                  (pack $ (show x_aLDo))))
      persistUniqueToFieldNames _
        = error "Degenerate case, should never happen"
      persistUniqueToValues _
        = error "Degenerate case, should never happen"
      persistUniqueKeys
        (TestData _name_aLDu
                  _description_aLDv
                  _creationDate_aLDw
                  _passingNumber_aLDx
                  _question_aLDy)
        = []
      persistFieldDef TestDataId
        = ((((((FieldDef (HaskellName (packPTH "Id")))
                 (DBName (packPTH "id")))
                ((FTTypeCon Nothing) (packPTH "TestDataId")))
               SqlInt64)
              [])
             True)
            ((ForeignRef (HaskellName (packPTH "TestData")))
               ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))
      persistFieldDef TestDataName
        = ((((((FieldDef (HaskellName (packPTH "name")))
                 (DBName (packPTH "name")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef TestDataDescription
        = ((((((FieldDef (HaskellName (packPTH "description")))
                 (DBName (packPTH "description")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef TestDataCreationDate
        = ((((((FieldDef (HaskellName (packPTH "creationDate")))
                 (DBName (packPTH "creation_date")))
                ((FTTypeCon Nothing) (packPTH "UTCTime")))
               SqlDayTime)
              [])
             True)
            NoReference
      persistFieldDef TestDataPassingNumber
        = ((((((FieldDef (HaskellName (packPTH "passingNumber")))
                 (DBName (packPTH "passing_number")))
                ((FTTypeCon Nothing) (packPTH "Int")))
               SqlInt64)
              [])
             True)
            NoReference
      persistFieldDef TestDataQuestion
        = ((((((FieldDef (HaskellName (packPTH "question")))
                 (DBName (packPTH "question")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistIdField = TestDataId
      fieldLens TestDataId
        = (lensPTH entityKey)
            (\ Entity _ value_aLDz key_aLDA -> (Entity key_aLDA) value_aLDz)
      fieldLens TestDataName
        = (lensPTH (testDataName . entityVal))
            (\ Entity key_aLDB value_aLDC x_aLDD
               -> (Entity key_aLDB) value_aLDC {testDataName = x_aLDD})
      fieldLens TestDataDescription
        = (lensPTH (testDataDescription . entityVal))
            (\ Entity key_aLDB value_aLDC x_aLDD
               -> (Entity key_aLDB) value_aLDC {testDataDescription = x_aLDD})
      fieldLens TestDataCreationDate
        = (lensPTH (testDataCreationDate . entityVal))
            (\ Entity key_aLDB value_aLDC x_aLDD
               -> (Entity key_aLDB) value_aLDC {testDataCreationDate = x_aLDD})
      fieldLens TestDataPassingNumber
        = (lensPTH (testDataPassingNumber . entityVal))
            (\ Entity key_aLDB value_aLDC x_aLDD
               -> (Entity key_aLDB) value_aLDC {testDataPassingNumber = x_aLDD})
      fieldLens TestDataQuestion
        = (lensPTH (testDataQuestion . entityVal))
            (\ Entity key_aLDB value_aLDC x_aLDD
               -> (Entity key_aLDB) value_aLDC {testDataQuestion = x_aLDD})
    instance ToBackendKey MongoContext TestData where
      toBackendKey = unTestDataKey
      fromBackendKey = TestDataKey
    migrateAll :: persistent-2.8.1:Database.Persist.Sql.Types.Migration
    migrateAll
      = do let defs_aLDE
                 = [(((((((((EntityDef (HaskellName (packPTH "Question")))
                              (DBName (packPTH "question")))
                             (((((((FieldDef (HaskellName (packPTH "Id")))
                                     (DBName (packPTH "id")))
                                    ((FTTypeCon Nothing) (packPTH "QuestionId")))
                                   SqlInt64)
                                  [])
                                 True)
                                ((ForeignRef (HaskellName (packPTH "Question")))
                                   ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                            [])
                           [])
                          [])
                         [])
                        [])
                       (Data.Map.Internal.fromList []))
                      False,
                    (((((((((EntityDef (HaskellName (packPTH "TestData")))
                              (DBName (packPTH "test_data")))
                             (((((((FieldDef (HaskellName (packPTH "Id")))
                                     (DBName (packPTH "id")))
                                    ((FTTypeCon Nothing) (packPTH "TestDataId")))
                                   SqlInt64)
                                  [])
                                 True)
                                ((ForeignRef (HaskellName (packPTH "TestData")))
                                   ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                            [])
                           [((((((FieldDef (HaskellName (packPTH "name")))
                                   (DBName (packPTH "name")))
                                  ((FTTypeCon Nothing) (packPTH "Text")))
                                 SqlString)
                                [])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "description")))
                                   (DBName (packPTH "description")))
                                  ((FTTypeCon Nothing) (packPTH "Text")))
                                 SqlString)
                                [])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "creationDate")))
                                   (DBName (packPTH "creation_date")))
                                  ((FTTypeCon Nothing) (packPTH "UTCTime")))
                                 SqlDayTime)
                                [])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "passingNumber")))
                                   (DBName (packPTH "passing_number")))
                                  ((FTTypeCon Nothing) (packPTH "Int")))
                                 SqlInt64)
                                [])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "question")))
                                   (DBName (packPTH "question")))
                                  ((FTTypeCon Nothing) (packPTH "Text")))
                                 SqlString)
                                [])
                               True)
                              NoReference])
                          [])
                         [])
                        [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
                       (Data.Map.Internal.fromList []))
                      False]
           (persistent-2.8.1:Database.Persist.Sql.Migration.migrate defs_aLDE)
             ((((((((((EntityDef (HaskellName (packPTH "Question")))
                        (DBName (packPTH "question")))
                       (((((((FieldDef (HaskellName (packPTH "Id")))
                               (DBName (packPTH "id")))
                              ((FTTypeCon Nothing) (packPTH "QuestionId")))
                             SqlInt64)
                            [])
                           True)
                          ((ForeignRef (HaskellName (packPTH "Question")))
                             ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                      [])
                     [])
                    [])
                   [])
                  [])
                 (Data.Map.Internal.fromList []))
                False)
           (persistent-2.8.1:Database.Persist.Sql.Migration.migrate defs_aLDE)
             ((((((((((EntityDef (HaskellName (packPTH "TestData")))
                        (DBName (packPTH "test_data")))
                       (((((((FieldDef (HaskellName (packPTH "Id")))
                               (DBName (packPTH "id")))
                              ((FTTypeCon Nothing) (packPTH "TestDataId")))
                             SqlInt64)
                            [])
                           True)
                          ((ForeignRef (HaskellName (packPTH "TestData")))
                             ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                      [])
                     [((((((FieldDef (HaskellName (packPTH "name")))
                             (DBName (packPTH "name")))
                            ((FTTypeCon Nothing) (packPTH "Text")))
                           SqlString)
                          [])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "description")))
                             (DBName (packPTH "description")))
                            ((FTTypeCon Nothing) (packPTH "Text")))
                           SqlString)
                          [])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "creationDate")))
                             (DBName (packPTH "creation_date")))
                            ((FTTypeCon Nothing) (packPTH "UTCTime")))
                           SqlDayTime)
                          [])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "passingNumber")))
                             (DBName (packPTH "passing_number")))
                            ((FTTypeCon Nothing) (packPTH "Int")))
                           SqlInt64)
                          [])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "question")))
                             (DBName (packPTH "question")))
                            ((FTTypeCon Nothing) (packPTH "Text")))
                           SqlString)
                          [])
                         True)
                        NoReference])
                    [])
                   [])
                  [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
                 (Data.Map.Internal.fromList []))
                False)
/home/nikita/Projects/labs/Databases/Course-Project/Server/src/Model/TestData.hs:(23,103)-(33,2): Splicing expression
    Language.Haskell.TH.Quote.quoteExp
      persistLowerCase
      "\n\
      \Question\n\
      \\n\
      \TestData\n\
      \  name          Text\n\
      \  description   Text\n\
      \  creationDate  UTCTime\n\
      \  passingNumber Int\n\
      \  question      Text\n\
      \  deriving Eq Read Show Generic\n"
  ======>
    [(((((((((EntityDef (HaskellName (packPTH "Question")))
               (DBName (packPTH "question")))
              (((((((FieldDef (HaskellName (packPTH "Id")))
                      (DBName (packPTH "id")))
                     ((FTTypeCon Nothing) (packPTH "QuestionId")))
                    SqlInt64)
                   [])
                  True)
                 ((ForeignRef (HaskellName (packPTH "Question")))
                    ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
             [])
            [])
           [])
          [])
         [])
        (Data.Map.Internal.fromList []))
       False
       {entityFields = [],
        entityId = ((((((FieldDef (HaskellName (packPTH "Id")))
                          (DBName (packPTH "id")))
                         ((FTTypeCon Nothing) (packPTH "QuestionId")))
                        (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                           (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                       [])
                      True)
                     ((ForeignRef (HaskellName (packPTH "Question")))
                        ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))},
     (((((((((EntityDef (HaskellName (packPTH "TestData")))
               (DBName (packPTH "test_data")))
              (((((((FieldDef (HaskellName (packPTH "Id")))
                      (DBName (packPTH "id")))
                     ((FTTypeCon Nothing) (packPTH "TestDataId")))
                    SqlInt64)
                   [])
                  True)
                 ((ForeignRef (HaskellName (packPTH "TestData")))
                    ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
             [])
            [((((((FieldDef (HaskellName (packPTH "name")))
                    (DBName (packPTH "name")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for name")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "description")))
                    (DBName (packPTH "description")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for description")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "creationDate")))
                    (DBName (packPTH "creation_date")))
                   ((FTTypeCon Nothing) (packPTH "UTCTime")))
                  (SqlOther (packPTH "SqlType unset for creationDate")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "passingNumber")))
                    (DBName (packPTH "passing_number")))
                   ((FTTypeCon Nothing) (packPTH "Int")))
                  (SqlOther (packPTH "SqlType unset for passingNumber")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "question")))
                    (DBName (packPTH "question")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for question")))
                 [])
                True)
               NoReference])
           [])
          [])
         [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
        (Data.Map.Internal.fromList []))
       False
       {entityFields = [((((((FieldDef (HaskellName (packPTH "name")))
                               (DBName (packPTH "name")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "description")))
                               (DBName (packPTH "description")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "creationDate")))
                               (DBName (packPTH "creation_date")))
                              ((FTTypeCon Nothing) (packPTH "UTCTime")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy UTCTime)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "passingNumber")))
                               (DBName (packPTH "passing_number")))
                              ((FTTypeCon Nothing) (packPTH "Int")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Int)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "question")))
                               (DBName (packPTH "question")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference],
        entityId = ((((((FieldDef (HaskellName (packPTH "Id")))
                          (DBName (packPTH "id")))
                         ((FTTypeCon Nothing) (packPTH "TestDataId")))
                        (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                           (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                       [])
                      True)
                     ((ForeignRef (HaskellName (packPTH "TestData")))
                        ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))}]
/home/nikita/Projects/labs/Databases/Course-Project/Server/src/Model/TestData.hs:(23,1)-(33,2): Splicing declarations
    share
      [mkPersist (mkPersistSettings (ConT ''MongoContext)),
       mkMigrate "migrateAll"]
      ([(((((((((EntityDef (HaskellName (packPTH "Question")))
                  (DBName (packPTH "question")))
                 (((((((FieldDef (HaskellName (packPTH "Id")))
                         (DBName (packPTH "id")))
                        ((FTTypeCon Nothing) (packPTH "QuestionId")))
                       SqlInt64)
                      [])
                     True)
                    ((ForeignRef (HaskellName (packPTH "Question")))
                       ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                [])
               [])
              [])
             [])
            [])
           (Data.Map.Internal.fromList []))
          False
          {entityFields = [],
           entityId = ((((((FieldDef (HaskellName (packPTH "Id")))
                             (DBName (packPTH "id")))
                            ((FTTypeCon Nothing) (packPTH "QuestionId")))
                           (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                              (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                          [])
                         True)
                        ((ForeignRef (HaskellName (packPTH "Question")))
                           ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))},
        (((((((((EntityDef (HaskellName (packPTH "TestData")))
                  (DBName (packPTH "test_data")))
                 (((((((FieldDef (HaskellName (packPTH "Id")))
                         (DBName (packPTH "id")))
                        ((FTTypeCon Nothing) (packPTH "TestDataId")))
                       SqlInt64)
                      [])
                     True)
                    ((ForeignRef (HaskellName (packPTH "TestData")))
                       ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                [])
               [((((((FieldDef (HaskellName (packPTH "name")))
                       (DBName (packPTH "name")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for name")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "description")))
                       (DBName (packPTH "description")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for description")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "creationDate")))
                       (DBName (packPTH "creation_date")))
                      ((FTTypeCon Nothing) (packPTH "UTCTime")))
                     (SqlOther (packPTH "SqlType unset for creationDate")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "passingNumber")))
                       (DBName (packPTH "passing_number")))
                      ((FTTypeCon Nothing) (packPTH "Int")))
                     (SqlOther (packPTH "SqlType unset for passingNumber")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "question")))
                       (DBName (packPTH "question")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for question")))
                    [])
                   True)
                  NoReference])
              [])
             [])
            [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
           (Data.Map.Internal.fromList []))
          False
          {entityFields = [((((((FieldDef (HaskellName (packPTH "name")))
                                  (DBName (packPTH "name")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "description")))
                                  (DBName (packPTH "description")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "creationDate")))
                                  (DBName (packPTH "creation_date")))
                                 ((FTTypeCon Nothing) (packPTH "UTCTime")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy UTCTime)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "passingNumber")))
                                  (DBName (packPTH "passing_number")))
                                 ((FTTypeCon Nothing) (packPTH "Int")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Int)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "question")))
                                  (DBName (packPTH "question")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference],
           entityId = ((((((FieldDef (HaskellName (packPTH "Id")))
                             (DBName (packPTH "id")))
                            ((FTTypeCon Nothing) (packPTH "TestDataId")))
                           (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                              (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                          [])
                         True)
                        ((ForeignRef (HaskellName (packPTH "TestData")))
                           ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))}])
  ======>
    instance PersistField Question where
      toPersistValue
        = \ ent_aNDI
            -> (PersistMap
                  $ ((Prelude.zip ((Prelude.map pack) []))
                       ((Prelude.map toPersistValue) $ (toPersistFields ent_aNDI))))
      fromPersistValue
        = ((\ x_aNDJ
              -> let
                   columns_aNDK
                     = unordered-containers-0.2.9.0:Data.HashMap.Strict.fromList x_aNDJ
                 in
                   (fromPersistValues
                      $ ((Prelude.map
                            (\ name_aNDL
                               -> case
                                      (unordered-containers-0.2.9.0:Data.HashMap.Base.lookup
                                         (pack name_aNDL))
                                        columns_aNDK
                                  of
                                    Just v_aNDM -> v_aNDM
                                    Nothing -> PersistNull))
                           $ [])))
             <=< getPersistMap)
    instance persistent-2.8.1:Database.Persist.Sql.Class.PersistFieldSql Question where
      persistent-2.8.1:Database.Persist.Sql.Class.sqlType _ = SqlString
    instance PersistField TestData where
      toPersistValue
        = \ ent_aNDN
            -> (PersistMap
                  $ ((Prelude.zip
                        ((Prelude.map pack)
                           ["name", "description", "creationDate", "passingNumber",
                            "question"]))
                       ((Prelude.map toPersistValue) $ (toPersistFields ent_aNDN))))
      fromPersistValue
        = ((\ x_aNDO
              -> let
                   columns_aNDP
                     = unordered-containers-0.2.9.0:Data.HashMap.Strict.fromList x_aNDO
                 in
                   (fromPersistValues
                      $ ((Prelude.map
                            (\ name_aNDQ
                               -> case
                                      (unordered-containers-0.2.9.0:Data.HashMap.Base.lookup
                                         (pack name_aNDQ))
                                        columns_aNDP
                                  of
                                    Just v_aNDR -> v_aNDR
                                    Nothing -> PersistNull))
                           $ ["name", "description", "creationDate", "passingNumber",
                              "question"])))
             <=< getPersistMap)
    instance persistent-2.8.1:Database.Persist.Sql.Class.PersistFieldSql TestData where
      persistent-2.8.1:Database.Persist.Sql.Class.sqlType _ = SqlString
    data Question
      = Question {}
      deriving ()
    type QuestionId = Key Question
    instance PersistEntity Question where
      type PersistEntityBackend Question = MongoContext
      data Unique Question
      newtype Key Question
        = QuestionKey {unQuestionKey :: (BackendKey MongoContext)}
        deriving (Show,
                  Read,
                  Eq,
                  Ord,
                  path-pieces-0.2.1:Web.PathPieces.PathPiece,
                  http-api-data-0.3.7.2:Web.Internal.HttpApiData.ToHttpApiData,
                  http-api-data-0.3.7.2:Web.Internal.HttpApiData.FromHttpApiData,
                  PersistField,
                  persistent-2.8.1:Database.Persist.Sql.Class.PersistFieldSql,
                  ToJSON,
                  FromJSON)
      data EntityField Question typ = typ ~ Key Question => QuestionId
      keyToValues
        = ((ghc-prim-0.5.1.1:GHC.Types.: [])
             . (toPersistValue . unQuestionKey))
      keyFromValues
        = ((fmap QuestionKey)
             . (fromPersistValue . Database.Persist.TH.headNote))
      entityDef _
        = (((((((((EntityDef (HaskellName (packPTH "Question")))
                    (DBName (packPTH "question")))
                   (((((((FieldDef (HaskellName (packPTH "Id")))
                           (DBName (packPTH "id")))
                          ((FTTypeCon Nothing) (packPTH "QuestionId")))
                         SqlInt64)
                        [])
                       True)
                      ((ForeignRef (HaskellName (packPTH "Question")))
                         ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                  [])
                 [])
                [])
               [])
              [])
             (Data.Map.Internal.fromList []))
            False
      toPersistFields Question = []
      fromPersistValues [] = Right Question
      fromPersistValues x_aNDS
        = (Left
             $ ((mappend (packPTH "Question: fromPersistValues failed on: "))
                  (pack $ (show x_aNDS))))
      persistUniqueToFieldNames _
        = error "Degenerate case, should never happen"
      persistUniqueToValues _
        = error "Degenerate case, should never happen"
      persistUniqueKeys Question = []
      persistFieldDef QuestionId
        = ((((((FieldDef (HaskellName (packPTH "Id")))
                 (DBName (packPTH "id")))
                ((FTTypeCon Nothing) (packPTH "QuestionId")))
               SqlInt64)
              [])
             True)
            ((ForeignRef (HaskellName (packPTH "Question")))
               ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))
      persistIdField = QuestionId
      fieldLens QuestionId
        = (lensPTH entityKey)
            (\ Entity _ value_aNDT key_aNDU -> (Entity key_aNDU) value_aNDT)
    instance ToBackendKey MongoContext Question where
      toBackendKey = unQuestionKey
      fromBackendKey = QuestionKey
    data TestData
      = TestData {testDataName :: !Text,
                  testDataDescription :: !Text,
                  testDataCreationDate :: !UTCTime,
                  testDataPassingNumber :: !Int,
                  testDataQuestion :: !Text}
      deriving (Eq, Read, Show, Generic)
    type TestDataId = Key TestData
    instance PersistEntity TestData where
      type PersistEntityBackend TestData = MongoContext
      data Unique TestData
      newtype Key TestData
        = TestDataKey {unTestDataKey :: (BackendKey MongoContext)}
        deriving (Show,
                  Read,
                  Eq,
                  Ord,
                  path-pieces-0.2.1:Web.PathPieces.PathPiece,
                  http-api-data-0.3.7.2:Web.Internal.HttpApiData.ToHttpApiData,
                  http-api-data-0.3.7.2:Web.Internal.HttpApiData.FromHttpApiData,
                  PersistField,
                  persistent-2.8.1:Database.Persist.Sql.Class.PersistFieldSql,
                  ToJSON,
                  FromJSON)
      data EntityField TestData typ
        = typ ~ Key TestData => TestDataId |
          typ ~ Text => TestDataName |
          typ ~ Text => TestDataDescription |
          typ ~ UTCTime => TestDataCreationDate |
          typ ~ Int => TestDataPassingNumber |
          typ ~ Text => TestDataQuestion
      keyToValues
        = ((ghc-prim-0.5.1.1:GHC.Types.: [])
             . (toPersistValue . unTestDataKey))
      keyFromValues
        = ((fmap TestDataKey)
             . (fromPersistValue . Database.Persist.TH.headNote))
      entityDef _
        = (((((((((EntityDef (HaskellName (packPTH "TestData")))
                    (DBName (packPTH "test_data")))
                   (((((((FieldDef (HaskellName (packPTH "Id")))
                           (DBName (packPTH "id")))
                          ((FTTypeCon Nothing) (packPTH "TestDataId")))
                         SqlInt64)
                        [])
                       True)
                      ((ForeignRef (HaskellName (packPTH "TestData")))
                         ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                  [])
                 [((((((FieldDef (HaskellName (packPTH "name")))
                         (DBName (packPTH "name")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "description")))
                         (DBName (packPTH "description")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "creationDate")))
                         (DBName (packPTH "creation_date")))
                        ((FTTypeCon Nothing) (packPTH "UTCTime")))
                       SqlDayTime)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "passingNumber")))
                         (DBName (packPTH "passing_number")))
                        ((FTTypeCon Nothing) (packPTH "Int")))
                       SqlInt64)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "question")))
                         (DBName (packPTH "question")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference])
                [])
               [])
              [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
             (Data.Map.Internal.fromList []))
            False
      toPersistFields (TestData x_aNDY x_aNDZ x_aNE0 x_aNE1 x_aNE2)
        = [SomePersistField x_aNDY, SomePersistField x_aNDZ,
           SomePersistField x_aNE0, SomePersistField x_aNE1,
           SomePersistField x_aNE2]
      fromPersistValues [x1_aNE4, x2_aNE5, x3_aNE6, x4_aNE7, x5_aNE8]
        = TestData
            <$>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "name")))
                 . fromPersistValue)
                x1_aNE4
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "description")))
                 . fromPersistValue)
                x2_aNE5
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "creationDate")))
                 . fromPersistValue)
                x3_aNE6
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "passingNumber")))
                 . fromPersistValue)
                x4_aNE7
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "question")))
                 . fromPersistValue)
                x5_aNE8
      fromPersistValues x_aNE3
        = (Left
             $ ((mappend (packPTH "TestData: fromPersistValues failed on: "))
                  (pack $ (show x_aNE3))))
      persistUniqueToFieldNames _
        = error "Degenerate case, should never happen"
      persistUniqueToValues _
        = error "Degenerate case, should never happen"
      persistUniqueKeys
        (TestData _name_aNE9
                  _description_aNEa
                  _creationDate_aNEb
                  _passingNumber_aNEc
                  _question_aNEd)
        = []
      persistFieldDef TestDataId
        = ((((((FieldDef (HaskellName (packPTH "Id")))
                 (DBName (packPTH "id")))
                ((FTTypeCon Nothing) (packPTH "TestDataId")))
               SqlInt64)
              [])
             True)
            ((ForeignRef (HaskellName (packPTH "TestData")))
               ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))
      persistFieldDef TestDataName
        = ((((((FieldDef (HaskellName (packPTH "name")))
                 (DBName (packPTH "name")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef TestDataDescription
        = ((((((FieldDef (HaskellName (packPTH "description")))
                 (DBName (packPTH "description")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef TestDataCreationDate
        = ((((((FieldDef (HaskellName (packPTH "creationDate")))
                 (DBName (packPTH "creation_date")))
                ((FTTypeCon Nothing) (packPTH "UTCTime")))
               SqlDayTime)
              [])
             True)
            NoReference
      persistFieldDef TestDataPassingNumber
        = ((((((FieldDef (HaskellName (packPTH "passingNumber")))
                 (DBName (packPTH "passing_number")))
                ((FTTypeCon Nothing) (packPTH "Int")))
               SqlInt64)
              [])
             True)
            NoReference
      persistFieldDef TestDataQuestion
        = ((((((FieldDef (HaskellName (packPTH "question")))
                 (DBName (packPTH "question")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistIdField = TestDataId
      fieldLens TestDataId
        = (lensPTH entityKey)
            (\ Entity _ value_aNEe key_aNEf -> (Entity key_aNEf) value_aNEe)
      fieldLens TestDataName
        = (lensPTH (testDataName . entityVal))
            (\ Entity key_aNEg value_aNEh x_aNEi
               -> (Entity key_aNEg) value_aNEh {testDataName = x_aNEi})
      fieldLens TestDataDescription
        = (lensPTH (testDataDescription . entityVal))
            (\ Entity key_aNEg value_aNEh x_aNEi
               -> (Entity key_aNEg) value_aNEh {testDataDescription = x_aNEi})
      fieldLens TestDataCreationDate
        = (lensPTH (testDataCreationDate . entityVal))
            (\ Entity key_aNEg value_aNEh x_aNEi
               -> (Entity key_aNEg) value_aNEh {testDataCreationDate = x_aNEi})
      fieldLens TestDataPassingNumber
        = (lensPTH (testDataPassingNumber . entityVal))
            (\ Entity key_aNEg value_aNEh x_aNEi
               -> (Entity key_aNEg) value_aNEh {testDataPassingNumber = x_aNEi})
      fieldLens TestDataQuestion
        = (lensPTH (testDataQuestion . entityVal))
            (\ Entity key_aNEg value_aNEh x_aNEi
               -> (Entity key_aNEg) value_aNEh {testDataQuestion = x_aNEi})
    instance ToBackendKey MongoContext TestData where
      toBackendKey = unTestDataKey
      fromBackendKey = TestDataKey
    migrateAll :: persistent-2.8.1:Database.Persist.Sql.Types.Migration
    migrateAll
      = do let defs_aNEj
                 = [(((((((((EntityDef (HaskellName (packPTH "Question")))
                              (DBName (packPTH "question")))
                             (((((((FieldDef (HaskellName (packPTH "Id")))
                                     (DBName (packPTH "id")))
                                    ((FTTypeCon Nothing) (packPTH "QuestionId")))
                                   SqlInt64)
                                  [])
                                 True)
                                ((ForeignRef (HaskellName (packPTH "Question")))
                                   ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                            [])
                           [])
                          [])
                         [])
                        [])
                       (Data.Map.Internal.fromList []))
                      False,
                    (((((((((EntityDef (HaskellName (packPTH "TestData")))
                              (DBName (packPTH "test_data")))
                             (((((((FieldDef (HaskellName (packPTH "Id")))
                                     (DBName (packPTH "id")))
                                    ((FTTypeCon Nothing) (packPTH "TestDataId")))
                                   SqlInt64)
                                  [])
                                 True)
                                ((ForeignRef (HaskellName (packPTH "TestData")))
                                   ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                            [])
                           [((((((FieldDef (HaskellName (packPTH "name")))
                                   (DBName (packPTH "name")))
                                  ((FTTypeCon Nothing) (packPTH "Text")))
                                 SqlString)
                                [])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "description")))
                                   (DBName (packPTH "description")))
                                  ((FTTypeCon Nothing) (packPTH "Text")))
                                 SqlString)
                                [])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "creationDate")))
                                   (DBName (packPTH "creation_date")))
                                  ((FTTypeCon Nothing) (packPTH "UTCTime")))
                                 SqlDayTime)
                                [])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "passingNumber")))
                                   (DBName (packPTH "passing_number")))
                                  ((FTTypeCon Nothing) (packPTH "Int")))
                                 SqlInt64)
                                [])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "question")))
                                   (DBName (packPTH "question")))
                                  ((FTTypeCon Nothing) (packPTH "Text")))
                                 SqlString)
                                [])
                               True)
                              NoReference])
                          [])
                         [])
                        [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
                       (Data.Map.Internal.fromList []))
                      False]
           (persistent-2.8.1:Database.Persist.Sql.Migration.migrate defs_aNEj)
             ((((((((((EntityDef (HaskellName (packPTH "Question")))
                        (DBName (packPTH "question")))
                       (((((((FieldDef (HaskellName (packPTH "Id")))
                               (DBName (packPTH "id")))
                              ((FTTypeCon Nothing) (packPTH "QuestionId")))
                             SqlInt64)
                            [])
                           True)
                          ((ForeignRef (HaskellName (packPTH "Question")))
                             ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                      [])
                     [])
                    [])
                   [])
                  [])
                 (Data.Map.Internal.fromList []))
                False)
           (persistent-2.8.1:Database.Persist.Sql.Migration.migrate defs_aNEj)
             ((((((((((EntityDef (HaskellName (packPTH "TestData")))
                        (DBName (packPTH "test_data")))
                       (((((((FieldDef (HaskellName (packPTH "Id")))
                               (DBName (packPTH "id")))
                              ((FTTypeCon Nothing) (packPTH "TestDataId")))
                             SqlInt64)
                            [])
                           True)
                          ((ForeignRef (HaskellName (packPTH "TestData")))
                             ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                      [])
                     [((((((FieldDef (HaskellName (packPTH "name")))
                             (DBName (packPTH "name")))
                            ((FTTypeCon Nothing) (packPTH "Text")))
                           SqlString)
                          [])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "description")))
                             (DBName (packPTH "description")))
                            ((FTTypeCon Nothing) (packPTH "Text")))
                           SqlString)
                          [])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "creationDate")))
                             (DBName (packPTH "creation_date")))
                            ((FTTypeCon Nothing) (packPTH "UTCTime")))
                           SqlDayTime)
                          [])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "passingNumber")))
                             (DBName (packPTH "passing_number")))
                            ((FTTypeCon Nothing) (packPTH "Int")))
                           SqlInt64)
                          [])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "question")))
                             (DBName (packPTH "question")))
                            ((FTTypeCon Nothing) (packPTH "Text")))
                           SqlString)
                          [])
                         True)
                        NoReference])
                    [])
                   [])
                  [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
                 (Data.Map.Internal.fromList []))
                False)
