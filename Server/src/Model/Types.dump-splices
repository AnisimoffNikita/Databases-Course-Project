/home/nikita/Projects/labs/Databases/Course-Project/Server/src/Model/Types.hs:29:1-27: Splicing declarations
    derivePersistField "Gender"
  ======>
    instance PersistField Gender where
      toPersistValue = (PersistText . (pack . show))
      fromPersistValue
        = (\ dt_asKaE v_asKaF
             -> case fromPersistValue v_asKaF of
                  Left e_asKaG -> Left e_asKaG
                  Right s'_asKaH
                    -> case (reads $ (unpack s'_asKaH)) of
                         ((x_asKaI, _) ghc-prim-0.5.1.1:GHC.Types.: _) -> Right x_asKaI
                         ghc-prim-0.5.1.1:GHC.Types.[]
                           -> (Left
                                 $ ((pack "Invalid ")
                                      Database.Persist.TH.++
                                        ((pack dt_asKaE)
                                           Database.Persist.TH.++
                                             ((pack ": ") Database.Persist.TH.++ s'_asKaH)))))
            "Gender"
    instance persistent-2.8.1:Database.Persist.Sql.Class.PersistFieldSql Gender where
      persistent-2.8.1:Database.Persist.Sql.Class.sqlType _ = SqlString
/home/nikita/Projects/labs/Databases/Course-Project/Server/src/Model/Types.hs:39:1-36: Splicing declarations
    derivePersistField "QuestionOptions"
  ======>
    instance PersistField QuestionOptions where
      toPersistValue = (PersistText . (pack . show))
      fromPersistValue
        = (\ dt_asKi9 v_asKia
             -> case fromPersistValue v_asKia of
                  Left e_asKib -> Left e_asKib
                  Right s'_asKic
                    -> case (reads $ (unpack s'_asKic)) of
                         ((x_asKid, _) ghc-prim-0.5.1.1:GHC.Types.: _) -> Right x_asKid
                         ghc-prim-0.5.1.1:GHC.Types.[]
                           -> (Left
                                 $ ((pack "Invalid ")
                                      Database.Persist.TH.++
                                        ((pack dt_asKi9)
                                           Database.Persist.TH.++
                                             ((pack ": ") Database.Persist.TH.++ s'_asKic)))))
            "QuestionOptions"
    instance persistent-2.8.1:Database.Persist.Sql.Class.PersistFieldSql QuestionOptions where
      persistent-2.8.1:Database.Persist.Sql.Class.sqlType _ = SqlString
/home/nikita/Projects/labs/Databases/Course-Project/Server/src/Model/Types.hs:49:1-35: Splicing declarations
    derivePersistField "QuestionAnswer"
  ======>
    instance PersistField QuestionAnswer where
      toPersistValue = (PersistText . (pack . show))
      fromPersistValue
        = (\ dt_asKql v_asKqm
             -> case fromPersistValue v_asKqm of
                  Left e_asKqn -> Left e_asKqn
                  Right s'_asKqo
                    -> case (reads $ (unpack s'_asKqo)) of
                         ((x_asKqp, _) ghc-prim-0.5.1.1:GHC.Types.: _) -> Right x_asKqp
                         ghc-prim-0.5.1.1:GHC.Types.[]
                           -> (Left
                                 $ ((pack "Invalid ")
                                      Database.Persist.TH.++
                                        ((pack dt_asKql)
                                           Database.Persist.TH.++
                                             ((pack ": ") Database.Persist.TH.++ s'_asKqo)))))
            "QuestionAnswer"
    instance persistent-2.8.1:Database.Persist.Sql.Class.PersistFieldSql QuestionAnswer where
      persistent-2.8.1:Database.Persist.Sql.Class.sqlType _ = SqlString
/home/nikita/Projects/labs/Databases/Course-Project/Server/src/Model/Types.hs:29:1-27: Splicing declarations
    derivePersistField "Gender"
  ======>
    instance PersistField Gender where
      toPersistValue = (PersistText . (pack . show))
      fromPersistValue
        = (\ dt_asKLv v_asKLw
             -> case fromPersistValue v_asKLw of
                  Left e_asKLx -> Left e_asKLx
                  Right s'_asKLy
                    -> case (reads $ (unpack s'_asKLy)) of
                         ((x_asKLz, _) ghc-prim-0.5.1.1:GHC.Types.: _) -> Right x_asKLz
                         ghc-prim-0.5.1.1:GHC.Types.[]
                           -> (Left
                                 $ ((pack "Invalid ")
                                      Database.Persist.TH.++
                                        ((pack dt_asKLv)
                                           Database.Persist.TH.++
                                             ((pack ": ") Database.Persist.TH.++ s'_asKLy)))))
            "Gender"
    instance persistent-2.8.1:Database.Persist.Sql.Class.PersistFieldSql Gender where
      persistent-2.8.1:Database.Persist.Sql.Class.sqlType _ = SqlString
/home/nikita/Projects/labs/Databases/Course-Project/Server/src/Model/Types.hs:39:1-36: Splicing declarations
    derivePersistField "QuestionOptions"
  ======>
    instance PersistField QuestionOptions where
      toPersistValue = (PersistText . (pack . show))
      fromPersistValue
        = (\ dt_asKT0 v_asKT1
             -> case fromPersistValue v_asKT1 of
                  Left e_asKT2 -> Left e_asKT2
                  Right s'_asKT3
                    -> case (reads $ (unpack s'_asKT3)) of
                         ((x_asKT4, _) ghc-prim-0.5.1.1:GHC.Types.: _) -> Right x_asKT4
                         ghc-prim-0.5.1.1:GHC.Types.[]
                           -> (Left
                                 $ ((pack "Invalid ")
                                      Database.Persist.TH.++
                                        ((pack dt_asKT0)
                                           Database.Persist.TH.++
                                             ((pack ": ") Database.Persist.TH.++ s'_asKT3)))))
            "QuestionOptions"
    instance persistent-2.8.1:Database.Persist.Sql.Class.PersistFieldSql QuestionOptions where
      persistent-2.8.1:Database.Persist.Sql.Class.sqlType _ = SqlString
/home/nikita/Projects/labs/Databases/Course-Project/Server/src/Model/Types.hs:49:1-35: Splicing declarations
    derivePersistField "QuestionAnswer"
  ======>
    instance PersistField QuestionAnswer where
      toPersistValue = (PersistText . (pack . show))
      fromPersistValue
        = (\ dt_asL1c v_asL1d
             -> case fromPersistValue v_asL1d of
                  Left e_asL1e -> Left e_asL1e
                  Right s'_asL1f
                    -> case (reads $ (unpack s'_asL1f)) of
                         ((x_asL1g, _) ghc-prim-0.5.1.1:GHC.Types.: _) -> Right x_asL1g
                         ghc-prim-0.5.1.1:GHC.Types.[]
                           -> (Left
                                 $ ((pack "Invalid ")
                                      Database.Persist.TH.++
                                        ((pack dt_asL1c)
                                           Database.Persist.TH.++
                                             ((pack ": ") Database.Persist.TH.++ s'_asL1f)))))
            "QuestionAnswer"
    instance persistent-2.8.1:Database.Persist.Sql.Class.PersistFieldSql QuestionAnswer where
      persistent-2.8.1:Database.Persist.Sql.Class.sqlType _ = SqlString
/home/nikita/Projects/labs/Databases/Course-Project/Server/src/Model/Types.hs:29:1-27: Splicing declarations
    derivePersistField "Gender"
  ======>
    instance PersistField Gender where
      toPersistValue = (PersistText . (pack . show))
      fromPersistValue
        = (\ dt_asWIa v_asWIb
             -> case fromPersistValue v_asWIb of
                  Left e_asWIc -> Left e_asWIc
                  Right s'_asWId
                    -> case (reads $ (unpack s'_asWId)) of
                         ((x_asWIe, _) ghc-prim-0.5.1.1:GHC.Types.: _) -> Right x_asWIe
                         ghc-prim-0.5.1.1:GHC.Types.[]
                           -> (Left
                                 $ ((pack "Invalid ")
                                      Database.Persist.TH.++
                                        ((pack dt_asWIa)
                                           Database.Persist.TH.++
                                             ((pack ": ") Database.Persist.TH.++ s'_asWId)))))
            "Gender"
    instance persistent-2.8.1:Database.Persist.Sql.Class.PersistFieldSql Gender where
      persistent-2.8.1:Database.Persist.Sql.Class.sqlType _ = SqlString
/home/nikita/Projects/labs/Databases/Course-Project/Server/src/Model/Types.hs:39:1-36: Splicing declarations
    derivePersistField "QuestionOptions"
  ======>
    instance PersistField QuestionOptions where
      toPersistValue = (PersistText . (pack . show))
      fromPersistValue
        = (\ dt_asWPF v_asWPG
             -> case fromPersistValue v_asWPG of
                  Left e_asWPH -> Left e_asWPH
                  Right s'_asWPI
                    -> case (reads $ (unpack s'_asWPI)) of
                         ((x_asWPJ, _) ghc-prim-0.5.1.1:GHC.Types.: _) -> Right x_asWPJ
                         ghc-prim-0.5.1.1:GHC.Types.[]
                           -> (Left
                                 $ ((pack "Invalid ")
                                      Database.Persist.TH.++
                                        ((pack dt_asWPF)
                                           Database.Persist.TH.++
                                             ((pack ": ") Database.Persist.TH.++ s'_asWPI)))))
            "QuestionOptions"
    instance persistent-2.8.1:Database.Persist.Sql.Class.PersistFieldSql QuestionOptions where
      persistent-2.8.1:Database.Persist.Sql.Class.sqlType _ = SqlString
/home/nikita/Projects/labs/Databases/Course-Project/Server/src/Model/Types.hs:49:1-35: Splicing declarations
    derivePersistField "QuestionAnswer"
  ======>
    instance PersistField QuestionAnswer where
      toPersistValue = (PersistText . (pack . show))
      fromPersistValue
        = (\ dt_asWXR v_asWXS
             -> case fromPersistValue v_asWXS of
                  Left e_asWXT -> Left e_asWXT
                  Right s'_asWXU
                    -> case (reads $ (unpack s'_asWXU)) of
                         ((x_asWXV, _) ghc-prim-0.5.1.1:GHC.Types.: _) -> Right x_asWXV
                         ghc-prim-0.5.1.1:GHC.Types.[]
                           -> (Left
                                 $ ((pack "Invalid ")
                                      Database.Persist.TH.++
                                        ((pack dt_asWXR)
                                           Database.Persist.TH.++
                                             ((pack ": ") Database.Persist.TH.++ s'_asWXU)))))
            "QuestionAnswer"
    instance persistent-2.8.1:Database.Persist.Sql.Class.PersistFieldSql QuestionAnswer where
      persistent-2.8.1:Database.Persist.Sql.Class.sqlType _ = SqlString
