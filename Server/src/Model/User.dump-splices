/home/nikita/Projects/labs/Databases/Course-Project/Server/src/Model/User.hs:(27,156)-(47,2): Splicing expression
    Language.Haskell.TH.Quote.quoteExp
      persistLowerCase
      "\n\
      \TestResult\n\
      \  testKey       Text\n\
      \  result        Text\n\
      \  passingDate   UTCTime\n\
      \  deriving      Eq Read Show Generic\n\
      \User\n\
      \  username      Text\n\
      \  password      Text\n\
      \  email         Text\n\
      \  avatar        Text\n\
      \  firstName     Text Maybe\n\
      \  secondName    Text Maybe\n\
      \  birthDay      UTCTime Maybe\n\
      \  sex           Int Maybe\n\
      \  createdTests  [ObjectId]\n\
      \  passedTests   [TestResult]\n\
      \  Email         email\n\
      \  Username      username\n\
      \  deriving      Eq Read Show Generic\n"
  ======>
    [(((((((((EntityDef (HaskellName (packPTH "TestResult")))
               (DBName (packPTH "test_result")))
              (((((((FieldDef (HaskellName (packPTH "Id")))
                      (DBName (packPTH "id")))
                     ((FTTypeCon Nothing) (packPTH "TestResultId")))
                    SqlInt64)
                   [])
                  True)
                 ((ForeignRef (HaskellName (packPTH "TestResult")))
                    ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
             [])
            [((((((FieldDef (HaskellName (packPTH "testKey")))
                    (DBName (packPTH "test_key")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for testKey")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "result")))
                    (DBName (packPTH "result")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for result")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "passingDate")))
                    (DBName (packPTH "passing_date")))
                   ((FTTypeCon Nothing) (packPTH "UTCTime")))
                  (SqlOther (packPTH "SqlType unset for passingDate")))
                 [])
                True)
               NoReference])
           [])
          [])
         [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
        (Data.Map.Internal.fromList []))
       False
       {entityFields = [((((((FieldDef (HaskellName (packPTH "testKey")))
                               (DBName (packPTH "test_key")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "result")))
                               (DBName (packPTH "result")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "passingDate")))
                               (DBName (packPTH "passing_date")))
                              ((FTTypeCon Nothing) (packPTH "UTCTime")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy UTCTime)))
                            [])
                           True)
                          NoReference],
        entityId = ((((((FieldDef (HaskellName (packPTH "Id")))
                          (DBName (packPTH "id")))
                         ((FTTypeCon Nothing) (packPTH "TestResultId")))
                        (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                           (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                       [])
                      True)
                     ((ForeignRef (HaskellName (packPTH "TestResult")))
                        ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))},
     (((((((((EntityDef (HaskellName (packPTH "User")))
               (DBName (packPTH "user")))
              (((((((FieldDef (HaskellName (packPTH "Id")))
                      (DBName (packPTH "id")))
                     ((FTTypeCon Nothing) (packPTH "UserId")))
                    SqlInt64)
                   [])
                  True)
                 ((ForeignRef (HaskellName (packPTH "User")))
                    ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
             [])
            [((((((FieldDef (HaskellName (packPTH "username")))
                    (DBName (packPTH "username")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for username")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "password")))
                    (DBName (packPTH "password")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for password")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "email")))
                    (DBName (packPTH "email")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for email")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "avatar")))
                    (DBName (packPTH "avatar")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for avatar")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "firstName")))
                    (DBName (packPTH "first_name")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for firstName")))
                 [packPTH "Maybe"])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "secondName")))
                    (DBName (packPTH "second_name")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for secondName")))
                 [packPTH "Maybe"])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "birthDay")))
                    (DBName (packPTH "birth_day")))
                   ((FTTypeCon Nothing) (packPTH "UTCTime")))
                  (SqlOther (packPTH "SqlType unset for birthDay")))
                 [packPTH "Maybe"])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "sex")))
                    (DBName (packPTH "sex")))
                   ((FTTypeCon Nothing) (packPTH "Int")))
                  (SqlOther (packPTH "SqlType unset for sex")))
                 [packPTH "Maybe"])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "createdTests")))
                    (DBName (packPTH "created_tests")))
                   (FTList ((FTTypeCon Nothing) (packPTH "ObjectId"))))
                  (SqlOther (packPTH "SqlType unset for createdTests")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "passedTests")))
                    (DBName (packPTH "passed_tests")))
                   (FTList ((FTTypeCon Nothing) (packPTH "TestResult"))))
                  (SqlOther (packPTH "SqlType unset for passedTests")))
                 [])
                True)
               (EmbedRef
                  ((EmbedEntityDef (HaskellName (packPTH "TestResult")))
                     [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing) Nothing,
                      ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                      ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                        Nothing]))])
           [(((UniqueDef (HaskellName (packPTH "Email")))
                (DBName (packPTH "email")))
               [(HaskellName (packPTH "email"), DBName (packPTH "email"))])
              [],
            (((UniqueDef (HaskellName (packPTH "Username")))
                (DBName (packPTH "username")))
               [(HaskellName (packPTH "username"), DBName (packPTH "username"))])
              []])
          [])
         [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
        (Data.Map.Internal.fromList []))
       False
       {entityFields = [((((((FieldDef (HaskellName (packPTH "username")))
                               (DBName (packPTH "username")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "password")))
                               (DBName (packPTH "password")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "email")))
                               (DBName (packPTH "email")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "avatar")))
                               (DBName (packPTH "avatar")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "firstName")))
                               (DBName (packPTH "first_name")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [packPTH "Maybe"])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "secondName")))
                               (DBName (packPTH "second_name")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [packPTH "Maybe"])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "birthDay")))
                               (DBName (packPTH "birth_day")))
                              ((FTTypeCon Nothing) (packPTH "UTCTime")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy UTCTime)))
                            [packPTH "Maybe"])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "sex")))
                               (DBName (packPTH "sex")))
                              ((FTTypeCon Nothing) (packPTH "Int")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Int)))
                            [packPTH "Maybe"])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "createdTests")))
                               (DBName (packPTH "created_tests")))
                              (FTList ((FTTypeCon Nothing) (packPTH "ObjectId"))))
                             SqlString)
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "passedTests")))
                               (DBName (packPTH "passed_tests")))
                              (FTList ((FTTypeCon Nothing) (packPTH "TestResult"))))
                             SqlString)
                            [])
                           True)
                          (EmbedRef
                             ((EmbedEntityDef (HaskellName (packPTH "TestResult")))
                                [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing) Nothing,
                                 ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                                 ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                                   Nothing]))],
        entityId = ((((((FieldDef (HaskellName (packPTH "Id")))
                          (DBName (packPTH "id")))
                         ((FTTypeCon Nothing) (packPTH "UserId")))
                        (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                           (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                       [])
                      True)
                     ((ForeignRef (HaskellName (packPTH "User")))
                        ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))}]
/home/nikita/Projects/labs/Databases/Course-Project/Server/src/Model/User.hs:(27,1)-(47,2): Splicing declarations
    share
      [mkPersist
         (mkPersistSettings (ConT ''MongoContext))
           {mpsGenerateLenses = True, mpsPrefixFields = False},
       mkMigrate "migrateAll"]
      ([(((((((((EntityDef (HaskellName (packPTH "TestResult")))
                  (DBName (packPTH "test_result")))
                 (((((((FieldDef (HaskellName (packPTH "Id")))
                         (DBName (packPTH "id")))
                        ((FTTypeCon Nothing) (packPTH "TestResultId")))
                       SqlInt64)
                      [])
                     True)
                    ((ForeignRef (HaskellName (packPTH "TestResult")))
                       ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                [])
               [((((((FieldDef (HaskellName (packPTH "testKey")))
                       (DBName (packPTH "test_key")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for testKey")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "result")))
                       (DBName (packPTH "result")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for result")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "passingDate")))
                       (DBName (packPTH "passing_date")))
                      ((FTTypeCon Nothing) (packPTH "UTCTime")))
                     (SqlOther (packPTH "SqlType unset for passingDate")))
                    [])
                   True)
                  NoReference])
              [])
             [])
            [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
           (Data.Map.Internal.fromList []))
          False
          {entityFields = [((((((FieldDef (HaskellName (packPTH "testKey")))
                                  (DBName (packPTH "test_key")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "result")))
                                  (DBName (packPTH "result")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "passingDate")))
                                  (DBName (packPTH "passing_date")))
                                 ((FTTypeCon Nothing) (packPTH "UTCTime")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy UTCTime)))
                               [])
                              True)
                             NoReference],
           entityId = ((((((FieldDef (HaskellName (packPTH "Id")))
                             (DBName (packPTH "id")))
                            ((FTTypeCon Nothing) (packPTH "TestResultId")))
                           (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                              (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                          [])
                         True)
                        ((ForeignRef (HaskellName (packPTH "TestResult")))
                           ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))},
        (((((((((EntityDef (HaskellName (packPTH "User")))
                  (DBName (packPTH "user")))
                 (((((((FieldDef (HaskellName (packPTH "Id")))
                         (DBName (packPTH "id")))
                        ((FTTypeCon Nothing) (packPTH "UserId")))
                       SqlInt64)
                      [])
                     True)
                    ((ForeignRef (HaskellName (packPTH "User")))
                       ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                [])
               [((((((FieldDef (HaskellName (packPTH "username")))
                       (DBName (packPTH "username")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for username")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "password")))
                       (DBName (packPTH "password")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for password")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "email")))
                       (DBName (packPTH "email")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for email")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "avatar")))
                       (DBName (packPTH "avatar")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for avatar")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "firstName")))
                       (DBName (packPTH "first_name")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for firstName")))
                    [packPTH "Maybe"])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "secondName")))
                       (DBName (packPTH "second_name")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for secondName")))
                    [packPTH "Maybe"])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "birthDay")))
                       (DBName (packPTH "birth_day")))
                      ((FTTypeCon Nothing) (packPTH "UTCTime")))
                     (SqlOther (packPTH "SqlType unset for birthDay")))
                    [packPTH "Maybe"])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "sex")))
                       (DBName (packPTH "sex")))
                      ((FTTypeCon Nothing) (packPTH "Int")))
                     (SqlOther (packPTH "SqlType unset for sex")))
                    [packPTH "Maybe"])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "createdTests")))
                       (DBName (packPTH "created_tests")))
                      (FTList ((FTTypeCon Nothing) (packPTH "ObjectId"))))
                     (SqlOther (packPTH "SqlType unset for createdTests")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "passedTests")))
                       (DBName (packPTH "passed_tests")))
                      (FTList ((FTTypeCon Nothing) (packPTH "TestResult"))))
                     (SqlOther (packPTH "SqlType unset for passedTests")))
                    [])
                   True)
                  (EmbedRef
                     ((EmbedEntityDef (HaskellName (packPTH "TestResult")))
                        [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing) Nothing,
                         ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                         ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                           Nothing]))])
              [(((UniqueDef (HaskellName (packPTH "Email")))
                   (DBName (packPTH "email")))
                  [(HaskellName (packPTH "email"), DBName (packPTH "email"))])
                 [],
               (((UniqueDef (HaskellName (packPTH "Username")))
                   (DBName (packPTH "username")))
                  [(HaskellName (packPTH "username"), DBName (packPTH "username"))])
                 []])
             [])
            [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
           (Data.Map.Internal.fromList []))
          False
          {entityFields = [((((((FieldDef (HaskellName (packPTH "username")))
                                  (DBName (packPTH "username")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "password")))
                                  (DBName (packPTH "password")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "email")))
                                  (DBName (packPTH "email")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "avatar")))
                                  (DBName (packPTH "avatar")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "firstName")))
                                  (DBName (packPTH "first_name")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [packPTH "Maybe"])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "secondName")))
                                  (DBName (packPTH "second_name")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [packPTH "Maybe"])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "birthDay")))
                                  (DBName (packPTH "birth_day")))
                                 ((FTTypeCon Nothing) (packPTH "UTCTime")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy UTCTime)))
                               [packPTH "Maybe"])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "sex")))
                                  (DBName (packPTH "sex")))
                                 ((FTTypeCon Nothing) (packPTH "Int")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Int)))
                               [packPTH "Maybe"])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "createdTests")))
                                  (DBName (packPTH "created_tests")))
                                 (FTList ((FTTypeCon Nothing) (packPTH "ObjectId"))))
                                SqlString)
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "passedTests")))
                                  (DBName (packPTH "passed_tests")))
                                 (FTList ((FTTypeCon Nothing) (packPTH "TestResult"))))
                                SqlString)
                               [])
                              True)
                             (EmbedRef
                                ((EmbedEntityDef (HaskellName (packPTH "TestResult")))
                                   [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing) Nothing,
                                    ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                                    ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                                      Nothing]))],
           entityId = ((((((FieldDef (HaskellName (packPTH "Id")))
                             (DBName (packPTH "id")))
                            ((FTTypeCon Nothing) (packPTH "UserId")))
                           (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                              (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                          [])
                         True)
                        ((ForeignRef (HaskellName (packPTH "User")))
                           ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))}])
  ======>
    instance PersistField TestResult where
      toPersistValue
        = \ ent_aU1X
            -> (PersistMap
                  $ ((Prelude.zip
                        ((Prelude.map pack) ["testKey", "result", "passingDate"]))
                       ((Prelude.map toPersistValue) $ (toPersistFields ent_aU1X))))
      fromPersistValue
        = ((\ x_aU1Y
              -> let
                   columns_aU1Z
                     = unordered-containers-0.2.9.0:Data.HashMap.Strict.fromList x_aU1Y
                 in
                   (fromPersistValues
                      $ ((Prelude.map
                            (\ name_aU20
                               -> case
                                      (unordered-containers-0.2.9.0:Data.HashMap.Base.lookup
                                         (pack name_aU20))
                                        columns_aU1Z
                                  of
                                    Just v_aU21 -> v_aU21
                                    Nothing -> PersistNull))
                           $ ["testKey", "result", "passingDate"])))
             <=< getPersistMap)
    instance persistent-2.8.1:Database.Persist.Sql.Class.PersistFieldSql TestResult where
      persistent-2.8.1:Database.Persist.Sql.Class.sqlType _ = SqlString
    instance PersistField User where
      toPersistValue
        = \ ent_aU22
            -> (PersistMap
                  $ ((Prelude.zip
                        ((Prelude.map pack)
                           ["username", "password", "email", "avatar", "firstName",
                            "secondName", "birthDay", "sex", "createdTests", "passedTests"]))
                       ((Prelude.map toPersistValue) $ (toPersistFields ent_aU22))))
      fromPersistValue
        = ((\ x_aU23
              -> let
                   columns_aU24
                     = unordered-containers-0.2.9.0:Data.HashMap.Strict.fromList x_aU23
                 in
                   (fromPersistValues
                      $ ((Prelude.map
                            (\ name_aU25
                               -> case
                                      (unordered-containers-0.2.9.0:Data.HashMap.Base.lookup
                                         (pack name_aU25))
                                        columns_aU24
                                  of
                                    Just v_aU26 -> v_aU26
                                    Nothing -> PersistNull))
                           $ ["username", "password", "email", "avatar", "firstName",
                              "secondName", "birthDay", "sex", "createdTests", "passedTests"])))
             <=< getPersistMap)
    instance persistent-2.8.1:Database.Persist.Sql.Class.PersistFieldSql User where
      persistent-2.8.1:Database.Persist.Sql.Class.sqlType _ = SqlString
    data TestResult
      = TestResult {_testKey :: !Text,
                    _result :: !Text,
                    _passingDate :: !UTCTime}
      deriving (Eq, Read, Show, Generic)
    type TestResultId = Key TestResult
    instance PersistEntity TestResult where
      type PersistEntityBackend TestResult = MongoContext
      data Unique TestResult
      newtype Key TestResult
        = TestResultKey {unTestResultKey :: (BackendKey MongoContext)}
        deriving (Show,
                  Read,
                  Eq,
                  Ord,
                  path-pieces-0.2.1:Web.PathPieces.PathPiece,
                  http-api-data-0.3.7.2:Web.Internal.HttpApiData.ToHttpApiData,
                  http-api-data-0.3.7.2:Web.Internal.HttpApiData.FromHttpApiData,
                  PersistField,
                  persistent-2.8.1:Database.Persist.Sql.Class.PersistFieldSql,
                  Aeson.ToJSON,
                  Aeson.FromJSON)
      data EntityField TestResult typ
        = typ ~ Key TestResult => TestResultId |
          typ ~ Text => TestKey |
          typ ~ Text => Result |
          typ ~ UTCTime => PassingDate
      keyToValues
        = ((ghc-prim-0.5.1.1:GHC.Types.: [])
             . (toPersistValue . unTestResultKey))
      keyFromValues
        = ((fmap TestResultKey)
             . (fromPersistValue . Database.Persist.TH.headNote))
      entityDef _
        = (((((((((EntityDef (HaskellName (packPTH "TestResult")))
                    (DBName (packPTH "test_result")))
                   (((((((FieldDef (HaskellName (packPTH "Id")))
                           (DBName (packPTH "id")))
                          ((FTTypeCon Nothing) (packPTH "TestResultId")))
                         SqlInt64)
                        [])
                       True)
                      ((ForeignRef (HaskellName (packPTH "TestResult")))
                         ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                  [])
                 [((((((FieldDef (HaskellName (packPTH "testKey")))
                         (DBName (packPTH "test_key")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "result")))
                         (DBName (packPTH "result")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "passingDate")))
                         (DBName (packPTH "passing_date")))
                        ((FTTypeCon Nothing) (packPTH "UTCTime")))
                       SqlDayTime)
                      [])
                     True)
                    NoReference])
                [])
               [])
              [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
             (Data.Map.Internal.fromList []))
            False
      toPersistFields (TestResult x_aU27 x_aU28 x_aU29)
        = [SomePersistField x_aU27, SomePersistField x_aU28,
           SomePersistField x_aU29]
      fromPersistValues [x1_aU2b, x2_aU2c, x3_aU2d]
        = TestResult
            <$>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "testKey")))
                 . fromPersistValue)
                x1_aU2b
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "result")))
                 . fromPersistValue)
                x2_aU2c
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "passingDate")))
                 . fromPersistValue)
                x3_aU2d
      fromPersistValues x_aU2a
        = (Left
             $ ((mappend (packPTH "TestResult: fromPersistValues failed on: "))
                  (pack $ (show x_aU2a))))
      persistUniqueToFieldNames _
        = error "Degenerate case, should never happen"
      persistUniqueToValues _
        = error "Degenerate case, should never happen"
      persistUniqueKeys
        (TestResult _testKey_aU2e _result_aU2f _passingDate_aU2g)
        = []
      persistFieldDef TestResultId
        = ((((((FieldDef (HaskellName (packPTH "Id")))
                 (DBName (packPTH "id")))
                ((FTTypeCon Nothing) (packPTH "TestResultId")))
               SqlInt64)
              [])
             True)
            ((ForeignRef (HaskellName (packPTH "TestResult")))
               ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))
      persistFieldDef TestKey
        = ((((((FieldDef (HaskellName (packPTH "testKey")))
                 (DBName (packPTH "test_key")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef Result
        = ((((((FieldDef (HaskellName (packPTH "result")))
                 (DBName (packPTH "result")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef PassingDate
        = ((((((FieldDef (HaskellName (packPTH "passingDate")))
                 (DBName (packPTH "passing_date")))
                ((FTTypeCon Nothing) (packPTH "UTCTime")))
               SqlDayTime)
              [])
             True)
            NoReference
      persistIdField = TestResultId
      fieldLens TestResultId
        = (lensPTH entityKey)
            (\ Entity _ value_aU2h key_aU2i -> (Entity key_aU2i) value_aU2h)
      fieldLens TestKey
        = (lensPTH (_testKey . entityVal))
            (\ Entity key_aU2j value_aU2k x_aU2l
               -> (Entity key_aU2j) value_aU2k {_testKey = x_aU2l})
      fieldLens Result
        = (lensPTH (_result . entityVal))
            (\ Entity key_aU2j value_aU2k x_aU2l
               -> (Entity key_aU2j) value_aU2k {_result = x_aU2l})
      fieldLens PassingDate
        = (lensPTH (_passingDate . entityVal))
            (\ Entity key_aU2j value_aU2k x_aU2l
               -> (Entity key_aU2j) value_aU2k {_passingDate = x_aU2l})
    testKey ::
      forall f.
      Functor f => (Text -> f Text) -> TestResult -> f TestResult
    testKey f_aU2o a_aU2p
      = (fmap setter_aU2n) (f_aU2o needle_aU2m)
      where
          needle_aU2m = _testKey a_aU2p
          setter_aU2n y_aU2q = a_aU2p {_testKey = y_aU2q}
    result ::
      forall f.
      Functor f => (Text -> f Text) -> TestResult -> f TestResult
    result f_aU2t a_aU2u
      = (fmap setter_aU2s) (f_aU2t needle_aU2r)
      where
          needle_aU2r = _result a_aU2u
          setter_aU2s y_aU2v = a_aU2u {_result = y_aU2v}
    passingDate ::
      forall f.
      Functor f => (UTCTime -> f UTCTime) -> TestResult -> f TestResult
    passingDate f_aU2y a_aU2z
      = (fmap setter_aU2x) (f_aU2y needle_aU2w)
      where
          needle_aU2w = _passingDate a_aU2z
          setter_aU2x y_aU2A = a_aU2z {_passingDate = y_aU2A}
    instance ToBackendKey MongoContext TestResult where
      toBackendKey = unTestResultKey
      fromBackendKey = TestResultKey
    data User
      = User {_username :: !Text,
              _password :: !Text,
              _email :: !Text,
              _avatar :: !Text,
              _firstName :: !(Maybe Text),
              _secondName :: !(Maybe Text),
              _birthDay :: !(Maybe UTCTime),
              _sex :: !(Maybe Int),
              _createdTests :: ![ObjectId],
              _passedTests :: ![TestResult]}
      deriving (Eq, Read, Show, Generic)
    type UserId = Key User
    instance PersistEntity User where
      type PersistEntityBackend User = MongoContext
      data Unique User = Email Text | Username Text
      newtype Key User
        = UserKey {unUserKey :: (BackendKey MongoContext)}
        deriving (Show,
                  Read,
                  Eq,
                  Ord,
                  path-pieces-0.2.1:Web.PathPieces.PathPiece,
                  http-api-data-0.3.7.2:Web.Internal.HttpApiData.ToHttpApiData,
                  http-api-data-0.3.7.2:Web.Internal.HttpApiData.FromHttpApiData,
                  PersistField,
                  persistent-2.8.1:Database.Persist.Sql.Class.PersistFieldSql,
                  Aeson.ToJSON,
                  Aeson.FromJSON)
      data EntityField User typ
        = typ ~ Key User => UserId |
          typ ~ Text => Username |
          typ ~ Text => Password |
          typ ~ Text => Email |
          typ ~ Text => Avatar |
          typ ~ Maybe Text => FirstName |
          typ ~ Maybe Text => SecondName |
          typ ~ Maybe UTCTime => BirthDay |
          typ ~ Maybe Int => Sex |
          typ ~ [ObjectId] => CreatedTests |
          typ ~ [TestResult] => PassedTests
      keyToValues
        = ((ghc-prim-0.5.1.1:GHC.Types.: [])
             . (toPersistValue . unUserKey))
      keyFromValues
        = ((fmap UserKey)
             . (fromPersistValue . Database.Persist.TH.headNote))
      entityDef _
        = (((((((((EntityDef (HaskellName (packPTH "User")))
                    (DBName (packPTH "user")))
                   (((((((FieldDef (HaskellName (packPTH "Id")))
                           (DBName (packPTH "id")))
                          ((FTTypeCon Nothing) (packPTH "UserId")))
                         SqlInt64)
                        [])
                       True)
                      ((ForeignRef (HaskellName (packPTH "User")))
                         ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                  [])
                 [((((((FieldDef (HaskellName (packPTH "username")))
                         (DBName (packPTH "username")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "password")))
                         (DBName (packPTH "password")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "email")))
                         (DBName (packPTH "email")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "avatar")))
                         (DBName (packPTH "avatar")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "firstName")))
                         (DBName (packPTH "first_name")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [packPTH "Maybe"])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "secondName")))
                         (DBName (packPTH "second_name")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [packPTH "Maybe"])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "birthDay")))
                         (DBName (packPTH "birth_day")))
                        ((FTTypeCon Nothing) (packPTH "UTCTime")))
                       SqlDayTime)
                      [packPTH "Maybe"])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "sex")))
                         (DBName (packPTH "sex")))
                        ((FTTypeCon Nothing) (packPTH "Int")))
                       SqlInt64)
                      [packPTH "Maybe"])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "createdTests")))
                         (DBName (packPTH "created_tests")))
                        (FTList ((FTTypeCon Nothing) (packPTH "ObjectId"))))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "passedTests")))
                         (DBName (packPTH "passed_tests")))
                        (FTList ((FTTypeCon Nothing) (packPTH "TestResult"))))
                       SqlString)
                      [])
                     True)
                    (EmbedRef
                       ((EmbedEntityDef (HaskellName (packPTH "TestResult")))
                          [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing) Nothing,
                           ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                           ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                             Nothing]))])
                [(((UniqueDef (HaskellName (packPTH "Email")))
                     (DBName (packPTH "email")))
                    [(HaskellName (packPTH "email"), DBName (packPTH "email"))])
                   [],
                 (((UniqueDef (HaskellName (packPTH "Username")))
                     (DBName (packPTH "username")))
                    [(HaskellName (packPTH "username"), DBName (packPTH "username"))])
                   []])
               [])
              [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
             (Data.Map.Internal.fromList []))
            False
      toPersistFields
        (User x_aU2B
              x_aU2C
              x_aU2D
              x_aU2E
              x_aU2F
              x_aU2G
              x_aU2H
              x_aU2I
              x_aU2J
              x_aU2K)
        = [SomePersistField x_aU2B, SomePersistField x_aU2C,
           SomePersistField x_aU2D, SomePersistField x_aU2E,
           SomePersistField x_aU2F, SomePersistField x_aU2G,
           SomePersistField x_aU2H, SomePersistField x_aU2I,
           SomePersistField x_aU2J, SomePersistField x_aU2K]
      fromPersistValues
        [x1_aU2M,
         x2_aU2N,
         x3_aU2O,
         x4_aU2P,
         x5_aU2Q,
         x6_aU2R,
         x7_aU2S,
         x8_aU2T,
         x9_aU2U,
         x10_aU2V]
        = User
            <$>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "username")))
                 . fromPersistValue)
                x1_aU2M
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "password")))
                 . fromPersistValue)
                x2_aU2N
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "email")))
                 . fromPersistValue)
                x3_aU2O
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "avatar")))
                 . fromPersistValue)
                x4_aU2P
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "firstName")))
                 . fromPersistValue)
                x5_aU2Q
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "secondName")))
                 . fromPersistValue)
                x6_aU2R
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "birthDay")))
                 . fromPersistValue)
                x7_aU2S
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "sex")))
                 . fromPersistValue)
                x8_aU2T
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "createdTests")))
                 . fromPersistValue)
                x9_aU2U
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "passedTests")))
                 . fromPersistValue)
                x10_aU2V
      fromPersistValues x_aU2L
        = (Left
             $ ((mappend (packPTH "User: fromPersistValues failed on: "))
                  (pack $ (show x_aU2L))))
      persistUniqueToFieldNames Email {}
        = [(HaskellName (packPTH "email"), DBName (packPTH "email"))]
      persistUniqueToFieldNames Username {}
        = [(HaskellName (packPTH "username"), DBName (packPTH "username"))]
      persistUniqueToValues (Email x_aU2W) = [toPersistValue x_aU2W]
      persistUniqueToValues (Username x_aU2X) = [toPersistValue x_aU2X]
      persistUniqueKeys
        (User _username_aU2Y
              _password_aU2Z
              _email_aU30
              _avatar_aU31
              _firstName_aU32
              _secondName_aU33
              _birthDay_aU34
              _sex_aU35
              _createdTests_aU36
              _passedTests_aU37)
        = [Email _email_aU30, Username _username_aU2Y]
      persistFieldDef UserId
        = ((((((FieldDef (HaskellName (packPTH "Id")))
                 (DBName (packPTH "id")))
                ((FTTypeCon Nothing) (packPTH "UserId")))
               SqlInt64)
              [])
             True)
            ((ForeignRef (HaskellName (packPTH "User")))
               ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))
      persistFieldDef Username
        = ((((((FieldDef (HaskellName (packPTH "username")))
                 (DBName (packPTH "username")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef Password
        = ((((((FieldDef (HaskellName (packPTH "password")))
                 (DBName (packPTH "password")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef Email
        = ((((((FieldDef (HaskellName (packPTH "email")))
                 (DBName (packPTH "email")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef Avatar
        = ((((((FieldDef (HaskellName (packPTH "avatar")))
                 (DBName (packPTH "avatar")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef FirstName
        = ((((((FieldDef (HaskellName (packPTH "firstName")))
                 (DBName (packPTH "first_name")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [packPTH "Maybe"])
             True)
            NoReference
      persistFieldDef SecondName
        = ((((((FieldDef (HaskellName (packPTH "secondName")))
                 (DBName (packPTH "second_name")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [packPTH "Maybe"])
             True)
            NoReference
      persistFieldDef BirthDay
        = ((((((FieldDef (HaskellName (packPTH "birthDay")))
                 (DBName (packPTH "birth_day")))
                ((FTTypeCon Nothing) (packPTH "UTCTime")))
               SqlDayTime)
              [packPTH "Maybe"])
             True)
            NoReference
      persistFieldDef Sex
        = ((((((FieldDef (HaskellName (packPTH "sex")))
                 (DBName (packPTH "sex")))
                ((FTTypeCon Nothing) (packPTH "Int")))
               SqlInt64)
              [packPTH "Maybe"])
             True)
            NoReference
      persistFieldDef CreatedTests
        = ((((((FieldDef (HaskellName (packPTH "createdTests")))
                 (DBName (packPTH "created_tests")))
                (FTList ((FTTypeCon Nothing) (packPTH "ObjectId"))))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef PassedTests
        = ((((((FieldDef (HaskellName (packPTH "passedTests")))
                 (DBName (packPTH "passed_tests")))
                (FTList ((FTTypeCon Nothing) (packPTH "TestResult"))))
               SqlString)
              [])
             True)
            (EmbedRef
               ((EmbedEntityDef (HaskellName (packPTH "TestResult")))
                  [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing) Nothing,
                   ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                   ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                     Nothing]))
      persistIdField = UserId
      fieldLens UserId
        = (lensPTH entityKey)
            (\ Entity _ value_aU38 key_aU39 -> (Entity key_aU39) value_aU38)
      fieldLens Username
        = (lensPTH (_username . entityVal))
            (\ Entity key_aU3a value_aU3b x_aU3c
               -> (Entity key_aU3a) value_aU3b {_username = x_aU3c})
      fieldLens Password
        = (lensPTH (_password . entityVal))
            (\ Entity key_aU3a value_aU3b x_aU3c
               -> (Entity key_aU3a) value_aU3b {_password = x_aU3c})
      fieldLens Email
        = (lensPTH (_email . entityVal))
            (\ Entity key_aU3a value_aU3b x_aU3c
               -> (Entity key_aU3a) value_aU3b {_email = x_aU3c})
      fieldLens Avatar
        = (lensPTH (_avatar . entityVal))
            (\ Entity key_aU3a value_aU3b x_aU3c
               -> (Entity key_aU3a) value_aU3b {_avatar = x_aU3c})
      fieldLens FirstName
        = (lensPTH (_firstName . entityVal))
            (\ Entity key_aU3a value_aU3b x_aU3c
               -> (Entity key_aU3a) value_aU3b {_firstName = x_aU3c})
      fieldLens SecondName
        = (lensPTH (_secondName . entityVal))
            (\ Entity key_aU3a value_aU3b x_aU3c
               -> (Entity key_aU3a) value_aU3b {_secondName = x_aU3c})
      fieldLens BirthDay
        = (lensPTH (_birthDay . entityVal))
            (\ Entity key_aU3a value_aU3b x_aU3c
               -> (Entity key_aU3a) value_aU3b {_birthDay = x_aU3c})
      fieldLens Sex
        = (lensPTH (_sex . entityVal))
            (\ Entity key_aU3a value_aU3b x_aU3c
               -> (Entity key_aU3a) value_aU3b {_sex = x_aU3c})
      fieldLens CreatedTests
        = (lensPTH (_createdTests . entityVal))
            (\ Entity key_aU3a value_aU3b x_aU3c
               -> (Entity key_aU3a) value_aU3b {_createdTests = x_aU3c})
      fieldLens PassedTests
        = (lensPTH (_passedTests . entityVal))
            (\ Entity key_aU3a value_aU3b x_aU3c
               -> (Entity key_aU3a) value_aU3b {_passedTests = x_aU3c})
    username ::
      forall f. Functor f => (Text -> f Text) -> User -> f User
    username f_aU3f a_aU3g
      = (fmap setter_aU3e) (f_aU3f needle_aU3d)
      where
          needle_aU3d = _username a_aU3g
          setter_aU3e y_aU3h = a_aU3g {_username = y_aU3h}
    password ::
      forall f. Functor f => (Text -> f Text) -> User -> f User
    password f_aU3k a_aU3l
      = (fmap setter_aU3j) (f_aU3k needle_aU3i)
      where
          needle_aU3i = _password a_aU3l
          setter_aU3j y_aU3m = a_aU3l {_password = y_aU3m}
    email :: forall f. Functor f => (Text -> f Text) -> User -> f User
    email f_aU3p a_aU3q
      = (fmap setter_aU3o) (f_aU3p needle_aU3n)
      where
          needle_aU3n = _email a_aU3q
          setter_aU3o y_aU3r = a_aU3q {_email = y_aU3r}
    avatar :: forall f. Functor f => (Text -> f Text) -> User -> f User
    avatar f_aU3u a_aU3v
      = (fmap setter_aU3t) (f_aU3u needle_aU3s)
      where
          needle_aU3s = _avatar a_aU3v
          setter_aU3t y_aU3w = a_aU3v {_avatar = y_aU3w}
    firstName ::
      forall f.
      Functor f => (Maybe Text -> f (Maybe Text)) -> User -> f User
    firstName f_aU3z a_aU3A
      = (fmap setter_aU3y) (f_aU3z needle_aU3x)
      where
          needle_aU3x = _firstName a_aU3A
          setter_aU3y y_aU3B = a_aU3A {_firstName = y_aU3B}
    secondName ::
      forall f.
      Functor f => (Maybe Text -> f (Maybe Text)) -> User -> f User
    secondName f_aU3E a_aU3F
      = (fmap setter_aU3D) (f_aU3E needle_aU3C)
      where
          needle_aU3C = _secondName a_aU3F
          setter_aU3D y_aU3G = a_aU3F {_secondName = y_aU3G}
    birthDay ::
      forall f.
      Functor f => (Maybe UTCTime -> f (Maybe UTCTime)) -> User -> f User
    birthDay f_aU3J a_aU3K
      = (fmap setter_aU3I) (f_aU3J needle_aU3H)
      where
          needle_aU3H = _birthDay a_aU3K
          setter_aU3I y_aU3L = a_aU3K {_birthDay = y_aU3L}
    sex ::
      forall f.
      Functor f => (Maybe Int -> f (Maybe Int)) -> User -> f User
    sex f_aU3O a_aU3P
      = (fmap setter_aU3N) (f_aU3O needle_aU3M)
      where
          needle_aU3M = _sex a_aU3P
          setter_aU3N y_aU3Q = a_aU3P {_sex = y_aU3Q}
    createdTests ::
      forall f.
      Functor f => ([ObjectId] -> f [ObjectId]) -> User -> f User
    createdTests f_aU3T a_aU3U
      = (fmap setter_aU3S) (f_aU3T needle_aU3R)
      where
          needle_aU3R = _createdTests a_aU3U
          setter_aU3S y_aU3V = a_aU3U {_createdTests = y_aU3V}
    passedTests ::
      forall f.
      Functor f => ([TestResult] -> f [TestResult]) -> User -> f User
    passedTests f_aU3Y a_aU3Z
      = (fmap setter_aU3X) (f_aU3Y needle_aU3W)
      where
          needle_aU3W = _passedTests a_aU3Z
          setter_aU3X y_aU40 = a_aU3Z {_passedTests = y_aU40}
    instance ToBackendKey MongoContext User where
      toBackendKey = unUserKey
      fromBackendKey = UserKey
    migrateAll :: persistent-2.8.1:Database.Persist.Sql.Types.Migration
    migrateAll
      = do let defs_aU41
                 = [(((((((((EntityDef (HaskellName (packPTH "TestResult")))
                              (DBName (packPTH "test_result")))
                             (((((((FieldDef (HaskellName (packPTH "Id")))
                                     (DBName (packPTH "id")))
                                    ((FTTypeCon Nothing) (packPTH "TestResultId")))
                                   SqlInt64)
                                  [])
                                 True)
                                ((ForeignRef (HaskellName (packPTH "TestResult")))
                                   ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                            [])
                           [((((((FieldDef (HaskellName (packPTH "testKey")))
                                   (DBName (packPTH "test_key")))
                                  ((FTTypeCon Nothing) (packPTH "Text")))
                                 SqlString)
                                [])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "result")))
                                   (DBName (packPTH "result")))
                                  ((FTTypeCon Nothing) (packPTH "Text")))
                                 SqlString)
                                [])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "passingDate")))
                                   (DBName (packPTH "passing_date")))
                                  ((FTTypeCon Nothing) (packPTH "UTCTime")))
                                 SqlDayTime)
                                [])
                               True)
                              NoReference])
                          [])
                         [])
                        [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
                       (Data.Map.Internal.fromList []))
                      False,
                    (((((((((EntityDef (HaskellName (packPTH "User")))
                              (DBName (packPTH "user")))
                             (((((((FieldDef (HaskellName (packPTH "Id")))
                                     (DBName (packPTH "id")))
                                    ((FTTypeCon Nothing) (packPTH "UserId")))
                                   SqlInt64)
                                  [])
                                 True)
                                ((ForeignRef (HaskellName (packPTH "User")))
                                   ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                            [])
                           [((((((FieldDef (HaskellName (packPTH "username")))
                                   (DBName (packPTH "username")))
                                  ((FTTypeCon Nothing) (packPTH "Text")))
                                 SqlString)
                                [])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "password")))
                                   (DBName (packPTH "password")))
                                  ((FTTypeCon Nothing) (packPTH "Text")))
                                 SqlString)
                                [])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "email")))
                                   (DBName (packPTH "email")))
                                  ((FTTypeCon Nothing) (packPTH "Text")))
                                 SqlString)
                                [])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "avatar")))
                                   (DBName (packPTH "avatar")))
                                  ((FTTypeCon Nothing) (packPTH "Text")))
                                 SqlString)
                                [])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "firstName")))
                                   (DBName (packPTH "first_name")))
                                  ((FTTypeCon Nothing) (packPTH "Text")))
                                 SqlString)
                                [packPTH "Maybe"])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "secondName")))
                                   (DBName (packPTH "second_name")))
                                  ((FTTypeCon Nothing) (packPTH "Text")))
                                 SqlString)
                                [packPTH "Maybe"])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "birthDay")))
                                   (DBName (packPTH "birth_day")))
                                  ((FTTypeCon Nothing) (packPTH "UTCTime")))
                                 SqlDayTime)
                                [packPTH "Maybe"])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "sex")))
                                   (DBName (packPTH "sex")))
                                  ((FTTypeCon Nothing) (packPTH "Int")))
                                 SqlInt64)
                                [packPTH "Maybe"])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "createdTests")))
                                   (DBName (packPTH "created_tests")))
                                  (FTList ((FTTypeCon Nothing) (packPTH "ObjectId"))))
                                 SqlString)
                                [])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "passedTests")))
                                   (DBName (packPTH "passed_tests")))
                                  (FTList ((FTTypeCon Nothing) (packPTH "TestResult"))))
                                 SqlString)
                                [])
                               True)
                              (EmbedRef
                                 ((EmbedEntityDef (HaskellName (packPTH "TestResult")))
                                    [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing)
                                       Nothing,
                                     ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                                     ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                                       Nothing]))])
                          [(((UniqueDef (HaskellName (packPTH "Email")))
                               (DBName (packPTH "email")))
                              [(HaskellName (packPTH "email"), DBName (packPTH "email"))])
                             [],
                           (((UniqueDef (HaskellName (packPTH "Username")))
                               (DBName (packPTH "username")))
                              [(HaskellName (packPTH "username"), DBName (packPTH "username"))])
                             []])
                         [])
                        [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
                       (Data.Map.Internal.fromList []))
                      False]
           (persistent-2.8.1:Database.Persist.Sql.Migration.migrate defs_aU41)
             ((((((((((EntityDef (HaskellName (packPTH "TestResult")))
                        (DBName (packPTH "test_result")))
                       (((((((FieldDef (HaskellName (packPTH "Id")))
                               (DBName (packPTH "id")))
                              ((FTTypeCon Nothing) (packPTH "TestResultId")))
                             SqlInt64)
                            [])
                           True)
                          ((ForeignRef (HaskellName (packPTH "TestResult")))
                             ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                      [])
                     [((((((FieldDef (HaskellName (packPTH "testKey")))
                             (DBName (packPTH "test_key")))
                            ((FTTypeCon Nothing) (packPTH "Text")))
                           SqlString)
                          [])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "result")))
                             (DBName (packPTH "result")))
                            ((FTTypeCon Nothing) (packPTH "Text")))
                           SqlString)
                          [])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "passingDate")))
                             (DBName (packPTH "passing_date")))
                            ((FTTypeCon Nothing) (packPTH "UTCTime")))
                           SqlDayTime)
                          [])
                         True)
                        NoReference])
                    [])
                   [])
                  [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
                 (Data.Map.Internal.fromList []))
                False)
           (persistent-2.8.1:Database.Persist.Sql.Migration.migrate defs_aU41)
             ((((((((((EntityDef (HaskellName (packPTH "User")))
                        (DBName (packPTH "user")))
                       (((((((FieldDef (HaskellName (packPTH "Id")))
                               (DBName (packPTH "id")))
                              ((FTTypeCon Nothing) (packPTH "UserId")))
                             SqlInt64)
                            [])
                           True)
                          ((ForeignRef (HaskellName (packPTH "User")))
                             ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                      [])
                     [((((((FieldDef (HaskellName (packPTH "username")))
                             (DBName (packPTH "username")))
                            ((FTTypeCon Nothing) (packPTH "Text")))
                           SqlString)
                          [])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "password")))
                             (DBName (packPTH "password")))
                            ((FTTypeCon Nothing) (packPTH "Text")))
                           SqlString)
                          [])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "email")))
                             (DBName (packPTH "email")))
                            ((FTTypeCon Nothing) (packPTH "Text")))
                           SqlString)
                          [])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "avatar")))
                             (DBName (packPTH "avatar")))
                            ((FTTypeCon Nothing) (packPTH "Text")))
                           SqlString)
                          [])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "firstName")))
                             (DBName (packPTH "first_name")))
                            ((FTTypeCon Nothing) (packPTH "Text")))
                           SqlString)
                          [packPTH "Maybe"])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "secondName")))
                             (DBName (packPTH "second_name")))
                            ((FTTypeCon Nothing) (packPTH "Text")))
                           SqlString)
                          [packPTH "Maybe"])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "birthDay")))
                             (DBName (packPTH "birth_day")))
                            ((FTTypeCon Nothing) (packPTH "UTCTime")))
                           SqlDayTime)
                          [packPTH "Maybe"])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "sex")))
                             (DBName (packPTH "sex")))
                            ((FTTypeCon Nothing) (packPTH "Int")))
                           SqlInt64)
                          [packPTH "Maybe"])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "createdTests")))
                             (DBName (packPTH "created_tests")))
                            (FTList ((FTTypeCon Nothing) (packPTH "ObjectId"))))
                           SqlString)
                          [])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "passedTests")))
                             (DBName (packPTH "passed_tests")))
                            (FTList ((FTTypeCon Nothing) (packPTH "TestResult"))))
                           SqlString)
                          [])
                         True)
                        (EmbedRef
                           ((EmbedEntityDef (HaskellName (packPTH "TestResult")))
                              [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing) Nothing,
                               ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                               ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                                 Nothing]))])
                    [(((UniqueDef (HaskellName (packPTH "Email")))
                         (DBName (packPTH "email")))
                        [(HaskellName (packPTH "email"), DBName (packPTH "email"))])
                       [],
                     (((UniqueDef (HaskellName (packPTH "Username")))
                         (DBName (packPTH "username")))
                        [(HaskellName (packPTH "username"), DBName (packPTH "username"))])
                       []])
                   [])
                  [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
                 (Data.Map.Internal.fromList []))
                False)
/home/nikita/Projects/labs/Databases/Course-Project/Server/src/Model/User.hs:(27,156)-(47,2): Splicing expression
    Language.Haskell.TH.Quote.quoteExp
      persistLowerCase
      "\n\
      \TestResult\n\
      \  testKey       Text\n\
      \  result        Text\n\
      \  passingDate   UTCTime\n\
      \  deriving      Eq Read Show Generic\n\
      \User\n\
      \  username      Text\n\
      \  password      Text\n\
      \  email         Text\n\
      \  avatar        Text\n\
      \  firstName     Text Maybe\n\
      \  secondName    Text Maybe\n\
      \  birthDay      UTCTime Maybe\n\
      \  sex           Int Maybe\n\
      \  createdTests  [ObjectId]\n\
      \  passedTests   [TestResult]\n\
      \  Email         email\n\
      \  Username      username\n\
      \  deriving      Eq Read Show Generic\n"
  ======>
    [(((((((((EntityDef (HaskellName (packPTH "TestResult")))
               (DBName (packPTH "test_result")))
              (((((((FieldDef (HaskellName (packPTH "Id")))
                      (DBName (packPTH "id")))
                     ((FTTypeCon Nothing) (packPTH "TestResultId")))
                    SqlInt64)
                   [])
                  True)
                 ((ForeignRef (HaskellName (packPTH "TestResult")))
                    ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
             [])
            [((((((FieldDef (HaskellName (packPTH "testKey")))
                    (DBName (packPTH "test_key")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for testKey")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "result")))
                    (DBName (packPTH "result")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for result")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "passingDate")))
                    (DBName (packPTH "passing_date")))
                   ((FTTypeCon Nothing) (packPTH "UTCTime")))
                  (SqlOther (packPTH "SqlType unset for passingDate")))
                 [])
                True)
               NoReference])
           [])
          [])
         [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
        (Data.Map.Internal.fromList []))
       False
       {entityFields = [((((((FieldDef (HaskellName (packPTH "testKey")))
                               (DBName (packPTH "test_key")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "result")))
                               (DBName (packPTH "result")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "passingDate")))
                               (DBName (packPTH "passing_date")))
                              ((FTTypeCon Nothing) (packPTH "UTCTime")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy UTCTime)))
                            [])
                           True)
                          NoReference],
        entityId = ((((((FieldDef (HaskellName (packPTH "Id")))
                          (DBName (packPTH "id")))
                         ((FTTypeCon Nothing) (packPTH "TestResultId")))
                        (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                           (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                       [])
                      True)
                     ((ForeignRef (HaskellName (packPTH "TestResult")))
                        ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))},
     (((((((((EntityDef (HaskellName (packPTH "User")))
               (DBName (packPTH "user")))
              (((((((FieldDef (HaskellName (packPTH "Id")))
                      (DBName (packPTH "id")))
                     ((FTTypeCon Nothing) (packPTH "UserId")))
                    SqlInt64)
                   [])
                  True)
                 ((ForeignRef (HaskellName (packPTH "User")))
                    ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
             [])
            [((((((FieldDef (HaskellName (packPTH "username")))
                    (DBName (packPTH "username")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for username")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "password")))
                    (DBName (packPTH "password")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for password")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "email")))
                    (DBName (packPTH "email")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for email")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "avatar")))
                    (DBName (packPTH "avatar")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for avatar")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "firstName")))
                    (DBName (packPTH "first_name")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for firstName")))
                 [packPTH "Maybe"])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "secondName")))
                    (DBName (packPTH "second_name")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for secondName")))
                 [packPTH "Maybe"])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "birthDay")))
                    (DBName (packPTH "birth_day")))
                   ((FTTypeCon Nothing) (packPTH "UTCTime")))
                  (SqlOther (packPTH "SqlType unset for birthDay")))
                 [packPTH "Maybe"])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "sex")))
                    (DBName (packPTH "sex")))
                   ((FTTypeCon Nothing) (packPTH "Int")))
                  (SqlOther (packPTH "SqlType unset for sex")))
                 [packPTH "Maybe"])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "createdTests")))
                    (DBName (packPTH "created_tests")))
                   (FTList ((FTTypeCon Nothing) (packPTH "ObjectId"))))
                  (SqlOther (packPTH "SqlType unset for createdTests")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "passedTests")))
                    (DBName (packPTH "passed_tests")))
                   (FTList ((FTTypeCon Nothing) (packPTH "TestResult"))))
                  (SqlOther (packPTH "SqlType unset for passedTests")))
                 [])
                True)
               (EmbedRef
                  ((EmbedEntityDef (HaskellName (packPTH "TestResult")))
                     [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing) Nothing,
                      ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                      ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                        Nothing]))])
           [(((UniqueDef (HaskellName (packPTH "Email")))
                (DBName (packPTH "email")))
               [(HaskellName (packPTH "email"), DBName (packPTH "email"))])
              [],
            (((UniqueDef (HaskellName (packPTH "Username")))
                (DBName (packPTH "username")))
               [(HaskellName (packPTH "username"), DBName (packPTH "username"))])
              []])
          [])
         [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
        (Data.Map.Internal.fromList []))
       False
       {entityFields = [((((((FieldDef (HaskellName (packPTH "username")))
                               (DBName (packPTH "username")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "password")))
                               (DBName (packPTH "password")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "email")))
                               (DBName (packPTH "email")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "avatar")))
                               (DBName (packPTH "avatar")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "firstName")))
                               (DBName (packPTH "first_name")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [packPTH "Maybe"])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "secondName")))
                               (DBName (packPTH "second_name")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [packPTH "Maybe"])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "birthDay")))
                               (DBName (packPTH "birth_day")))
                              ((FTTypeCon Nothing) (packPTH "UTCTime")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy UTCTime)))
                            [packPTH "Maybe"])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "sex")))
                               (DBName (packPTH "sex")))
                              ((FTTypeCon Nothing) (packPTH "Int")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Int)))
                            [packPTH "Maybe"])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "createdTests")))
                               (DBName (packPTH "created_tests")))
                              (FTList ((FTTypeCon Nothing) (packPTH "ObjectId"))))
                             SqlString)
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "passedTests")))
                               (DBName (packPTH "passed_tests")))
                              (FTList ((FTTypeCon Nothing) (packPTH "TestResult"))))
                             SqlString)
                            [])
                           True)
                          (EmbedRef
                             ((EmbedEntityDef (HaskellName (packPTH "TestResult")))
                                [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing) Nothing,
                                 ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                                 ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                                   Nothing]))],
        entityId = ((((((FieldDef (HaskellName (packPTH "Id")))
                          (DBName (packPTH "id")))
                         ((FTTypeCon Nothing) (packPTH "UserId")))
                        (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                           (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                       [])
                      True)
                     ((ForeignRef (HaskellName (packPTH "User")))
                        ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))}]
/home/nikita/Projects/labs/Databases/Course-Project/Server/src/Model/User.hs:(27,1)-(47,2): Splicing declarations
    share
      [mkPersist
         (mkPersistSettings (ConT ''MongoContext))
           {mpsGenerateLenses = True, mpsPrefixFields = False},
       mkMigrate "migrateAll"]
      ([(((((((((EntityDef (HaskellName (packPTH "TestResult")))
                  (DBName (packPTH "test_result")))
                 (((((((FieldDef (HaskellName (packPTH "Id")))
                         (DBName (packPTH "id")))
                        ((FTTypeCon Nothing) (packPTH "TestResultId")))
                       SqlInt64)
                      [])
                     True)
                    ((ForeignRef (HaskellName (packPTH "TestResult")))
                       ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                [])
               [((((((FieldDef (HaskellName (packPTH "testKey")))
                       (DBName (packPTH "test_key")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for testKey")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "result")))
                       (DBName (packPTH "result")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for result")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "passingDate")))
                       (DBName (packPTH "passing_date")))
                      ((FTTypeCon Nothing) (packPTH "UTCTime")))
                     (SqlOther (packPTH "SqlType unset for passingDate")))
                    [])
                   True)
                  NoReference])
              [])
             [])
            [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
           (Data.Map.Internal.fromList []))
          False
          {entityFields = [((((((FieldDef (HaskellName (packPTH "testKey")))
                                  (DBName (packPTH "test_key")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "result")))
                                  (DBName (packPTH "result")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "passingDate")))
                                  (DBName (packPTH "passing_date")))
                                 ((FTTypeCon Nothing) (packPTH "UTCTime")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy UTCTime)))
                               [])
                              True)
                             NoReference],
           entityId = ((((((FieldDef (HaskellName (packPTH "Id")))
                             (DBName (packPTH "id")))
                            ((FTTypeCon Nothing) (packPTH "TestResultId")))
                           (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                              (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                          [])
                         True)
                        ((ForeignRef (HaskellName (packPTH "TestResult")))
                           ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))},
        (((((((((EntityDef (HaskellName (packPTH "User")))
                  (DBName (packPTH "user")))
                 (((((((FieldDef (HaskellName (packPTH "Id")))
                         (DBName (packPTH "id")))
                        ((FTTypeCon Nothing) (packPTH "UserId")))
                       SqlInt64)
                      [])
                     True)
                    ((ForeignRef (HaskellName (packPTH "User")))
                       ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                [])
               [((((((FieldDef (HaskellName (packPTH "username")))
                       (DBName (packPTH "username")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for username")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "password")))
                       (DBName (packPTH "password")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for password")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "email")))
                       (DBName (packPTH "email")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for email")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "avatar")))
                       (DBName (packPTH "avatar")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for avatar")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "firstName")))
                       (DBName (packPTH "first_name")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for firstName")))
                    [packPTH "Maybe"])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "secondName")))
                       (DBName (packPTH "second_name")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for secondName")))
                    [packPTH "Maybe"])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "birthDay")))
                       (DBName (packPTH "birth_day")))
                      ((FTTypeCon Nothing) (packPTH "UTCTime")))
                     (SqlOther (packPTH "SqlType unset for birthDay")))
                    [packPTH "Maybe"])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "sex")))
                       (DBName (packPTH "sex")))
                      ((FTTypeCon Nothing) (packPTH "Int")))
                     (SqlOther (packPTH "SqlType unset for sex")))
                    [packPTH "Maybe"])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "createdTests")))
                       (DBName (packPTH "created_tests")))
                      (FTList ((FTTypeCon Nothing) (packPTH "ObjectId"))))
                     (SqlOther (packPTH "SqlType unset for createdTests")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "passedTests")))
                       (DBName (packPTH "passed_tests")))
                      (FTList ((FTTypeCon Nothing) (packPTH "TestResult"))))
                     (SqlOther (packPTH "SqlType unset for passedTests")))
                    [])
                   True)
                  (EmbedRef
                     ((EmbedEntityDef (HaskellName (packPTH "TestResult")))
                        [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing) Nothing,
                         ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                         ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                           Nothing]))])
              [(((UniqueDef (HaskellName (packPTH "Email")))
                   (DBName (packPTH "email")))
                  [(HaskellName (packPTH "email"), DBName (packPTH "email"))])
                 [],
               (((UniqueDef (HaskellName (packPTH "Username")))
                   (DBName (packPTH "username")))
                  [(HaskellName (packPTH "username"), DBName (packPTH "username"))])
                 []])
             [])
            [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
           (Data.Map.Internal.fromList []))
          False
          {entityFields = [((((((FieldDef (HaskellName (packPTH "username")))
                                  (DBName (packPTH "username")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "password")))
                                  (DBName (packPTH "password")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "email")))
                                  (DBName (packPTH "email")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "avatar")))
                                  (DBName (packPTH "avatar")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "firstName")))
                                  (DBName (packPTH "first_name")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [packPTH "Maybe"])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "secondName")))
                                  (DBName (packPTH "second_name")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [packPTH "Maybe"])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "birthDay")))
                                  (DBName (packPTH "birth_day")))
                                 ((FTTypeCon Nothing) (packPTH "UTCTime")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy UTCTime)))
                               [packPTH "Maybe"])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "sex")))
                                  (DBName (packPTH "sex")))
                                 ((FTTypeCon Nothing) (packPTH "Int")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Int)))
                               [packPTH "Maybe"])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "createdTests")))
                                  (DBName (packPTH "created_tests")))
                                 (FTList ((FTTypeCon Nothing) (packPTH "ObjectId"))))
                                SqlString)
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "passedTests")))
                                  (DBName (packPTH "passed_tests")))
                                 (FTList ((FTTypeCon Nothing) (packPTH "TestResult"))))
                                SqlString)
                               [])
                              True)
                             (EmbedRef
                                ((EmbedEntityDef (HaskellName (packPTH "TestResult")))
                                   [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing) Nothing,
                                    ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                                    ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                                      Nothing]))],
           entityId = ((((((FieldDef (HaskellName (packPTH "Id")))
                             (DBName (packPTH "id")))
                            ((FTTypeCon Nothing) (packPTH "UserId")))
                           (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                              (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                          [])
                         True)
                        ((ForeignRef (HaskellName (packPTH "User")))
                           ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))}])
  ======>
    instance PersistField TestResult where
      toPersistValue
        = \ ent_aUjq
            -> (PersistMap
                  $ ((Prelude.zip
                        ((Prelude.map pack) ["testKey", "result", "passingDate"]))
                       ((Prelude.map toPersistValue) $ (toPersistFields ent_aUjq))))
      fromPersistValue
        = ((\ x_aUjr
              -> let
                   columns_aUjs
                     = unordered-containers-0.2.9.0:Data.HashMap.Strict.fromList x_aUjr
                 in
                   (fromPersistValues
                      $ ((Prelude.map
                            (\ name_aUjt
                               -> case
                                      (unordered-containers-0.2.9.0:Data.HashMap.Base.lookup
                                         (pack name_aUjt))
                                        columns_aUjs
                                  of
                                    Just v_aUju -> v_aUju
                                    Nothing -> PersistNull))
                           $ ["testKey", "result", "passingDate"])))
             <=< getPersistMap)
    instance persistent-2.8.1:Database.Persist.Sql.Class.PersistFieldSql TestResult where
      persistent-2.8.1:Database.Persist.Sql.Class.sqlType _ = SqlString
    instance PersistField User where
      toPersistValue
        = \ ent_aUjv
            -> (PersistMap
                  $ ((Prelude.zip
                        ((Prelude.map pack)
                           ["username", "password", "email", "avatar", "firstName",
                            "secondName", "birthDay", "sex", "createdTests", "passedTests"]))
                       ((Prelude.map toPersistValue) $ (toPersistFields ent_aUjv))))
      fromPersistValue
        = ((\ x_aUjw
              -> let
                   columns_aUjx
                     = unordered-containers-0.2.9.0:Data.HashMap.Strict.fromList x_aUjw
                 in
                   (fromPersistValues
                      $ ((Prelude.map
                            (\ name_aUjy
                               -> case
                                      (unordered-containers-0.2.9.0:Data.HashMap.Base.lookup
                                         (pack name_aUjy))
                                        columns_aUjx
                                  of
                                    Just v_aUjz -> v_aUjz
                                    Nothing -> PersistNull))
                           $ ["username", "password", "email", "avatar", "firstName",
                              "secondName", "birthDay", "sex", "createdTests", "passedTests"])))
             <=< getPersistMap)
    instance persistent-2.8.1:Database.Persist.Sql.Class.PersistFieldSql User where
      persistent-2.8.1:Database.Persist.Sql.Class.sqlType _ = SqlString
    data TestResult
      = TestResult {_testKey :: !Text,
                    _result :: !Text,
                    _passingDate :: !UTCTime}
      deriving (Eq, Read, Show, Generic)
    type TestResultId = Key TestResult
    instance PersistEntity TestResult where
      type PersistEntityBackend TestResult = MongoContext
      data Unique TestResult
      newtype Key TestResult
        = TestResultKey {unTestResultKey :: (BackendKey MongoContext)}
        deriving (Show,
                  Read,
                  Eq,
                  Ord,
                  path-pieces-0.2.1:Web.PathPieces.PathPiece,
                  http-api-data-0.3.7.2:Web.Internal.HttpApiData.ToHttpApiData,
                  http-api-data-0.3.7.2:Web.Internal.HttpApiData.FromHttpApiData,
                  PersistField,
                  persistent-2.8.1:Database.Persist.Sql.Class.PersistFieldSql,
                  Aeson.ToJSON,
                  Aeson.FromJSON)
      data EntityField TestResult typ
        = typ ~ Key TestResult => TestResultId |
          typ ~ Text => TestKey |
          typ ~ Text => Result |
          typ ~ UTCTime => PassingDate
      keyToValues
        = ((ghc-prim-0.5.1.1:GHC.Types.: [])
             . (toPersistValue . unTestResultKey))
      keyFromValues
        = ((fmap TestResultKey)
             . (fromPersistValue . Database.Persist.TH.headNote))
      entityDef _
        = (((((((((EntityDef (HaskellName (packPTH "TestResult")))
                    (DBName (packPTH "test_result")))
                   (((((((FieldDef (HaskellName (packPTH "Id")))
                           (DBName (packPTH "id")))
                          ((FTTypeCon Nothing) (packPTH "TestResultId")))
                         SqlInt64)
                        [])
                       True)
                      ((ForeignRef (HaskellName (packPTH "TestResult")))
                         ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                  [])
                 [((((((FieldDef (HaskellName (packPTH "testKey")))
                         (DBName (packPTH "test_key")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "result")))
                         (DBName (packPTH "result")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "passingDate")))
                         (DBName (packPTH "passing_date")))
                        ((FTTypeCon Nothing) (packPTH "UTCTime")))
                       SqlDayTime)
                      [])
                     True)
                    NoReference])
                [])
               [])
              [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
             (Data.Map.Internal.fromList []))
            False
      toPersistFields (TestResult x_aUjA x_aUjB x_aUjC)
        = [SomePersistField x_aUjA, SomePersistField x_aUjB,
           SomePersistField x_aUjC]
      fromPersistValues [x1_aUjE, x2_aUjF, x3_aUjG]
        = TestResult
            <$>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "testKey")))
                 . fromPersistValue)
                x1_aUjE
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "result")))
                 . fromPersistValue)
                x2_aUjF
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "passingDate")))
                 . fromPersistValue)
                x3_aUjG
      fromPersistValues x_aUjD
        = (Left
             $ ((mappend (packPTH "TestResult: fromPersistValues failed on: "))
                  (pack $ (show x_aUjD))))
      persistUniqueToFieldNames _
        = error "Degenerate case, should never happen"
      persistUniqueToValues _
        = error "Degenerate case, should never happen"
      persistUniqueKeys
        (TestResult _testKey_aUjH _result_aUjI _passingDate_aUjJ)
        = []
      persistFieldDef TestResultId
        = ((((((FieldDef (HaskellName (packPTH "Id")))
                 (DBName (packPTH "id")))
                ((FTTypeCon Nothing) (packPTH "TestResultId")))
               SqlInt64)
              [])
             True)
            ((ForeignRef (HaskellName (packPTH "TestResult")))
               ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))
      persistFieldDef TestKey
        = ((((((FieldDef (HaskellName (packPTH "testKey")))
                 (DBName (packPTH "test_key")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef Result
        = ((((((FieldDef (HaskellName (packPTH "result")))
                 (DBName (packPTH "result")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef PassingDate
        = ((((((FieldDef (HaskellName (packPTH "passingDate")))
                 (DBName (packPTH "passing_date")))
                ((FTTypeCon Nothing) (packPTH "UTCTime")))
               SqlDayTime)
              [])
             True)
            NoReference
      persistIdField = TestResultId
      fieldLens TestResultId
        = (lensPTH entityKey)
            (\ Entity _ value_aUjK key_aUjL -> (Entity key_aUjL) value_aUjK)
      fieldLens TestKey
        = (lensPTH (_testKey . entityVal))
            (\ Entity key_aUjM value_aUjN x_aUjO
               -> (Entity key_aUjM) value_aUjN {_testKey = x_aUjO})
      fieldLens Result
        = (lensPTH (_result . entityVal))
            (\ Entity key_aUjM value_aUjN x_aUjO
               -> (Entity key_aUjM) value_aUjN {_result = x_aUjO})
      fieldLens PassingDate
        = (lensPTH (_passingDate . entityVal))
            (\ Entity key_aUjM value_aUjN x_aUjO
               -> (Entity key_aUjM) value_aUjN {_passingDate = x_aUjO})
    testKey ::
      forall f.
      Functor f => (Text -> f Text) -> TestResult -> f TestResult
    testKey f_aUjR a_aUjS
      = (fmap setter_aUjQ) (f_aUjR needle_aUjP)
      where
          needle_aUjP = _testKey a_aUjS
          setter_aUjQ y_aUjT = a_aUjS {_testKey = y_aUjT}
    result ::
      forall f.
      Functor f => (Text -> f Text) -> TestResult -> f TestResult
    result f_aUjW a_aUjX
      = (fmap setter_aUjV) (f_aUjW needle_aUjU)
      where
          needle_aUjU = _result a_aUjX
          setter_aUjV y_aUjY = a_aUjX {_result = y_aUjY}
    passingDate ::
      forall f.
      Functor f => (UTCTime -> f UTCTime) -> TestResult -> f TestResult
    passingDate f_aUk1 a_aUk2
      = (fmap setter_aUk0) (f_aUk1 needle_aUjZ)
      where
          needle_aUjZ = _passingDate a_aUk2
          setter_aUk0 y_aUk3 = a_aUk2 {_passingDate = y_aUk3}
    instance ToBackendKey MongoContext TestResult where
      toBackendKey = unTestResultKey
      fromBackendKey = TestResultKey
    data User
      = User {_username :: !Text,
              _password :: !Text,
              _email :: !Text,
              _avatar :: !Text,
              _firstName :: !(Maybe Text),
              _secondName :: !(Maybe Text),
              _birthDay :: !(Maybe UTCTime),
              _sex :: !(Maybe Int),
              _createdTests :: ![ObjectId],
              _passedTests :: ![TestResult]}
      deriving (Eq, Read, Show, Generic)
    type UserId = Key User
    instance PersistEntity User where
      type PersistEntityBackend User = MongoContext
      data Unique User = Email Text | Username Text
      newtype Key User
        = UserKey {unUserKey :: (BackendKey MongoContext)}
        deriving (Show,
                  Read,
                  Eq,
                  Ord,
                  path-pieces-0.2.1:Web.PathPieces.PathPiece,
                  http-api-data-0.3.7.2:Web.Internal.HttpApiData.ToHttpApiData,
                  http-api-data-0.3.7.2:Web.Internal.HttpApiData.FromHttpApiData,
                  PersistField,
                  persistent-2.8.1:Database.Persist.Sql.Class.PersistFieldSql,
                  Aeson.ToJSON,
                  Aeson.FromJSON)
      data EntityField User typ
        = typ ~ Key User => UserId |
          typ ~ Text => Username |
          typ ~ Text => Password |
          typ ~ Text => Email |
          typ ~ Text => Avatar |
          typ ~ Maybe Text => FirstName |
          typ ~ Maybe Text => SecondName |
          typ ~ Maybe UTCTime => BirthDay |
          typ ~ Maybe Int => Sex |
          typ ~ [ObjectId] => CreatedTests |
          typ ~ [TestResult] => PassedTests
      keyToValues
        = ((ghc-prim-0.5.1.1:GHC.Types.: [])
             . (toPersistValue . unUserKey))
      keyFromValues
        = ((fmap UserKey)
             . (fromPersistValue . Database.Persist.TH.headNote))
      entityDef _
        = (((((((((EntityDef (HaskellName (packPTH "User")))
                    (DBName (packPTH "user")))
                   (((((((FieldDef (HaskellName (packPTH "Id")))
                           (DBName (packPTH "id")))
                          ((FTTypeCon Nothing) (packPTH "UserId")))
                         SqlInt64)
                        [])
                       True)
                      ((ForeignRef (HaskellName (packPTH "User")))
                         ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                  [])
                 [((((((FieldDef (HaskellName (packPTH "username")))
                         (DBName (packPTH "username")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "password")))
                         (DBName (packPTH "password")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "email")))
                         (DBName (packPTH "email")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "avatar")))
                         (DBName (packPTH "avatar")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "firstName")))
                         (DBName (packPTH "first_name")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [packPTH "Maybe"])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "secondName")))
                         (DBName (packPTH "second_name")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [packPTH "Maybe"])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "birthDay")))
                         (DBName (packPTH "birth_day")))
                        ((FTTypeCon Nothing) (packPTH "UTCTime")))
                       SqlDayTime)
                      [packPTH "Maybe"])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "sex")))
                         (DBName (packPTH "sex")))
                        ((FTTypeCon Nothing) (packPTH "Int")))
                       SqlInt64)
                      [packPTH "Maybe"])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "createdTests")))
                         (DBName (packPTH "created_tests")))
                        (FTList ((FTTypeCon Nothing) (packPTH "ObjectId"))))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "passedTests")))
                         (DBName (packPTH "passed_tests")))
                        (FTList ((FTTypeCon Nothing) (packPTH "TestResult"))))
                       SqlString)
                      [])
                     True)
                    (EmbedRef
                       ((EmbedEntityDef (HaskellName (packPTH "TestResult")))
                          [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing) Nothing,
                           ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                           ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                             Nothing]))])
                [(((UniqueDef (HaskellName (packPTH "Email")))
                     (DBName (packPTH "email")))
                    [(HaskellName (packPTH "email"), DBName (packPTH "email"))])
                   [],
                 (((UniqueDef (HaskellName (packPTH "Username")))
                     (DBName (packPTH "username")))
                    [(HaskellName (packPTH "username"), DBName (packPTH "username"))])
                   []])
               [])
              [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
             (Data.Map.Internal.fromList []))
            False
      toPersistFields
        (User x_aUk4
              x_aUk5
              x_aUk6
              x_aUk7
              x_aUk8
              x_aUk9
              x_aUka
              x_aUkb
              x_aUkc
              x_aUkd)
        = [SomePersistField x_aUk4, SomePersistField x_aUk5,
           SomePersistField x_aUk6, SomePersistField x_aUk7,
           SomePersistField x_aUk8, SomePersistField x_aUk9,
           SomePersistField x_aUka, SomePersistField x_aUkb,
           SomePersistField x_aUkc, SomePersistField x_aUkd]
      fromPersistValues
        [x1_aUkf,
         x2_aUkg,
         x3_aUkh,
         x4_aUki,
         x5_aUkj,
         x6_aUkk,
         x7_aUkl,
         x8_aUkm,
         x9_aUkn,
         x10_aUko]
        = User
            <$>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "username")))
                 . fromPersistValue)
                x1_aUkf
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "password")))
                 . fromPersistValue)
                x2_aUkg
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "email")))
                 . fromPersistValue)
                x3_aUkh
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "avatar")))
                 . fromPersistValue)
                x4_aUki
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "firstName")))
                 . fromPersistValue)
                x5_aUkj
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "secondName")))
                 . fromPersistValue)
                x6_aUkk
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "birthDay")))
                 . fromPersistValue)
                x7_aUkl
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "sex")))
                 . fromPersistValue)
                x8_aUkm
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "createdTests")))
                 . fromPersistValue)
                x9_aUkn
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "passedTests")))
                 . fromPersistValue)
                x10_aUko
      fromPersistValues x_aUke
        = (Left
             $ ((mappend (packPTH "User: fromPersistValues failed on: "))
                  (pack $ (show x_aUke))))
      persistUniqueToFieldNames Email {}
        = [(HaskellName (packPTH "email"), DBName (packPTH "email"))]
      persistUniqueToFieldNames Username {}
        = [(HaskellName (packPTH "username"), DBName (packPTH "username"))]
      persistUniqueToValues (Email x_aUkp) = [toPersistValue x_aUkp]
      persistUniqueToValues (Username x_aUkq) = [toPersistValue x_aUkq]
      persistUniqueKeys
        (User _username_aUkr
              _password_aUks
              _email_aUkt
              _avatar_aUku
              _firstName_aUkv
              _secondName_aUkw
              _birthDay_aUkx
              _sex_aUky
              _createdTests_aUkz
              _passedTests_aUkA)
        = [Email _email_aUkt, Username _username_aUkr]
      persistFieldDef UserId
        = ((((((FieldDef (HaskellName (packPTH "Id")))
                 (DBName (packPTH "id")))
                ((FTTypeCon Nothing) (packPTH "UserId")))
               SqlInt64)
              [])
             True)
            ((ForeignRef (HaskellName (packPTH "User")))
               ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))
      persistFieldDef Username
        = ((((((FieldDef (HaskellName (packPTH "username")))
                 (DBName (packPTH "username")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef Password
        = ((((((FieldDef (HaskellName (packPTH "password")))
                 (DBName (packPTH "password")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef Email
        = ((((((FieldDef (HaskellName (packPTH "email")))
                 (DBName (packPTH "email")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef Avatar
        = ((((((FieldDef (HaskellName (packPTH "avatar")))
                 (DBName (packPTH "avatar")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef FirstName
        = ((((((FieldDef (HaskellName (packPTH "firstName")))
                 (DBName (packPTH "first_name")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [packPTH "Maybe"])
             True)
            NoReference
      persistFieldDef SecondName
        = ((((((FieldDef (HaskellName (packPTH "secondName")))
                 (DBName (packPTH "second_name")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [packPTH "Maybe"])
             True)
            NoReference
      persistFieldDef BirthDay
        = ((((((FieldDef (HaskellName (packPTH "birthDay")))
                 (DBName (packPTH "birth_day")))
                ((FTTypeCon Nothing) (packPTH "UTCTime")))
               SqlDayTime)
              [packPTH "Maybe"])
             True)
            NoReference
      persistFieldDef Sex
        = ((((((FieldDef (HaskellName (packPTH "sex")))
                 (DBName (packPTH "sex")))
                ((FTTypeCon Nothing) (packPTH "Int")))
               SqlInt64)
              [packPTH "Maybe"])
             True)
            NoReference
      persistFieldDef CreatedTests
        = ((((((FieldDef (HaskellName (packPTH "createdTests")))
                 (DBName (packPTH "created_tests")))
                (FTList ((FTTypeCon Nothing) (packPTH "ObjectId"))))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef PassedTests
        = ((((((FieldDef (HaskellName (packPTH "passedTests")))
                 (DBName (packPTH "passed_tests")))
                (FTList ((FTTypeCon Nothing) (packPTH "TestResult"))))
               SqlString)
              [])
             True)
            (EmbedRef
               ((EmbedEntityDef (HaskellName (packPTH "TestResult")))
                  [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing) Nothing,
                   ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                   ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                     Nothing]))
      persistIdField = UserId
      fieldLens UserId
        = (lensPTH entityKey)
            (\ Entity _ value_aUkB key_aUkC -> (Entity key_aUkC) value_aUkB)
      fieldLens Username
        = (lensPTH (_username . entityVal))
            (\ Entity key_aUkD value_aUkE x_aUkF
               -> (Entity key_aUkD) value_aUkE {_username = x_aUkF})
      fieldLens Password
        = (lensPTH (_password . entityVal))
            (\ Entity key_aUkD value_aUkE x_aUkF
               -> (Entity key_aUkD) value_aUkE {_password = x_aUkF})
      fieldLens Email
        = (lensPTH (_email . entityVal))
            (\ Entity key_aUkD value_aUkE x_aUkF
               -> (Entity key_aUkD) value_aUkE {_email = x_aUkF})
      fieldLens Avatar
        = (lensPTH (_avatar . entityVal))
            (\ Entity key_aUkD value_aUkE x_aUkF
               -> (Entity key_aUkD) value_aUkE {_avatar = x_aUkF})
      fieldLens FirstName
        = (lensPTH (_firstName . entityVal))
            (\ Entity key_aUkD value_aUkE x_aUkF
               -> (Entity key_aUkD) value_aUkE {_firstName = x_aUkF})
      fieldLens SecondName
        = (lensPTH (_secondName . entityVal))
            (\ Entity key_aUkD value_aUkE x_aUkF
               -> (Entity key_aUkD) value_aUkE {_secondName = x_aUkF})
      fieldLens BirthDay
        = (lensPTH (_birthDay . entityVal))
            (\ Entity key_aUkD value_aUkE x_aUkF
               -> (Entity key_aUkD) value_aUkE {_birthDay = x_aUkF})
      fieldLens Sex
        = (lensPTH (_sex . entityVal))
            (\ Entity key_aUkD value_aUkE x_aUkF
               -> (Entity key_aUkD) value_aUkE {_sex = x_aUkF})
      fieldLens CreatedTests
        = (lensPTH (_createdTests . entityVal))
            (\ Entity key_aUkD value_aUkE x_aUkF
               -> (Entity key_aUkD) value_aUkE {_createdTests = x_aUkF})
      fieldLens PassedTests
        = (lensPTH (_passedTests . entityVal))
            (\ Entity key_aUkD value_aUkE x_aUkF
               -> (Entity key_aUkD) value_aUkE {_passedTests = x_aUkF})
    username ::
      forall f. Functor f => (Text -> f Text) -> User -> f User
    username f_aUkI a_aUkJ
      = (fmap setter_aUkH) (f_aUkI needle_aUkG)
      where
          needle_aUkG = _username a_aUkJ
          setter_aUkH y_aUkK = a_aUkJ {_username = y_aUkK}
    password ::
      forall f. Functor f => (Text -> f Text) -> User -> f User
    password f_aUkN a_aUkO
      = (fmap setter_aUkM) (f_aUkN needle_aUkL)
      where
          needle_aUkL = _password a_aUkO
          setter_aUkM y_aUkP = a_aUkO {_password = y_aUkP}
    email :: forall f. Functor f => (Text -> f Text) -> User -> f User
    email f_aUkS a_aUkT
      = (fmap setter_aUkR) (f_aUkS needle_aUkQ)
      where
          needle_aUkQ = _email a_aUkT
          setter_aUkR y_aUkU = a_aUkT {_email = y_aUkU}
    avatar :: forall f. Functor f => (Text -> f Text) -> User -> f User
    avatar f_aUkX a_aUkY
      = (fmap setter_aUkW) (f_aUkX needle_aUkV)
      where
          needle_aUkV = _avatar a_aUkY
          setter_aUkW y_aUkZ = a_aUkY {_avatar = y_aUkZ}
    firstName ::
      forall f.
      Functor f => (Maybe Text -> f (Maybe Text)) -> User -> f User
    firstName f_aUl2 a_aUl3
      = (fmap setter_aUl1) (f_aUl2 needle_aUl0)
      where
          needle_aUl0 = _firstName a_aUl3
          setter_aUl1 y_aUl4 = a_aUl3 {_firstName = y_aUl4}
    secondName ::
      forall f.
      Functor f => (Maybe Text -> f (Maybe Text)) -> User -> f User
    secondName f_aUl7 a_aUl8
      = (fmap setter_aUl6) (f_aUl7 needle_aUl5)
      where
          needle_aUl5 = _secondName a_aUl8
          setter_aUl6 y_aUl9 = a_aUl8 {_secondName = y_aUl9}
    birthDay ::
      forall f.
      Functor f => (Maybe UTCTime -> f (Maybe UTCTime)) -> User -> f User
    birthDay f_aUlc a_aUld
      = (fmap setter_aUlb) (f_aUlc needle_aUla)
      where
          needle_aUla = _birthDay a_aUld
          setter_aUlb y_aUle = a_aUld {_birthDay = y_aUle}
    sex ::
      forall f.
      Functor f => (Maybe Int -> f (Maybe Int)) -> User -> f User
    sex f_aUlh a_aUli
      = (fmap setter_aUlg) (f_aUlh needle_aUlf)
      where
          needle_aUlf = _sex a_aUli
          setter_aUlg y_aUlj = a_aUli {_sex = y_aUlj}
    createdTests ::
      forall f.
      Functor f => ([ObjectId] -> f [ObjectId]) -> User -> f User
    createdTests f_aUlm a_aUln
      = (fmap setter_aUll) (f_aUlm needle_aUlk)
      where
          needle_aUlk = _createdTests a_aUln
          setter_aUll y_aUlo = a_aUln {_createdTests = y_aUlo}
    passedTests ::
      forall f.
      Functor f => ([TestResult] -> f [TestResult]) -> User -> f User
    passedTests f_aUlr a_aUls
      = (fmap setter_aUlq) (f_aUlr needle_aUlp)
      where
          needle_aUlp = _passedTests a_aUls
          setter_aUlq y_aUlt = a_aUls {_passedTests = y_aUlt}
    instance ToBackendKey MongoContext User where
      toBackendKey = unUserKey
      fromBackendKey = UserKey
    migrateAll :: persistent-2.8.1:Database.Persist.Sql.Types.Migration
    migrateAll
      = do let defs_aUlu
                 = [(((((((((EntityDef (HaskellName (packPTH "TestResult")))
                              (DBName (packPTH "test_result")))
                             (((((((FieldDef (HaskellName (packPTH "Id")))
                                     (DBName (packPTH "id")))
                                    ((FTTypeCon Nothing) (packPTH "TestResultId")))
                                   SqlInt64)
                                  [])
                                 True)
                                ((ForeignRef (HaskellName (packPTH "TestResult")))
                                   ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                            [])
                           [((((((FieldDef (HaskellName (packPTH "testKey")))
                                   (DBName (packPTH "test_key")))
                                  ((FTTypeCon Nothing) (packPTH "Text")))
                                 SqlString)
                                [])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "result")))
                                   (DBName (packPTH "result")))
                                  ((FTTypeCon Nothing) (packPTH "Text")))
                                 SqlString)
                                [])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "passingDate")))
                                   (DBName (packPTH "passing_date")))
                                  ((FTTypeCon Nothing) (packPTH "UTCTime")))
                                 SqlDayTime)
                                [])
                               True)
                              NoReference])
                          [])
                         [])
                        [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
                       (Data.Map.Internal.fromList []))
                      False,
                    (((((((((EntityDef (HaskellName (packPTH "User")))
                              (DBName (packPTH "user")))
                             (((((((FieldDef (HaskellName (packPTH "Id")))
                                     (DBName (packPTH "id")))
                                    ((FTTypeCon Nothing) (packPTH "UserId")))
                                   SqlInt64)
                                  [])
                                 True)
                                ((ForeignRef (HaskellName (packPTH "User")))
                                   ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                            [])
                           [((((((FieldDef (HaskellName (packPTH "username")))
                                   (DBName (packPTH "username")))
                                  ((FTTypeCon Nothing) (packPTH "Text")))
                                 SqlString)
                                [])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "password")))
                                   (DBName (packPTH "password")))
                                  ((FTTypeCon Nothing) (packPTH "Text")))
                                 SqlString)
                                [])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "email")))
                                   (DBName (packPTH "email")))
                                  ((FTTypeCon Nothing) (packPTH "Text")))
                                 SqlString)
                                [])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "avatar")))
                                   (DBName (packPTH "avatar")))
                                  ((FTTypeCon Nothing) (packPTH "Text")))
                                 SqlString)
                                [])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "firstName")))
                                   (DBName (packPTH "first_name")))
                                  ((FTTypeCon Nothing) (packPTH "Text")))
                                 SqlString)
                                [packPTH "Maybe"])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "secondName")))
                                   (DBName (packPTH "second_name")))
                                  ((FTTypeCon Nothing) (packPTH "Text")))
                                 SqlString)
                                [packPTH "Maybe"])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "birthDay")))
                                   (DBName (packPTH "birth_day")))
                                  ((FTTypeCon Nothing) (packPTH "UTCTime")))
                                 SqlDayTime)
                                [packPTH "Maybe"])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "sex")))
                                   (DBName (packPTH "sex")))
                                  ((FTTypeCon Nothing) (packPTH "Int")))
                                 SqlInt64)
                                [packPTH "Maybe"])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "createdTests")))
                                   (DBName (packPTH "created_tests")))
                                  (FTList ((FTTypeCon Nothing) (packPTH "ObjectId"))))
                                 SqlString)
                                [])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "passedTests")))
                                   (DBName (packPTH "passed_tests")))
                                  (FTList ((FTTypeCon Nothing) (packPTH "TestResult"))))
                                 SqlString)
                                [])
                               True)
                              (EmbedRef
                                 ((EmbedEntityDef (HaskellName (packPTH "TestResult")))
                                    [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing)
                                       Nothing,
                                     ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                                     ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                                       Nothing]))])
                          [(((UniqueDef (HaskellName (packPTH "Email")))
                               (DBName (packPTH "email")))
                              [(HaskellName (packPTH "email"), DBName (packPTH "email"))])
                             [],
                           (((UniqueDef (HaskellName (packPTH "Username")))
                               (DBName (packPTH "username")))
                              [(HaskellName (packPTH "username"), DBName (packPTH "username"))])
                             []])
                         [])
                        [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
                       (Data.Map.Internal.fromList []))
                      False]
           (persistent-2.8.1:Database.Persist.Sql.Migration.migrate defs_aUlu)
             ((((((((((EntityDef (HaskellName (packPTH "TestResult")))
                        (DBName (packPTH "test_result")))
                       (((((((FieldDef (HaskellName (packPTH "Id")))
                               (DBName (packPTH "id")))
                              ((FTTypeCon Nothing) (packPTH "TestResultId")))
                             SqlInt64)
                            [])
                           True)
                          ((ForeignRef (HaskellName (packPTH "TestResult")))
                             ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                      [])
                     [((((((FieldDef (HaskellName (packPTH "testKey")))
                             (DBName (packPTH "test_key")))
                            ((FTTypeCon Nothing) (packPTH "Text")))
                           SqlString)
                          [])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "result")))
                             (DBName (packPTH "result")))
                            ((FTTypeCon Nothing) (packPTH "Text")))
                           SqlString)
                          [])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "passingDate")))
                             (DBName (packPTH "passing_date")))
                            ((FTTypeCon Nothing) (packPTH "UTCTime")))
                           SqlDayTime)
                          [])
                         True)
                        NoReference])
                    [])
                   [])
                  [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
                 (Data.Map.Internal.fromList []))
                False)
           (persistent-2.8.1:Database.Persist.Sql.Migration.migrate defs_aUlu)
             ((((((((((EntityDef (HaskellName (packPTH "User")))
                        (DBName (packPTH "user")))
                       (((((((FieldDef (HaskellName (packPTH "Id")))
                               (DBName (packPTH "id")))
                              ((FTTypeCon Nothing) (packPTH "UserId")))
                             SqlInt64)
                            [])
                           True)
                          ((ForeignRef (HaskellName (packPTH "User")))
                             ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                      [])
                     [((((((FieldDef (HaskellName (packPTH "username")))
                             (DBName (packPTH "username")))
                            ((FTTypeCon Nothing) (packPTH "Text")))
                           SqlString)
                          [])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "password")))
                             (DBName (packPTH "password")))
                            ((FTTypeCon Nothing) (packPTH "Text")))
                           SqlString)
                          [])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "email")))
                             (DBName (packPTH "email")))
                            ((FTTypeCon Nothing) (packPTH "Text")))
                           SqlString)
                          [])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "avatar")))
                             (DBName (packPTH "avatar")))
                            ((FTTypeCon Nothing) (packPTH "Text")))
                           SqlString)
                          [])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "firstName")))
                             (DBName (packPTH "first_name")))
                            ((FTTypeCon Nothing) (packPTH "Text")))
                           SqlString)
                          [packPTH "Maybe"])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "secondName")))
                             (DBName (packPTH "second_name")))
                            ((FTTypeCon Nothing) (packPTH "Text")))
                           SqlString)
                          [packPTH "Maybe"])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "birthDay")))
                             (DBName (packPTH "birth_day")))
                            ((FTTypeCon Nothing) (packPTH "UTCTime")))
                           SqlDayTime)
                          [packPTH "Maybe"])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "sex")))
                             (DBName (packPTH "sex")))
                            ((FTTypeCon Nothing) (packPTH "Int")))
                           SqlInt64)
                          [packPTH "Maybe"])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "createdTests")))
                             (DBName (packPTH "created_tests")))
                            (FTList ((FTTypeCon Nothing) (packPTH "ObjectId"))))
                           SqlString)
                          [])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "passedTests")))
                             (DBName (packPTH "passed_tests")))
                            (FTList ((FTTypeCon Nothing) (packPTH "TestResult"))))
                           SqlString)
                          [])
                         True)
                        (EmbedRef
                           ((EmbedEntityDef (HaskellName (packPTH "TestResult")))
                              [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing) Nothing,
                               ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                               ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                                 Nothing]))])
                    [(((UniqueDef (HaskellName (packPTH "Email")))
                         (DBName (packPTH "email")))
                        [(HaskellName (packPTH "email"), DBName (packPTH "email"))])
                       [],
                     (((UniqueDef (HaskellName (packPTH "Username")))
                         (DBName (packPTH "username")))
                        [(HaskellName (packPTH "username"), DBName (packPTH "username"))])
                       []])
                   [])
                  [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
                 (Data.Map.Internal.fromList []))
                False)
/home/nikita/Projects/labs/Databases/Course-Project/Server/src/Model/User.hs:(28,156)-(48,2): Splicing expression
    Language.Haskell.TH.Quote.quoteExp
      persistLowerCase
      "\n\
      \TestResult\n\
      \  testKey       Text\n\
      \  result        Text\n\
      \  passingDate   UTCTime\n\
      \  deriving      Eq Read Show Generic\n\
      \User\n\
      \  username      Text\n\
      \  password      Text\n\
      \  email         Text\n\
      \  avatar        Text\n\
      \  firstName     Text Maybe\n\
      \  secondName    Text Maybe\n\
      \  birthDay      UTCTime Maybe\n\
      \  sex           Int Maybe\n\
      \  createdTests  [ObjectId]\n\
      \  passedTests   [TestResult]\n\
      \  Email         email\n\
      \  Username      username\n\
      \  deriving      Eq Read Show Generic\n"
  ======>
    [(((((((((EntityDef (HaskellName (packPTH "TestResult")))
               (DBName (packPTH "test_result")))
              (((((((FieldDef (HaskellName (packPTH "Id")))
                      (DBName (packPTH "id")))
                     ((FTTypeCon Nothing) (packPTH "TestResultId")))
                    SqlInt64)
                   [])
                  True)
                 ((ForeignRef (HaskellName (packPTH "TestResult")))
                    ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
             [])
            [((((((FieldDef (HaskellName (packPTH "testKey")))
                    (DBName (packPTH "test_key")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for testKey")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "result")))
                    (DBName (packPTH "result")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for result")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "passingDate")))
                    (DBName (packPTH "passing_date")))
                   ((FTTypeCon Nothing) (packPTH "UTCTime")))
                  (SqlOther (packPTH "SqlType unset for passingDate")))
                 [])
                True)
               NoReference])
           [])
          [])
         [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
        (Data.Map.Internal.fromList []))
       False
       {entityFields = [((((((FieldDef (HaskellName (packPTH "testKey")))
                               (DBName (packPTH "test_key")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "result")))
                               (DBName (packPTH "result")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "passingDate")))
                               (DBName (packPTH "passing_date")))
                              ((FTTypeCon Nothing) (packPTH "UTCTime")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy UTCTime)))
                            [])
                           True)
                          NoReference],
        entityId = ((((((FieldDef (HaskellName (packPTH "Id")))
                          (DBName (packPTH "id")))
                         ((FTTypeCon Nothing) (packPTH "TestResultId")))
                        (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                           (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                       [])
                      True)
                     ((ForeignRef (HaskellName (packPTH "TestResult")))
                        ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))},
     (((((((((EntityDef (HaskellName (packPTH "User")))
               (DBName (packPTH "user")))
              (((((((FieldDef (HaskellName (packPTH "Id")))
                      (DBName (packPTH "id")))
                     ((FTTypeCon Nothing) (packPTH "UserId")))
                    SqlInt64)
                   [])
                  True)
                 ((ForeignRef (HaskellName (packPTH "User")))
                    ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
             [])
            [((((((FieldDef (HaskellName (packPTH "username")))
                    (DBName (packPTH "username")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for username")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "password")))
                    (DBName (packPTH "password")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for password")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "email")))
                    (DBName (packPTH "email")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for email")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "avatar")))
                    (DBName (packPTH "avatar")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for avatar")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "firstName")))
                    (DBName (packPTH "first_name")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for firstName")))
                 [packPTH "Maybe"])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "secondName")))
                    (DBName (packPTH "second_name")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for secondName")))
                 [packPTH "Maybe"])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "birthDay")))
                    (DBName (packPTH "birth_day")))
                   ((FTTypeCon Nothing) (packPTH "UTCTime")))
                  (SqlOther (packPTH "SqlType unset for birthDay")))
                 [packPTH "Maybe"])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "sex")))
                    (DBName (packPTH "sex")))
                   ((FTTypeCon Nothing) (packPTH "Int")))
                  (SqlOther (packPTH "SqlType unset for sex")))
                 [packPTH "Maybe"])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "createdTests")))
                    (DBName (packPTH "created_tests")))
                   (FTList ((FTTypeCon Nothing) (packPTH "ObjectId"))))
                  (SqlOther (packPTH "SqlType unset for createdTests")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "passedTests")))
                    (DBName (packPTH "passed_tests")))
                   (FTList ((FTTypeCon Nothing) (packPTH "TestResult"))))
                  (SqlOther (packPTH "SqlType unset for passedTests")))
                 [])
                True)
               (EmbedRef
                  ((EmbedEntityDef (HaskellName (packPTH "TestResult")))
                     [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing) Nothing,
                      ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                      ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                        Nothing]))])
           [(((UniqueDef (HaskellName (packPTH "Email")))
                (DBName (packPTH "email")))
               [(HaskellName (packPTH "email"), DBName (packPTH "email"))])
              [],
            (((UniqueDef (HaskellName (packPTH "Username")))
                (DBName (packPTH "username")))
               [(HaskellName (packPTH "username"), DBName (packPTH "username"))])
              []])
          [])
         [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
        (Data.Map.Internal.fromList []))
       False
       {entityFields = [((((((FieldDef (HaskellName (packPTH "username")))
                               (DBName (packPTH "username")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "password")))
                               (DBName (packPTH "password")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "email")))
                               (DBName (packPTH "email")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "avatar")))
                               (DBName (packPTH "avatar")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "firstName")))
                               (DBName (packPTH "first_name")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [packPTH "Maybe"])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "secondName")))
                               (DBName (packPTH "second_name")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [packPTH "Maybe"])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "birthDay")))
                               (DBName (packPTH "birth_day")))
                              ((FTTypeCon Nothing) (packPTH "UTCTime")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy UTCTime)))
                            [packPTH "Maybe"])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "sex")))
                               (DBName (packPTH "sex")))
                              ((FTTypeCon Nothing) (packPTH "Int")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Int)))
                            [packPTH "Maybe"])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "createdTests")))
                               (DBName (packPTH "created_tests")))
                              (FTList ((FTTypeCon Nothing) (packPTH "ObjectId"))))
                             SqlString)
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "passedTests")))
                               (DBName (packPTH "passed_tests")))
                              (FTList ((FTTypeCon Nothing) (packPTH "TestResult"))))
                             SqlString)
                            [])
                           True)
                          (EmbedRef
                             ((EmbedEntityDef (HaskellName (packPTH "TestResult")))
                                [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing) Nothing,
                                 ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                                 ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                                   Nothing]))],
        entityId = ((((((FieldDef (HaskellName (packPTH "Id")))
                          (DBName (packPTH "id")))
                         ((FTTypeCon Nothing) (packPTH "UserId")))
                        (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                           (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                       [])
                      True)
                     ((ForeignRef (HaskellName (packPTH "User")))
                        ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))}]
/home/nikita/Projects/labs/Databases/Course-Project/Server/src/Model/User.hs:(28,1)-(48,2): Splicing declarations
    share
      [mkPersist
         (mkPersistSettings (ConT ''MongoContext))
           {mpsGenerateLenses = True, mpsPrefixFields = False},
       mkMigrate "migrateAll"]
      ([(((((((((EntityDef (HaskellName (packPTH "TestResult")))
                  (DBName (packPTH "test_result")))
                 (((((((FieldDef (HaskellName (packPTH "Id")))
                         (DBName (packPTH "id")))
                        ((FTTypeCon Nothing) (packPTH "TestResultId")))
                       SqlInt64)
                      [])
                     True)
                    ((ForeignRef (HaskellName (packPTH "TestResult")))
                       ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                [])
               [((((((FieldDef (HaskellName (packPTH "testKey")))
                       (DBName (packPTH "test_key")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for testKey")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "result")))
                       (DBName (packPTH "result")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for result")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "passingDate")))
                       (DBName (packPTH "passing_date")))
                      ((FTTypeCon Nothing) (packPTH "UTCTime")))
                     (SqlOther (packPTH "SqlType unset for passingDate")))
                    [])
                   True)
                  NoReference])
              [])
             [])
            [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
           (Data.Map.Internal.fromList []))
          False
          {entityFields = [((((((FieldDef (HaskellName (packPTH "testKey")))
                                  (DBName (packPTH "test_key")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "result")))
                                  (DBName (packPTH "result")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "passingDate")))
                                  (DBName (packPTH "passing_date")))
                                 ((FTTypeCon Nothing) (packPTH "UTCTime")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy UTCTime)))
                               [])
                              True)
                             NoReference],
           entityId = ((((((FieldDef (HaskellName (packPTH "Id")))
                             (DBName (packPTH "id")))
                            ((FTTypeCon Nothing) (packPTH "TestResultId")))
                           (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                              (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                          [])
                         True)
                        ((ForeignRef (HaskellName (packPTH "TestResult")))
                           ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))},
        (((((((((EntityDef (HaskellName (packPTH "User")))
                  (DBName (packPTH "user")))
                 (((((((FieldDef (HaskellName (packPTH "Id")))
                         (DBName (packPTH "id")))
                        ((FTTypeCon Nothing) (packPTH "UserId")))
                       SqlInt64)
                      [])
                     True)
                    ((ForeignRef (HaskellName (packPTH "User")))
                       ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                [])
               [((((((FieldDef (HaskellName (packPTH "username")))
                       (DBName (packPTH "username")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for username")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "password")))
                       (DBName (packPTH "password")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for password")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "email")))
                       (DBName (packPTH "email")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for email")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "avatar")))
                       (DBName (packPTH "avatar")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for avatar")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "firstName")))
                       (DBName (packPTH "first_name")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for firstName")))
                    [packPTH "Maybe"])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "secondName")))
                       (DBName (packPTH "second_name")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for secondName")))
                    [packPTH "Maybe"])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "birthDay")))
                       (DBName (packPTH "birth_day")))
                      ((FTTypeCon Nothing) (packPTH "UTCTime")))
                     (SqlOther (packPTH "SqlType unset for birthDay")))
                    [packPTH "Maybe"])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "sex")))
                       (DBName (packPTH "sex")))
                      ((FTTypeCon Nothing) (packPTH "Int")))
                     (SqlOther (packPTH "SqlType unset for sex")))
                    [packPTH "Maybe"])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "createdTests")))
                       (DBName (packPTH "created_tests")))
                      (FTList ((FTTypeCon Nothing) (packPTH "ObjectId"))))
                     (SqlOther (packPTH "SqlType unset for createdTests")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "passedTests")))
                       (DBName (packPTH "passed_tests")))
                      (FTList ((FTTypeCon Nothing) (packPTH "TestResult"))))
                     (SqlOther (packPTH "SqlType unset for passedTests")))
                    [])
                   True)
                  (EmbedRef
                     ((EmbedEntityDef (HaskellName (packPTH "TestResult")))
                        [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing) Nothing,
                         ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                         ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                           Nothing]))])
              [(((UniqueDef (HaskellName (packPTH "Email")))
                   (DBName (packPTH "email")))
                  [(HaskellName (packPTH "email"), DBName (packPTH "email"))])
                 [],
               (((UniqueDef (HaskellName (packPTH "Username")))
                   (DBName (packPTH "username")))
                  [(HaskellName (packPTH "username"), DBName (packPTH "username"))])
                 []])
             [])
            [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
           (Data.Map.Internal.fromList []))
          False
          {entityFields = [((((((FieldDef (HaskellName (packPTH "username")))
                                  (DBName (packPTH "username")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "password")))
                                  (DBName (packPTH "password")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "email")))
                                  (DBName (packPTH "email")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "avatar")))
                                  (DBName (packPTH "avatar")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "firstName")))
                                  (DBName (packPTH "first_name")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [packPTH "Maybe"])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "secondName")))
                                  (DBName (packPTH "second_name")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [packPTH "Maybe"])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "birthDay")))
                                  (DBName (packPTH "birth_day")))
                                 ((FTTypeCon Nothing) (packPTH "UTCTime")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy UTCTime)))
                               [packPTH "Maybe"])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "sex")))
                                  (DBName (packPTH "sex")))
                                 ((FTTypeCon Nothing) (packPTH "Int")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Int)))
                               [packPTH "Maybe"])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "createdTests")))
                                  (DBName (packPTH "created_tests")))
                                 (FTList ((FTTypeCon Nothing) (packPTH "ObjectId"))))
                                SqlString)
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "passedTests")))
                                  (DBName (packPTH "passed_tests")))
                                 (FTList ((FTTypeCon Nothing) (packPTH "TestResult"))))
                                SqlString)
                               [])
                              True)
                             (EmbedRef
                                ((EmbedEntityDef (HaskellName (packPTH "TestResult")))
                                   [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing) Nothing,
                                    ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                                    ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                                      Nothing]))],
           entityId = ((((((FieldDef (HaskellName (packPTH "Id")))
                             (DBName (packPTH "id")))
                            ((FTTypeCon Nothing) (packPTH "UserId")))
                           (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                              (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                          [])
                         True)
                        ((ForeignRef (HaskellName (packPTH "User")))
                           ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))}])
  ======>
    instance PersistField TestResult where
      toPersistValue
        = \ ent_aUAh
            -> (PersistMap
                  $ ((Prelude.zip
                        ((Prelude.map pack) ["testKey", "result", "passingDate"]))
                       ((Prelude.map toPersistValue) $ (toPersistFields ent_aUAh))))
      fromPersistValue
        = ((\ x_aUAi
              -> let
                   columns_aUAj
                     = unordered-containers-0.2.9.0:Data.HashMap.Strict.fromList x_aUAi
                 in
                   (fromPersistValues
                      $ ((Prelude.map
                            (\ name_aUAk
                               -> case
                                      (unordered-containers-0.2.9.0:Data.HashMap.Base.lookup
                                         (pack name_aUAk))
                                        columns_aUAj
                                  of
                                    Just v_aUAl -> v_aUAl
                                    Nothing -> PersistNull))
                           $ ["testKey", "result", "passingDate"])))
             <=< getPersistMap)
    instance persistent-2.8.1:Database.Persist.Sql.Class.PersistFieldSql TestResult where
      persistent-2.8.1:Database.Persist.Sql.Class.sqlType _ = SqlString
    instance PersistField User where
      toPersistValue
        = \ ent_aUAm
            -> (PersistMap
                  $ ((Prelude.zip
                        ((Prelude.map pack)
                           ["username", "password", "email", "avatar", "firstName",
                            "secondName", "birthDay", "sex", "createdTests", "passedTests"]))
                       ((Prelude.map toPersistValue) $ (toPersistFields ent_aUAm))))
      fromPersistValue
        = ((\ x_aUAn
              -> let
                   columns_aUAo
                     = unordered-containers-0.2.9.0:Data.HashMap.Strict.fromList x_aUAn
                 in
                   (fromPersistValues
                      $ ((Prelude.map
                            (\ name_aUAp
                               -> case
                                      (unordered-containers-0.2.9.0:Data.HashMap.Base.lookup
                                         (pack name_aUAp))
                                        columns_aUAo
                                  of
                                    Just v_aUAq -> v_aUAq
                                    Nothing -> PersistNull))
                           $ ["username", "password", "email", "avatar", "firstName",
                              "secondName", "birthDay", "sex", "createdTests", "passedTests"])))
             <=< getPersistMap)
    instance persistent-2.8.1:Database.Persist.Sql.Class.PersistFieldSql User where
      persistent-2.8.1:Database.Persist.Sql.Class.sqlType _ = SqlString
    data TestResult
      = TestResult {_testKey :: !Text,
                    _result :: !Text,
                    _passingDate :: !UTCTime}
      deriving (Eq, Read, Show, Generic)
    type TestResultId = Key TestResult
    instance PersistEntity TestResult where
      type PersistEntityBackend TestResult = MongoContext
      data Unique TestResult
      newtype Key TestResult
        = TestResultKey {unTestResultKey :: (BackendKey MongoContext)}
        deriving (Show,
                  Read,
                  Eq,
                  Ord,
                  path-pieces-0.2.1:Web.PathPieces.PathPiece,
                  http-api-data-0.3.7.2:Web.Internal.HttpApiData.ToHttpApiData,
                  http-api-data-0.3.7.2:Web.Internal.HttpApiData.FromHttpApiData,
                  PersistField,
                  persistent-2.8.1:Database.Persist.Sql.Class.PersistFieldSql,
                  Aeson.ToJSON,
                  Aeson.FromJSON)
      data EntityField TestResult typ
        = typ ~ Key TestResult => TestResultId |
          typ ~ Text => TestKey |
          typ ~ Text => Result |
          typ ~ UTCTime => PassingDate
      keyToValues
        = ((ghc-prim-0.5.1.1:GHC.Types.: [])
             . (toPersistValue . unTestResultKey))
      keyFromValues
        = ((fmap TestResultKey)
             . (fromPersistValue . Database.Persist.TH.headNote))
      entityDef _
        = (((((((((EntityDef (HaskellName (packPTH "TestResult")))
                    (DBName (packPTH "test_result")))
                   (((((((FieldDef (HaskellName (packPTH "Id")))
                           (DBName (packPTH "id")))
                          ((FTTypeCon Nothing) (packPTH "TestResultId")))
                         SqlInt64)
                        [])
                       True)
                      ((ForeignRef (HaskellName (packPTH "TestResult")))
                         ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                  [])
                 [((((((FieldDef (HaskellName (packPTH "testKey")))
                         (DBName (packPTH "test_key")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "result")))
                         (DBName (packPTH "result")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "passingDate")))
                         (DBName (packPTH "passing_date")))
                        ((FTTypeCon Nothing) (packPTH "UTCTime")))
                       SqlDayTime)
                      [])
                     True)
                    NoReference])
                [])
               [])
              [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
             (Data.Map.Internal.fromList []))
            False
      toPersistFields (TestResult x_aUAr x_aUAs x_aUAt)
        = [SomePersistField x_aUAr, SomePersistField x_aUAs,
           SomePersistField x_aUAt]
      fromPersistValues [x1_aUAv, x2_aUAw, x3_aUAx]
        = TestResult
            <$>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "testKey")))
                 . fromPersistValue)
                x1_aUAv
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "result")))
                 . fromPersistValue)
                x2_aUAw
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "passingDate")))
                 . fromPersistValue)
                x3_aUAx
      fromPersistValues x_aUAu
        = (Left
             $ ((mappend (packPTH "TestResult: fromPersistValues failed on: "))
                  (pack $ (show x_aUAu))))
      persistUniqueToFieldNames _
        = error "Degenerate case, should never happen"
      persistUniqueToValues _
        = error "Degenerate case, should never happen"
      persistUniqueKeys
        (TestResult _testKey_aUAy _result_aUAz _passingDate_aUAA)
        = []
      persistFieldDef TestResultId
        = ((((((FieldDef (HaskellName (packPTH "Id")))
                 (DBName (packPTH "id")))
                ((FTTypeCon Nothing) (packPTH "TestResultId")))
               SqlInt64)
              [])
             True)
            ((ForeignRef (HaskellName (packPTH "TestResult")))
               ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))
      persistFieldDef TestKey
        = ((((((FieldDef (HaskellName (packPTH "testKey")))
                 (DBName (packPTH "test_key")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef Result
        = ((((((FieldDef (HaskellName (packPTH "result")))
                 (DBName (packPTH "result")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef PassingDate
        = ((((((FieldDef (HaskellName (packPTH "passingDate")))
                 (DBName (packPTH "passing_date")))
                ((FTTypeCon Nothing) (packPTH "UTCTime")))
               SqlDayTime)
              [])
             True)
            NoReference
      persistIdField = TestResultId
      fieldLens TestResultId
        = (lensPTH entityKey)
            (\ Entity _ value_aUAB key_aUAC -> (Entity key_aUAC) value_aUAB)
      fieldLens TestKey
        = (lensPTH (_testKey . entityVal))
            (\ Entity key_aUAD value_aUAE x_aUAF
               -> (Entity key_aUAD) value_aUAE {_testKey = x_aUAF})
      fieldLens Result
        = (lensPTH (_result . entityVal))
            (\ Entity key_aUAD value_aUAE x_aUAF
               -> (Entity key_aUAD) value_aUAE {_result = x_aUAF})
      fieldLens PassingDate
        = (lensPTH (_passingDate . entityVal))
            (\ Entity key_aUAD value_aUAE x_aUAF
               -> (Entity key_aUAD) value_aUAE {_passingDate = x_aUAF})
    testKey ::
      forall f.
      Functor f => (Text -> f Text) -> TestResult -> f TestResult
    testKey f_aUAI a_aUAJ
      = (fmap setter_aUAH) (f_aUAI needle_aUAG)
      where
          needle_aUAG = _testKey a_aUAJ
          setter_aUAH y_aUAK = a_aUAJ {_testKey = y_aUAK}
    result ::
      forall f.
      Functor f => (Text -> f Text) -> TestResult -> f TestResult
    result f_aUAN a_aUAO
      = (fmap setter_aUAM) (f_aUAN needle_aUAL)
      where
          needle_aUAL = _result a_aUAO
          setter_aUAM y_aUAP = a_aUAO {_result = y_aUAP}
    passingDate ::
      forall f.
      Functor f => (UTCTime -> f UTCTime) -> TestResult -> f TestResult
    passingDate f_aUAS a_aUAT
      = (fmap setter_aUAR) (f_aUAS needle_aUAQ)
      where
          needle_aUAQ = _passingDate a_aUAT
          setter_aUAR y_aUAU = a_aUAT {_passingDate = y_aUAU}
    instance ToBackendKey MongoContext TestResult where
      toBackendKey = unTestResultKey
      fromBackendKey = TestResultKey
    data User
      = User {_username :: !Text,
              _password :: !Text,
              _email :: !Text,
              _avatar :: !Text,
              _firstName :: !(Maybe Text),
              _secondName :: !(Maybe Text),
              _birthDay :: !(Maybe UTCTime),
              _sex :: !(Maybe Int),
              _createdTests :: ![ObjectId],
              _passedTests :: ![TestResult]}
      deriving (Eq, Read, Show, Generic)
    type UserId = Key User
    instance PersistEntity User where
      type PersistEntityBackend User = MongoContext
      data Unique User = Email Text | Username Text
      newtype Key User
        = UserKey {unUserKey :: (BackendKey MongoContext)}
        deriving (Show,
                  Read,
                  Eq,
                  Ord,
                  path-pieces-0.2.1:Web.PathPieces.PathPiece,
                  http-api-data-0.3.7.2:Web.Internal.HttpApiData.ToHttpApiData,
                  http-api-data-0.3.7.2:Web.Internal.HttpApiData.FromHttpApiData,
                  PersistField,
                  persistent-2.8.1:Database.Persist.Sql.Class.PersistFieldSql,
                  Aeson.ToJSON,
                  Aeson.FromJSON)
      data EntityField User typ
        = typ ~ Key User => UserId |
          typ ~ Text => Username |
          typ ~ Text => Password |
          typ ~ Text => Email |
          typ ~ Text => Avatar |
          typ ~ Maybe Text => FirstName |
          typ ~ Maybe Text => SecondName |
          typ ~ Maybe UTCTime => BirthDay |
          typ ~ Maybe Int => Sex |
          typ ~ [ObjectId] => CreatedTests |
          typ ~ [TestResult] => PassedTests
      keyToValues
        = ((ghc-prim-0.5.1.1:GHC.Types.: [])
             . (toPersistValue . unUserKey))
      keyFromValues
        = ((fmap UserKey)
             . (fromPersistValue . Database.Persist.TH.headNote))
      entityDef _
        = (((((((((EntityDef (HaskellName (packPTH "User")))
                    (DBName (packPTH "user")))
                   (((((((FieldDef (HaskellName (packPTH "Id")))
                           (DBName (packPTH "id")))
                          ((FTTypeCon Nothing) (packPTH "UserId")))
                         SqlInt64)
                        [])
                       True)
                      ((ForeignRef (HaskellName (packPTH "User")))
                         ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                  [])
                 [((((((FieldDef (HaskellName (packPTH "username")))
                         (DBName (packPTH "username")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "password")))
                         (DBName (packPTH "password")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "email")))
                         (DBName (packPTH "email")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "avatar")))
                         (DBName (packPTH "avatar")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "firstName")))
                         (DBName (packPTH "first_name")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [packPTH "Maybe"])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "secondName")))
                         (DBName (packPTH "second_name")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [packPTH "Maybe"])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "birthDay")))
                         (DBName (packPTH "birth_day")))
                        ((FTTypeCon Nothing) (packPTH "UTCTime")))
                       SqlDayTime)
                      [packPTH "Maybe"])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "sex")))
                         (DBName (packPTH "sex")))
                        ((FTTypeCon Nothing) (packPTH "Int")))
                       SqlInt64)
                      [packPTH "Maybe"])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "createdTests")))
                         (DBName (packPTH "created_tests")))
                        (FTList ((FTTypeCon Nothing) (packPTH "ObjectId"))))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "passedTests")))
                         (DBName (packPTH "passed_tests")))
                        (FTList ((FTTypeCon Nothing) (packPTH "TestResult"))))
                       SqlString)
                      [])
                     True)
                    (EmbedRef
                       ((EmbedEntityDef (HaskellName (packPTH "TestResult")))
                          [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing) Nothing,
                           ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                           ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                             Nothing]))])
                [(((UniqueDef (HaskellName (packPTH "Email")))
                     (DBName (packPTH "email")))
                    [(HaskellName (packPTH "email"), DBName (packPTH "email"))])
                   [],
                 (((UniqueDef (HaskellName (packPTH "Username")))
                     (DBName (packPTH "username")))
                    [(HaskellName (packPTH "username"), DBName (packPTH "username"))])
                   []])
               [])
              [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
             (Data.Map.Internal.fromList []))
            False
      toPersistFields
        (User x_aUAV
              x_aUAW
              x_aUAX
              x_aUAY
              x_aUAZ
              x_aUB0
              x_aUB1
              x_aUB2
              x_aUB3
              x_aUB4)
        = [SomePersistField x_aUAV, SomePersistField x_aUAW,
           SomePersistField x_aUAX, SomePersistField x_aUAY,
           SomePersistField x_aUAZ, SomePersistField x_aUB0,
           SomePersistField x_aUB1, SomePersistField x_aUB2,
           SomePersistField x_aUB3, SomePersistField x_aUB4]
      fromPersistValues
        [x1_aUB6,
         x2_aUB7,
         x3_aUB8,
         x4_aUB9,
         x5_aUBa,
         x6_aUBb,
         x7_aUBc,
         x8_aUBd,
         x9_aUBe,
         x10_aUBf]
        = User
            <$>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "username")))
                 . fromPersistValue)
                x1_aUB6
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "password")))
                 . fromPersistValue)
                x2_aUB7
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "email")))
                 . fromPersistValue)
                x3_aUB8
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "avatar")))
                 . fromPersistValue)
                x4_aUB9
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "firstName")))
                 . fromPersistValue)
                x5_aUBa
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "secondName")))
                 . fromPersistValue)
                x6_aUBb
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "birthDay")))
                 . fromPersistValue)
                x7_aUBc
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "sex")))
                 . fromPersistValue)
                x8_aUBd
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "createdTests")))
                 . fromPersistValue)
                x9_aUBe
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "passedTests")))
                 . fromPersistValue)
                x10_aUBf
      fromPersistValues x_aUB5
        = (Left
             $ ((mappend (packPTH "User: fromPersistValues failed on: "))
                  (pack $ (show x_aUB5))))
      persistUniqueToFieldNames Email {}
        = [(HaskellName (packPTH "email"), DBName (packPTH "email"))]
      persistUniqueToFieldNames Username {}
        = [(HaskellName (packPTH "username"), DBName (packPTH "username"))]
      persistUniqueToValues (Email x_aUBg) = [toPersistValue x_aUBg]
      persistUniqueToValues (Username x_aUBh) = [toPersistValue x_aUBh]
      persistUniqueKeys
        (User _username_aUBi
              _password_aUBj
              _email_aUBk
              _avatar_aUBl
              _firstName_aUBm
              _secondName_aUBn
              _birthDay_aUBo
              _sex_aUBp
              _createdTests_aUBq
              _passedTests_aUBr)
        = [Email _email_aUBk, Username _username_aUBi]
      persistFieldDef UserId
        = ((((((FieldDef (HaskellName (packPTH "Id")))
                 (DBName (packPTH "id")))
                ((FTTypeCon Nothing) (packPTH "UserId")))
               SqlInt64)
              [])
             True)
            ((ForeignRef (HaskellName (packPTH "User")))
               ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))
      persistFieldDef Username
        = ((((((FieldDef (HaskellName (packPTH "username")))
                 (DBName (packPTH "username")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef Password
        = ((((((FieldDef (HaskellName (packPTH "password")))
                 (DBName (packPTH "password")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef Email
        = ((((((FieldDef (HaskellName (packPTH "email")))
                 (DBName (packPTH "email")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef Avatar
        = ((((((FieldDef (HaskellName (packPTH "avatar")))
                 (DBName (packPTH "avatar")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef FirstName
        = ((((((FieldDef (HaskellName (packPTH "firstName")))
                 (DBName (packPTH "first_name")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [packPTH "Maybe"])
             True)
            NoReference
      persistFieldDef SecondName
        = ((((((FieldDef (HaskellName (packPTH "secondName")))
                 (DBName (packPTH "second_name")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [packPTH "Maybe"])
             True)
            NoReference
      persistFieldDef BirthDay
        = ((((((FieldDef (HaskellName (packPTH "birthDay")))
                 (DBName (packPTH "birth_day")))
                ((FTTypeCon Nothing) (packPTH "UTCTime")))
               SqlDayTime)
              [packPTH "Maybe"])
             True)
            NoReference
      persistFieldDef Sex
        = ((((((FieldDef (HaskellName (packPTH "sex")))
                 (DBName (packPTH "sex")))
                ((FTTypeCon Nothing) (packPTH "Int")))
               SqlInt64)
              [packPTH "Maybe"])
             True)
            NoReference
      persistFieldDef CreatedTests
        = ((((((FieldDef (HaskellName (packPTH "createdTests")))
                 (DBName (packPTH "created_tests")))
                (FTList ((FTTypeCon Nothing) (packPTH "ObjectId"))))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef PassedTests
        = ((((((FieldDef (HaskellName (packPTH "passedTests")))
                 (DBName (packPTH "passed_tests")))
                (FTList ((FTTypeCon Nothing) (packPTH "TestResult"))))
               SqlString)
              [])
             True)
            (EmbedRef
               ((EmbedEntityDef (HaskellName (packPTH "TestResult")))
                  [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing) Nothing,
                   ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                   ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                     Nothing]))
      persistIdField = UserId
      fieldLens UserId
        = (lensPTH entityKey)
            (\ Entity _ value_aUBs key_aUBt -> (Entity key_aUBt) value_aUBs)
      fieldLens Username
        = (lensPTH (_username . entityVal))
            (\ Entity key_aUBu value_aUBv x_aUBw
               -> (Entity key_aUBu) value_aUBv {_username = x_aUBw})
      fieldLens Password
        = (lensPTH (_password . entityVal))
            (\ Entity key_aUBu value_aUBv x_aUBw
               -> (Entity key_aUBu) value_aUBv {_password = x_aUBw})
      fieldLens Email
        = (lensPTH (_email . entityVal))
            (\ Entity key_aUBu value_aUBv x_aUBw
               -> (Entity key_aUBu) value_aUBv {_email = x_aUBw})
      fieldLens Avatar
        = (lensPTH (_avatar . entityVal))
            (\ Entity key_aUBu value_aUBv x_aUBw
               -> (Entity key_aUBu) value_aUBv {_avatar = x_aUBw})
      fieldLens FirstName
        = (lensPTH (_firstName . entityVal))
            (\ Entity key_aUBu value_aUBv x_aUBw
               -> (Entity key_aUBu) value_aUBv {_firstName = x_aUBw})
      fieldLens SecondName
        = (lensPTH (_secondName . entityVal))
            (\ Entity key_aUBu value_aUBv x_aUBw
               -> (Entity key_aUBu) value_aUBv {_secondName = x_aUBw})
      fieldLens BirthDay
        = (lensPTH (_birthDay . entityVal))
            (\ Entity key_aUBu value_aUBv x_aUBw
               -> (Entity key_aUBu) value_aUBv {_birthDay = x_aUBw})
      fieldLens Sex
        = (lensPTH (_sex . entityVal))
            (\ Entity key_aUBu value_aUBv x_aUBw
               -> (Entity key_aUBu) value_aUBv {_sex = x_aUBw})
      fieldLens CreatedTests
        = (lensPTH (_createdTests . entityVal))
            (\ Entity key_aUBu value_aUBv x_aUBw
               -> (Entity key_aUBu) value_aUBv {_createdTests = x_aUBw})
      fieldLens PassedTests
        = (lensPTH (_passedTests . entityVal))
            (\ Entity key_aUBu value_aUBv x_aUBw
               -> (Entity key_aUBu) value_aUBv {_passedTests = x_aUBw})
    username ::
      forall f. Functor f => (Text -> f Text) -> User -> f User
    username f_aUBz a_aUBA
      = (fmap setter_aUBy) (f_aUBz needle_aUBx)
      where
          needle_aUBx = _username a_aUBA
          setter_aUBy y_aUBB = a_aUBA {_username = y_aUBB}
    password ::
      forall f. Functor f => (Text -> f Text) -> User -> f User
    password f_aUBE a_aUBF
      = (fmap setter_aUBD) (f_aUBE needle_aUBC)
      where
          needle_aUBC = _password a_aUBF
          setter_aUBD y_aUBG = a_aUBF {_password = y_aUBG}
    email :: forall f. Functor f => (Text -> f Text) -> User -> f User
    email f_aUBJ a_aUBK
      = (fmap setter_aUBI) (f_aUBJ needle_aUBH)
      where
          needle_aUBH = _email a_aUBK
          setter_aUBI y_aUBL = a_aUBK {_email = y_aUBL}
    avatar :: forall f. Functor f => (Text -> f Text) -> User -> f User
    avatar f_aUBO a_aUBP
      = (fmap setter_aUBN) (f_aUBO needle_aUBM)
      where
          needle_aUBM = _avatar a_aUBP
          setter_aUBN y_aUBQ = a_aUBP {_avatar = y_aUBQ}
    firstName ::
      forall f.
      Functor f => (Maybe Text -> f (Maybe Text)) -> User -> f User
    firstName f_aUBT a_aUBU
      = (fmap setter_aUBS) (f_aUBT needle_aUBR)
      where
          needle_aUBR = _firstName a_aUBU
          setter_aUBS y_aUBV = a_aUBU {_firstName = y_aUBV}
    secondName ::
      forall f.
      Functor f => (Maybe Text -> f (Maybe Text)) -> User -> f User
    secondName f_aUBY a_aUBZ
      = (fmap setter_aUBX) (f_aUBY needle_aUBW)
      where
          needle_aUBW = _secondName a_aUBZ
          setter_aUBX y_aUC0 = a_aUBZ {_secondName = y_aUC0}
    birthDay ::
      forall f.
      Functor f => (Maybe UTCTime -> f (Maybe UTCTime)) -> User -> f User
    birthDay f_aUC3 a_aUC4
      = (fmap setter_aUC2) (f_aUC3 needle_aUC1)
      where
          needle_aUC1 = _birthDay a_aUC4
          setter_aUC2 y_aUC5 = a_aUC4 {_birthDay = y_aUC5}
    sex ::
      forall f.
      Functor f => (Maybe Int -> f (Maybe Int)) -> User -> f User
    sex f_aUC8 a_aUC9
      = (fmap setter_aUC7) (f_aUC8 needle_aUC6)
      where
          needle_aUC6 = _sex a_aUC9
          setter_aUC7 y_aUCa = a_aUC9 {_sex = y_aUCa}
    createdTests ::
      forall f.
      Functor f => ([ObjectId] -> f [ObjectId]) -> User -> f User
    createdTests f_aUCd a_aUCe
      = (fmap setter_aUCc) (f_aUCd needle_aUCb)
      where
          needle_aUCb = _createdTests a_aUCe
          setter_aUCc y_aUCf = a_aUCe {_createdTests = y_aUCf}
    passedTests ::
      forall f.
      Functor f => ([TestResult] -> f [TestResult]) -> User -> f User
    passedTests f_aUCi a_aUCj
      = (fmap setter_aUCh) (f_aUCi needle_aUCg)
      where
          needle_aUCg = _passedTests a_aUCj
          setter_aUCh y_aUCk = a_aUCj {_passedTests = y_aUCk}
    instance ToBackendKey MongoContext User where
      toBackendKey = unUserKey
      fromBackendKey = UserKey
    migrateAll :: persistent-2.8.1:Database.Persist.Sql.Types.Migration
    migrateAll
      = do let defs_aUCl
                 = [(((((((((EntityDef (HaskellName (packPTH "TestResult")))
                              (DBName (packPTH "test_result")))
                             (((((((FieldDef (HaskellName (packPTH "Id")))
                                     (DBName (packPTH "id")))
                                    ((FTTypeCon Nothing) (packPTH "TestResultId")))
                                   SqlInt64)
                                  [])
                                 True)
                                ((ForeignRef (HaskellName (packPTH "TestResult")))
                                   ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                            [])
                           [((((((FieldDef (HaskellName (packPTH "testKey")))
                                   (DBName (packPTH "test_key")))
                                  ((FTTypeCon Nothing) (packPTH "Text")))
                                 SqlString)
                                [])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "result")))
                                   (DBName (packPTH "result")))
                                  ((FTTypeCon Nothing) (packPTH "Text")))
                                 SqlString)
                                [])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "passingDate")))
                                   (DBName (packPTH "passing_date")))
                                  ((FTTypeCon Nothing) (packPTH "UTCTime")))
                                 SqlDayTime)
                                [])
                               True)
                              NoReference])
                          [])
                         [])
                        [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
                       (Data.Map.Internal.fromList []))
                      False,
                    (((((((((EntityDef (HaskellName (packPTH "User")))
                              (DBName (packPTH "user")))
                             (((((((FieldDef (HaskellName (packPTH "Id")))
                                     (DBName (packPTH "id")))
                                    ((FTTypeCon Nothing) (packPTH "UserId")))
                                   SqlInt64)
                                  [])
                                 True)
                                ((ForeignRef (HaskellName (packPTH "User")))
                                   ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                            [])
                           [((((((FieldDef (HaskellName (packPTH "username")))
                                   (DBName (packPTH "username")))
                                  ((FTTypeCon Nothing) (packPTH "Text")))
                                 SqlString)
                                [])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "password")))
                                   (DBName (packPTH "password")))
                                  ((FTTypeCon Nothing) (packPTH "Text")))
                                 SqlString)
                                [])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "email")))
                                   (DBName (packPTH "email")))
                                  ((FTTypeCon Nothing) (packPTH "Text")))
                                 SqlString)
                                [])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "avatar")))
                                   (DBName (packPTH "avatar")))
                                  ((FTTypeCon Nothing) (packPTH "Text")))
                                 SqlString)
                                [])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "firstName")))
                                   (DBName (packPTH "first_name")))
                                  ((FTTypeCon Nothing) (packPTH "Text")))
                                 SqlString)
                                [packPTH "Maybe"])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "secondName")))
                                   (DBName (packPTH "second_name")))
                                  ((FTTypeCon Nothing) (packPTH "Text")))
                                 SqlString)
                                [packPTH "Maybe"])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "birthDay")))
                                   (DBName (packPTH "birth_day")))
                                  ((FTTypeCon Nothing) (packPTH "UTCTime")))
                                 SqlDayTime)
                                [packPTH "Maybe"])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "sex")))
                                   (DBName (packPTH "sex")))
                                  ((FTTypeCon Nothing) (packPTH "Int")))
                                 SqlInt64)
                                [packPTH "Maybe"])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "createdTests")))
                                   (DBName (packPTH "created_tests")))
                                  (FTList ((FTTypeCon Nothing) (packPTH "ObjectId"))))
                                 SqlString)
                                [])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "passedTests")))
                                   (DBName (packPTH "passed_tests")))
                                  (FTList ((FTTypeCon Nothing) (packPTH "TestResult"))))
                                 SqlString)
                                [])
                               True)
                              (EmbedRef
                                 ((EmbedEntityDef (HaskellName (packPTH "TestResult")))
                                    [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing)
                                       Nothing,
                                     ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                                     ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                                       Nothing]))])
                          [(((UniqueDef (HaskellName (packPTH "Email")))
                               (DBName (packPTH "email")))
                              [(HaskellName (packPTH "email"), DBName (packPTH "email"))])
                             [],
                           (((UniqueDef (HaskellName (packPTH "Username")))
                               (DBName (packPTH "username")))
                              [(HaskellName (packPTH "username"), DBName (packPTH "username"))])
                             []])
                         [])
                        [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
                       (Data.Map.Internal.fromList []))
                      False]
           (persistent-2.8.1:Database.Persist.Sql.Migration.migrate defs_aUCl)
             ((((((((((EntityDef (HaskellName (packPTH "TestResult")))
                        (DBName (packPTH "test_result")))
                       (((((((FieldDef (HaskellName (packPTH "Id")))
                               (DBName (packPTH "id")))
                              ((FTTypeCon Nothing) (packPTH "TestResultId")))
                             SqlInt64)
                            [])
                           True)
                          ((ForeignRef (HaskellName (packPTH "TestResult")))
                             ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                      [])
                     [((((((FieldDef (HaskellName (packPTH "testKey")))
                             (DBName (packPTH "test_key")))
                            ((FTTypeCon Nothing) (packPTH "Text")))
                           SqlString)
                          [])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "result")))
                             (DBName (packPTH "result")))
                            ((FTTypeCon Nothing) (packPTH "Text")))
                           SqlString)
                          [])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "passingDate")))
                             (DBName (packPTH "passing_date")))
                            ((FTTypeCon Nothing) (packPTH "UTCTime")))
                           SqlDayTime)
                          [])
                         True)
                        NoReference])
                    [])
                   [])
                  [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
                 (Data.Map.Internal.fromList []))
                False)
           (persistent-2.8.1:Database.Persist.Sql.Migration.migrate defs_aUCl)
             ((((((((((EntityDef (HaskellName (packPTH "User")))
                        (DBName (packPTH "user")))
                       (((((((FieldDef (HaskellName (packPTH "Id")))
                               (DBName (packPTH "id")))
                              ((FTTypeCon Nothing) (packPTH "UserId")))
                             SqlInt64)
                            [])
                           True)
                          ((ForeignRef (HaskellName (packPTH "User")))
                             ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                      [])
                     [((((((FieldDef (HaskellName (packPTH "username")))
                             (DBName (packPTH "username")))
                            ((FTTypeCon Nothing) (packPTH "Text")))
                           SqlString)
                          [])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "password")))
                             (DBName (packPTH "password")))
                            ((FTTypeCon Nothing) (packPTH "Text")))
                           SqlString)
                          [])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "email")))
                             (DBName (packPTH "email")))
                            ((FTTypeCon Nothing) (packPTH "Text")))
                           SqlString)
                          [])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "avatar")))
                             (DBName (packPTH "avatar")))
                            ((FTTypeCon Nothing) (packPTH "Text")))
                           SqlString)
                          [])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "firstName")))
                             (DBName (packPTH "first_name")))
                            ((FTTypeCon Nothing) (packPTH "Text")))
                           SqlString)
                          [packPTH "Maybe"])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "secondName")))
                             (DBName (packPTH "second_name")))
                            ((FTTypeCon Nothing) (packPTH "Text")))
                           SqlString)
                          [packPTH "Maybe"])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "birthDay")))
                             (DBName (packPTH "birth_day")))
                            ((FTTypeCon Nothing) (packPTH "UTCTime")))
                           SqlDayTime)
                          [packPTH "Maybe"])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "sex")))
                             (DBName (packPTH "sex")))
                            ((FTTypeCon Nothing) (packPTH "Int")))
                           SqlInt64)
                          [packPTH "Maybe"])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "createdTests")))
                             (DBName (packPTH "created_tests")))
                            (FTList ((FTTypeCon Nothing) (packPTH "ObjectId"))))
                           SqlString)
                          [])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "passedTests")))
                             (DBName (packPTH "passed_tests")))
                            (FTList ((FTTypeCon Nothing) (packPTH "TestResult"))))
                           SqlString)
                          [])
                         True)
                        (EmbedRef
                           ((EmbedEntityDef (HaskellName (packPTH "TestResult")))
                              [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing) Nothing,
                               ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                               ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                                 Nothing]))])
                    [(((UniqueDef (HaskellName (packPTH "Email")))
                         (DBName (packPTH "email")))
                        [(HaskellName (packPTH "email"), DBName (packPTH "email"))])
                       [],
                     (((UniqueDef (HaskellName (packPTH "Username")))
                         (DBName (packPTH "username")))
                        [(HaskellName (packPTH "username"), DBName (packPTH "username"))])
                       []])
                   [])
                  [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
                 (Data.Map.Internal.fromList []))
                False)
/home/nikita/Projects/labs/Databases/Course-Project/Server/src/Model/User.hs:(34,156)-(54,2): Splicing expression
    Language.Haskell.TH.Quote.quoteExp
      persistLowerCase
      "\n\
      \TestResult\n\
      \  testKey       Text\n\
      \  result        Text\n\
      \  passingDate   UTCTime\n\
      \  deriving      Eq Read Show Generic\n\
      \User\n\
      \  username      Text\n\
      \  password      Text\n\
      \  email         Text\n\
      \  avatar        Text\n\
      \  firstName     Text Maybe\n\
      \  secondName    Text Maybe\n\
      \  birthDay      UTCTime Maybe\n\
      \  sex           Int Maybe\n\
      \  createdTests  [ObjectId]\n\
      \  passedTests   [TestResult]\n\
      \  Email         email\n\
      \  Username      username\n\
      \  deriving      Eq Read Show Generic\n"
  ======>
    [(((((((((EntityDef (HaskellName (packPTH "TestResult")))
               (DBName (packPTH "test_result")))
              (((((((FieldDef (HaskellName (packPTH "Id")))
                      (DBName (packPTH "id")))
                     ((FTTypeCon Nothing) (packPTH "TestResultId")))
                    SqlInt64)
                   [])
                  True)
                 ((ForeignRef (HaskellName (packPTH "TestResult")))
                    ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
             [])
            [((((((FieldDef (HaskellName (packPTH "testKey")))
                    (DBName (packPTH "test_key")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for testKey")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "result")))
                    (DBName (packPTH "result")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for result")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "passingDate")))
                    (DBName (packPTH "passing_date")))
                   ((FTTypeCon Nothing) (packPTH "UTCTime")))
                  (SqlOther (packPTH "SqlType unset for passingDate")))
                 [])
                True)
               NoReference])
           [])
          [])
         [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
        (Data.Map.Internal.fromList []))
       False
       {entityFields = [((((((FieldDef (HaskellName (packPTH "testKey")))
                               (DBName (packPTH "test_key")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "result")))
                               (DBName (packPTH "result")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "passingDate")))
                               (DBName (packPTH "passing_date")))
                              ((FTTypeCon Nothing) (packPTH "UTCTime")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy UTCTime)))
                            [])
                           True)
                          NoReference],
        entityId = ((((((FieldDef (HaskellName (packPTH "Id")))
                          (DBName (packPTH "id")))
                         ((FTTypeCon Nothing) (packPTH "TestResultId")))
                        (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                           (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                       [])
                      True)
                     ((ForeignRef (HaskellName (packPTH "TestResult")))
                        ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))},
     (((((((((EntityDef (HaskellName (packPTH "User")))
               (DBName (packPTH "user")))
              (((((((FieldDef (HaskellName (packPTH "Id")))
                      (DBName (packPTH "id")))
                     ((FTTypeCon Nothing) (packPTH "UserId")))
                    SqlInt64)
                   [])
                  True)
                 ((ForeignRef (HaskellName (packPTH "User")))
                    ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
             [])
            [((((((FieldDef (HaskellName (packPTH "username")))
                    (DBName (packPTH "username")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for username")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "password")))
                    (DBName (packPTH "password")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for password")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "email")))
                    (DBName (packPTH "email")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for email")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "avatar")))
                    (DBName (packPTH "avatar")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for avatar")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "firstName")))
                    (DBName (packPTH "first_name")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for firstName")))
                 [packPTH "Maybe"])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "secondName")))
                    (DBName (packPTH "second_name")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for secondName")))
                 [packPTH "Maybe"])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "birthDay")))
                    (DBName (packPTH "birth_day")))
                   ((FTTypeCon Nothing) (packPTH "UTCTime")))
                  (SqlOther (packPTH "SqlType unset for birthDay")))
                 [packPTH "Maybe"])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "sex")))
                    (DBName (packPTH "sex")))
                   ((FTTypeCon Nothing) (packPTH "Int")))
                  (SqlOther (packPTH "SqlType unset for sex")))
                 [packPTH "Maybe"])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "createdTests")))
                    (DBName (packPTH "created_tests")))
                   (FTList ((FTTypeCon Nothing) (packPTH "ObjectId"))))
                  (SqlOther (packPTH "SqlType unset for createdTests")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "passedTests")))
                    (DBName (packPTH "passed_tests")))
                   (FTList ((FTTypeCon Nothing) (packPTH "TestResult"))))
                  (SqlOther (packPTH "SqlType unset for passedTests")))
                 [])
                True)
               (EmbedRef
                  ((EmbedEntityDef (HaskellName (packPTH "TestResult")))
                     [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing) Nothing,
                      ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                      ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                        Nothing]))])
           [(((UniqueDef (HaskellName (packPTH "Email")))
                (DBName (packPTH "email")))
               [(HaskellName (packPTH "email"), DBName (packPTH "email"))])
              [],
            (((UniqueDef (HaskellName (packPTH "Username")))
                (DBName (packPTH "username")))
               [(HaskellName (packPTH "username"), DBName (packPTH "username"))])
              []])
          [])
         [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
        (Data.Map.Internal.fromList []))
       False
       {entityFields = [((((((FieldDef (HaskellName (packPTH "username")))
                               (DBName (packPTH "username")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "password")))
                               (DBName (packPTH "password")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "email")))
                               (DBName (packPTH "email")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "avatar")))
                               (DBName (packPTH "avatar")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "firstName")))
                               (DBName (packPTH "first_name")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [packPTH "Maybe"])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "secondName")))
                               (DBName (packPTH "second_name")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [packPTH "Maybe"])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "birthDay")))
                               (DBName (packPTH "birth_day")))
                              ((FTTypeCon Nothing) (packPTH "UTCTime")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy UTCTime)))
                            [packPTH "Maybe"])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "sex")))
                               (DBName (packPTH "sex")))
                              ((FTTypeCon Nothing) (packPTH "Int")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Int)))
                            [packPTH "Maybe"])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "createdTests")))
                               (DBName (packPTH "created_tests")))
                              (FTList ((FTTypeCon Nothing) (packPTH "ObjectId"))))
                             SqlString)
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "passedTests")))
                               (DBName (packPTH "passed_tests")))
                              (FTList ((FTTypeCon Nothing) (packPTH "TestResult"))))
                             SqlString)
                            [])
                           True)
                          (EmbedRef
                             ((EmbedEntityDef (HaskellName (packPTH "TestResult")))
                                [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing) Nothing,
                                 ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                                 ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                                   Nothing]))],
        entityId = ((((((FieldDef (HaskellName (packPTH "Id")))
                          (DBName (packPTH "id")))
                         ((FTTypeCon Nothing) (packPTH "UserId")))
                        (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                           (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                       [])
                      True)
                     ((ForeignRef (HaskellName (packPTH "User")))
                        ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))}]
/home/nikita/Projects/labs/Databases/Course-Project/Server/src/Model/User.hs:(34,1)-(54,2): Splicing declarations
    share
      [mkPersist
         (mkPersistSettings (ConT ''MongoContext))
           {mpsGenerateLenses = True, mpsPrefixFields = False},
       mkMigrate "migrateAll"]
      ([(((((((((EntityDef (HaskellName (packPTH "TestResult")))
                  (DBName (packPTH "test_result")))
                 (((((((FieldDef (HaskellName (packPTH "Id")))
                         (DBName (packPTH "id")))
                        ((FTTypeCon Nothing) (packPTH "TestResultId")))
                       SqlInt64)
                      [])
                     True)
                    ((ForeignRef (HaskellName (packPTH "TestResult")))
                       ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                [])
               [((((((FieldDef (HaskellName (packPTH "testKey")))
                       (DBName (packPTH "test_key")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for testKey")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "result")))
                       (DBName (packPTH "result")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for result")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "passingDate")))
                       (DBName (packPTH "passing_date")))
                      ((FTTypeCon Nothing) (packPTH "UTCTime")))
                     (SqlOther (packPTH "SqlType unset for passingDate")))
                    [])
                   True)
                  NoReference])
              [])
             [])
            [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
           (Data.Map.Internal.fromList []))
          False
          {entityFields = [((((((FieldDef (HaskellName (packPTH "testKey")))
                                  (DBName (packPTH "test_key")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "result")))
                                  (DBName (packPTH "result")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "passingDate")))
                                  (DBName (packPTH "passing_date")))
                                 ((FTTypeCon Nothing) (packPTH "UTCTime")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy UTCTime)))
                               [])
                              True)
                             NoReference],
           entityId = ((((((FieldDef (HaskellName (packPTH "Id")))
                             (DBName (packPTH "id")))
                            ((FTTypeCon Nothing) (packPTH "TestResultId")))
                           (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                              (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                          [])
                         True)
                        ((ForeignRef (HaskellName (packPTH "TestResult")))
                           ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))},
        (((((((((EntityDef (HaskellName (packPTH "User")))
                  (DBName (packPTH "user")))
                 (((((((FieldDef (HaskellName (packPTH "Id")))
                         (DBName (packPTH "id")))
                        ((FTTypeCon Nothing) (packPTH "UserId")))
                       SqlInt64)
                      [])
                     True)
                    ((ForeignRef (HaskellName (packPTH "User")))
                       ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                [])
               [((((((FieldDef (HaskellName (packPTH "username")))
                       (DBName (packPTH "username")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for username")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "password")))
                       (DBName (packPTH "password")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for password")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "email")))
                       (DBName (packPTH "email")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for email")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "avatar")))
                       (DBName (packPTH "avatar")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for avatar")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "firstName")))
                       (DBName (packPTH "first_name")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for firstName")))
                    [packPTH "Maybe"])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "secondName")))
                       (DBName (packPTH "second_name")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for secondName")))
                    [packPTH "Maybe"])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "birthDay")))
                       (DBName (packPTH "birth_day")))
                      ((FTTypeCon Nothing) (packPTH "UTCTime")))
                     (SqlOther (packPTH "SqlType unset for birthDay")))
                    [packPTH "Maybe"])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "sex")))
                       (DBName (packPTH "sex")))
                      ((FTTypeCon Nothing) (packPTH "Int")))
                     (SqlOther (packPTH "SqlType unset for sex")))
                    [packPTH "Maybe"])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "createdTests")))
                       (DBName (packPTH "created_tests")))
                      (FTList ((FTTypeCon Nothing) (packPTH "ObjectId"))))
                     (SqlOther (packPTH "SqlType unset for createdTests")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "passedTests")))
                       (DBName (packPTH "passed_tests")))
                      (FTList ((FTTypeCon Nothing) (packPTH "TestResult"))))
                     (SqlOther (packPTH "SqlType unset for passedTests")))
                    [])
                   True)
                  (EmbedRef
                     ((EmbedEntityDef (HaskellName (packPTH "TestResult")))
                        [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing) Nothing,
                         ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                         ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                           Nothing]))])
              [(((UniqueDef (HaskellName (packPTH "Email")))
                   (DBName (packPTH "email")))
                  [(HaskellName (packPTH "email"), DBName (packPTH "email"))])
                 [],
               (((UniqueDef (HaskellName (packPTH "Username")))
                   (DBName (packPTH "username")))
                  [(HaskellName (packPTH "username"), DBName (packPTH "username"))])
                 []])
             [])
            [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
           (Data.Map.Internal.fromList []))
          False
          {entityFields = [((((((FieldDef (HaskellName (packPTH "username")))
                                  (DBName (packPTH "username")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "password")))
                                  (DBName (packPTH "password")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "email")))
                                  (DBName (packPTH "email")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "avatar")))
                                  (DBName (packPTH "avatar")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "firstName")))
                                  (DBName (packPTH "first_name")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [packPTH "Maybe"])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "secondName")))
                                  (DBName (packPTH "second_name")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [packPTH "Maybe"])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "birthDay")))
                                  (DBName (packPTH "birth_day")))
                                 ((FTTypeCon Nothing) (packPTH "UTCTime")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy UTCTime)))
                               [packPTH "Maybe"])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "sex")))
                                  (DBName (packPTH "sex")))
                                 ((FTTypeCon Nothing) (packPTH "Int")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Int)))
                               [packPTH "Maybe"])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "createdTests")))
                                  (DBName (packPTH "created_tests")))
                                 (FTList ((FTTypeCon Nothing) (packPTH "ObjectId"))))
                                SqlString)
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "passedTests")))
                                  (DBName (packPTH "passed_tests")))
                                 (FTList ((FTTypeCon Nothing) (packPTH "TestResult"))))
                                SqlString)
                               [])
                              True)
                             (EmbedRef
                                ((EmbedEntityDef (HaskellName (packPTH "TestResult")))
                                   [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing) Nothing,
                                    ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                                    ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                                      Nothing]))],
           entityId = ((((((FieldDef (HaskellName (packPTH "Id")))
                             (DBName (packPTH "id")))
                            ((FTTypeCon Nothing) (packPTH "UserId")))
                           (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                              (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                          [])
                         True)
                        ((ForeignRef (HaskellName (packPTH "User")))
                           ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))}])
  ======>
    instance PersistField TestResult where
      toPersistValue
        = \ ent_aUR8
            -> (PersistMap
                  $ ((Prelude.zip
                        ((Prelude.map pack) ["testKey", "result", "passingDate"]))
                       ((Prelude.map toPersistValue) $ (toPersistFields ent_aUR8))))
      fromPersistValue
        = ((\ x_aUR9
              -> let
                   columns_aURa
                     = unordered-containers-0.2.9.0:Data.HashMap.Strict.fromList x_aUR9
                 in
                   (fromPersistValues
                      $ ((Prelude.map
                            (\ name_aURb
                               -> case
                                      (unordered-containers-0.2.9.0:Data.HashMap.Base.lookup
                                         (pack name_aURb))
                                        columns_aURa
                                  of
                                    Just v_aURc -> v_aURc
                                    Nothing -> PersistNull))
                           $ ["testKey", "result", "passingDate"])))
             <=< getPersistMap)
    instance persistent-2.8.1:Database.Persist.Sql.Class.PersistFieldSql TestResult where
      persistent-2.8.1:Database.Persist.Sql.Class.sqlType _ = SqlString
    instance PersistField User where
      toPersistValue
        = \ ent_aURd
            -> (PersistMap
                  $ ((Prelude.zip
                        ((Prelude.map pack)
                           ["username", "password", "email", "avatar", "firstName",
                            "secondName", "birthDay", "sex", "createdTests", "passedTests"]))
                       ((Prelude.map toPersistValue) $ (toPersistFields ent_aURd))))
      fromPersistValue
        = ((\ x_aURe
              -> let
                   columns_aURf
                     = unordered-containers-0.2.9.0:Data.HashMap.Strict.fromList x_aURe
                 in
                   (fromPersistValues
                      $ ((Prelude.map
                            (\ name_aURg
                               -> case
                                      (unordered-containers-0.2.9.0:Data.HashMap.Base.lookup
                                         (pack name_aURg))
                                        columns_aURf
                                  of
                                    Just v_aURh -> v_aURh
                                    Nothing -> PersistNull))
                           $ ["username", "password", "email", "avatar", "firstName",
                              "secondName", "birthDay", "sex", "createdTests", "passedTests"])))
             <=< getPersistMap)
    instance persistent-2.8.1:Database.Persist.Sql.Class.PersistFieldSql User where
      persistent-2.8.1:Database.Persist.Sql.Class.sqlType _ = SqlString
    data TestResult
      = TestResult {_testKey :: !Text,
                    _result :: !Text,
                    _passingDate :: !UTCTime}
      deriving (Eq, Read, Show, Generic)
    type TestResultId = Key TestResult
    instance PersistEntity TestResult where
      type PersistEntityBackend TestResult = MongoContext
      data Unique TestResult
      newtype Key TestResult
        = TestResultKey {unTestResultKey :: (BackendKey MongoContext)}
        deriving (Show,
                  Read,
                  Eq,
                  Ord,
                  path-pieces-0.2.1:Web.PathPieces.PathPiece,
                  http-api-data-0.3.7.2:Web.Internal.HttpApiData.ToHttpApiData,
                  http-api-data-0.3.7.2:Web.Internal.HttpApiData.FromHttpApiData,
                  PersistField,
                  persistent-2.8.1:Database.Persist.Sql.Class.PersistFieldSql,
                  Aeson.ToJSON,
                  Aeson.FromJSON)
      data EntityField TestResult typ
        = typ ~ Key TestResult => TestResultId |
          typ ~ Text => TestKey |
          typ ~ Text => Result |
          typ ~ UTCTime => PassingDate
      keyToValues
        = ((ghc-prim-0.5.1.1:GHC.Types.: [])
             . (toPersistValue . unTestResultKey))
      keyFromValues
        = ((fmap TestResultKey)
             . (fromPersistValue . Database.Persist.TH.headNote))
      entityDef _
        = (((((((((EntityDef (HaskellName (packPTH "TestResult")))
                    (DBName (packPTH "test_result")))
                   (((((((FieldDef (HaskellName (packPTH "Id")))
                           (DBName (packPTH "id")))
                          ((FTTypeCon Nothing) (packPTH "TestResultId")))
                         SqlInt64)
                        [])
                       True)
                      ((ForeignRef (HaskellName (packPTH "TestResult")))
                         ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                  [])
                 [((((((FieldDef (HaskellName (packPTH "testKey")))
                         (DBName (packPTH "test_key")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "result")))
                         (DBName (packPTH "result")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "passingDate")))
                         (DBName (packPTH "passing_date")))
                        ((FTTypeCon Nothing) (packPTH "UTCTime")))
                       SqlDayTime)
                      [])
                     True)
                    NoReference])
                [])
               [])
              [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
             (Data.Map.Internal.fromList []))
            False
      toPersistFields (TestResult x_aURi x_aURj x_aURk)
        = [SomePersistField x_aURi, SomePersistField x_aURj,
           SomePersistField x_aURk]
      fromPersistValues [x1_aURm, x2_aURn, x3_aURo]
        = TestResult
            <$>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "testKey")))
                 . fromPersistValue)
                x1_aURm
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "result")))
                 . fromPersistValue)
                x2_aURn
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "passingDate")))
                 . fromPersistValue)
                x3_aURo
      fromPersistValues x_aURl
        = (Left
             $ ((mappend (packPTH "TestResult: fromPersistValues failed on: "))
                  (pack $ (show x_aURl))))
      persistUniqueToFieldNames _
        = error "Degenerate case, should never happen"
      persistUniqueToValues _
        = error "Degenerate case, should never happen"
      persistUniqueKeys
        (TestResult _testKey_aURp _result_aURq _passingDate_aURr)
        = []
      persistFieldDef TestResultId
        = ((((((FieldDef (HaskellName (packPTH "Id")))
                 (DBName (packPTH "id")))
                ((FTTypeCon Nothing) (packPTH "TestResultId")))
               SqlInt64)
              [])
             True)
            ((ForeignRef (HaskellName (packPTH "TestResult")))
               ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))
      persistFieldDef TestKey
        = ((((((FieldDef (HaskellName (packPTH "testKey")))
                 (DBName (packPTH "test_key")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef Result
        = ((((((FieldDef (HaskellName (packPTH "result")))
                 (DBName (packPTH "result")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef PassingDate
        = ((((((FieldDef (HaskellName (packPTH "passingDate")))
                 (DBName (packPTH "passing_date")))
                ((FTTypeCon Nothing) (packPTH "UTCTime")))
               SqlDayTime)
              [])
             True)
            NoReference
      persistIdField = TestResultId
      fieldLens TestResultId
        = (lensPTH entityKey)
            (\ Entity _ value_aURs key_aURt -> (Entity key_aURt) value_aURs)
      fieldLens TestKey
        = (lensPTH (_testKey . entityVal))
            (\ Entity key_aURu value_aURv x_aURw
               -> (Entity key_aURu) value_aURv {_testKey = x_aURw})
      fieldLens Result
        = (lensPTH (_result . entityVal))
            (\ Entity key_aURu value_aURv x_aURw
               -> (Entity key_aURu) value_aURv {_result = x_aURw})
      fieldLens PassingDate
        = (lensPTH (_passingDate . entityVal))
            (\ Entity key_aURu value_aURv x_aURw
               -> (Entity key_aURu) value_aURv {_passingDate = x_aURw})
    testKey ::
      forall f.
      Functor f => (Text -> f Text) -> TestResult -> f TestResult
    testKey f_aURz a_aURA
      = (fmap setter_aURy) (f_aURz needle_aURx)
      where
          needle_aURx = _testKey a_aURA
          setter_aURy y_aURB = a_aURA {_testKey = y_aURB}
    result ::
      forall f.
      Functor f => (Text -> f Text) -> TestResult -> f TestResult
    result f_aURE a_aURF
      = (fmap setter_aURD) (f_aURE needle_aURC)
      where
          needle_aURC = _result a_aURF
          setter_aURD y_aURG = a_aURF {_result = y_aURG}
    passingDate ::
      forall f.
      Functor f => (UTCTime -> f UTCTime) -> TestResult -> f TestResult
    passingDate f_aURJ a_aURK
      = (fmap setter_aURI) (f_aURJ needle_aURH)
      where
          needle_aURH = _passingDate a_aURK
          setter_aURI y_aURL = a_aURK {_passingDate = y_aURL}
    instance ToBackendKey MongoContext TestResult where
      toBackendKey = unTestResultKey
      fromBackendKey = TestResultKey
    data User
      = User {_username :: !Text,
              _password :: !Text,
              _email :: !Text,
              _avatar :: !Text,
              _firstName :: !(Maybe Text),
              _secondName :: !(Maybe Text),
              _birthDay :: !(Maybe UTCTime),
              _sex :: !(Maybe Int),
              _createdTests :: ![ObjectId],
              _passedTests :: ![TestResult]}
      deriving (Eq, Read, Show, Generic)
    type UserId = Key User
    instance PersistEntity User where
      type PersistEntityBackend User = MongoContext
      data Unique User = Email Text | Username Text
      newtype Key User
        = UserKey {unUserKey :: (BackendKey MongoContext)}
        deriving (Show,
                  Read,
                  Eq,
                  Ord,
                  path-pieces-0.2.1:Web.PathPieces.PathPiece,
                  http-api-data-0.3.7.2:Web.Internal.HttpApiData.ToHttpApiData,
                  http-api-data-0.3.7.2:Web.Internal.HttpApiData.FromHttpApiData,
                  PersistField,
                  persistent-2.8.1:Database.Persist.Sql.Class.PersistFieldSql,
                  Aeson.ToJSON,
                  Aeson.FromJSON)
      data EntityField User typ
        = typ ~ Key User => UserId |
          typ ~ Text => Username |
          typ ~ Text => Password |
          typ ~ Text => Email |
          typ ~ Text => Avatar |
          typ ~ Maybe Text => FirstName |
          typ ~ Maybe Text => SecondName |
          typ ~ Maybe UTCTime => BirthDay |
          typ ~ Maybe Int => Sex |
          typ ~ [ObjectId] => CreatedTests |
          typ ~ [TestResult] => PassedTests
      keyToValues
        = ((ghc-prim-0.5.1.1:GHC.Types.: [])
             . (toPersistValue . unUserKey))
      keyFromValues
        = ((fmap UserKey)
             . (fromPersistValue . Database.Persist.TH.headNote))
      entityDef _
        = (((((((((EntityDef (HaskellName (packPTH "User")))
                    (DBName (packPTH "user")))
                   (((((((FieldDef (HaskellName (packPTH "Id")))
                           (DBName (packPTH "id")))
                          ((FTTypeCon Nothing) (packPTH "UserId")))
                         SqlInt64)
                        [])
                       True)
                      ((ForeignRef (HaskellName (packPTH "User")))
                         ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                  [])
                 [((((((FieldDef (HaskellName (packPTH "username")))
                         (DBName (packPTH "username")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "password")))
                         (DBName (packPTH "password")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "email")))
                         (DBName (packPTH "email")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "avatar")))
                         (DBName (packPTH "avatar")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "firstName")))
                         (DBName (packPTH "first_name")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [packPTH "Maybe"])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "secondName")))
                         (DBName (packPTH "second_name")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [packPTH "Maybe"])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "birthDay")))
                         (DBName (packPTH "birth_day")))
                        ((FTTypeCon Nothing) (packPTH "UTCTime")))
                       SqlDayTime)
                      [packPTH "Maybe"])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "sex")))
                         (DBName (packPTH "sex")))
                        ((FTTypeCon Nothing) (packPTH "Int")))
                       SqlInt64)
                      [packPTH "Maybe"])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "createdTests")))
                         (DBName (packPTH "created_tests")))
                        (FTList ((FTTypeCon Nothing) (packPTH "ObjectId"))))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "passedTests")))
                         (DBName (packPTH "passed_tests")))
                        (FTList ((FTTypeCon Nothing) (packPTH "TestResult"))))
                       SqlString)
                      [])
                     True)
                    (EmbedRef
                       ((EmbedEntityDef (HaskellName (packPTH "TestResult")))
                          [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing) Nothing,
                           ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                           ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                             Nothing]))])
                [(((UniqueDef (HaskellName (packPTH "Email")))
                     (DBName (packPTH "email")))
                    [(HaskellName (packPTH "email"), DBName (packPTH "email"))])
                   [],
                 (((UniqueDef (HaskellName (packPTH "Username")))
                     (DBName (packPTH "username")))
                    [(HaskellName (packPTH "username"), DBName (packPTH "username"))])
                   []])
               [])
              [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
             (Data.Map.Internal.fromList []))
            False
      toPersistFields
        (User x_aURM
              x_aURN
              x_aURO
              x_aURP
              x_aURQ
              x_aURR
              x_aURS
              x_aURT
              x_aURU
              x_aURV)
        = [SomePersistField x_aURM, SomePersistField x_aURN,
           SomePersistField x_aURO, SomePersistField x_aURP,
           SomePersistField x_aURQ, SomePersistField x_aURR,
           SomePersistField x_aURS, SomePersistField x_aURT,
           SomePersistField x_aURU, SomePersistField x_aURV]
      fromPersistValues
        [x1_aURX,
         x2_aURY,
         x3_aURZ,
         x4_aUS0,
         x5_aUS1,
         x6_aUS2,
         x7_aUS3,
         x8_aUS4,
         x9_aUS5,
         x10_aUS6]
        = User
            <$>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "username")))
                 . fromPersistValue)
                x1_aURX
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "password")))
                 . fromPersistValue)
                x2_aURY
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "email")))
                 . fromPersistValue)
                x3_aURZ
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "avatar")))
                 . fromPersistValue)
                x4_aUS0
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "firstName")))
                 . fromPersistValue)
                x5_aUS1
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "secondName")))
                 . fromPersistValue)
                x6_aUS2
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "birthDay")))
                 . fromPersistValue)
                x7_aUS3
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "sex")))
                 . fromPersistValue)
                x8_aUS4
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "createdTests")))
                 . fromPersistValue)
                x9_aUS5
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "passedTests")))
                 . fromPersistValue)
                x10_aUS6
      fromPersistValues x_aURW
        = (Left
             $ ((mappend (packPTH "User: fromPersistValues failed on: "))
                  (pack $ (show x_aURW))))
      persistUniqueToFieldNames Email {}
        = [(HaskellName (packPTH "email"), DBName (packPTH "email"))]
      persistUniqueToFieldNames Username {}
        = [(HaskellName (packPTH "username"), DBName (packPTH "username"))]
      persistUniqueToValues (Email x_aUS7) = [toPersistValue x_aUS7]
      persistUniqueToValues (Username x_aUS8) = [toPersistValue x_aUS8]
      persistUniqueKeys
        (User _username_aUS9
              _password_aUSa
              _email_aUSb
              _avatar_aUSc
              _firstName_aUSd
              _secondName_aUSe
              _birthDay_aUSf
              _sex_aUSg
              _createdTests_aUSh
              _passedTests_aUSi)
        = [Email _email_aUSb, Username _username_aUS9]
      persistFieldDef UserId
        = ((((((FieldDef (HaskellName (packPTH "Id")))
                 (DBName (packPTH "id")))
                ((FTTypeCon Nothing) (packPTH "UserId")))
               SqlInt64)
              [])
             True)
            ((ForeignRef (HaskellName (packPTH "User")))
               ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))
      persistFieldDef Username
        = ((((((FieldDef (HaskellName (packPTH "username")))
                 (DBName (packPTH "username")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef Password
        = ((((((FieldDef (HaskellName (packPTH "password")))
                 (DBName (packPTH "password")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef Email
        = ((((((FieldDef (HaskellName (packPTH "email")))
                 (DBName (packPTH "email")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef Avatar
        = ((((((FieldDef (HaskellName (packPTH "avatar")))
                 (DBName (packPTH "avatar")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef FirstName
        = ((((((FieldDef (HaskellName (packPTH "firstName")))
                 (DBName (packPTH "first_name")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [packPTH "Maybe"])
             True)
            NoReference
      persistFieldDef SecondName
        = ((((((FieldDef (HaskellName (packPTH "secondName")))
                 (DBName (packPTH "second_name")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [packPTH "Maybe"])
             True)
            NoReference
      persistFieldDef BirthDay
        = ((((((FieldDef (HaskellName (packPTH "birthDay")))
                 (DBName (packPTH "birth_day")))
                ((FTTypeCon Nothing) (packPTH "UTCTime")))
               SqlDayTime)
              [packPTH "Maybe"])
             True)
            NoReference
      persistFieldDef Sex
        = ((((((FieldDef (HaskellName (packPTH "sex")))
                 (DBName (packPTH "sex")))
                ((FTTypeCon Nothing) (packPTH "Int")))
               SqlInt64)
              [packPTH "Maybe"])
             True)
            NoReference
      persistFieldDef CreatedTests
        = ((((((FieldDef (HaskellName (packPTH "createdTests")))
                 (DBName (packPTH "created_tests")))
                (FTList ((FTTypeCon Nothing) (packPTH "ObjectId"))))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef PassedTests
        = ((((((FieldDef (HaskellName (packPTH "passedTests")))
                 (DBName (packPTH "passed_tests")))
                (FTList ((FTTypeCon Nothing) (packPTH "TestResult"))))
               SqlString)
              [])
             True)
            (EmbedRef
               ((EmbedEntityDef (HaskellName (packPTH "TestResult")))
                  [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing) Nothing,
                   ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                   ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                     Nothing]))
      persistIdField = UserId
      fieldLens UserId
        = (lensPTH entityKey)
            (\ Entity _ value_aUSj key_aUSk -> (Entity key_aUSk) value_aUSj)
      fieldLens Username
        = (lensPTH (_username . entityVal))
            (\ Entity key_aUSl value_aUSm x_aUSn
               -> (Entity key_aUSl) value_aUSm {_username = x_aUSn})
      fieldLens Password
        = (lensPTH (_password . entityVal))
            (\ Entity key_aUSl value_aUSm x_aUSn
               -> (Entity key_aUSl) value_aUSm {_password = x_aUSn})
      fieldLens Email
        = (lensPTH (_email . entityVal))
            (\ Entity key_aUSl value_aUSm x_aUSn
               -> (Entity key_aUSl) value_aUSm {_email = x_aUSn})
      fieldLens Avatar
        = (lensPTH (_avatar . entityVal))
            (\ Entity key_aUSl value_aUSm x_aUSn
               -> (Entity key_aUSl) value_aUSm {_avatar = x_aUSn})
      fieldLens FirstName
        = (lensPTH (_firstName . entityVal))
            (\ Entity key_aUSl value_aUSm x_aUSn
               -> (Entity key_aUSl) value_aUSm {_firstName = x_aUSn})
      fieldLens SecondName
        = (lensPTH (_secondName . entityVal))
            (\ Entity key_aUSl value_aUSm x_aUSn
               -> (Entity key_aUSl) value_aUSm {_secondName = x_aUSn})
      fieldLens BirthDay
        = (lensPTH (_birthDay . entityVal))
            (\ Entity key_aUSl value_aUSm x_aUSn
               -> (Entity key_aUSl) value_aUSm {_birthDay = x_aUSn})
      fieldLens Sex
        = (lensPTH (_sex . entityVal))
            (\ Entity key_aUSl value_aUSm x_aUSn
               -> (Entity key_aUSl) value_aUSm {_sex = x_aUSn})
      fieldLens CreatedTests
        = (lensPTH (_createdTests . entityVal))
            (\ Entity key_aUSl value_aUSm x_aUSn
               -> (Entity key_aUSl) value_aUSm {_createdTests = x_aUSn})
      fieldLens PassedTests
        = (lensPTH (_passedTests . entityVal))
            (\ Entity key_aUSl value_aUSm x_aUSn
               -> (Entity key_aUSl) value_aUSm {_passedTests = x_aUSn})
    username ::
      forall f. Functor f => (Text -> f Text) -> User -> f User
    username f_aUSq a_aUSr
      = (fmap setter_aUSp) (f_aUSq needle_aUSo)
      where
          needle_aUSo = _username a_aUSr
          setter_aUSp y_aUSs = a_aUSr {_username = y_aUSs}
    password ::
      forall f. Functor f => (Text -> f Text) -> User -> f User
    password f_aUSv a_aUSw
      = (fmap setter_aUSu) (f_aUSv needle_aUSt)
      where
          needle_aUSt = _password a_aUSw
          setter_aUSu y_aUSx = a_aUSw {_password = y_aUSx}
    email :: forall f. Functor f => (Text -> f Text) -> User -> f User
    email f_aUSA a_aUSB
      = (fmap setter_aUSz) (f_aUSA needle_aUSy)
      where
          needle_aUSy = _email a_aUSB
          setter_aUSz y_aUSC = a_aUSB {_email = y_aUSC}
    avatar :: forall f. Functor f => (Text -> f Text) -> User -> f User
    avatar f_aUSF a_aUSG
      = (fmap setter_aUSE) (f_aUSF needle_aUSD)
      where
          needle_aUSD = _avatar a_aUSG
          setter_aUSE y_aUSH = a_aUSG {_avatar = y_aUSH}
    firstName ::
      forall f.
      Functor f => (Maybe Text -> f (Maybe Text)) -> User -> f User
    firstName f_aUSK a_aUSL
      = (fmap setter_aUSJ) (f_aUSK needle_aUSI)
      where
          needle_aUSI = _firstName a_aUSL
          setter_aUSJ y_aUSM = a_aUSL {_firstName = y_aUSM}
    secondName ::
      forall f.
      Functor f => (Maybe Text -> f (Maybe Text)) -> User -> f User
    secondName f_aUSP a_aUSQ
      = (fmap setter_aUSO) (f_aUSP needle_aUSN)
      where
          needle_aUSN = _secondName a_aUSQ
          setter_aUSO y_aUSR = a_aUSQ {_secondName = y_aUSR}
    birthDay ::
      forall f.
      Functor f => (Maybe UTCTime -> f (Maybe UTCTime)) -> User -> f User
    birthDay f_aUSU a_aUSV
      = (fmap setter_aUST) (f_aUSU needle_aUSS)
      where
          needle_aUSS = _birthDay a_aUSV
          setter_aUST y_aUSW = a_aUSV {_birthDay = y_aUSW}
    sex ::
      forall f.
      Functor f => (Maybe Int -> f (Maybe Int)) -> User -> f User
    sex f_aUSZ a_aUT0
      = (fmap setter_aUSY) (f_aUSZ needle_aUSX)
      where
          needle_aUSX = _sex a_aUT0
          setter_aUSY y_aUT1 = a_aUT0 {_sex = y_aUT1}
    createdTests ::
      forall f.
      Functor f => ([ObjectId] -> f [ObjectId]) -> User -> f User
    createdTests f_aUT4 a_aUT5
      = (fmap setter_aUT3) (f_aUT4 needle_aUT2)
      where
          needle_aUT2 = _createdTests a_aUT5
          setter_aUT3 y_aUT6 = a_aUT5 {_createdTests = y_aUT6}
    passedTests ::
      forall f.
      Functor f => ([TestResult] -> f [TestResult]) -> User -> f User
    passedTests f_aUT9 a_aUTa
      = (fmap setter_aUT8) (f_aUT9 needle_aUT7)
      where
          needle_aUT7 = _passedTests a_aUTa
          setter_aUT8 y_aUTb = a_aUTa {_passedTests = y_aUTb}
    instance ToBackendKey MongoContext User where
      toBackendKey = unUserKey
      fromBackendKey = UserKey
    migrateAll :: persistent-2.8.1:Database.Persist.Sql.Types.Migration
    migrateAll
      = do let defs_aUTc
                 = [(((((((((EntityDef (HaskellName (packPTH "TestResult")))
                              (DBName (packPTH "test_result")))
                             (((((((FieldDef (HaskellName (packPTH "Id")))
                                     (DBName (packPTH "id")))
                                    ((FTTypeCon Nothing) (packPTH "TestResultId")))
                                   SqlInt64)
                                  [])
                                 True)
                                ((ForeignRef (HaskellName (packPTH "TestResult")))
                                   ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                            [])
                           [((((((FieldDef (HaskellName (packPTH "testKey")))
                                   (DBName (packPTH "test_key")))
                                  ((FTTypeCon Nothing) (packPTH "Text")))
                                 SqlString)
                                [])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "result")))
                                   (DBName (packPTH "result")))
                                  ((FTTypeCon Nothing) (packPTH "Text")))
                                 SqlString)
                                [])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "passingDate")))
                                   (DBName (packPTH "passing_date")))
                                  ((FTTypeCon Nothing) (packPTH "UTCTime")))
                                 SqlDayTime)
                                [])
                               True)
                              NoReference])
                          [])
                         [])
                        [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
                       (Data.Map.Internal.fromList []))
                      False,
                    (((((((((EntityDef (HaskellName (packPTH "User")))
                              (DBName (packPTH "user")))
                             (((((((FieldDef (HaskellName (packPTH "Id")))
                                     (DBName (packPTH "id")))
                                    ((FTTypeCon Nothing) (packPTH "UserId")))
                                   SqlInt64)
                                  [])
                                 True)
                                ((ForeignRef (HaskellName (packPTH "User")))
                                   ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                            [])
                           [((((((FieldDef (HaskellName (packPTH "username")))
                                   (DBName (packPTH "username")))
                                  ((FTTypeCon Nothing) (packPTH "Text")))
                                 SqlString)
                                [])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "password")))
                                   (DBName (packPTH "password")))
                                  ((FTTypeCon Nothing) (packPTH "Text")))
                                 SqlString)
                                [])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "email")))
                                   (DBName (packPTH "email")))
                                  ((FTTypeCon Nothing) (packPTH "Text")))
                                 SqlString)
                                [])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "avatar")))
                                   (DBName (packPTH "avatar")))
                                  ((FTTypeCon Nothing) (packPTH "Text")))
                                 SqlString)
                                [])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "firstName")))
                                   (DBName (packPTH "first_name")))
                                  ((FTTypeCon Nothing) (packPTH "Text")))
                                 SqlString)
                                [packPTH "Maybe"])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "secondName")))
                                   (DBName (packPTH "second_name")))
                                  ((FTTypeCon Nothing) (packPTH "Text")))
                                 SqlString)
                                [packPTH "Maybe"])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "birthDay")))
                                   (DBName (packPTH "birth_day")))
                                  ((FTTypeCon Nothing) (packPTH "UTCTime")))
                                 SqlDayTime)
                                [packPTH "Maybe"])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "sex")))
                                   (DBName (packPTH "sex")))
                                  ((FTTypeCon Nothing) (packPTH "Int")))
                                 SqlInt64)
                                [packPTH "Maybe"])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "createdTests")))
                                   (DBName (packPTH "created_tests")))
                                  (FTList ((FTTypeCon Nothing) (packPTH "ObjectId"))))
                                 SqlString)
                                [])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "passedTests")))
                                   (DBName (packPTH "passed_tests")))
                                  (FTList ((FTTypeCon Nothing) (packPTH "TestResult"))))
                                 SqlString)
                                [])
                               True)
                              (EmbedRef
                                 ((EmbedEntityDef (HaskellName (packPTH "TestResult")))
                                    [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing)
                                       Nothing,
                                     ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                                     ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                                       Nothing]))])
                          [(((UniqueDef (HaskellName (packPTH "Email")))
                               (DBName (packPTH "email")))
                              [(HaskellName (packPTH "email"), DBName (packPTH "email"))])
                             [],
                           (((UniqueDef (HaskellName (packPTH "Username")))
                               (DBName (packPTH "username")))
                              [(HaskellName (packPTH "username"), DBName (packPTH "username"))])
                             []])
                         [])
                        [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
                       (Data.Map.Internal.fromList []))
                      False]
           (persistent-2.8.1:Database.Persist.Sql.Migration.migrate defs_aUTc)
             ((((((((((EntityDef (HaskellName (packPTH "TestResult")))
                        (DBName (packPTH "test_result")))
                       (((((((FieldDef (HaskellName (packPTH "Id")))
                               (DBName (packPTH "id")))
                              ((FTTypeCon Nothing) (packPTH "TestResultId")))
                             SqlInt64)
                            [])
                           True)
                          ((ForeignRef (HaskellName (packPTH "TestResult")))
                             ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                      [])
                     [((((((FieldDef (HaskellName (packPTH "testKey")))
                             (DBName (packPTH "test_key")))
                            ((FTTypeCon Nothing) (packPTH "Text")))
                           SqlString)
                          [])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "result")))
                             (DBName (packPTH "result")))
                            ((FTTypeCon Nothing) (packPTH "Text")))
                           SqlString)
                          [])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "passingDate")))
                             (DBName (packPTH "passing_date")))
                            ((FTTypeCon Nothing) (packPTH "UTCTime")))
                           SqlDayTime)
                          [])
                         True)
                        NoReference])
                    [])
                   [])
                  [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
                 (Data.Map.Internal.fromList []))
                False)
           (persistent-2.8.1:Database.Persist.Sql.Migration.migrate defs_aUTc)
             ((((((((((EntityDef (HaskellName (packPTH "User")))
                        (DBName (packPTH "user")))
                       (((((((FieldDef (HaskellName (packPTH "Id")))
                               (DBName (packPTH "id")))
                              ((FTTypeCon Nothing) (packPTH "UserId")))
                             SqlInt64)
                            [])
                           True)
                          ((ForeignRef (HaskellName (packPTH "User")))
                             ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                      [])
                     [((((((FieldDef (HaskellName (packPTH "username")))
                             (DBName (packPTH "username")))
                            ((FTTypeCon Nothing) (packPTH "Text")))
                           SqlString)
                          [])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "password")))
                             (DBName (packPTH "password")))
                            ((FTTypeCon Nothing) (packPTH "Text")))
                           SqlString)
                          [])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "email")))
                             (DBName (packPTH "email")))
                            ((FTTypeCon Nothing) (packPTH "Text")))
                           SqlString)
                          [])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "avatar")))
                             (DBName (packPTH "avatar")))
                            ((FTTypeCon Nothing) (packPTH "Text")))
                           SqlString)
                          [])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "firstName")))
                             (DBName (packPTH "first_name")))
                            ((FTTypeCon Nothing) (packPTH "Text")))
                           SqlString)
                          [packPTH "Maybe"])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "secondName")))
                             (DBName (packPTH "second_name")))
                            ((FTTypeCon Nothing) (packPTH "Text")))
                           SqlString)
                          [packPTH "Maybe"])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "birthDay")))
                             (DBName (packPTH "birth_day")))
                            ((FTTypeCon Nothing) (packPTH "UTCTime")))
                           SqlDayTime)
                          [packPTH "Maybe"])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "sex")))
                             (DBName (packPTH "sex")))
                            ((FTTypeCon Nothing) (packPTH "Int")))
                           SqlInt64)
                          [packPTH "Maybe"])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "createdTests")))
                             (DBName (packPTH "created_tests")))
                            (FTList ((FTTypeCon Nothing) (packPTH "ObjectId"))))
                           SqlString)
                          [])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "passedTests")))
                             (DBName (packPTH "passed_tests")))
                            (FTList ((FTTypeCon Nothing) (packPTH "TestResult"))))
                           SqlString)
                          [])
                         True)
                        (EmbedRef
                           ((EmbedEntityDef (HaskellName (packPTH "TestResult")))
                              [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing) Nothing,
                               ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                               ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                                 Nothing]))])
                    [(((UniqueDef (HaskellName (packPTH "Email")))
                         (DBName (packPTH "email")))
                        [(HaskellName (packPTH "email"), DBName (packPTH "email"))])
                       [],
                     (((UniqueDef (HaskellName (packPTH "Username")))
                         (DBName (packPTH "username")))
                        [(HaskellName (packPTH "username"), DBName (packPTH "username"))])
                       []])
                   [])
                  [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
                 (Data.Map.Internal.fromList []))
                False)
/home/nikita/Projects/labs/Databases/Course-Project/Server/src/Model/User.hs:(34,156)-(54,2): Splicing expression
    Language.Haskell.TH.Quote.quoteExp
      persistLowerCase
      "\n\
      \TestResult\n\
      \  testKey       Text\n\
      \  result        Text\n\
      \  passingDate   UTCTime\n\
      \  deriving      Eq Read Show Generic\n\
      \User\n\
      \  username      Text\n\
      \  password      Text\n\
      \  email         Text\n\
      \  avatar        Text\n\
      \  firstName     Text Maybe\n\
      \  secondName    Text Maybe\n\
      \  birthDay      UTCTime Maybe\n\
      \  sex           Int Maybe\n\
      \  createdTests  [ObjectId]\n\
      \  passedTests   [TestResult]\n\
      \  Email         email\n\
      \  Username      username\n\
      \  deriving      Eq Read Show Generic\n"
  ======>
    [(((((((((EntityDef (HaskellName (packPTH "TestResult")))
               (DBName (packPTH "test_result")))
              (((((((FieldDef (HaskellName (packPTH "Id")))
                      (DBName (packPTH "id")))
                     ((FTTypeCon Nothing) (packPTH "TestResultId")))
                    SqlInt64)
                   [])
                  True)
                 ((ForeignRef (HaskellName (packPTH "TestResult")))
                    ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
             [])
            [((((((FieldDef (HaskellName (packPTH "testKey")))
                    (DBName (packPTH "test_key")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for testKey")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "result")))
                    (DBName (packPTH "result")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for result")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "passingDate")))
                    (DBName (packPTH "passing_date")))
                   ((FTTypeCon Nothing) (packPTH "UTCTime")))
                  (SqlOther (packPTH "SqlType unset for passingDate")))
                 [])
                True)
               NoReference])
           [])
          [])
         [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
        (Data.Map.Internal.fromList []))
       False
       {entityFields = [((((((FieldDef (HaskellName (packPTH "testKey")))
                               (DBName (packPTH "test_key")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "result")))
                               (DBName (packPTH "result")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "passingDate")))
                               (DBName (packPTH "passing_date")))
                              ((FTTypeCon Nothing) (packPTH "UTCTime")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy UTCTime)))
                            [])
                           True)
                          NoReference],
        entityId = ((((((FieldDef (HaskellName (packPTH "Id")))
                          (DBName (packPTH "id")))
                         ((FTTypeCon Nothing) (packPTH "TestResultId")))
                        (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                           (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                       [])
                      True)
                     ((ForeignRef (HaskellName (packPTH "TestResult")))
                        ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))},
     (((((((((EntityDef (HaskellName (packPTH "User")))
               (DBName (packPTH "user")))
              (((((((FieldDef (HaskellName (packPTH "Id")))
                      (DBName (packPTH "id")))
                     ((FTTypeCon Nothing) (packPTH "UserId")))
                    SqlInt64)
                   [])
                  True)
                 ((ForeignRef (HaskellName (packPTH "User")))
                    ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
             [])
            [((((((FieldDef (HaskellName (packPTH "username")))
                    (DBName (packPTH "username")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for username")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "password")))
                    (DBName (packPTH "password")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for password")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "email")))
                    (DBName (packPTH "email")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for email")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "avatar")))
                    (DBName (packPTH "avatar")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for avatar")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "firstName")))
                    (DBName (packPTH "first_name")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for firstName")))
                 [packPTH "Maybe"])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "secondName")))
                    (DBName (packPTH "second_name")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for secondName")))
                 [packPTH "Maybe"])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "birthDay")))
                    (DBName (packPTH "birth_day")))
                   ((FTTypeCon Nothing) (packPTH "UTCTime")))
                  (SqlOther (packPTH "SqlType unset for birthDay")))
                 [packPTH "Maybe"])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "sex")))
                    (DBName (packPTH "sex")))
                   ((FTTypeCon Nothing) (packPTH "Int")))
                  (SqlOther (packPTH "SqlType unset for sex")))
                 [packPTH "Maybe"])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "createdTests")))
                    (DBName (packPTH "created_tests")))
                   (FTList ((FTTypeCon Nothing) (packPTH "ObjectId"))))
                  (SqlOther (packPTH "SqlType unset for createdTests")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "passedTests")))
                    (DBName (packPTH "passed_tests")))
                   (FTList ((FTTypeCon Nothing) (packPTH "TestResult"))))
                  (SqlOther (packPTH "SqlType unset for passedTests")))
                 [])
                True)
               (EmbedRef
                  ((EmbedEntityDef (HaskellName (packPTH "TestResult")))
                     [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing) Nothing,
                      ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                      ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                        Nothing]))])
           [(((UniqueDef (HaskellName (packPTH "Email")))
                (DBName (packPTH "email")))
               [(HaskellName (packPTH "email"), DBName (packPTH "email"))])
              [],
            (((UniqueDef (HaskellName (packPTH "Username")))
                (DBName (packPTH "username")))
               [(HaskellName (packPTH "username"), DBName (packPTH "username"))])
              []])
          [])
         [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
        (Data.Map.Internal.fromList []))
       False
       {entityFields = [((((((FieldDef (HaskellName (packPTH "username")))
                               (DBName (packPTH "username")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "password")))
                               (DBName (packPTH "password")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "email")))
                               (DBName (packPTH "email")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "avatar")))
                               (DBName (packPTH "avatar")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "firstName")))
                               (DBName (packPTH "first_name")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [packPTH "Maybe"])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "secondName")))
                               (DBName (packPTH "second_name")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [packPTH "Maybe"])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "birthDay")))
                               (DBName (packPTH "birth_day")))
                              ((FTTypeCon Nothing) (packPTH "UTCTime")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy UTCTime)))
                            [packPTH "Maybe"])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "sex")))
                               (DBName (packPTH "sex")))
                              ((FTTypeCon Nothing) (packPTH "Int")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Int)))
                            [packPTH "Maybe"])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "createdTests")))
                               (DBName (packPTH "created_tests")))
                              (FTList ((FTTypeCon Nothing) (packPTH "ObjectId"))))
                             SqlString)
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "passedTests")))
                               (DBName (packPTH "passed_tests")))
                              (FTList ((FTTypeCon Nothing) (packPTH "TestResult"))))
                             SqlString)
                            [])
                           True)
                          (EmbedRef
                             ((EmbedEntityDef (HaskellName (packPTH "TestResult")))
                                [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing) Nothing,
                                 ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                                 ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                                   Nothing]))],
        entityId = ((((((FieldDef (HaskellName (packPTH "Id")))
                          (DBName (packPTH "id")))
                         ((FTTypeCon Nothing) (packPTH "UserId")))
                        (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                           (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                       [])
                      True)
                     ((ForeignRef (HaskellName (packPTH "User")))
                        ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))}]
/home/nikita/Projects/labs/Databases/Course-Project/Server/src/Model/User.hs:(34,1)-(54,2): Splicing declarations
    share
      [mkPersist
         (mkPersistSettings (ConT ''MongoContext))
           {mpsGenerateLenses = True, mpsPrefixFields = False},
       mkMigrate "migrateAll"]
      ([(((((((((EntityDef (HaskellName (packPTH "TestResult")))
                  (DBName (packPTH "test_result")))
                 (((((((FieldDef (HaskellName (packPTH "Id")))
                         (DBName (packPTH "id")))
                        ((FTTypeCon Nothing) (packPTH "TestResultId")))
                       SqlInt64)
                      [])
                     True)
                    ((ForeignRef (HaskellName (packPTH "TestResult")))
                       ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                [])
               [((((((FieldDef (HaskellName (packPTH "testKey")))
                       (DBName (packPTH "test_key")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for testKey")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "result")))
                       (DBName (packPTH "result")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for result")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "passingDate")))
                       (DBName (packPTH "passing_date")))
                      ((FTTypeCon Nothing) (packPTH "UTCTime")))
                     (SqlOther (packPTH "SqlType unset for passingDate")))
                    [])
                   True)
                  NoReference])
              [])
             [])
            [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
           (Data.Map.Internal.fromList []))
          False
          {entityFields = [((((((FieldDef (HaskellName (packPTH "testKey")))
                                  (DBName (packPTH "test_key")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "result")))
                                  (DBName (packPTH "result")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "passingDate")))
                                  (DBName (packPTH "passing_date")))
                                 ((FTTypeCon Nothing) (packPTH "UTCTime")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy UTCTime)))
                               [])
                              True)
                             NoReference],
           entityId = ((((((FieldDef (HaskellName (packPTH "Id")))
                             (DBName (packPTH "id")))
                            ((FTTypeCon Nothing) (packPTH "TestResultId")))
                           (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                              (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                          [])
                         True)
                        ((ForeignRef (HaskellName (packPTH "TestResult")))
                           ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))},
        (((((((((EntityDef (HaskellName (packPTH "User")))
                  (DBName (packPTH "user")))
                 (((((((FieldDef (HaskellName (packPTH "Id")))
                         (DBName (packPTH "id")))
                        ((FTTypeCon Nothing) (packPTH "UserId")))
                       SqlInt64)
                      [])
                     True)
                    ((ForeignRef (HaskellName (packPTH "User")))
                       ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                [])
               [((((((FieldDef (HaskellName (packPTH "username")))
                       (DBName (packPTH "username")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for username")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "password")))
                       (DBName (packPTH "password")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for password")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "email")))
                       (DBName (packPTH "email")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for email")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "avatar")))
                       (DBName (packPTH "avatar")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for avatar")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "firstName")))
                       (DBName (packPTH "first_name")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for firstName")))
                    [packPTH "Maybe"])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "secondName")))
                       (DBName (packPTH "second_name")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for secondName")))
                    [packPTH "Maybe"])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "birthDay")))
                       (DBName (packPTH "birth_day")))
                      ((FTTypeCon Nothing) (packPTH "UTCTime")))
                     (SqlOther (packPTH "SqlType unset for birthDay")))
                    [packPTH "Maybe"])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "sex")))
                       (DBName (packPTH "sex")))
                      ((FTTypeCon Nothing) (packPTH "Int")))
                     (SqlOther (packPTH "SqlType unset for sex")))
                    [packPTH "Maybe"])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "createdTests")))
                       (DBName (packPTH "created_tests")))
                      (FTList ((FTTypeCon Nothing) (packPTH "ObjectId"))))
                     (SqlOther (packPTH "SqlType unset for createdTests")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "passedTests")))
                       (DBName (packPTH "passed_tests")))
                      (FTList ((FTTypeCon Nothing) (packPTH "TestResult"))))
                     (SqlOther (packPTH "SqlType unset for passedTests")))
                    [])
                   True)
                  (EmbedRef
                     ((EmbedEntityDef (HaskellName (packPTH "TestResult")))
                        [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing) Nothing,
                         ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                         ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                           Nothing]))])
              [(((UniqueDef (HaskellName (packPTH "Email")))
                   (DBName (packPTH "email")))
                  [(HaskellName (packPTH "email"), DBName (packPTH "email"))])
                 [],
               (((UniqueDef (HaskellName (packPTH "Username")))
                   (DBName (packPTH "username")))
                  [(HaskellName (packPTH "username"), DBName (packPTH "username"))])
                 []])
             [])
            [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
           (Data.Map.Internal.fromList []))
          False
          {entityFields = [((((((FieldDef (HaskellName (packPTH "username")))
                                  (DBName (packPTH "username")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "password")))
                                  (DBName (packPTH "password")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "email")))
                                  (DBName (packPTH "email")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "avatar")))
                                  (DBName (packPTH "avatar")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "firstName")))
                                  (DBName (packPTH "first_name")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [packPTH "Maybe"])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "secondName")))
                                  (DBName (packPTH "second_name")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [packPTH "Maybe"])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "birthDay")))
                                  (DBName (packPTH "birth_day")))
                                 ((FTTypeCon Nothing) (packPTH "UTCTime")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy UTCTime)))
                               [packPTH "Maybe"])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "sex")))
                                  (DBName (packPTH "sex")))
                                 ((FTTypeCon Nothing) (packPTH "Int")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Int)))
                               [packPTH "Maybe"])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "createdTests")))
                                  (DBName (packPTH "created_tests")))
                                 (FTList ((FTTypeCon Nothing) (packPTH "ObjectId"))))
                                SqlString)
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "passedTests")))
                                  (DBName (packPTH "passed_tests")))
                                 (FTList ((FTTypeCon Nothing) (packPTH "TestResult"))))
                                SqlString)
                               [])
                              True)
                             (EmbedRef
                                ((EmbedEntityDef (HaskellName (packPTH "TestResult")))
                                   [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing) Nothing,
                                    ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                                    ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                                      Nothing]))],
           entityId = ((((((FieldDef (HaskellName (packPTH "Id")))
                             (DBName (packPTH "id")))
                            ((FTTypeCon Nothing) (packPTH "UserId")))
                           (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                              (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                          [])
                         True)
                        ((ForeignRef (HaskellName (packPTH "User")))
                           ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))}])
  ======>
    instance PersistField TestResult where
      toPersistValue
        = \ ent_aV7Z
            -> (PersistMap
                  $ ((Prelude.zip
                        ((Prelude.map pack) ["testKey", "result", "passingDate"]))
                       ((Prelude.map toPersistValue) $ (toPersistFields ent_aV7Z))))
      fromPersistValue
        = ((\ x_aV80
              -> let
                   columns_aV81
                     = unordered-containers-0.2.9.0:Data.HashMap.Strict.fromList x_aV80
                 in
                   (fromPersistValues
                      $ ((Prelude.map
                            (\ name_aV82
                               -> case
                                      (unordered-containers-0.2.9.0:Data.HashMap.Base.lookup
                                         (pack name_aV82))
                                        columns_aV81
                                  of
                                    Just v_aV83 -> v_aV83
                                    Nothing -> PersistNull))
                           $ ["testKey", "result", "passingDate"])))
             <=< getPersistMap)
    instance persistent-2.8.1:Database.Persist.Sql.Class.PersistFieldSql TestResult where
      persistent-2.8.1:Database.Persist.Sql.Class.sqlType _ = SqlString
    instance PersistField User where
      toPersistValue
        = \ ent_aV84
            -> (PersistMap
                  $ ((Prelude.zip
                        ((Prelude.map pack)
                           ["username", "password", "email", "avatar", "firstName",
                            "secondName", "birthDay", "sex", "createdTests", "passedTests"]))
                       ((Prelude.map toPersistValue) $ (toPersistFields ent_aV84))))
      fromPersistValue
        = ((\ x_aV85
              -> let
                   columns_aV86
                     = unordered-containers-0.2.9.0:Data.HashMap.Strict.fromList x_aV85
                 in
                   (fromPersistValues
                      $ ((Prelude.map
                            (\ name_aV87
                               -> case
                                      (unordered-containers-0.2.9.0:Data.HashMap.Base.lookup
                                         (pack name_aV87))
                                        columns_aV86
                                  of
                                    Just v_aV88 -> v_aV88
                                    Nothing -> PersistNull))
                           $ ["username", "password", "email", "avatar", "firstName",
                              "secondName", "birthDay", "sex", "createdTests", "passedTests"])))
             <=< getPersistMap)
    instance persistent-2.8.1:Database.Persist.Sql.Class.PersistFieldSql User where
      persistent-2.8.1:Database.Persist.Sql.Class.sqlType _ = SqlString
    data TestResult
      = TestResult {_testKey :: !Text,
                    _result :: !Text,
                    _passingDate :: !UTCTime}
      deriving (Eq, Read, Show, Generic)
    type TestResultId = Key TestResult
    instance PersistEntity TestResult where
      type PersistEntityBackend TestResult = MongoContext
      data Unique TestResult
      newtype Key TestResult
        = TestResultKey {unTestResultKey :: (BackendKey MongoContext)}
        deriving (Show,
                  Read,
                  Eq,
                  Ord,
                  path-pieces-0.2.1:Web.PathPieces.PathPiece,
                  http-api-data-0.3.7.2:Web.Internal.HttpApiData.ToHttpApiData,
                  http-api-data-0.3.7.2:Web.Internal.HttpApiData.FromHttpApiData,
                  PersistField,
                  persistent-2.8.1:Database.Persist.Sql.Class.PersistFieldSql,
                  Aeson.ToJSON,
                  Aeson.FromJSON)
      data EntityField TestResult typ
        = typ ~ Key TestResult => TestResultId |
          typ ~ Text => TestKey |
          typ ~ Text => Result |
          typ ~ UTCTime => PassingDate
      keyToValues
        = ((ghc-prim-0.5.1.1:GHC.Types.: [])
             . (toPersistValue . unTestResultKey))
      keyFromValues
        = ((fmap TestResultKey)
             . (fromPersistValue . Database.Persist.TH.headNote))
      entityDef _
        = (((((((((EntityDef (HaskellName (packPTH "TestResult")))
                    (DBName (packPTH "test_result")))
                   (((((((FieldDef (HaskellName (packPTH "Id")))
                           (DBName (packPTH "id")))
                          ((FTTypeCon Nothing) (packPTH "TestResultId")))
                         SqlInt64)
                        [])
                       True)
                      ((ForeignRef (HaskellName (packPTH "TestResult")))
                         ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                  [])
                 [((((((FieldDef (HaskellName (packPTH "testKey")))
                         (DBName (packPTH "test_key")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "result")))
                         (DBName (packPTH "result")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "passingDate")))
                         (DBName (packPTH "passing_date")))
                        ((FTTypeCon Nothing) (packPTH "UTCTime")))
                       SqlDayTime)
                      [])
                     True)
                    NoReference])
                [])
               [])
              [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
             (Data.Map.Internal.fromList []))
            False
      toPersistFields (TestResult x_aV89 x_aV8a x_aV8b)
        = [SomePersistField x_aV89, SomePersistField x_aV8a,
           SomePersistField x_aV8b]
      fromPersistValues [x1_aV8d, x2_aV8e, x3_aV8f]
        = TestResult
            <$>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "testKey")))
                 . fromPersistValue)
                x1_aV8d
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "result")))
                 . fromPersistValue)
                x2_aV8e
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "passingDate")))
                 . fromPersistValue)
                x3_aV8f
      fromPersistValues x_aV8c
        = (Left
             $ ((mappend (packPTH "TestResult: fromPersistValues failed on: "))
                  (pack $ (show x_aV8c))))
      persistUniqueToFieldNames _
        = error "Degenerate case, should never happen"
      persistUniqueToValues _
        = error "Degenerate case, should never happen"
      persistUniqueKeys
        (TestResult _testKey_aV8g _result_aV8h _passingDate_aV8i)
        = []
      persistFieldDef TestResultId
        = ((((((FieldDef (HaskellName (packPTH "Id")))
                 (DBName (packPTH "id")))
                ((FTTypeCon Nothing) (packPTH "TestResultId")))
               SqlInt64)
              [])
             True)
            ((ForeignRef (HaskellName (packPTH "TestResult")))
               ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))
      persistFieldDef TestKey
        = ((((((FieldDef (HaskellName (packPTH "testKey")))
                 (DBName (packPTH "test_key")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef Result
        = ((((((FieldDef (HaskellName (packPTH "result")))
                 (DBName (packPTH "result")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef PassingDate
        = ((((((FieldDef (HaskellName (packPTH "passingDate")))
                 (DBName (packPTH "passing_date")))
                ((FTTypeCon Nothing) (packPTH "UTCTime")))
               SqlDayTime)
              [])
             True)
            NoReference
      persistIdField = TestResultId
      fieldLens TestResultId
        = (lensPTH entityKey)
            (\ Entity _ value_aV8j key_aV8k -> (Entity key_aV8k) value_aV8j)
      fieldLens TestKey
        = (lensPTH (_testKey . entityVal))
            (\ Entity key_aV8l value_aV8m x_aV8n
               -> (Entity key_aV8l) value_aV8m {_testKey = x_aV8n})
      fieldLens Result
        = (lensPTH (_result . entityVal))
            (\ Entity key_aV8l value_aV8m x_aV8n
               -> (Entity key_aV8l) value_aV8m {_result = x_aV8n})
      fieldLens PassingDate
        = (lensPTH (_passingDate . entityVal))
            (\ Entity key_aV8l value_aV8m x_aV8n
               -> (Entity key_aV8l) value_aV8m {_passingDate = x_aV8n})
    testKey ::
      forall f.
      Functor f => (Text -> f Text) -> TestResult -> f TestResult
    testKey f_aV8q a_aV8r
      = (fmap setter_aV8p) (f_aV8q needle_aV8o)
      where
          needle_aV8o = _testKey a_aV8r
          setter_aV8p y_aV8s = a_aV8r {_testKey = y_aV8s}
    result ::
      forall f.
      Functor f => (Text -> f Text) -> TestResult -> f TestResult
    result f_aV8v a_aV8w
      = (fmap setter_aV8u) (f_aV8v needle_aV8t)
      where
          needle_aV8t = _result a_aV8w
          setter_aV8u y_aV8x = a_aV8w {_result = y_aV8x}
    passingDate ::
      forall f.
      Functor f => (UTCTime -> f UTCTime) -> TestResult -> f TestResult
    passingDate f_aV8A a_aV8B
      = (fmap setter_aV8z) (f_aV8A needle_aV8y)
      where
          needle_aV8y = _passingDate a_aV8B
          setter_aV8z y_aV8C = a_aV8B {_passingDate = y_aV8C}
    instance ToBackendKey MongoContext TestResult where
      toBackendKey = unTestResultKey
      fromBackendKey = TestResultKey
    data User
      = User {_username :: !Text,
              _password :: !Text,
              _email :: !Text,
              _avatar :: !Text,
              _firstName :: !(Maybe Text),
              _secondName :: !(Maybe Text),
              _birthDay :: !(Maybe UTCTime),
              _sex :: !(Maybe Int),
              _createdTests :: ![ObjectId],
              _passedTests :: ![TestResult]}
      deriving (Eq, Read, Show, Generic)
    type UserId = Key User
    instance PersistEntity User where
      type PersistEntityBackend User = MongoContext
      data Unique User = Email Text | Username Text
      newtype Key User
        = UserKey {unUserKey :: (BackendKey MongoContext)}
        deriving (Show,
                  Read,
                  Eq,
                  Ord,
                  path-pieces-0.2.1:Web.PathPieces.PathPiece,
                  http-api-data-0.3.7.2:Web.Internal.HttpApiData.ToHttpApiData,
                  http-api-data-0.3.7.2:Web.Internal.HttpApiData.FromHttpApiData,
                  PersistField,
                  persistent-2.8.1:Database.Persist.Sql.Class.PersistFieldSql,
                  Aeson.ToJSON,
                  Aeson.FromJSON)
      data EntityField User typ
        = typ ~ Key User => UserId |
          typ ~ Text => Username |
          typ ~ Text => Password |
          typ ~ Text => Email |
          typ ~ Text => Avatar |
          typ ~ Maybe Text => FirstName |
          typ ~ Maybe Text => SecondName |
          typ ~ Maybe UTCTime => BirthDay |
          typ ~ Maybe Int => Sex |
          typ ~ [ObjectId] => CreatedTests |
          typ ~ [TestResult] => PassedTests
      keyToValues
        = ((ghc-prim-0.5.1.1:GHC.Types.: [])
             . (toPersistValue . unUserKey))
      keyFromValues
        = ((fmap UserKey)
             . (fromPersistValue . Database.Persist.TH.headNote))
      entityDef _
        = (((((((((EntityDef (HaskellName (packPTH "User")))
                    (DBName (packPTH "user")))
                   (((((((FieldDef (HaskellName (packPTH "Id")))
                           (DBName (packPTH "id")))
                          ((FTTypeCon Nothing) (packPTH "UserId")))
                         SqlInt64)
                        [])
                       True)
                      ((ForeignRef (HaskellName (packPTH "User")))
                         ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                  [])
                 [((((((FieldDef (HaskellName (packPTH "username")))
                         (DBName (packPTH "username")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "password")))
                         (DBName (packPTH "password")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "email")))
                         (DBName (packPTH "email")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "avatar")))
                         (DBName (packPTH "avatar")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "firstName")))
                         (DBName (packPTH "first_name")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [packPTH "Maybe"])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "secondName")))
                         (DBName (packPTH "second_name")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [packPTH "Maybe"])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "birthDay")))
                         (DBName (packPTH "birth_day")))
                        ((FTTypeCon Nothing) (packPTH "UTCTime")))
                       SqlDayTime)
                      [packPTH "Maybe"])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "sex")))
                         (DBName (packPTH "sex")))
                        ((FTTypeCon Nothing) (packPTH "Int")))
                       SqlInt64)
                      [packPTH "Maybe"])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "createdTests")))
                         (DBName (packPTH "created_tests")))
                        (FTList ((FTTypeCon Nothing) (packPTH "ObjectId"))))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "passedTests")))
                         (DBName (packPTH "passed_tests")))
                        (FTList ((FTTypeCon Nothing) (packPTH "TestResult"))))
                       SqlString)
                      [])
                     True)
                    (EmbedRef
                       ((EmbedEntityDef (HaskellName (packPTH "TestResult")))
                          [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing) Nothing,
                           ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                           ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                             Nothing]))])
                [(((UniqueDef (HaskellName (packPTH "Email")))
                     (DBName (packPTH "email")))
                    [(HaskellName (packPTH "email"), DBName (packPTH "email"))])
                   [],
                 (((UniqueDef (HaskellName (packPTH "Username")))
                     (DBName (packPTH "username")))
                    [(HaskellName (packPTH "username"), DBName (packPTH "username"))])
                   []])
               [])
              [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
             (Data.Map.Internal.fromList []))
            False
      toPersistFields
        (User x_aV8D
              x_aV8E
              x_aV8F
              x_aV8G
              x_aV8H
              x_aV8I
              x_aV8J
              x_aV8K
              x_aV8L
              x_aV8M)
        = [SomePersistField x_aV8D, SomePersistField x_aV8E,
           SomePersistField x_aV8F, SomePersistField x_aV8G,
           SomePersistField x_aV8H, SomePersistField x_aV8I,
           SomePersistField x_aV8J, SomePersistField x_aV8K,
           SomePersistField x_aV8L, SomePersistField x_aV8M]
      fromPersistValues
        [x1_aV8O,
         x2_aV8P,
         x3_aV8Q,
         x4_aV8R,
         x5_aV8S,
         x6_aV8T,
         x7_aV8U,
         x8_aV8V,
         x9_aV8W,
         x10_aV8X]
        = User
            <$>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "username")))
                 . fromPersistValue)
                x1_aV8O
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "password")))
                 . fromPersistValue)
                x2_aV8P
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "email")))
                 . fromPersistValue)
                x3_aV8Q
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "avatar")))
                 . fromPersistValue)
                x4_aV8R
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "firstName")))
                 . fromPersistValue)
                x5_aV8S
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "secondName")))
                 . fromPersistValue)
                x6_aV8T
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "birthDay")))
                 . fromPersistValue)
                x7_aV8U
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "sex")))
                 . fromPersistValue)
                x8_aV8V
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "createdTests")))
                 . fromPersistValue)
                x9_aV8W
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "passedTests")))
                 . fromPersistValue)
                x10_aV8X
      fromPersistValues x_aV8N
        = (Left
             $ ((mappend (packPTH "User: fromPersistValues failed on: "))
                  (pack $ (show x_aV8N))))
      persistUniqueToFieldNames Email {}
        = [(HaskellName (packPTH "email"), DBName (packPTH "email"))]
      persistUniqueToFieldNames Username {}
        = [(HaskellName (packPTH "username"), DBName (packPTH "username"))]
      persistUniqueToValues (Email x_aV8Y) = [toPersistValue x_aV8Y]
      persistUniqueToValues (Username x_aV8Z) = [toPersistValue x_aV8Z]
      persistUniqueKeys
        (User _username_aV90
              _password_aV91
              _email_aV92
              _avatar_aV93
              _firstName_aV94
              _secondName_aV95
              _birthDay_aV96
              _sex_aV97
              _createdTests_aV98
              _passedTests_aV99)
        = [Email _email_aV92, Username _username_aV90]
      persistFieldDef UserId
        = ((((((FieldDef (HaskellName (packPTH "Id")))
                 (DBName (packPTH "id")))
                ((FTTypeCon Nothing) (packPTH "UserId")))
               SqlInt64)
              [])
             True)
            ((ForeignRef (HaskellName (packPTH "User")))
               ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))
      persistFieldDef Username
        = ((((((FieldDef (HaskellName (packPTH "username")))
                 (DBName (packPTH "username")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef Password
        = ((((((FieldDef (HaskellName (packPTH "password")))
                 (DBName (packPTH "password")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef Email
        = ((((((FieldDef (HaskellName (packPTH "email")))
                 (DBName (packPTH "email")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef Avatar
        = ((((((FieldDef (HaskellName (packPTH "avatar")))
                 (DBName (packPTH "avatar")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef FirstName
        = ((((((FieldDef (HaskellName (packPTH "firstName")))
                 (DBName (packPTH "first_name")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [packPTH "Maybe"])
             True)
            NoReference
      persistFieldDef SecondName
        = ((((((FieldDef (HaskellName (packPTH "secondName")))
                 (DBName (packPTH "second_name")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [packPTH "Maybe"])
             True)
            NoReference
      persistFieldDef BirthDay
        = ((((((FieldDef (HaskellName (packPTH "birthDay")))
                 (DBName (packPTH "birth_day")))
                ((FTTypeCon Nothing) (packPTH "UTCTime")))
               SqlDayTime)
              [packPTH "Maybe"])
             True)
            NoReference
      persistFieldDef Sex
        = ((((((FieldDef (HaskellName (packPTH "sex")))
                 (DBName (packPTH "sex")))
                ((FTTypeCon Nothing) (packPTH "Int")))
               SqlInt64)
              [packPTH "Maybe"])
             True)
            NoReference
      persistFieldDef CreatedTests
        = ((((((FieldDef (HaskellName (packPTH "createdTests")))
                 (DBName (packPTH "created_tests")))
                (FTList ((FTTypeCon Nothing) (packPTH "ObjectId"))))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef PassedTests
        = ((((((FieldDef (HaskellName (packPTH "passedTests")))
                 (DBName (packPTH "passed_tests")))
                (FTList ((FTTypeCon Nothing) (packPTH "TestResult"))))
               SqlString)
              [])
             True)
            (EmbedRef
               ((EmbedEntityDef (HaskellName (packPTH "TestResult")))
                  [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing) Nothing,
                   ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                   ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                     Nothing]))
      persistIdField = UserId
      fieldLens UserId
        = (lensPTH entityKey)
            (\ Entity _ value_aV9a key_aV9b -> (Entity key_aV9b) value_aV9a)
      fieldLens Username
        = (lensPTH (_username . entityVal))
            (\ Entity key_aV9c value_aV9d x_aV9e
               -> (Entity key_aV9c) value_aV9d {_username = x_aV9e})
      fieldLens Password
        = (lensPTH (_password . entityVal))
            (\ Entity key_aV9c value_aV9d x_aV9e
               -> (Entity key_aV9c) value_aV9d {_password = x_aV9e})
      fieldLens Email
        = (lensPTH (_email . entityVal))
            (\ Entity key_aV9c value_aV9d x_aV9e
               -> (Entity key_aV9c) value_aV9d {_email = x_aV9e})
      fieldLens Avatar
        = (lensPTH (_avatar . entityVal))
            (\ Entity key_aV9c value_aV9d x_aV9e
               -> (Entity key_aV9c) value_aV9d {_avatar = x_aV9e})
      fieldLens FirstName
        = (lensPTH (_firstName . entityVal))
            (\ Entity key_aV9c value_aV9d x_aV9e
               -> (Entity key_aV9c) value_aV9d {_firstName = x_aV9e})
      fieldLens SecondName
        = (lensPTH (_secondName . entityVal))
            (\ Entity key_aV9c value_aV9d x_aV9e
               -> (Entity key_aV9c) value_aV9d {_secondName = x_aV9e})
      fieldLens BirthDay
        = (lensPTH (_birthDay . entityVal))
            (\ Entity key_aV9c value_aV9d x_aV9e
               -> (Entity key_aV9c) value_aV9d {_birthDay = x_aV9e})
      fieldLens Sex
        = (lensPTH (_sex . entityVal))
            (\ Entity key_aV9c value_aV9d x_aV9e
               -> (Entity key_aV9c) value_aV9d {_sex = x_aV9e})
      fieldLens CreatedTests
        = (lensPTH (_createdTests . entityVal))
            (\ Entity key_aV9c value_aV9d x_aV9e
               -> (Entity key_aV9c) value_aV9d {_createdTests = x_aV9e})
      fieldLens PassedTests
        = (lensPTH (_passedTests . entityVal))
            (\ Entity key_aV9c value_aV9d x_aV9e
               -> (Entity key_aV9c) value_aV9d {_passedTests = x_aV9e})
    username ::
      forall f. Functor f => (Text -> f Text) -> User -> f User
    username f_aV9h a_aV9i
      = (fmap setter_aV9g) (f_aV9h needle_aV9f)
      where
          needle_aV9f = _username a_aV9i
          setter_aV9g y_aV9j = a_aV9i {_username = y_aV9j}
    password ::
      forall f. Functor f => (Text -> f Text) -> User -> f User
    password f_aV9m a_aV9n
      = (fmap setter_aV9l) (f_aV9m needle_aV9k)
      where
          needle_aV9k = _password a_aV9n
          setter_aV9l y_aV9o = a_aV9n {_password = y_aV9o}
    email :: forall f. Functor f => (Text -> f Text) -> User -> f User
    email f_aV9r a_aV9s
      = (fmap setter_aV9q) (f_aV9r needle_aV9p)
      where
          needle_aV9p = _email a_aV9s
          setter_aV9q y_aV9t = a_aV9s {_email = y_aV9t}
    avatar :: forall f. Functor f => (Text -> f Text) -> User -> f User
    avatar f_aV9w a_aV9x
      = (fmap setter_aV9v) (f_aV9w needle_aV9u)
      where
          needle_aV9u = _avatar a_aV9x
          setter_aV9v y_aV9y = a_aV9x {_avatar = y_aV9y}
    firstName ::
      forall f.
      Functor f => (Maybe Text -> f (Maybe Text)) -> User -> f User
    firstName f_aV9B a_aV9C
      = (fmap setter_aV9A) (f_aV9B needle_aV9z)
      where
          needle_aV9z = _firstName a_aV9C
          setter_aV9A y_aV9D = a_aV9C {_firstName = y_aV9D}
    secondName ::
      forall f.
      Functor f => (Maybe Text -> f (Maybe Text)) -> User -> f User
    secondName f_aV9G a_aV9H
      = (fmap setter_aV9F) (f_aV9G needle_aV9E)
      where
          needle_aV9E = _secondName a_aV9H
          setter_aV9F y_aV9I = a_aV9H {_secondName = y_aV9I}
    birthDay ::
      forall f.
      Functor f => (Maybe UTCTime -> f (Maybe UTCTime)) -> User -> f User
    birthDay f_aV9L a_aV9M
      = (fmap setter_aV9K) (f_aV9L needle_aV9J)
      where
          needle_aV9J = _birthDay a_aV9M
          setter_aV9K y_aV9N = a_aV9M {_birthDay = y_aV9N}
    sex ::
      forall f.
      Functor f => (Maybe Int -> f (Maybe Int)) -> User -> f User
    sex f_aV9Q a_aV9R
      = (fmap setter_aV9P) (f_aV9Q needle_aV9O)
      where
          needle_aV9O = _sex a_aV9R
          setter_aV9P y_aV9S = a_aV9R {_sex = y_aV9S}
    createdTests ::
      forall f.
      Functor f => ([ObjectId] -> f [ObjectId]) -> User -> f User
    createdTests f_aV9V a_aV9W
      = (fmap setter_aV9U) (f_aV9V needle_aV9T)
      where
          needle_aV9T = _createdTests a_aV9W
          setter_aV9U y_aV9X = a_aV9W {_createdTests = y_aV9X}
    passedTests ::
      forall f.
      Functor f => ([TestResult] -> f [TestResult]) -> User -> f User
    passedTests f_aVa0 a_aVa1
      = (fmap setter_aV9Z) (f_aVa0 needle_aV9Y)
      where
          needle_aV9Y = _passedTests a_aVa1
          setter_aV9Z y_aVa2 = a_aVa1 {_passedTests = y_aVa2}
    instance ToBackendKey MongoContext User where
      toBackendKey = unUserKey
      fromBackendKey = UserKey
    migrateAll :: persistent-2.8.1:Database.Persist.Sql.Types.Migration
    migrateAll
      = do let defs_aVa3
                 = [(((((((((EntityDef (HaskellName (packPTH "TestResult")))
                              (DBName (packPTH "test_result")))
                             (((((((FieldDef (HaskellName (packPTH "Id")))
                                     (DBName (packPTH "id")))
                                    ((FTTypeCon Nothing) (packPTH "TestResultId")))
                                   SqlInt64)
                                  [])
                                 True)
                                ((ForeignRef (HaskellName (packPTH "TestResult")))
                                   ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                            [])
                           [((((((FieldDef (HaskellName (packPTH "testKey")))
                                   (DBName (packPTH "test_key")))
                                  ((FTTypeCon Nothing) (packPTH "Text")))
                                 SqlString)
                                [])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "result")))
                                   (DBName (packPTH "result")))
                                  ((FTTypeCon Nothing) (packPTH "Text")))
                                 SqlString)
                                [])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "passingDate")))
                                   (DBName (packPTH "passing_date")))
                                  ((FTTypeCon Nothing) (packPTH "UTCTime")))
                                 SqlDayTime)
                                [])
                               True)
                              NoReference])
                          [])
                         [])
                        [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
                       (Data.Map.Internal.fromList []))
                      False,
                    (((((((((EntityDef (HaskellName (packPTH "User")))
                              (DBName (packPTH "user")))
                             (((((((FieldDef (HaskellName (packPTH "Id")))
                                     (DBName (packPTH "id")))
                                    ((FTTypeCon Nothing) (packPTH "UserId")))
                                   SqlInt64)
                                  [])
                                 True)
                                ((ForeignRef (HaskellName (packPTH "User")))
                                   ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                            [])
                           [((((((FieldDef (HaskellName (packPTH "username")))
                                   (DBName (packPTH "username")))
                                  ((FTTypeCon Nothing) (packPTH "Text")))
                                 SqlString)
                                [])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "password")))
                                   (DBName (packPTH "password")))
                                  ((FTTypeCon Nothing) (packPTH "Text")))
                                 SqlString)
                                [])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "email")))
                                   (DBName (packPTH "email")))
                                  ((FTTypeCon Nothing) (packPTH "Text")))
                                 SqlString)
                                [])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "avatar")))
                                   (DBName (packPTH "avatar")))
                                  ((FTTypeCon Nothing) (packPTH "Text")))
                                 SqlString)
                                [])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "firstName")))
                                   (DBName (packPTH "first_name")))
                                  ((FTTypeCon Nothing) (packPTH "Text")))
                                 SqlString)
                                [packPTH "Maybe"])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "secondName")))
                                   (DBName (packPTH "second_name")))
                                  ((FTTypeCon Nothing) (packPTH "Text")))
                                 SqlString)
                                [packPTH "Maybe"])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "birthDay")))
                                   (DBName (packPTH "birth_day")))
                                  ((FTTypeCon Nothing) (packPTH "UTCTime")))
                                 SqlDayTime)
                                [packPTH "Maybe"])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "sex")))
                                   (DBName (packPTH "sex")))
                                  ((FTTypeCon Nothing) (packPTH "Int")))
                                 SqlInt64)
                                [packPTH "Maybe"])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "createdTests")))
                                   (DBName (packPTH "created_tests")))
                                  (FTList ((FTTypeCon Nothing) (packPTH "ObjectId"))))
                                 SqlString)
                                [])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "passedTests")))
                                   (DBName (packPTH "passed_tests")))
                                  (FTList ((FTTypeCon Nothing) (packPTH "TestResult"))))
                                 SqlString)
                                [])
                               True)
                              (EmbedRef
                                 ((EmbedEntityDef (HaskellName (packPTH "TestResult")))
                                    [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing)
                                       Nothing,
                                     ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                                     ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                                       Nothing]))])
                          [(((UniqueDef (HaskellName (packPTH "Email")))
                               (DBName (packPTH "email")))
                              [(HaskellName (packPTH "email"), DBName (packPTH "email"))])
                             [],
                           (((UniqueDef (HaskellName (packPTH "Username")))
                               (DBName (packPTH "username")))
                              [(HaskellName (packPTH "username"), DBName (packPTH "username"))])
                             []])
                         [])
                        [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
                       (Data.Map.Internal.fromList []))
                      False]
           (persistent-2.8.1:Database.Persist.Sql.Migration.migrate defs_aVa3)
             ((((((((((EntityDef (HaskellName (packPTH "TestResult")))
                        (DBName (packPTH "test_result")))
                       (((((((FieldDef (HaskellName (packPTH "Id")))
                               (DBName (packPTH "id")))
                              ((FTTypeCon Nothing) (packPTH "TestResultId")))
                             SqlInt64)
                            [])
                           True)
                          ((ForeignRef (HaskellName (packPTH "TestResult")))
                             ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                      [])
                     [((((((FieldDef (HaskellName (packPTH "testKey")))
                             (DBName (packPTH "test_key")))
                            ((FTTypeCon Nothing) (packPTH "Text")))
                           SqlString)
                          [])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "result")))
                             (DBName (packPTH "result")))
                            ((FTTypeCon Nothing) (packPTH "Text")))
                           SqlString)
                          [])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "passingDate")))
                             (DBName (packPTH "passing_date")))
                            ((FTTypeCon Nothing) (packPTH "UTCTime")))
                           SqlDayTime)
                          [])
                         True)
                        NoReference])
                    [])
                   [])
                  [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
                 (Data.Map.Internal.fromList []))
                False)
           (persistent-2.8.1:Database.Persist.Sql.Migration.migrate defs_aVa3)
             ((((((((((EntityDef (HaskellName (packPTH "User")))
                        (DBName (packPTH "user")))
                       (((((((FieldDef (HaskellName (packPTH "Id")))
                               (DBName (packPTH "id")))
                              ((FTTypeCon Nothing) (packPTH "UserId")))
                             SqlInt64)
                            [])
                           True)
                          ((ForeignRef (HaskellName (packPTH "User")))
                             ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                      [])
                     [((((((FieldDef (HaskellName (packPTH "username")))
                             (DBName (packPTH "username")))
                            ((FTTypeCon Nothing) (packPTH "Text")))
                           SqlString)
                          [])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "password")))
                             (DBName (packPTH "password")))
                            ((FTTypeCon Nothing) (packPTH "Text")))
                           SqlString)
                          [])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "email")))
                             (DBName (packPTH "email")))
                            ((FTTypeCon Nothing) (packPTH "Text")))
                           SqlString)
                          [])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "avatar")))
                             (DBName (packPTH "avatar")))
                            ((FTTypeCon Nothing) (packPTH "Text")))
                           SqlString)
                          [])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "firstName")))
                             (DBName (packPTH "first_name")))
                            ((FTTypeCon Nothing) (packPTH "Text")))
                           SqlString)
                          [packPTH "Maybe"])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "secondName")))
                             (DBName (packPTH "second_name")))
                            ((FTTypeCon Nothing) (packPTH "Text")))
                           SqlString)
                          [packPTH "Maybe"])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "birthDay")))
                             (DBName (packPTH "birth_day")))
                            ((FTTypeCon Nothing) (packPTH "UTCTime")))
                           SqlDayTime)
                          [packPTH "Maybe"])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "sex")))
                             (DBName (packPTH "sex")))
                            ((FTTypeCon Nothing) (packPTH "Int")))
                           SqlInt64)
                          [packPTH "Maybe"])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "createdTests")))
                             (DBName (packPTH "created_tests")))
                            (FTList ((FTTypeCon Nothing) (packPTH "ObjectId"))))
                           SqlString)
                          [])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "passedTests")))
                             (DBName (packPTH "passed_tests")))
                            (FTList ((FTTypeCon Nothing) (packPTH "TestResult"))))
                           SqlString)
                          [])
                         True)
                        (EmbedRef
                           ((EmbedEntityDef (HaskellName (packPTH "TestResult")))
                              [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing) Nothing,
                               ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                               ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                                 Nothing]))])
                    [(((UniqueDef (HaskellName (packPTH "Email")))
                         (DBName (packPTH "email")))
                        [(HaskellName (packPTH "email"), DBName (packPTH "email"))])
                       [],
                     (((UniqueDef (HaskellName (packPTH "Username")))
                         (DBName (packPTH "username")))
                        [(HaskellName (packPTH "username"), DBName (packPTH "username"))])
                       []])
                   [])
                  [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
                 (Data.Map.Internal.fromList []))
                False)
/home/nikita/Projects/labs/Databases/Course-Project/Server/src/Model/User.hs:(34,156)-(54,2): Splicing expression
    Language.Haskell.TH.Quote.quoteExp
      persistLowerCase
      "\n\
      \TestResult\n\
      \  testKey       Text\n\
      \  result        Text\n\
      \  passingDate   UTCTime\n\
      \  deriving      Eq Read Show Generic\n\
      \User\n\
      \  username      Text\n\
      \  password      Text\n\
      \  email         Text\n\
      \  avatar        Text\n\
      \  firstName     Text Maybe\n\
      \  secondName    Text Maybe\n\
      \  birthDay      UTCTime Maybe\n\
      \  sex           Int Maybe\n\
      \  createdTests  [ObjectId]\n\
      \  passedTests   [TestResult]\n\
      \  Email         email\n\
      \  Username      username\n\
      \  deriving      Eq Read Show Generic\n"
  ======>
    [(((((((((EntityDef (HaskellName (packPTH "TestResult")))
               (DBName (packPTH "test_result")))
              (((((((FieldDef (HaskellName (packPTH "Id")))
                      (DBName (packPTH "id")))
                     ((FTTypeCon Nothing) (packPTH "TestResultId")))
                    SqlInt64)
                   [])
                  True)
                 ((ForeignRef (HaskellName (packPTH "TestResult")))
                    ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
             [])
            [((((((FieldDef (HaskellName (packPTH "testKey")))
                    (DBName (packPTH "test_key")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for testKey")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "result")))
                    (DBName (packPTH "result")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for result")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "passingDate")))
                    (DBName (packPTH "passing_date")))
                   ((FTTypeCon Nothing) (packPTH "UTCTime")))
                  (SqlOther (packPTH "SqlType unset for passingDate")))
                 [])
                True)
               NoReference])
           [])
          [])
         [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
        (Data.Map.Internal.fromList []))
       False
       {entityFields = [((((((FieldDef (HaskellName (packPTH "testKey")))
                               (DBName (packPTH "test_key")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "result")))
                               (DBName (packPTH "result")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "passingDate")))
                               (DBName (packPTH "passing_date")))
                              ((FTTypeCon Nothing) (packPTH "UTCTime")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy UTCTime)))
                            [])
                           True)
                          NoReference],
        entityId = ((((((FieldDef (HaskellName (packPTH "Id")))
                          (DBName (packPTH "id")))
                         ((FTTypeCon Nothing) (packPTH "TestResultId")))
                        (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                           (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                       [])
                      True)
                     ((ForeignRef (HaskellName (packPTH "TestResult")))
                        ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))},
     (((((((((EntityDef (HaskellName (packPTH "User")))
               (DBName (packPTH "user")))
              (((((((FieldDef (HaskellName (packPTH "Id")))
                      (DBName (packPTH "id")))
                     ((FTTypeCon Nothing) (packPTH "UserId")))
                    SqlInt64)
                   [])
                  True)
                 ((ForeignRef (HaskellName (packPTH "User")))
                    ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
             [])
            [((((((FieldDef (HaskellName (packPTH "username")))
                    (DBName (packPTH "username")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for username")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "password")))
                    (DBName (packPTH "password")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for password")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "email")))
                    (DBName (packPTH "email")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for email")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "avatar")))
                    (DBName (packPTH "avatar")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for avatar")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "firstName")))
                    (DBName (packPTH "first_name")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for firstName")))
                 [packPTH "Maybe"])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "secondName")))
                    (DBName (packPTH "second_name")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for secondName")))
                 [packPTH "Maybe"])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "birthDay")))
                    (DBName (packPTH "birth_day")))
                   ((FTTypeCon Nothing) (packPTH "UTCTime")))
                  (SqlOther (packPTH "SqlType unset for birthDay")))
                 [packPTH "Maybe"])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "sex")))
                    (DBName (packPTH "sex")))
                   ((FTTypeCon Nothing) (packPTH "Int")))
                  (SqlOther (packPTH "SqlType unset for sex")))
                 [packPTH "Maybe"])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "createdTests")))
                    (DBName (packPTH "created_tests")))
                   (FTList ((FTTypeCon Nothing) (packPTH "ObjectId"))))
                  (SqlOther (packPTH "SqlType unset for createdTests")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "passedTests")))
                    (DBName (packPTH "passed_tests")))
                   (FTList ((FTTypeCon Nothing) (packPTH "TestResult"))))
                  (SqlOther (packPTH "SqlType unset for passedTests")))
                 [])
                True)
               (EmbedRef
                  ((EmbedEntityDef (HaskellName (packPTH "TestResult")))
                     [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing) Nothing,
                      ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                      ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                        Nothing]))])
           [(((UniqueDef (HaskellName (packPTH "Email")))
                (DBName (packPTH "email")))
               [(HaskellName (packPTH "email"), DBName (packPTH "email"))])
              [],
            (((UniqueDef (HaskellName (packPTH "Username")))
                (DBName (packPTH "username")))
               [(HaskellName (packPTH "username"), DBName (packPTH "username"))])
              []])
          [])
         [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
        (Data.Map.Internal.fromList []))
       False
       {entityFields = [((((((FieldDef (HaskellName (packPTH "username")))
                               (DBName (packPTH "username")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "password")))
                               (DBName (packPTH "password")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "email")))
                               (DBName (packPTH "email")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "avatar")))
                               (DBName (packPTH "avatar")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "firstName")))
                               (DBName (packPTH "first_name")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [packPTH "Maybe"])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "secondName")))
                               (DBName (packPTH "second_name")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [packPTH "Maybe"])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "birthDay")))
                               (DBName (packPTH "birth_day")))
                              ((FTTypeCon Nothing) (packPTH "UTCTime")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy UTCTime)))
                            [packPTH "Maybe"])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "sex")))
                               (DBName (packPTH "sex")))
                              ((FTTypeCon Nothing) (packPTH "Int")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Int)))
                            [packPTH "Maybe"])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "createdTests")))
                               (DBName (packPTH "created_tests")))
                              (FTList ((FTTypeCon Nothing) (packPTH "ObjectId"))))
                             SqlString)
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "passedTests")))
                               (DBName (packPTH "passed_tests")))
                              (FTList ((FTTypeCon Nothing) (packPTH "TestResult"))))
                             SqlString)
                            [])
                           True)
                          (EmbedRef
                             ((EmbedEntityDef (HaskellName (packPTH "TestResult")))
                                [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing) Nothing,
                                 ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                                 ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                                   Nothing]))],
        entityId = ((((((FieldDef (HaskellName (packPTH "Id")))
                          (DBName (packPTH "id")))
                         ((FTTypeCon Nothing) (packPTH "UserId")))
                        (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                           (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                       [])
                      True)
                     ((ForeignRef (HaskellName (packPTH "User")))
                        ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))}]
/home/nikita/Projects/labs/Databases/Course-Project/Server/src/Model/User.hs:(34,1)-(54,2): Splicing declarations
    share
      [mkPersist
         (mkPersistSettings (ConT ''MongoContext))
           {mpsGenerateLenses = True, mpsPrefixFields = False},
       mkMigrate "migrateAll"]
      ([(((((((((EntityDef (HaskellName (packPTH "TestResult")))
                  (DBName (packPTH "test_result")))
                 (((((((FieldDef (HaskellName (packPTH "Id")))
                         (DBName (packPTH "id")))
                        ((FTTypeCon Nothing) (packPTH "TestResultId")))
                       SqlInt64)
                      [])
                     True)
                    ((ForeignRef (HaskellName (packPTH "TestResult")))
                       ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                [])
               [((((((FieldDef (HaskellName (packPTH "testKey")))
                       (DBName (packPTH "test_key")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for testKey")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "result")))
                       (DBName (packPTH "result")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for result")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "passingDate")))
                       (DBName (packPTH "passing_date")))
                      ((FTTypeCon Nothing) (packPTH "UTCTime")))
                     (SqlOther (packPTH "SqlType unset for passingDate")))
                    [])
                   True)
                  NoReference])
              [])
             [])
            [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
           (Data.Map.Internal.fromList []))
          False
          {entityFields = [((((((FieldDef (HaskellName (packPTH "testKey")))
                                  (DBName (packPTH "test_key")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "result")))
                                  (DBName (packPTH "result")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "passingDate")))
                                  (DBName (packPTH "passing_date")))
                                 ((FTTypeCon Nothing) (packPTH "UTCTime")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy UTCTime)))
                               [])
                              True)
                             NoReference],
           entityId = ((((((FieldDef (HaskellName (packPTH "Id")))
                             (DBName (packPTH "id")))
                            ((FTTypeCon Nothing) (packPTH "TestResultId")))
                           (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                              (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                          [])
                         True)
                        ((ForeignRef (HaskellName (packPTH "TestResult")))
                           ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))},
        (((((((((EntityDef (HaskellName (packPTH "User")))
                  (DBName (packPTH "user")))
                 (((((((FieldDef (HaskellName (packPTH "Id")))
                         (DBName (packPTH "id")))
                        ((FTTypeCon Nothing) (packPTH "UserId")))
                       SqlInt64)
                      [])
                     True)
                    ((ForeignRef (HaskellName (packPTH "User")))
                       ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                [])
               [((((((FieldDef (HaskellName (packPTH "username")))
                       (DBName (packPTH "username")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for username")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "password")))
                       (DBName (packPTH "password")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for password")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "email")))
                       (DBName (packPTH "email")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for email")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "avatar")))
                       (DBName (packPTH "avatar")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for avatar")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "firstName")))
                       (DBName (packPTH "first_name")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for firstName")))
                    [packPTH "Maybe"])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "secondName")))
                       (DBName (packPTH "second_name")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for secondName")))
                    [packPTH "Maybe"])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "birthDay")))
                       (DBName (packPTH "birth_day")))
                      ((FTTypeCon Nothing) (packPTH "UTCTime")))
                     (SqlOther (packPTH "SqlType unset for birthDay")))
                    [packPTH "Maybe"])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "sex")))
                       (DBName (packPTH "sex")))
                      ((FTTypeCon Nothing) (packPTH "Int")))
                     (SqlOther (packPTH "SqlType unset for sex")))
                    [packPTH "Maybe"])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "createdTests")))
                       (DBName (packPTH "created_tests")))
                      (FTList ((FTTypeCon Nothing) (packPTH "ObjectId"))))
                     (SqlOther (packPTH "SqlType unset for createdTests")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "passedTests")))
                       (DBName (packPTH "passed_tests")))
                      (FTList ((FTTypeCon Nothing) (packPTH "TestResult"))))
                     (SqlOther (packPTH "SqlType unset for passedTests")))
                    [])
                   True)
                  (EmbedRef
                     ((EmbedEntityDef (HaskellName (packPTH "TestResult")))
                        [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing) Nothing,
                         ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                         ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                           Nothing]))])
              [(((UniqueDef (HaskellName (packPTH "Email")))
                   (DBName (packPTH "email")))
                  [(HaskellName (packPTH "email"), DBName (packPTH "email"))])
                 [],
               (((UniqueDef (HaskellName (packPTH "Username")))
                   (DBName (packPTH "username")))
                  [(HaskellName (packPTH "username"), DBName (packPTH "username"))])
                 []])
             [])
            [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
           (Data.Map.Internal.fromList []))
          False
          {entityFields = [((((((FieldDef (HaskellName (packPTH "username")))
                                  (DBName (packPTH "username")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "password")))
                                  (DBName (packPTH "password")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "email")))
                                  (DBName (packPTH "email")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "avatar")))
                                  (DBName (packPTH "avatar")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "firstName")))
                                  (DBName (packPTH "first_name")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [packPTH "Maybe"])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "secondName")))
                                  (DBName (packPTH "second_name")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [packPTH "Maybe"])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "birthDay")))
                                  (DBName (packPTH "birth_day")))
                                 ((FTTypeCon Nothing) (packPTH "UTCTime")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy UTCTime)))
                               [packPTH "Maybe"])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "sex")))
                                  (DBName (packPTH "sex")))
                                 ((FTTypeCon Nothing) (packPTH "Int")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Int)))
                               [packPTH "Maybe"])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "createdTests")))
                                  (DBName (packPTH "created_tests")))
                                 (FTList ((FTTypeCon Nothing) (packPTH "ObjectId"))))
                                SqlString)
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "passedTests")))
                                  (DBName (packPTH "passed_tests")))
                                 (FTList ((FTTypeCon Nothing) (packPTH "TestResult"))))
                                SqlString)
                               [])
                              True)
                             (EmbedRef
                                ((EmbedEntityDef (HaskellName (packPTH "TestResult")))
                                   [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing) Nothing,
                                    ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                                    ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                                      Nothing]))],
           entityId = ((((((FieldDef (HaskellName (packPTH "Id")))
                             (DBName (packPTH "id")))
                            ((FTTypeCon Nothing) (packPTH "UserId")))
                           (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                              (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                          [])
                         True)
                        ((ForeignRef (HaskellName (packPTH "User")))
                           ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))}])
  ======>
    instance PersistField TestResult where
      toPersistValue
        = \ ent_aVoQ
            -> (PersistMap
                  $ ((Prelude.zip
                        ((Prelude.map pack) ["testKey", "result", "passingDate"]))
                       ((Prelude.map toPersistValue) $ (toPersistFields ent_aVoQ))))
      fromPersistValue
        = ((\ x_aVoR
              -> let
                   columns_aVoS
                     = unordered-containers-0.2.9.0:Data.HashMap.Strict.fromList x_aVoR
                 in
                   (fromPersistValues
                      $ ((Prelude.map
                            (\ name_aVoT
                               -> case
                                      (unordered-containers-0.2.9.0:Data.HashMap.Base.lookup
                                         (pack name_aVoT))
                                        columns_aVoS
                                  of
                                    Just v_aVoU -> v_aVoU
                                    Nothing -> PersistNull))
                           $ ["testKey", "result", "passingDate"])))
             <=< getPersistMap)
    instance persistent-2.8.1:Database.Persist.Sql.Class.PersistFieldSql TestResult where
      persistent-2.8.1:Database.Persist.Sql.Class.sqlType _ = SqlString
    instance PersistField User where
      toPersistValue
        = \ ent_aVoV
            -> (PersistMap
                  $ ((Prelude.zip
                        ((Prelude.map pack)
                           ["username", "password", "email", "avatar", "firstName",
                            "secondName", "birthDay", "sex", "createdTests", "passedTests"]))
                       ((Prelude.map toPersistValue) $ (toPersistFields ent_aVoV))))
      fromPersistValue
        = ((\ x_aVoW
              -> let
                   columns_aVoX
                     = unordered-containers-0.2.9.0:Data.HashMap.Strict.fromList x_aVoW
                 in
                   (fromPersistValues
                      $ ((Prelude.map
                            (\ name_aVoY
                               -> case
                                      (unordered-containers-0.2.9.0:Data.HashMap.Base.lookup
                                         (pack name_aVoY))
                                        columns_aVoX
                                  of
                                    Just v_aVoZ -> v_aVoZ
                                    Nothing -> PersistNull))
                           $ ["username", "password", "email", "avatar", "firstName",
                              "secondName", "birthDay", "sex", "createdTests", "passedTests"])))
             <=< getPersistMap)
    instance persistent-2.8.1:Database.Persist.Sql.Class.PersistFieldSql User where
      persistent-2.8.1:Database.Persist.Sql.Class.sqlType _ = SqlString
    data TestResult
      = TestResult {_testKey :: !Text,
                    _result :: !Text,
                    _passingDate :: !UTCTime}
      deriving (Eq, Read, Show, Generic)
    type TestResultId = Key TestResult
    instance PersistEntity TestResult where
      type PersistEntityBackend TestResult = MongoContext
      data Unique TestResult
      newtype Key TestResult
        = TestResultKey {unTestResultKey :: (BackendKey MongoContext)}
        deriving (Show,
                  Read,
                  Eq,
                  Ord,
                  path-pieces-0.2.1:Web.PathPieces.PathPiece,
                  http-api-data-0.3.7.2:Web.Internal.HttpApiData.ToHttpApiData,
                  http-api-data-0.3.7.2:Web.Internal.HttpApiData.FromHttpApiData,
                  PersistField,
                  persistent-2.8.1:Database.Persist.Sql.Class.PersistFieldSql,
                  Aeson.ToJSON,
                  Aeson.FromJSON)
      data EntityField TestResult typ
        = typ ~ Key TestResult => TestResultId |
          typ ~ Text => TestKey |
          typ ~ Text => Result |
          typ ~ UTCTime => PassingDate
      keyToValues
        = ((ghc-prim-0.5.1.1:GHC.Types.: [])
             . (toPersistValue . unTestResultKey))
      keyFromValues
        = ((fmap TestResultKey)
             . (fromPersistValue . Database.Persist.TH.headNote))
      entityDef _
        = (((((((((EntityDef (HaskellName (packPTH "TestResult")))
                    (DBName (packPTH "test_result")))
                   (((((((FieldDef (HaskellName (packPTH "Id")))
                           (DBName (packPTH "id")))
                          ((FTTypeCon Nothing) (packPTH "TestResultId")))
                         SqlInt64)
                        [])
                       True)
                      ((ForeignRef (HaskellName (packPTH "TestResult")))
                         ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                  [])
                 [((((((FieldDef (HaskellName (packPTH "testKey")))
                         (DBName (packPTH "test_key")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "result")))
                         (DBName (packPTH "result")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "passingDate")))
                         (DBName (packPTH "passing_date")))
                        ((FTTypeCon Nothing) (packPTH "UTCTime")))
                       SqlDayTime)
                      [])
                     True)
                    NoReference])
                [])
               [])
              [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
             (Data.Map.Internal.fromList []))
            False
      toPersistFields (TestResult x_aVp0 x_aVp1 x_aVp2)
        = [SomePersistField x_aVp0, SomePersistField x_aVp1,
           SomePersistField x_aVp2]
      fromPersistValues [x1_aVp4, x2_aVp5, x3_aVp6]
        = TestResult
            <$>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "testKey")))
                 . fromPersistValue)
                x1_aVp4
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "result")))
                 . fromPersistValue)
                x2_aVp5
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "passingDate")))
                 . fromPersistValue)
                x3_aVp6
      fromPersistValues x_aVp3
        = (Left
             $ ((mappend (packPTH "TestResult: fromPersistValues failed on: "))
                  (pack $ (show x_aVp3))))
      persistUniqueToFieldNames _
        = error "Degenerate case, should never happen"
      persistUniqueToValues _
        = error "Degenerate case, should never happen"
      persistUniqueKeys
        (TestResult _testKey_aVp7 _result_aVp8 _passingDate_aVp9)
        = []
      persistFieldDef TestResultId
        = ((((((FieldDef (HaskellName (packPTH "Id")))
                 (DBName (packPTH "id")))
                ((FTTypeCon Nothing) (packPTH "TestResultId")))
               SqlInt64)
              [])
             True)
            ((ForeignRef (HaskellName (packPTH "TestResult")))
               ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))
      persistFieldDef TestKey
        = ((((((FieldDef (HaskellName (packPTH "testKey")))
                 (DBName (packPTH "test_key")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef Result
        = ((((((FieldDef (HaskellName (packPTH "result")))
                 (DBName (packPTH "result")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef PassingDate
        = ((((((FieldDef (HaskellName (packPTH "passingDate")))
                 (DBName (packPTH "passing_date")))
                ((FTTypeCon Nothing) (packPTH "UTCTime")))
               SqlDayTime)
              [])
             True)
            NoReference
      persistIdField = TestResultId
      fieldLens TestResultId
        = (lensPTH entityKey)
            (\ Entity _ value_aVpa key_aVpb -> (Entity key_aVpb) value_aVpa)
      fieldLens TestKey
        = (lensPTH (_testKey . entityVal))
            (\ Entity key_aVpc value_aVpd x_aVpe
               -> (Entity key_aVpc) value_aVpd {_testKey = x_aVpe})
      fieldLens Result
        = (lensPTH (_result . entityVal))
            (\ Entity key_aVpc value_aVpd x_aVpe
               -> (Entity key_aVpc) value_aVpd {_result = x_aVpe})
      fieldLens PassingDate
        = (lensPTH (_passingDate . entityVal))
            (\ Entity key_aVpc value_aVpd x_aVpe
               -> (Entity key_aVpc) value_aVpd {_passingDate = x_aVpe})
    testKey ::
      forall f.
      Functor f => (Text -> f Text) -> TestResult -> f TestResult
    testKey f_aVph a_aVpi
      = (fmap setter_aVpg) (f_aVph needle_aVpf)
      where
          needle_aVpf = _testKey a_aVpi
          setter_aVpg y_aVpj = a_aVpi {_testKey = y_aVpj}
    result ::
      forall f.
      Functor f => (Text -> f Text) -> TestResult -> f TestResult
    result f_aVpm a_aVpn
      = (fmap setter_aVpl) (f_aVpm needle_aVpk)
      where
          needle_aVpk = _result a_aVpn
          setter_aVpl y_aVpo = a_aVpn {_result = y_aVpo}
    passingDate ::
      forall f.
      Functor f => (UTCTime -> f UTCTime) -> TestResult -> f TestResult
    passingDate f_aVpr a_aVps
      = (fmap setter_aVpq) (f_aVpr needle_aVpp)
      where
          needle_aVpp = _passingDate a_aVps
          setter_aVpq y_aVpt = a_aVps {_passingDate = y_aVpt}
    instance ToBackendKey MongoContext TestResult where
      toBackendKey = unTestResultKey
      fromBackendKey = TestResultKey
    data User
      = User {_username :: !Text,
              _password :: !Text,
              _email :: !Text,
              _avatar :: !Text,
              _firstName :: !(Maybe Text),
              _secondName :: !(Maybe Text),
              _birthDay :: !(Maybe UTCTime),
              _sex :: !(Maybe Int),
              _createdTests :: ![ObjectId],
              _passedTests :: ![TestResult]}
      deriving (Eq, Read, Show, Generic)
    type UserId = Key User
    instance PersistEntity User where
      type PersistEntityBackend User = MongoContext
      data Unique User = Email Text | Username Text
      newtype Key User
        = UserKey {unUserKey :: (BackendKey MongoContext)}
        deriving (Show,
                  Read,
                  Eq,
                  Ord,
                  path-pieces-0.2.1:Web.PathPieces.PathPiece,
                  http-api-data-0.3.7.2:Web.Internal.HttpApiData.ToHttpApiData,
                  http-api-data-0.3.7.2:Web.Internal.HttpApiData.FromHttpApiData,
                  PersistField,
                  persistent-2.8.1:Database.Persist.Sql.Class.PersistFieldSql,
                  Aeson.ToJSON,
                  Aeson.FromJSON)
      data EntityField User typ
        = typ ~ Key User => UserId |
          typ ~ Text => Username |
          typ ~ Text => Password |
          typ ~ Text => Email |
          typ ~ Text => Avatar |
          typ ~ Maybe Text => FirstName |
          typ ~ Maybe Text => SecondName |
          typ ~ Maybe UTCTime => BirthDay |
          typ ~ Maybe Int => Sex |
          typ ~ [ObjectId] => CreatedTests |
          typ ~ [TestResult] => PassedTests
      keyToValues
        = ((ghc-prim-0.5.1.1:GHC.Types.: [])
             . (toPersistValue . unUserKey))
      keyFromValues
        = ((fmap UserKey)
             . (fromPersistValue . Database.Persist.TH.headNote))
      entityDef _
        = (((((((((EntityDef (HaskellName (packPTH "User")))
                    (DBName (packPTH "user")))
                   (((((((FieldDef (HaskellName (packPTH "Id")))
                           (DBName (packPTH "id")))
                          ((FTTypeCon Nothing) (packPTH "UserId")))
                         SqlInt64)
                        [])
                       True)
                      ((ForeignRef (HaskellName (packPTH "User")))
                         ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                  [])
                 [((((((FieldDef (HaskellName (packPTH "username")))
                         (DBName (packPTH "username")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "password")))
                         (DBName (packPTH "password")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "email")))
                         (DBName (packPTH "email")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "avatar")))
                         (DBName (packPTH "avatar")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "firstName")))
                         (DBName (packPTH "first_name")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [packPTH "Maybe"])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "secondName")))
                         (DBName (packPTH "second_name")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [packPTH "Maybe"])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "birthDay")))
                         (DBName (packPTH "birth_day")))
                        ((FTTypeCon Nothing) (packPTH "UTCTime")))
                       SqlDayTime)
                      [packPTH "Maybe"])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "sex")))
                         (DBName (packPTH "sex")))
                        ((FTTypeCon Nothing) (packPTH "Int")))
                       SqlInt64)
                      [packPTH "Maybe"])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "createdTests")))
                         (DBName (packPTH "created_tests")))
                        (FTList ((FTTypeCon Nothing) (packPTH "ObjectId"))))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "passedTests")))
                         (DBName (packPTH "passed_tests")))
                        (FTList ((FTTypeCon Nothing) (packPTH "TestResult"))))
                       SqlString)
                      [])
                     True)
                    (EmbedRef
                       ((EmbedEntityDef (HaskellName (packPTH "TestResult")))
                          [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing) Nothing,
                           ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                           ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                             Nothing]))])
                [(((UniqueDef (HaskellName (packPTH "Email")))
                     (DBName (packPTH "email")))
                    [(HaskellName (packPTH "email"), DBName (packPTH "email"))])
                   [],
                 (((UniqueDef (HaskellName (packPTH "Username")))
                     (DBName (packPTH "username")))
                    [(HaskellName (packPTH "username"), DBName (packPTH "username"))])
                   []])
               [])
              [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
             (Data.Map.Internal.fromList []))
            False
      toPersistFields
        (User x_aVpu
              x_aVpv
              x_aVpw
              x_aVpx
              x_aVpy
              x_aVpz
              x_aVpA
              x_aVpB
              x_aVpC
              x_aVpD)
        = [SomePersistField x_aVpu, SomePersistField x_aVpv,
           SomePersistField x_aVpw, SomePersistField x_aVpx,
           SomePersistField x_aVpy, SomePersistField x_aVpz,
           SomePersistField x_aVpA, SomePersistField x_aVpB,
           SomePersistField x_aVpC, SomePersistField x_aVpD]
      fromPersistValues
        [x1_aVpF,
         x2_aVpG,
         x3_aVpH,
         x4_aVpI,
         x5_aVpJ,
         x6_aVpK,
         x7_aVpL,
         x8_aVpM,
         x9_aVpN,
         x10_aVpO]
        = User
            <$>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "username")))
                 . fromPersistValue)
                x1_aVpF
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "password")))
                 . fromPersistValue)
                x2_aVpG
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "email")))
                 . fromPersistValue)
                x3_aVpH
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "avatar")))
                 . fromPersistValue)
                x4_aVpI
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "firstName")))
                 . fromPersistValue)
                x5_aVpJ
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "secondName")))
                 . fromPersistValue)
                x6_aVpK
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "birthDay")))
                 . fromPersistValue)
                x7_aVpL
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "sex")))
                 . fromPersistValue)
                x8_aVpM
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "createdTests")))
                 . fromPersistValue)
                x9_aVpN
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "passedTests")))
                 . fromPersistValue)
                x10_aVpO
      fromPersistValues x_aVpE
        = (Left
             $ ((mappend (packPTH "User: fromPersistValues failed on: "))
                  (pack $ (show x_aVpE))))
      persistUniqueToFieldNames Email {}
        = [(HaskellName (packPTH "email"), DBName (packPTH "email"))]
      persistUniqueToFieldNames Username {}
        = [(HaskellName (packPTH "username"), DBName (packPTH "username"))]
      persistUniqueToValues (Email x_aVpP) = [toPersistValue x_aVpP]
      persistUniqueToValues (Username x_aVpQ) = [toPersistValue x_aVpQ]
      persistUniqueKeys
        (User _username_aVpR
              _password_aVpS
              _email_aVpT
              _avatar_aVpU
              _firstName_aVpV
              _secondName_aVpW
              _birthDay_aVpX
              _sex_aVpY
              _createdTests_aVpZ
              _passedTests_aVq0)
        = [Email _email_aVpT, Username _username_aVpR]
      persistFieldDef UserId
        = ((((((FieldDef (HaskellName (packPTH "Id")))
                 (DBName (packPTH "id")))
                ((FTTypeCon Nothing) (packPTH "UserId")))
               SqlInt64)
              [])
             True)
            ((ForeignRef (HaskellName (packPTH "User")))
               ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))
      persistFieldDef Username
        = ((((((FieldDef (HaskellName (packPTH "username")))
                 (DBName (packPTH "username")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef Password
        = ((((((FieldDef (HaskellName (packPTH "password")))
                 (DBName (packPTH "password")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef Email
        = ((((((FieldDef (HaskellName (packPTH "email")))
                 (DBName (packPTH "email")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef Avatar
        = ((((((FieldDef (HaskellName (packPTH "avatar")))
                 (DBName (packPTH "avatar")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef FirstName
        = ((((((FieldDef (HaskellName (packPTH "firstName")))
                 (DBName (packPTH "first_name")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [packPTH "Maybe"])
             True)
            NoReference
      persistFieldDef SecondName
        = ((((((FieldDef (HaskellName (packPTH "secondName")))
                 (DBName (packPTH "second_name")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [packPTH "Maybe"])
             True)
            NoReference
      persistFieldDef BirthDay
        = ((((((FieldDef (HaskellName (packPTH "birthDay")))
                 (DBName (packPTH "birth_day")))
                ((FTTypeCon Nothing) (packPTH "UTCTime")))
               SqlDayTime)
              [packPTH "Maybe"])
             True)
            NoReference
      persistFieldDef Sex
        = ((((((FieldDef (HaskellName (packPTH "sex")))
                 (DBName (packPTH "sex")))
                ((FTTypeCon Nothing) (packPTH "Int")))
               SqlInt64)
              [packPTH "Maybe"])
             True)
            NoReference
      persistFieldDef CreatedTests
        = ((((((FieldDef (HaskellName (packPTH "createdTests")))
                 (DBName (packPTH "created_tests")))
                (FTList ((FTTypeCon Nothing) (packPTH "ObjectId"))))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef PassedTests
        = ((((((FieldDef (HaskellName (packPTH "passedTests")))
                 (DBName (packPTH "passed_tests")))
                (FTList ((FTTypeCon Nothing) (packPTH "TestResult"))))
               SqlString)
              [])
             True)
            (EmbedRef
               ((EmbedEntityDef (HaskellName (packPTH "TestResult")))
                  [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing) Nothing,
                   ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                   ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                     Nothing]))
      persistIdField = UserId
      fieldLens UserId
        = (lensPTH entityKey)
            (\ Entity _ value_aVq1 key_aVq2 -> (Entity key_aVq2) value_aVq1)
      fieldLens Username
        = (lensPTH (_username . entityVal))
            (\ Entity key_aVq3 value_aVq4 x_aVq5
               -> (Entity key_aVq3) value_aVq4 {_username = x_aVq5})
      fieldLens Password
        = (lensPTH (_password . entityVal))
            (\ Entity key_aVq3 value_aVq4 x_aVq5
               -> (Entity key_aVq3) value_aVq4 {_password = x_aVq5})
      fieldLens Email
        = (lensPTH (_email . entityVal))
            (\ Entity key_aVq3 value_aVq4 x_aVq5
               -> (Entity key_aVq3) value_aVq4 {_email = x_aVq5})
      fieldLens Avatar
        = (lensPTH (_avatar . entityVal))
            (\ Entity key_aVq3 value_aVq4 x_aVq5
               -> (Entity key_aVq3) value_aVq4 {_avatar = x_aVq5})
      fieldLens FirstName
        = (lensPTH (_firstName . entityVal))
            (\ Entity key_aVq3 value_aVq4 x_aVq5
               -> (Entity key_aVq3) value_aVq4 {_firstName = x_aVq5})
      fieldLens SecondName
        = (lensPTH (_secondName . entityVal))
            (\ Entity key_aVq3 value_aVq4 x_aVq5
               -> (Entity key_aVq3) value_aVq4 {_secondName = x_aVq5})
      fieldLens BirthDay
        = (lensPTH (_birthDay . entityVal))
            (\ Entity key_aVq3 value_aVq4 x_aVq5
               -> (Entity key_aVq3) value_aVq4 {_birthDay = x_aVq5})
      fieldLens Sex
        = (lensPTH (_sex . entityVal))
            (\ Entity key_aVq3 value_aVq4 x_aVq5
               -> (Entity key_aVq3) value_aVq4 {_sex = x_aVq5})
      fieldLens CreatedTests
        = (lensPTH (_createdTests . entityVal))
            (\ Entity key_aVq3 value_aVq4 x_aVq5
               -> (Entity key_aVq3) value_aVq4 {_createdTests = x_aVq5})
      fieldLens PassedTests
        = (lensPTH (_passedTests . entityVal))
            (\ Entity key_aVq3 value_aVq4 x_aVq5
               -> (Entity key_aVq3) value_aVq4 {_passedTests = x_aVq5})
    username ::
      forall f. Functor f => (Text -> f Text) -> User -> f User
    username f_aVq8 a_aVq9
      = (fmap setter_aVq7) (f_aVq8 needle_aVq6)
      where
          needle_aVq6 = _username a_aVq9
          setter_aVq7 y_aVqa = a_aVq9 {_username = y_aVqa}
    password ::
      forall f. Functor f => (Text -> f Text) -> User -> f User
    password f_aVqd a_aVqe
      = (fmap setter_aVqc) (f_aVqd needle_aVqb)
      where
          needle_aVqb = _password a_aVqe
          setter_aVqc y_aVqf = a_aVqe {_password = y_aVqf}
    email :: forall f. Functor f => (Text -> f Text) -> User -> f User
    email f_aVqi a_aVqj
      = (fmap setter_aVqh) (f_aVqi needle_aVqg)
      where
          needle_aVqg = _email a_aVqj
          setter_aVqh y_aVqk = a_aVqj {_email = y_aVqk}
    avatar :: forall f. Functor f => (Text -> f Text) -> User -> f User
    avatar f_aVqn a_aVqo
      = (fmap setter_aVqm) (f_aVqn needle_aVql)
      where
          needle_aVql = _avatar a_aVqo
          setter_aVqm y_aVqp = a_aVqo {_avatar = y_aVqp}
    firstName ::
      forall f.
      Functor f => (Maybe Text -> f (Maybe Text)) -> User -> f User
    firstName f_aVqs a_aVqt
      = (fmap setter_aVqr) (f_aVqs needle_aVqq)
      where
          needle_aVqq = _firstName a_aVqt
          setter_aVqr y_aVqu = a_aVqt {_firstName = y_aVqu}
    secondName ::
      forall f.
      Functor f => (Maybe Text -> f (Maybe Text)) -> User -> f User
    secondName f_aVqx a_aVqy
      = (fmap setter_aVqw) (f_aVqx needle_aVqv)
      where
          needle_aVqv = _secondName a_aVqy
          setter_aVqw y_aVqz = a_aVqy {_secondName = y_aVqz}
    birthDay ::
      forall f.
      Functor f => (Maybe UTCTime -> f (Maybe UTCTime)) -> User -> f User
    birthDay f_aVqC a_aVqD
      = (fmap setter_aVqB) (f_aVqC needle_aVqA)
      where
          needle_aVqA = _birthDay a_aVqD
          setter_aVqB y_aVqE = a_aVqD {_birthDay = y_aVqE}
    sex ::
      forall f.
      Functor f => (Maybe Int -> f (Maybe Int)) -> User -> f User
    sex f_aVqH a_aVqI
      = (fmap setter_aVqG) (f_aVqH needle_aVqF)
      where
          needle_aVqF = _sex a_aVqI
          setter_aVqG y_aVqJ = a_aVqI {_sex = y_aVqJ}
    createdTests ::
      forall f.
      Functor f => ([ObjectId] -> f [ObjectId]) -> User -> f User
    createdTests f_aVqM a_aVqN
      = (fmap setter_aVqL) (f_aVqM needle_aVqK)
      where
          needle_aVqK = _createdTests a_aVqN
          setter_aVqL y_aVqO = a_aVqN {_createdTests = y_aVqO}
    passedTests ::
      forall f.
      Functor f => ([TestResult] -> f [TestResult]) -> User -> f User
    passedTests f_aVqR a_aVqS
      = (fmap setter_aVqQ) (f_aVqR needle_aVqP)
      where
          needle_aVqP = _passedTests a_aVqS
          setter_aVqQ y_aVqT = a_aVqS {_passedTests = y_aVqT}
    instance ToBackendKey MongoContext User where
      toBackendKey = unUserKey
      fromBackendKey = UserKey
    migrateAll :: persistent-2.8.1:Database.Persist.Sql.Types.Migration
    migrateAll
      = do let defs_aVqU
                 = [(((((((((EntityDef (HaskellName (packPTH "TestResult")))
                              (DBName (packPTH "test_result")))
                             (((((((FieldDef (HaskellName (packPTH "Id")))
                                     (DBName (packPTH "id")))
                                    ((FTTypeCon Nothing) (packPTH "TestResultId")))
                                   SqlInt64)
                                  [])
                                 True)
                                ((ForeignRef (HaskellName (packPTH "TestResult")))
                                   ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                            [])
                           [((((((FieldDef (HaskellName (packPTH "testKey")))
                                   (DBName (packPTH "test_key")))
                                  ((FTTypeCon Nothing) (packPTH "Text")))
                                 SqlString)
                                [])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "result")))
                                   (DBName (packPTH "result")))
                                  ((FTTypeCon Nothing) (packPTH "Text")))
                                 SqlString)
                                [])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "passingDate")))
                                   (DBName (packPTH "passing_date")))
                                  ((FTTypeCon Nothing) (packPTH "UTCTime")))
                                 SqlDayTime)
                                [])
                               True)
                              NoReference])
                          [])
                         [])
                        [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
                       (Data.Map.Internal.fromList []))
                      False,
                    (((((((((EntityDef (HaskellName (packPTH "User")))
                              (DBName (packPTH "user")))
                             (((((((FieldDef (HaskellName (packPTH "Id")))
                                     (DBName (packPTH "id")))
                                    ((FTTypeCon Nothing) (packPTH "UserId")))
                                   SqlInt64)
                                  [])
                                 True)
                                ((ForeignRef (HaskellName (packPTH "User")))
                                   ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                            [])
                           [((((((FieldDef (HaskellName (packPTH "username")))
                                   (DBName (packPTH "username")))
                                  ((FTTypeCon Nothing) (packPTH "Text")))
                                 SqlString)
                                [])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "password")))
                                   (DBName (packPTH "password")))
                                  ((FTTypeCon Nothing) (packPTH "Text")))
                                 SqlString)
                                [])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "email")))
                                   (DBName (packPTH "email")))
                                  ((FTTypeCon Nothing) (packPTH "Text")))
                                 SqlString)
                                [])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "avatar")))
                                   (DBName (packPTH "avatar")))
                                  ((FTTypeCon Nothing) (packPTH "Text")))
                                 SqlString)
                                [])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "firstName")))
                                   (DBName (packPTH "first_name")))
                                  ((FTTypeCon Nothing) (packPTH "Text")))
                                 SqlString)
                                [packPTH "Maybe"])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "secondName")))
                                   (DBName (packPTH "second_name")))
                                  ((FTTypeCon Nothing) (packPTH "Text")))
                                 SqlString)
                                [packPTH "Maybe"])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "birthDay")))
                                   (DBName (packPTH "birth_day")))
                                  ((FTTypeCon Nothing) (packPTH "UTCTime")))
                                 SqlDayTime)
                                [packPTH "Maybe"])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "sex")))
                                   (DBName (packPTH "sex")))
                                  ((FTTypeCon Nothing) (packPTH "Int")))
                                 SqlInt64)
                                [packPTH "Maybe"])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "createdTests")))
                                   (DBName (packPTH "created_tests")))
                                  (FTList ((FTTypeCon Nothing) (packPTH "ObjectId"))))
                                 SqlString)
                                [])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "passedTests")))
                                   (DBName (packPTH "passed_tests")))
                                  (FTList ((FTTypeCon Nothing) (packPTH "TestResult"))))
                                 SqlString)
                                [])
                               True)
                              (EmbedRef
                                 ((EmbedEntityDef (HaskellName (packPTH "TestResult")))
                                    [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing)
                                       Nothing,
                                     ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                                     ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                                       Nothing]))])
                          [(((UniqueDef (HaskellName (packPTH "Email")))
                               (DBName (packPTH "email")))
                              [(HaskellName (packPTH "email"), DBName (packPTH "email"))])
                             [],
                           (((UniqueDef (HaskellName (packPTH "Username")))
                               (DBName (packPTH "username")))
                              [(HaskellName (packPTH "username"), DBName (packPTH "username"))])
                             []])
                         [])
                        [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
                       (Data.Map.Internal.fromList []))
                      False]
           (persistent-2.8.1:Database.Persist.Sql.Migration.migrate defs_aVqU)
             ((((((((((EntityDef (HaskellName (packPTH "TestResult")))
                        (DBName (packPTH "test_result")))
                       (((((((FieldDef (HaskellName (packPTH "Id")))
                               (DBName (packPTH "id")))
                              ((FTTypeCon Nothing) (packPTH "TestResultId")))
                             SqlInt64)
                            [])
                           True)
                          ((ForeignRef (HaskellName (packPTH "TestResult")))
                             ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                      [])
                     [((((((FieldDef (HaskellName (packPTH "testKey")))
                             (DBName (packPTH "test_key")))
                            ((FTTypeCon Nothing) (packPTH "Text")))
                           SqlString)
                          [])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "result")))
                             (DBName (packPTH "result")))
                            ((FTTypeCon Nothing) (packPTH "Text")))
                           SqlString)
                          [])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "passingDate")))
                             (DBName (packPTH "passing_date")))
                            ((FTTypeCon Nothing) (packPTH "UTCTime")))
                           SqlDayTime)
                          [])
                         True)
                        NoReference])
                    [])
                   [])
                  [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
                 (Data.Map.Internal.fromList []))
                False)
           (persistent-2.8.1:Database.Persist.Sql.Migration.migrate defs_aVqU)
             ((((((((((EntityDef (HaskellName (packPTH "User")))
                        (DBName (packPTH "user")))
                       (((((((FieldDef (HaskellName (packPTH "Id")))
                               (DBName (packPTH "id")))
                              ((FTTypeCon Nothing) (packPTH "UserId")))
                             SqlInt64)
                            [])
                           True)
                          ((ForeignRef (HaskellName (packPTH "User")))
                             ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                      [])
                     [((((((FieldDef (HaskellName (packPTH "username")))
                             (DBName (packPTH "username")))
                            ((FTTypeCon Nothing) (packPTH "Text")))
                           SqlString)
                          [])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "password")))
                             (DBName (packPTH "password")))
                            ((FTTypeCon Nothing) (packPTH "Text")))
                           SqlString)
                          [])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "email")))
                             (DBName (packPTH "email")))
                            ((FTTypeCon Nothing) (packPTH "Text")))
                           SqlString)
                          [])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "avatar")))
                             (DBName (packPTH "avatar")))
                            ((FTTypeCon Nothing) (packPTH "Text")))
                           SqlString)
                          [])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "firstName")))
                             (DBName (packPTH "first_name")))
                            ((FTTypeCon Nothing) (packPTH "Text")))
                           SqlString)
                          [packPTH "Maybe"])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "secondName")))
                             (DBName (packPTH "second_name")))
                            ((FTTypeCon Nothing) (packPTH "Text")))
                           SqlString)
                          [packPTH "Maybe"])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "birthDay")))
                             (DBName (packPTH "birth_day")))
                            ((FTTypeCon Nothing) (packPTH "UTCTime")))
                           SqlDayTime)
                          [packPTH "Maybe"])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "sex")))
                             (DBName (packPTH "sex")))
                            ((FTTypeCon Nothing) (packPTH "Int")))
                           SqlInt64)
                          [packPTH "Maybe"])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "createdTests")))
                             (DBName (packPTH "created_tests")))
                            (FTList ((FTTypeCon Nothing) (packPTH "ObjectId"))))
                           SqlString)
                          [])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "passedTests")))
                             (DBName (packPTH "passed_tests")))
                            (FTList ((FTTypeCon Nothing) (packPTH "TestResult"))))
                           SqlString)
                          [])
                         True)
                        (EmbedRef
                           ((EmbedEntityDef (HaskellName (packPTH "TestResult")))
                              [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing) Nothing,
                               ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                               ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                                 Nothing]))])
                    [(((UniqueDef (HaskellName (packPTH "Email")))
                         (DBName (packPTH "email")))
                        [(HaskellName (packPTH "email"), DBName (packPTH "email"))])
                       [],
                     (((UniqueDef (HaskellName (packPTH "Username")))
                         (DBName (packPTH "username")))
                        [(HaskellName (packPTH "username"), DBName (packPTH "username"))])
                       []])
                   [])
                  [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
                 (Data.Map.Internal.fromList []))
                False)
/home/nikita/Projects/labs/Databases/Course-Project/Server/src/Model/User.hs:(27,156)-(47,2): Splicing expression
    Language.Haskell.TH.Quote.quoteExp
      persistLowerCase
      "\n\
      \TestResult\n\
      \  testKey       Text\n\
      \  result        Text\n\
      \  passingDate   UTCTime\n\
      \  deriving      Eq Read Show Generic\n\
      \User\n\
      \  username      Text\n\
      \  password      Text\n\
      \  email         Text\n\
      \  avatar        Text\n\
      \  firstName     Text Maybe\n\
      \  secondName    Text Maybe\n\
      \  birthDay      UTCTime Maybe\n\
      \  sex           Int Maybe\n\
      \  createdTests  [ObjectId]\n\
      \  passedTests   [TestResult]\n\
      \  Email         email\n\
      \  Username      username\n\
      \  deriving      Eq Read Show Generic\n"
  ======>
    [(((((((((EntityDef (HaskellName (packPTH "TestResult")))
               (DBName (packPTH "test_result")))
              (((((((FieldDef (HaskellName (packPTH "Id")))
                      (DBName (packPTH "id")))
                     ((FTTypeCon Nothing) (packPTH "TestResultId")))
                    SqlInt64)
                   [])
                  True)
                 ((ForeignRef (HaskellName (packPTH "TestResult")))
                    ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
             [])
            [((((((FieldDef (HaskellName (packPTH "testKey")))
                    (DBName (packPTH "test_key")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for testKey")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "result")))
                    (DBName (packPTH "result")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for result")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "passingDate")))
                    (DBName (packPTH "passing_date")))
                   ((FTTypeCon Nothing) (packPTH "UTCTime")))
                  (SqlOther (packPTH "SqlType unset for passingDate")))
                 [])
                True)
               NoReference])
           [])
          [])
         [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
        (Data.Map.Internal.fromList []))
       False
       {entityFields = [((((((FieldDef (HaskellName (packPTH "testKey")))
                               (DBName (packPTH "test_key")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "result")))
                               (DBName (packPTH "result")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "passingDate")))
                               (DBName (packPTH "passing_date")))
                              ((FTTypeCon Nothing) (packPTH "UTCTime")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy UTCTime)))
                            [])
                           True)
                          NoReference],
        entityId = ((((((FieldDef (HaskellName (packPTH "Id")))
                          (DBName (packPTH "id")))
                         ((FTTypeCon Nothing) (packPTH "TestResultId")))
                        (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                           (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                       [])
                      True)
                     ((ForeignRef (HaskellName (packPTH "TestResult")))
                        ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))},
     (((((((((EntityDef (HaskellName (packPTH "User")))
               (DBName (packPTH "user")))
              (((((((FieldDef (HaskellName (packPTH "Id")))
                      (DBName (packPTH "id")))
                     ((FTTypeCon Nothing) (packPTH "UserId")))
                    SqlInt64)
                   [])
                  True)
                 ((ForeignRef (HaskellName (packPTH "User")))
                    ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
             [])
            [((((((FieldDef (HaskellName (packPTH "username")))
                    (DBName (packPTH "username")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for username")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "password")))
                    (DBName (packPTH "password")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for password")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "email")))
                    (DBName (packPTH "email")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for email")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "avatar")))
                    (DBName (packPTH "avatar")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for avatar")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "firstName")))
                    (DBName (packPTH "first_name")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for firstName")))
                 [packPTH "Maybe"])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "secondName")))
                    (DBName (packPTH "second_name")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for secondName")))
                 [packPTH "Maybe"])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "birthDay")))
                    (DBName (packPTH "birth_day")))
                   ((FTTypeCon Nothing) (packPTH "UTCTime")))
                  (SqlOther (packPTH "SqlType unset for birthDay")))
                 [packPTH "Maybe"])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "sex")))
                    (DBName (packPTH "sex")))
                   ((FTTypeCon Nothing) (packPTH "Int")))
                  (SqlOther (packPTH "SqlType unset for sex")))
                 [packPTH "Maybe"])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "createdTests")))
                    (DBName (packPTH "created_tests")))
                   (FTList ((FTTypeCon Nothing) (packPTH "ObjectId"))))
                  (SqlOther (packPTH "SqlType unset for createdTests")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "passedTests")))
                    (DBName (packPTH "passed_tests")))
                   (FTList ((FTTypeCon Nothing) (packPTH "TestResult"))))
                  (SqlOther (packPTH "SqlType unset for passedTests")))
                 [])
                True)
               (EmbedRef
                  ((EmbedEntityDef (HaskellName (packPTH "TestResult")))
                     [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing) Nothing,
                      ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                      ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                        Nothing]))])
           [(((UniqueDef (HaskellName (packPTH "Email")))
                (DBName (packPTH "email")))
               [(HaskellName (packPTH "email"), DBName (packPTH "email"))])
              [],
            (((UniqueDef (HaskellName (packPTH "Username")))
                (DBName (packPTH "username")))
               [(HaskellName (packPTH "username"), DBName (packPTH "username"))])
              []])
          [])
         [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
        (Data.Map.Internal.fromList []))
       False
       {entityFields = [((((((FieldDef (HaskellName (packPTH "username")))
                               (DBName (packPTH "username")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "password")))
                               (DBName (packPTH "password")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "email")))
                               (DBName (packPTH "email")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "avatar")))
                               (DBName (packPTH "avatar")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "firstName")))
                               (DBName (packPTH "first_name")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [packPTH "Maybe"])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "secondName")))
                               (DBName (packPTH "second_name")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [packPTH "Maybe"])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "birthDay")))
                               (DBName (packPTH "birth_day")))
                              ((FTTypeCon Nothing) (packPTH "UTCTime")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy UTCTime)))
                            [packPTH "Maybe"])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "sex")))
                               (DBName (packPTH "sex")))
                              ((FTTypeCon Nothing) (packPTH "Int")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Int)))
                            [packPTH "Maybe"])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "createdTests")))
                               (DBName (packPTH "created_tests")))
                              (FTList ((FTTypeCon Nothing) (packPTH "ObjectId"))))
                             SqlString)
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "passedTests")))
                               (DBName (packPTH "passed_tests")))
                              (FTList ((FTTypeCon Nothing) (packPTH "TestResult"))))
                             SqlString)
                            [])
                           True)
                          (EmbedRef
                             ((EmbedEntityDef (HaskellName (packPTH "TestResult")))
                                [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing) Nothing,
                                 ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                                 ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                                   Nothing]))],
        entityId = ((((((FieldDef (HaskellName (packPTH "Id")))
                          (DBName (packPTH "id")))
                         ((FTTypeCon Nothing) (packPTH "UserId")))
                        (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                           (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                       [])
                      True)
                     ((ForeignRef (HaskellName (packPTH "User")))
                        ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))}]
/home/nikita/Projects/labs/Databases/Course-Project/Server/src/Model/User.hs:(27,1)-(47,2): Splicing declarations
    share
      [mkPersist
         (mkPersistSettings (ConT ''MongoContext))
           {mpsGenerateLenses = True, mpsPrefixFields = False},
       mkMigrate "migrateAll"]
      ([(((((((((EntityDef (HaskellName (packPTH "TestResult")))
                  (DBName (packPTH "test_result")))
                 (((((((FieldDef (HaskellName (packPTH "Id")))
                         (DBName (packPTH "id")))
                        ((FTTypeCon Nothing) (packPTH "TestResultId")))
                       SqlInt64)
                      [])
                     True)
                    ((ForeignRef (HaskellName (packPTH "TestResult")))
                       ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                [])
               [((((((FieldDef (HaskellName (packPTH "testKey")))
                       (DBName (packPTH "test_key")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for testKey")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "result")))
                       (DBName (packPTH "result")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for result")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "passingDate")))
                       (DBName (packPTH "passing_date")))
                      ((FTTypeCon Nothing) (packPTH "UTCTime")))
                     (SqlOther (packPTH "SqlType unset for passingDate")))
                    [])
                   True)
                  NoReference])
              [])
             [])
            [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
           (Data.Map.Internal.fromList []))
          False
          {entityFields = [((((((FieldDef (HaskellName (packPTH "testKey")))
                                  (DBName (packPTH "test_key")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "result")))
                                  (DBName (packPTH "result")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "passingDate")))
                                  (DBName (packPTH "passing_date")))
                                 ((FTTypeCon Nothing) (packPTH "UTCTime")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy UTCTime)))
                               [])
                              True)
                             NoReference],
           entityId = ((((((FieldDef (HaskellName (packPTH "Id")))
                             (DBName (packPTH "id")))
                            ((FTTypeCon Nothing) (packPTH "TestResultId")))
                           (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                              (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                          [])
                         True)
                        ((ForeignRef (HaskellName (packPTH "TestResult")))
                           ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))},
        (((((((((EntityDef (HaskellName (packPTH "User")))
                  (DBName (packPTH "user")))
                 (((((((FieldDef (HaskellName (packPTH "Id")))
                         (DBName (packPTH "id")))
                        ((FTTypeCon Nothing) (packPTH "UserId")))
                       SqlInt64)
                      [])
                     True)
                    ((ForeignRef (HaskellName (packPTH "User")))
                       ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                [])
               [((((((FieldDef (HaskellName (packPTH "username")))
                       (DBName (packPTH "username")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for username")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "password")))
                       (DBName (packPTH "password")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for password")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "email")))
                       (DBName (packPTH "email")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for email")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "avatar")))
                       (DBName (packPTH "avatar")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for avatar")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "firstName")))
                       (DBName (packPTH "first_name")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for firstName")))
                    [packPTH "Maybe"])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "secondName")))
                       (DBName (packPTH "second_name")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for secondName")))
                    [packPTH "Maybe"])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "birthDay")))
                       (DBName (packPTH "birth_day")))
                      ((FTTypeCon Nothing) (packPTH "UTCTime")))
                     (SqlOther (packPTH "SqlType unset for birthDay")))
                    [packPTH "Maybe"])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "sex")))
                       (DBName (packPTH "sex")))
                      ((FTTypeCon Nothing) (packPTH "Int")))
                     (SqlOther (packPTH "SqlType unset for sex")))
                    [packPTH "Maybe"])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "createdTests")))
                       (DBName (packPTH "created_tests")))
                      (FTList ((FTTypeCon Nothing) (packPTH "ObjectId"))))
                     (SqlOther (packPTH "SqlType unset for createdTests")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "passedTests")))
                       (DBName (packPTH "passed_tests")))
                      (FTList ((FTTypeCon Nothing) (packPTH "TestResult"))))
                     (SqlOther (packPTH "SqlType unset for passedTests")))
                    [])
                   True)
                  (EmbedRef
                     ((EmbedEntityDef (HaskellName (packPTH "TestResult")))
                        [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing) Nothing,
                         ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                         ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                           Nothing]))])
              [(((UniqueDef (HaskellName (packPTH "Email")))
                   (DBName (packPTH "email")))
                  [(HaskellName (packPTH "email"), DBName (packPTH "email"))])
                 [],
               (((UniqueDef (HaskellName (packPTH "Username")))
                   (DBName (packPTH "username")))
                  [(HaskellName (packPTH "username"), DBName (packPTH "username"))])
                 []])
             [])
            [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
           (Data.Map.Internal.fromList []))
          False
          {entityFields = [((((((FieldDef (HaskellName (packPTH "username")))
                                  (DBName (packPTH "username")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "password")))
                                  (DBName (packPTH "password")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "email")))
                                  (DBName (packPTH "email")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "avatar")))
                                  (DBName (packPTH "avatar")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "firstName")))
                                  (DBName (packPTH "first_name")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [packPTH "Maybe"])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "secondName")))
                                  (DBName (packPTH "second_name")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [packPTH "Maybe"])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "birthDay")))
                                  (DBName (packPTH "birth_day")))
                                 ((FTTypeCon Nothing) (packPTH "UTCTime")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy UTCTime)))
                               [packPTH "Maybe"])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "sex")))
                                  (DBName (packPTH "sex")))
                                 ((FTTypeCon Nothing) (packPTH "Int")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Int)))
                               [packPTH "Maybe"])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "createdTests")))
                                  (DBName (packPTH "created_tests")))
                                 (FTList ((FTTypeCon Nothing) (packPTH "ObjectId"))))
                                SqlString)
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "passedTests")))
                                  (DBName (packPTH "passed_tests")))
                                 (FTList ((FTTypeCon Nothing) (packPTH "TestResult"))))
                                SqlString)
                               [])
                              True)
                             (EmbedRef
                                ((EmbedEntityDef (HaskellName (packPTH "TestResult")))
                                   [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing) Nothing,
                                    ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                                    ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                                      Nothing]))],
           entityId = ((((((FieldDef (HaskellName (packPTH "Id")))
                             (DBName (packPTH "id")))
                            ((FTTypeCon Nothing) (packPTH "UserId")))
                           (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                              (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                          [])
                         True)
                        ((ForeignRef (HaskellName (packPTH "User")))
                           ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))}])
  ======>
    instance PersistField TestResult where
      toPersistValue
        = \ ent_aVFH
            -> (PersistMap
                  $ ((Prelude.zip
                        ((Prelude.map pack) ["testKey", "result", "passingDate"]))
                       ((Prelude.map toPersistValue) $ (toPersistFields ent_aVFH))))
      fromPersistValue
        = ((\ x_aVFI
              -> let
                   columns_aVFJ
                     = unordered-containers-0.2.9.0:Data.HashMap.Strict.fromList x_aVFI
                 in
                   (fromPersistValues
                      $ ((Prelude.map
                            (\ name_aVFK
                               -> case
                                      (unordered-containers-0.2.9.0:Data.HashMap.Base.lookup
                                         (pack name_aVFK))
                                        columns_aVFJ
                                  of
                                    Just v_aVFL -> v_aVFL
                                    Nothing -> PersistNull))
                           $ ["testKey", "result", "passingDate"])))
             <=< getPersistMap)
    instance persistent-2.8.1:Database.Persist.Sql.Class.PersistFieldSql TestResult where
      persistent-2.8.1:Database.Persist.Sql.Class.sqlType _ = SqlString
    instance PersistField User where
      toPersistValue
        = \ ent_aVFM
            -> (PersistMap
                  $ ((Prelude.zip
                        ((Prelude.map pack)
                           ["username", "password", "email", "avatar", "firstName",
                            "secondName", "birthDay", "sex", "createdTests", "passedTests"]))
                       ((Prelude.map toPersistValue) $ (toPersistFields ent_aVFM))))
      fromPersistValue
        = ((\ x_aVFN
              -> let
                   columns_aVFO
                     = unordered-containers-0.2.9.0:Data.HashMap.Strict.fromList x_aVFN
                 in
                   (fromPersistValues
                      $ ((Prelude.map
                            (\ name_aVFP
                               -> case
                                      (unordered-containers-0.2.9.0:Data.HashMap.Base.lookup
                                         (pack name_aVFP))
                                        columns_aVFO
                                  of
                                    Just v_aVFQ -> v_aVFQ
                                    Nothing -> PersistNull))
                           $ ["username", "password", "email", "avatar", "firstName",
                              "secondName", "birthDay", "sex", "createdTests", "passedTests"])))
             <=< getPersistMap)
    instance persistent-2.8.1:Database.Persist.Sql.Class.PersistFieldSql User where
      persistent-2.8.1:Database.Persist.Sql.Class.sqlType _ = SqlString
    data TestResult
      = TestResult {_testKey :: !Text,
                    _result :: !Text,
                    _passingDate :: !UTCTime}
      deriving (Eq, Read, Show, Generic)
    type TestResultId = Key TestResult
    instance PersistEntity TestResult where
      type PersistEntityBackend TestResult = MongoContext
      data Unique TestResult
      newtype Key TestResult
        = TestResultKey {unTestResultKey :: (BackendKey MongoContext)}
        deriving (Show,
                  Read,
                  Eq,
                  Ord,
                  path-pieces-0.2.1:Web.PathPieces.PathPiece,
                  http-api-data-0.3.7.2:Web.Internal.HttpApiData.ToHttpApiData,
                  http-api-data-0.3.7.2:Web.Internal.HttpApiData.FromHttpApiData,
                  PersistField,
                  persistent-2.8.1:Database.Persist.Sql.Class.PersistFieldSql,
                  Aeson.ToJSON,
                  Aeson.FromJSON)
      data EntityField TestResult typ
        = typ ~ Key TestResult => TestResultId |
          typ ~ Text => TestKey |
          typ ~ Text => Result |
          typ ~ UTCTime => PassingDate
      keyToValues
        = ((ghc-prim-0.5.1.1:GHC.Types.: [])
             . (toPersistValue . unTestResultKey))
      keyFromValues
        = ((fmap TestResultKey)
             . (fromPersistValue . Database.Persist.TH.headNote))
      entityDef _
        = (((((((((EntityDef (HaskellName (packPTH "TestResult")))
                    (DBName (packPTH "test_result")))
                   (((((((FieldDef (HaskellName (packPTH "Id")))
                           (DBName (packPTH "id")))
                          ((FTTypeCon Nothing) (packPTH "TestResultId")))
                         SqlInt64)
                        [])
                       True)
                      ((ForeignRef (HaskellName (packPTH "TestResult")))
                         ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                  [])
                 [((((((FieldDef (HaskellName (packPTH "testKey")))
                         (DBName (packPTH "test_key")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "result")))
                         (DBName (packPTH "result")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "passingDate")))
                         (DBName (packPTH "passing_date")))
                        ((FTTypeCon Nothing) (packPTH "UTCTime")))
                       SqlDayTime)
                      [])
                     True)
                    NoReference])
                [])
               [])
              [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
             (Data.Map.Internal.fromList []))
            False
      toPersistFields (TestResult x_aVFR x_aVFS x_aVFT)
        = [SomePersistField x_aVFR, SomePersistField x_aVFS,
           SomePersistField x_aVFT]
      fromPersistValues [x1_aVFV, x2_aVFW, x3_aVFX]
        = TestResult
            <$>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "testKey")))
                 . fromPersistValue)
                x1_aVFV
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "result")))
                 . fromPersistValue)
                x2_aVFW
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "passingDate")))
                 . fromPersistValue)
                x3_aVFX
      fromPersistValues x_aVFU
        = (Left
             $ ((mappend (packPTH "TestResult: fromPersistValues failed on: "))
                  (pack $ (show x_aVFU))))
      persistUniqueToFieldNames _
        = error "Degenerate case, should never happen"
      persistUniqueToValues _
        = error "Degenerate case, should never happen"
      persistUniqueKeys
        (TestResult _testKey_aVFY _result_aVFZ _passingDate_aVG0)
        = []
      persistFieldDef TestResultId
        = ((((((FieldDef (HaskellName (packPTH "Id")))
                 (DBName (packPTH "id")))
                ((FTTypeCon Nothing) (packPTH "TestResultId")))
               SqlInt64)
              [])
             True)
            ((ForeignRef (HaskellName (packPTH "TestResult")))
               ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))
      persistFieldDef TestKey
        = ((((((FieldDef (HaskellName (packPTH "testKey")))
                 (DBName (packPTH "test_key")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef Result
        = ((((((FieldDef (HaskellName (packPTH "result")))
                 (DBName (packPTH "result")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef PassingDate
        = ((((((FieldDef (HaskellName (packPTH "passingDate")))
                 (DBName (packPTH "passing_date")))
                ((FTTypeCon Nothing) (packPTH "UTCTime")))
               SqlDayTime)
              [])
             True)
            NoReference
      persistIdField = TestResultId
      fieldLens TestResultId
        = (lensPTH entityKey)
            (\ Entity _ value_aVG1 key_aVG2 -> (Entity key_aVG2) value_aVG1)
      fieldLens TestKey
        = (lensPTH (_testKey . entityVal))
            (\ Entity key_aVG3 value_aVG4 x_aVG5
               -> (Entity key_aVG3) value_aVG4 {_testKey = x_aVG5})
      fieldLens Result
        = (lensPTH (_result . entityVal))
            (\ Entity key_aVG3 value_aVG4 x_aVG5
               -> (Entity key_aVG3) value_aVG4 {_result = x_aVG5})
      fieldLens PassingDate
        = (lensPTH (_passingDate . entityVal))
            (\ Entity key_aVG3 value_aVG4 x_aVG5
               -> (Entity key_aVG3) value_aVG4 {_passingDate = x_aVG5})
    testKey ::
      forall f.
      Functor f => (Text -> f Text) -> TestResult -> f TestResult
    testKey f_aVG8 a_aVG9
      = (fmap setter_aVG7) (f_aVG8 needle_aVG6)
      where
          needle_aVG6 = _testKey a_aVG9
          setter_aVG7 y_aVGa = a_aVG9 {_testKey = y_aVGa}
    result ::
      forall f.
      Functor f => (Text -> f Text) -> TestResult -> f TestResult
    result f_aVGd a_aVGe
      = (fmap setter_aVGc) (f_aVGd needle_aVGb)
      where
          needle_aVGb = _result a_aVGe
          setter_aVGc y_aVGf = a_aVGe {_result = y_aVGf}
    passingDate ::
      forall f.
      Functor f => (UTCTime -> f UTCTime) -> TestResult -> f TestResult
    passingDate f_aVGi a_aVGj
      = (fmap setter_aVGh) (f_aVGi needle_aVGg)
      where
          needle_aVGg = _passingDate a_aVGj
          setter_aVGh y_aVGk = a_aVGj {_passingDate = y_aVGk}
    instance ToBackendKey MongoContext TestResult where
      toBackendKey = unTestResultKey
      fromBackendKey = TestResultKey
    data User
      = User {_username :: !Text,
              _password :: !Text,
              _email :: !Text,
              _avatar :: !Text,
              _firstName :: !(Maybe Text),
              _secondName :: !(Maybe Text),
              _birthDay :: !(Maybe UTCTime),
              _sex :: !(Maybe Int),
              _createdTests :: ![ObjectId],
              _passedTests :: ![TestResult]}
      deriving (Eq, Read, Show, Generic)
    type UserId = Key User
    instance PersistEntity User where
      type PersistEntityBackend User = MongoContext
      data Unique User = Email Text | Username Text
      newtype Key User
        = UserKey {unUserKey :: (BackendKey MongoContext)}
        deriving (Show,
                  Read,
                  Eq,
                  Ord,
                  path-pieces-0.2.1:Web.PathPieces.PathPiece,
                  http-api-data-0.3.7.2:Web.Internal.HttpApiData.ToHttpApiData,
                  http-api-data-0.3.7.2:Web.Internal.HttpApiData.FromHttpApiData,
                  PersistField,
                  persistent-2.8.1:Database.Persist.Sql.Class.PersistFieldSql,
                  Aeson.ToJSON,
                  Aeson.FromJSON)
      data EntityField User typ
        = typ ~ Key User => UserId |
          typ ~ Text => Username |
          typ ~ Text => Password |
          typ ~ Text => Email |
          typ ~ Text => Avatar |
          typ ~ Maybe Text => FirstName |
          typ ~ Maybe Text => SecondName |
          typ ~ Maybe UTCTime => BirthDay |
          typ ~ Maybe Int => Sex |
          typ ~ [ObjectId] => CreatedTests |
          typ ~ [TestResult] => PassedTests
      keyToValues
        = ((ghc-prim-0.5.1.1:GHC.Types.: [])
             . (toPersistValue . unUserKey))
      keyFromValues
        = ((fmap UserKey)
             . (fromPersistValue . Database.Persist.TH.headNote))
      entityDef _
        = (((((((((EntityDef (HaskellName (packPTH "User")))
                    (DBName (packPTH "user")))
                   (((((((FieldDef (HaskellName (packPTH "Id")))
                           (DBName (packPTH "id")))
                          ((FTTypeCon Nothing) (packPTH "UserId")))
                         SqlInt64)
                        [])
                       True)
                      ((ForeignRef (HaskellName (packPTH "User")))
                         ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                  [])
                 [((((((FieldDef (HaskellName (packPTH "username")))
                         (DBName (packPTH "username")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "password")))
                         (DBName (packPTH "password")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "email")))
                         (DBName (packPTH "email")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "avatar")))
                         (DBName (packPTH "avatar")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "firstName")))
                         (DBName (packPTH "first_name")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [packPTH "Maybe"])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "secondName")))
                         (DBName (packPTH "second_name")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [packPTH "Maybe"])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "birthDay")))
                         (DBName (packPTH "birth_day")))
                        ((FTTypeCon Nothing) (packPTH "UTCTime")))
                       SqlDayTime)
                      [packPTH "Maybe"])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "sex")))
                         (DBName (packPTH "sex")))
                        ((FTTypeCon Nothing) (packPTH "Int")))
                       SqlInt64)
                      [packPTH "Maybe"])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "createdTests")))
                         (DBName (packPTH "created_tests")))
                        (FTList ((FTTypeCon Nothing) (packPTH "ObjectId"))))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "passedTests")))
                         (DBName (packPTH "passed_tests")))
                        (FTList ((FTTypeCon Nothing) (packPTH "TestResult"))))
                       SqlString)
                      [])
                     True)
                    (EmbedRef
                       ((EmbedEntityDef (HaskellName (packPTH "TestResult")))
                          [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing) Nothing,
                           ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                           ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                             Nothing]))])
                [(((UniqueDef (HaskellName (packPTH "Email")))
                     (DBName (packPTH "email")))
                    [(HaskellName (packPTH "email"), DBName (packPTH "email"))])
                   [],
                 (((UniqueDef (HaskellName (packPTH "Username")))
                     (DBName (packPTH "username")))
                    [(HaskellName (packPTH "username"), DBName (packPTH "username"))])
                   []])
               [])
              [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
             (Data.Map.Internal.fromList []))
            False
      toPersistFields
        (User x_aVGl
              x_aVGm
              x_aVGn
              x_aVGo
              x_aVGp
              x_aVGq
              x_aVGr
              x_aVGs
              x_aVGt
              x_aVGu)
        = [SomePersistField x_aVGl, SomePersistField x_aVGm,
           SomePersistField x_aVGn, SomePersistField x_aVGo,
           SomePersistField x_aVGp, SomePersistField x_aVGq,
           SomePersistField x_aVGr, SomePersistField x_aVGs,
           SomePersistField x_aVGt, SomePersistField x_aVGu]
      fromPersistValues
        [x1_aVGw,
         x2_aVGx,
         x3_aVGy,
         x4_aVGz,
         x5_aVGA,
         x6_aVGB,
         x7_aVGC,
         x8_aVGD,
         x9_aVGE,
         x10_aVGF]
        = User
            <$>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "username")))
                 . fromPersistValue)
                x1_aVGw
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "password")))
                 . fromPersistValue)
                x2_aVGx
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "email")))
                 . fromPersistValue)
                x3_aVGy
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "avatar")))
                 . fromPersistValue)
                x4_aVGz
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "firstName")))
                 . fromPersistValue)
                x5_aVGA
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "secondName")))
                 . fromPersistValue)
                x6_aVGB
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "birthDay")))
                 . fromPersistValue)
                x7_aVGC
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "sex")))
                 . fromPersistValue)
                x8_aVGD
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "createdTests")))
                 . fromPersistValue)
                x9_aVGE
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "passedTests")))
                 . fromPersistValue)
                x10_aVGF
      fromPersistValues x_aVGv
        = (Left
             $ ((mappend (packPTH "User: fromPersistValues failed on: "))
                  (pack $ (show x_aVGv))))
      persistUniqueToFieldNames Email {}
        = [(HaskellName (packPTH "email"), DBName (packPTH "email"))]
      persistUniqueToFieldNames Username {}
        = [(HaskellName (packPTH "username"), DBName (packPTH "username"))]
      persistUniqueToValues (Email x_aVGG) = [toPersistValue x_aVGG]
      persistUniqueToValues (Username x_aVGH) = [toPersistValue x_aVGH]
      persistUniqueKeys
        (User _username_aVGI
              _password_aVGJ
              _email_aVGK
              _avatar_aVGL
              _firstName_aVGM
              _secondName_aVGN
              _birthDay_aVGO
              _sex_aVGP
              _createdTests_aVGQ
              _passedTests_aVGR)
        = [Email _email_aVGK, Username _username_aVGI]
      persistFieldDef UserId
        = ((((((FieldDef (HaskellName (packPTH "Id")))
                 (DBName (packPTH "id")))
                ((FTTypeCon Nothing) (packPTH "UserId")))
               SqlInt64)
              [])
             True)
            ((ForeignRef (HaskellName (packPTH "User")))
               ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))
      persistFieldDef Username
        = ((((((FieldDef (HaskellName (packPTH "username")))
                 (DBName (packPTH "username")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef Password
        = ((((((FieldDef (HaskellName (packPTH "password")))
                 (DBName (packPTH "password")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef Email
        = ((((((FieldDef (HaskellName (packPTH "email")))
                 (DBName (packPTH "email")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef Avatar
        = ((((((FieldDef (HaskellName (packPTH "avatar")))
                 (DBName (packPTH "avatar")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef FirstName
        = ((((((FieldDef (HaskellName (packPTH "firstName")))
                 (DBName (packPTH "first_name")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [packPTH "Maybe"])
             True)
            NoReference
      persistFieldDef SecondName
        = ((((((FieldDef (HaskellName (packPTH "secondName")))
                 (DBName (packPTH "second_name")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [packPTH "Maybe"])
             True)
            NoReference
      persistFieldDef BirthDay
        = ((((((FieldDef (HaskellName (packPTH "birthDay")))
                 (DBName (packPTH "birth_day")))
                ((FTTypeCon Nothing) (packPTH "UTCTime")))
               SqlDayTime)
              [packPTH "Maybe"])
             True)
            NoReference
      persistFieldDef Sex
        = ((((((FieldDef (HaskellName (packPTH "sex")))
                 (DBName (packPTH "sex")))
                ((FTTypeCon Nothing) (packPTH "Int")))
               SqlInt64)
              [packPTH "Maybe"])
             True)
            NoReference
      persistFieldDef CreatedTests
        = ((((((FieldDef (HaskellName (packPTH "createdTests")))
                 (DBName (packPTH "created_tests")))
                (FTList ((FTTypeCon Nothing) (packPTH "ObjectId"))))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef PassedTests
        = ((((((FieldDef (HaskellName (packPTH "passedTests")))
                 (DBName (packPTH "passed_tests")))
                (FTList ((FTTypeCon Nothing) (packPTH "TestResult"))))
               SqlString)
              [])
             True)
            (EmbedRef
               ((EmbedEntityDef (HaskellName (packPTH "TestResult")))
                  [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing) Nothing,
                   ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                   ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                     Nothing]))
      persistIdField = UserId
      fieldLens UserId
        = (lensPTH entityKey)
            (\ Entity _ value_aVGS key_aVGT -> (Entity key_aVGT) value_aVGS)
      fieldLens Username
        = (lensPTH (_username . entityVal))
            (\ Entity key_aVGU value_aVGV x_aVGW
               -> (Entity key_aVGU) value_aVGV {_username = x_aVGW})
      fieldLens Password
        = (lensPTH (_password . entityVal))
            (\ Entity key_aVGU value_aVGV x_aVGW
               -> (Entity key_aVGU) value_aVGV {_password = x_aVGW})
      fieldLens Email
        = (lensPTH (_email . entityVal))
            (\ Entity key_aVGU value_aVGV x_aVGW
               -> (Entity key_aVGU) value_aVGV {_email = x_aVGW})
      fieldLens Avatar
        = (lensPTH (_avatar . entityVal))
            (\ Entity key_aVGU value_aVGV x_aVGW
               -> (Entity key_aVGU) value_aVGV {_avatar = x_aVGW})
      fieldLens FirstName
        = (lensPTH (_firstName . entityVal))
            (\ Entity key_aVGU value_aVGV x_aVGW
               -> (Entity key_aVGU) value_aVGV {_firstName = x_aVGW})
      fieldLens SecondName
        = (lensPTH (_secondName . entityVal))
            (\ Entity key_aVGU value_aVGV x_aVGW
               -> (Entity key_aVGU) value_aVGV {_secondName = x_aVGW})
      fieldLens BirthDay
        = (lensPTH (_birthDay . entityVal))
            (\ Entity key_aVGU value_aVGV x_aVGW
               -> (Entity key_aVGU) value_aVGV {_birthDay = x_aVGW})
      fieldLens Sex
        = (lensPTH (_sex . entityVal))
            (\ Entity key_aVGU value_aVGV x_aVGW
               -> (Entity key_aVGU) value_aVGV {_sex = x_aVGW})
      fieldLens CreatedTests
        = (lensPTH (_createdTests . entityVal))
            (\ Entity key_aVGU value_aVGV x_aVGW
               -> (Entity key_aVGU) value_aVGV {_createdTests = x_aVGW})
      fieldLens PassedTests
        = (lensPTH (_passedTests . entityVal))
            (\ Entity key_aVGU value_aVGV x_aVGW
               -> (Entity key_aVGU) value_aVGV {_passedTests = x_aVGW})
    username ::
      forall f. Functor f => (Text -> f Text) -> User -> f User
    username f_aVGZ a_aVH0
      = (fmap setter_aVGY) (f_aVGZ needle_aVGX)
      where
          needle_aVGX = _username a_aVH0
          setter_aVGY y_aVH1 = a_aVH0 {_username = y_aVH1}
    password ::
      forall f. Functor f => (Text -> f Text) -> User -> f User
    password f_aVH4 a_aVH5
      = (fmap setter_aVH3) (f_aVH4 needle_aVH2)
      where
          needle_aVH2 = _password a_aVH5
          setter_aVH3 y_aVH6 = a_aVH5 {_password = y_aVH6}
    email :: forall f. Functor f => (Text -> f Text) -> User -> f User
    email f_aVH9 a_aVHa
      = (fmap setter_aVH8) (f_aVH9 needle_aVH7)
      where
          needle_aVH7 = _email a_aVHa
          setter_aVH8 y_aVHb = a_aVHa {_email = y_aVHb}
    avatar :: forall f. Functor f => (Text -> f Text) -> User -> f User
    avatar f_aVHe a_aVHf
      = (fmap setter_aVHd) (f_aVHe needle_aVHc)
      where
          needle_aVHc = _avatar a_aVHf
          setter_aVHd y_aVHg = a_aVHf {_avatar = y_aVHg}
    firstName ::
      forall f.
      Functor f => (Maybe Text -> f (Maybe Text)) -> User -> f User
    firstName f_aVHj a_aVHk
      = (fmap setter_aVHi) (f_aVHj needle_aVHh)
      where
          needle_aVHh = _firstName a_aVHk
          setter_aVHi y_aVHl = a_aVHk {_firstName = y_aVHl}
    secondName ::
      forall f.
      Functor f => (Maybe Text -> f (Maybe Text)) -> User -> f User
    secondName f_aVHo a_aVHp
      = (fmap setter_aVHn) (f_aVHo needle_aVHm)
      where
          needle_aVHm = _secondName a_aVHp
          setter_aVHn y_aVHq = a_aVHp {_secondName = y_aVHq}
    birthDay ::
      forall f.
      Functor f => (Maybe UTCTime -> f (Maybe UTCTime)) -> User -> f User
    birthDay f_aVHt a_aVHu
      = (fmap setter_aVHs) (f_aVHt needle_aVHr)
      where
          needle_aVHr = _birthDay a_aVHu
          setter_aVHs y_aVHv = a_aVHu {_birthDay = y_aVHv}
    sex ::
      forall f.
      Functor f => (Maybe Int -> f (Maybe Int)) -> User -> f User
    sex f_aVHy a_aVHz
      = (fmap setter_aVHx) (f_aVHy needle_aVHw)
      where
          needle_aVHw = _sex a_aVHz
          setter_aVHx y_aVHA = a_aVHz {_sex = y_aVHA}
    createdTests ::
      forall f.
      Functor f => ([ObjectId] -> f [ObjectId]) -> User -> f User
    createdTests f_aVHD a_aVHE
      = (fmap setter_aVHC) (f_aVHD needle_aVHB)
      where
          needle_aVHB = _createdTests a_aVHE
          setter_aVHC y_aVHF = a_aVHE {_createdTests = y_aVHF}
    passedTests ::
      forall f.
      Functor f => ([TestResult] -> f [TestResult]) -> User -> f User
    passedTests f_aVHI a_aVHJ
      = (fmap setter_aVHH) (f_aVHI needle_aVHG)
      where
          needle_aVHG = _passedTests a_aVHJ
          setter_aVHH y_aVHK = a_aVHJ {_passedTests = y_aVHK}
    instance ToBackendKey MongoContext User where
      toBackendKey = unUserKey
      fromBackendKey = UserKey
    migrateAll :: persistent-2.8.1:Database.Persist.Sql.Types.Migration
    migrateAll
      = do let defs_aVHL
                 = [(((((((((EntityDef (HaskellName (packPTH "TestResult")))
                              (DBName (packPTH "test_result")))
                             (((((((FieldDef (HaskellName (packPTH "Id")))
                                     (DBName (packPTH "id")))
                                    ((FTTypeCon Nothing) (packPTH "TestResultId")))
                                   SqlInt64)
                                  [])
                                 True)
                                ((ForeignRef (HaskellName (packPTH "TestResult")))
                                   ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                            [])
                           [((((((FieldDef (HaskellName (packPTH "testKey")))
                                   (DBName (packPTH "test_key")))
                                  ((FTTypeCon Nothing) (packPTH "Text")))
                                 SqlString)
                                [])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "result")))
                                   (DBName (packPTH "result")))
                                  ((FTTypeCon Nothing) (packPTH "Text")))
                                 SqlString)
                                [])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "passingDate")))
                                   (DBName (packPTH "passing_date")))
                                  ((FTTypeCon Nothing) (packPTH "UTCTime")))
                                 SqlDayTime)
                                [])
                               True)
                              NoReference])
                          [])
                         [])
                        [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
                       (Data.Map.Internal.fromList []))
                      False,
                    (((((((((EntityDef (HaskellName (packPTH "User")))
                              (DBName (packPTH "user")))
                             (((((((FieldDef (HaskellName (packPTH "Id")))
                                     (DBName (packPTH "id")))
                                    ((FTTypeCon Nothing) (packPTH "UserId")))
                                   SqlInt64)
                                  [])
                                 True)
                                ((ForeignRef (HaskellName (packPTH "User")))
                                   ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                            [])
                           [((((((FieldDef (HaskellName (packPTH "username")))
                                   (DBName (packPTH "username")))
                                  ((FTTypeCon Nothing) (packPTH "Text")))
                                 SqlString)
                                [])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "password")))
                                   (DBName (packPTH "password")))
                                  ((FTTypeCon Nothing) (packPTH "Text")))
                                 SqlString)
                                [])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "email")))
                                   (DBName (packPTH "email")))
                                  ((FTTypeCon Nothing) (packPTH "Text")))
                                 SqlString)
                                [])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "avatar")))
                                   (DBName (packPTH "avatar")))
                                  ((FTTypeCon Nothing) (packPTH "Text")))
                                 SqlString)
                                [])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "firstName")))
                                   (DBName (packPTH "first_name")))
                                  ((FTTypeCon Nothing) (packPTH "Text")))
                                 SqlString)
                                [packPTH "Maybe"])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "secondName")))
                                   (DBName (packPTH "second_name")))
                                  ((FTTypeCon Nothing) (packPTH "Text")))
                                 SqlString)
                                [packPTH "Maybe"])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "birthDay")))
                                   (DBName (packPTH "birth_day")))
                                  ((FTTypeCon Nothing) (packPTH "UTCTime")))
                                 SqlDayTime)
                                [packPTH "Maybe"])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "sex")))
                                   (DBName (packPTH "sex")))
                                  ((FTTypeCon Nothing) (packPTH "Int")))
                                 SqlInt64)
                                [packPTH "Maybe"])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "createdTests")))
                                   (DBName (packPTH "created_tests")))
                                  (FTList ((FTTypeCon Nothing) (packPTH "ObjectId"))))
                                 SqlString)
                                [])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "passedTests")))
                                   (DBName (packPTH "passed_tests")))
                                  (FTList ((FTTypeCon Nothing) (packPTH "TestResult"))))
                                 SqlString)
                                [])
                               True)
                              (EmbedRef
                                 ((EmbedEntityDef (HaskellName (packPTH "TestResult")))
                                    [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing)
                                       Nothing,
                                     ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                                     ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                                       Nothing]))])
                          [(((UniqueDef (HaskellName (packPTH "Email")))
                               (DBName (packPTH "email")))
                              [(HaskellName (packPTH "email"), DBName (packPTH "email"))])
                             [],
                           (((UniqueDef (HaskellName (packPTH "Username")))
                               (DBName (packPTH "username")))
                              [(HaskellName (packPTH "username"), DBName (packPTH "username"))])
                             []])
                         [])
                        [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
                       (Data.Map.Internal.fromList []))
                      False]
           (persistent-2.8.1:Database.Persist.Sql.Migration.migrate defs_aVHL)
             ((((((((((EntityDef (HaskellName (packPTH "TestResult")))
                        (DBName (packPTH "test_result")))
                       (((((((FieldDef (HaskellName (packPTH "Id")))
                               (DBName (packPTH "id")))
                              ((FTTypeCon Nothing) (packPTH "TestResultId")))
                             SqlInt64)
                            [])
                           True)
                          ((ForeignRef (HaskellName (packPTH "TestResult")))
                             ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                      [])
                     [((((((FieldDef (HaskellName (packPTH "testKey")))
                             (DBName (packPTH "test_key")))
                            ((FTTypeCon Nothing) (packPTH "Text")))
                           SqlString)
                          [])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "result")))
                             (DBName (packPTH "result")))
                            ((FTTypeCon Nothing) (packPTH "Text")))
                           SqlString)
                          [])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "passingDate")))
                             (DBName (packPTH "passing_date")))
                            ((FTTypeCon Nothing) (packPTH "UTCTime")))
                           SqlDayTime)
                          [])
                         True)
                        NoReference])
                    [])
                   [])
                  [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
                 (Data.Map.Internal.fromList []))
                False)
           (persistent-2.8.1:Database.Persist.Sql.Migration.migrate defs_aVHL)
             ((((((((((EntityDef (HaskellName (packPTH "User")))
                        (DBName (packPTH "user")))
                       (((((((FieldDef (HaskellName (packPTH "Id")))
                               (DBName (packPTH "id")))
                              ((FTTypeCon Nothing) (packPTH "UserId")))
                             SqlInt64)
                            [])
                           True)
                          ((ForeignRef (HaskellName (packPTH "User")))
                             ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                      [])
                     [((((((FieldDef (HaskellName (packPTH "username")))
                             (DBName (packPTH "username")))
                            ((FTTypeCon Nothing) (packPTH "Text")))
                           SqlString)
                          [])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "password")))
                             (DBName (packPTH "password")))
                            ((FTTypeCon Nothing) (packPTH "Text")))
                           SqlString)
                          [])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "email")))
                             (DBName (packPTH "email")))
                            ((FTTypeCon Nothing) (packPTH "Text")))
                           SqlString)
                          [])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "avatar")))
                             (DBName (packPTH "avatar")))
                            ((FTTypeCon Nothing) (packPTH "Text")))
                           SqlString)
                          [])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "firstName")))
                             (DBName (packPTH "first_name")))
                            ((FTTypeCon Nothing) (packPTH "Text")))
                           SqlString)
                          [packPTH "Maybe"])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "secondName")))
                             (DBName (packPTH "second_name")))
                            ((FTTypeCon Nothing) (packPTH "Text")))
                           SqlString)
                          [packPTH "Maybe"])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "birthDay")))
                             (DBName (packPTH "birth_day")))
                            ((FTTypeCon Nothing) (packPTH "UTCTime")))
                           SqlDayTime)
                          [packPTH "Maybe"])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "sex")))
                             (DBName (packPTH "sex")))
                            ((FTTypeCon Nothing) (packPTH "Int")))
                           SqlInt64)
                          [packPTH "Maybe"])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "createdTests")))
                             (DBName (packPTH "created_tests")))
                            (FTList ((FTTypeCon Nothing) (packPTH "ObjectId"))))
                           SqlString)
                          [])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "passedTests")))
                             (DBName (packPTH "passed_tests")))
                            (FTList ((FTTypeCon Nothing) (packPTH "TestResult"))))
                           SqlString)
                          [])
                         True)
                        (EmbedRef
                           ((EmbedEntityDef (HaskellName (packPTH "TestResult")))
                              [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing) Nothing,
                               ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                               ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                                 Nothing]))])
                    [(((UniqueDef (HaskellName (packPTH "Email")))
                         (DBName (packPTH "email")))
                        [(HaskellName (packPTH "email"), DBName (packPTH "email"))])
                       [],
                     (((UniqueDef (HaskellName (packPTH "Username")))
                         (DBName (packPTH "username")))
                        [(HaskellName (packPTH "username"), DBName (packPTH "username"))])
                       []])
                   [])
                  [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
                 (Data.Map.Internal.fromList []))
                False)
/home/nikita/Projects/labs/Databases/Course-Project/Server/src/Model/User.hs:(27,103)-(47,2): Splicing expression
    Language.Haskell.TH.Quote.quoteExp
      persistLowerCase
      "\n\
      \TestResult\n\
      \  testKey       Text\n\
      \  result        Text\n\
      \  passingDate   UTCTime\n\
      \  deriving      Eq Read Show Generic\n\
      \User\n\
      \  username      Text\n\
      \  password      Text\n\
      \  email         Text\n\
      \  avatar        Text\n\
      \  firstName     Text Maybe\n\
      \  secondName    Text Maybe\n\
      \  birthDay      UTCTime Maybe\n\
      \  sex           Int Maybe\n\
      \  createdTests  [ObjectId]\n\
      \  passedTests   [TestResult]\n\
      \  Email         email\n\
      \  Username      username\n\
      \  deriving      Eq Read Show Generic\n"
  ======>
    [(((((((((EntityDef (HaskellName (packPTH "TestResult")))
               (DBName (packPTH "test_result")))
              (((((((FieldDef (HaskellName (packPTH "Id")))
                      (DBName (packPTH "id")))
                     ((FTTypeCon Nothing) (packPTH "TestResultId")))
                    SqlInt64)
                   [])
                  True)
                 ((ForeignRef (HaskellName (packPTH "TestResult")))
                    ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
             [])
            [((((((FieldDef (HaskellName (packPTH "testKey")))
                    (DBName (packPTH "test_key")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for testKey")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "result")))
                    (DBName (packPTH "result")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for result")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "passingDate")))
                    (DBName (packPTH "passing_date")))
                   ((FTTypeCon Nothing) (packPTH "UTCTime")))
                  (SqlOther (packPTH "SqlType unset for passingDate")))
                 [])
                True)
               NoReference])
           [])
          [])
         [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
        (Data.Map.Internal.fromList []))
       False
       {entityFields = [((((((FieldDef (HaskellName (packPTH "testKey")))
                               (DBName (packPTH "test_key")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "result")))
                               (DBName (packPTH "result")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "passingDate")))
                               (DBName (packPTH "passing_date")))
                              ((FTTypeCon Nothing) (packPTH "UTCTime")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy UTCTime)))
                            [])
                           True)
                          NoReference],
        entityId = ((((((FieldDef (HaskellName (packPTH "Id")))
                          (DBName (packPTH "id")))
                         ((FTTypeCon Nothing) (packPTH "TestResultId")))
                        (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                           (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                       [])
                      True)
                     ((ForeignRef (HaskellName (packPTH "TestResult")))
                        ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))},
     (((((((((EntityDef (HaskellName (packPTH "User")))
               (DBName (packPTH "user")))
              (((((((FieldDef (HaskellName (packPTH "Id")))
                      (DBName (packPTH "id")))
                     ((FTTypeCon Nothing) (packPTH "UserId")))
                    SqlInt64)
                   [])
                  True)
                 ((ForeignRef (HaskellName (packPTH "User")))
                    ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
             [])
            [((((((FieldDef (HaskellName (packPTH "username")))
                    (DBName (packPTH "username")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for username")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "password")))
                    (DBName (packPTH "password")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for password")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "email")))
                    (DBName (packPTH "email")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for email")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "avatar")))
                    (DBName (packPTH "avatar")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for avatar")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "firstName")))
                    (DBName (packPTH "first_name")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for firstName")))
                 [packPTH "Maybe"])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "secondName")))
                    (DBName (packPTH "second_name")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for secondName")))
                 [packPTH "Maybe"])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "birthDay")))
                    (DBName (packPTH "birth_day")))
                   ((FTTypeCon Nothing) (packPTH "UTCTime")))
                  (SqlOther (packPTH "SqlType unset for birthDay")))
                 [packPTH "Maybe"])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "sex")))
                    (DBName (packPTH "sex")))
                   ((FTTypeCon Nothing) (packPTH "Int")))
                  (SqlOther (packPTH "SqlType unset for sex")))
                 [packPTH "Maybe"])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "createdTests")))
                    (DBName (packPTH "created_tests")))
                   (FTList ((FTTypeCon Nothing) (packPTH "ObjectId"))))
                  (SqlOther (packPTH "SqlType unset for createdTests")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "passedTests")))
                    (DBName (packPTH "passed_tests")))
                   (FTList ((FTTypeCon Nothing) (packPTH "TestResult"))))
                  (SqlOther (packPTH "SqlType unset for passedTests")))
                 [])
                True)
               (EmbedRef
                  ((EmbedEntityDef (HaskellName (packPTH "TestResult")))
                     [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing) Nothing,
                      ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                      ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                        Nothing]))])
           [(((UniqueDef (HaskellName (packPTH "Email")))
                (DBName (packPTH "email")))
               [(HaskellName (packPTH "email"), DBName (packPTH "email"))])
              [],
            (((UniqueDef (HaskellName (packPTH "Username")))
                (DBName (packPTH "username")))
               [(HaskellName (packPTH "username"), DBName (packPTH "username"))])
              []])
          [])
         [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
        (Data.Map.Internal.fromList []))
       False
       {entityFields = [((((((FieldDef (HaskellName (packPTH "username")))
                               (DBName (packPTH "username")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "password")))
                               (DBName (packPTH "password")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "email")))
                               (DBName (packPTH "email")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "avatar")))
                               (DBName (packPTH "avatar")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "firstName")))
                               (DBName (packPTH "first_name")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [packPTH "Maybe"])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "secondName")))
                               (DBName (packPTH "second_name")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [packPTH "Maybe"])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "birthDay")))
                               (DBName (packPTH "birth_day")))
                              ((FTTypeCon Nothing) (packPTH "UTCTime")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy UTCTime)))
                            [packPTH "Maybe"])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "sex")))
                               (DBName (packPTH "sex")))
                              ((FTTypeCon Nothing) (packPTH "Int")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Int)))
                            [packPTH "Maybe"])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "createdTests")))
                               (DBName (packPTH "created_tests")))
                              (FTList ((FTTypeCon Nothing) (packPTH "ObjectId"))))
                             SqlString)
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "passedTests")))
                               (DBName (packPTH "passed_tests")))
                              (FTList ((FTTypeCon Nothing) (packPTH "TestResult"))))
                             SqlString)
                            [])
                           True)
                          (EmbedRef
                             ((EmbedEntityDef (HaskellName (packPTH "TestResult")))
                                [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing) Nothing,
                                 ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                                 ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                                   Nothing]))],
        entityId = ((((((FieldDef (HaskellName (packPTH "Id")))
                          (DBName (packPTH "id")))
                         ((FTTypeCon Nothing) (packPTH "UserId")))
                        (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                           (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                       [])
                      True)
                     ((ForeignRef (HaskellName (packPTH "User")))
                        ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))}]
/home/nikita/Projects/labs/Databases/Course-Project/Server/src/Model/User.hs:(27,1)-(47,2): Splicing declarations
    share
      [mkPersist (mkPersistSettings (ConT ''MongoContext)),
       mkMigrate "migrateAll"]
      ([(((((((((EntityDef (HaskellName (packPTH "TestResult")))
                  (DBName (packPTH "test_result")))
                 (((((((FieldDef (HaskellName (packPTH "Id")))
                         (DBName (packPTH "id")))
                        ((FTTypeCon Nothing) (packPTH "TestResultId")))
                       SqlInt64)
                      [])
                     True)
                    ((ForeignRef (HaskellName (packPTH "TestResult")))
                       ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                [])
               [((((((FieldDef (HaskellName (packPTH "testKey")))
                       (DBName (packPTH "test_key")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for testKey")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "result")))
                       (DBName (packPTH "result")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for result")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "passingDate")))
                       (DBName (packPTH "passing_date")))
                      ((FTTypeCon Nothing) (packPTH "UTCTime")))
                     (SqlOther (packPTH "SqlType unset for passingDate")))
                    [])
                   True)
                  NoReference])
              [])
             [])
            [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
           (Data.Map.Internal.fromList []))
          False
          {entityFields = [((((((FieldDef (HaskellName (packPTH "testKey")))
                                  (DBName (packPTH "test_key")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "result")))
                                  (DBName (packPTH "result")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "passingDate")))
                                  (DBName (packPTH "passing_date")))
                                 ((FTTypeCon Nothing) (packPTH "UTCTime")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy UTCTime)))
                               [])
                              True)
                             NoReference],
           entityId = ((((((FieldDef (HaskellName (packPTH "Id")))
                             (DBName (packPTH "id")))
                            ((FTTypeCon Nothing) (packPTH "TestResultId")))
                           (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                              (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                          [])
                         True)
                        ((ForeignRef (HaskellName (packPTH "TestResult")))
                           ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))},
        (((((((((EntityDef (HaskellName (packPTH "User")))
                  (DBName (packPTH "user")))
                 (((((((FieldDef (HaskellName (packPTH "Id")))
                         (DBName (packPTH "id")))
                        ((FTTypeCon Nothing) (packPTH "UserId")))
                       SqlInt64)
                      [])
                     True)
                    ((ForeignRef (HaskellName (packPTH "User")))
                       ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                [])
               [((((((FieldDef (HaskellName (packPTH "username")))
                       (DBName (packPTH "username")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for username")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "password")))
                       (DBName (packPTH "password")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for password")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "email")))
                       (DBName (packPTH "email")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for email")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "avatar")))
                       (DBName (packPTH "avatar")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for avatar")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "firstName")))
                       (DBName (packPTH "first_name")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for firstName")))
                    [packPTH "Maybe"])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "secondName")))
                       (DBName (packPTH "second_name")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for secondName")))
                    [packPTH "Maybe"])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "birthDay")))
                       (DBName (packPTH "birth_day")))
                      ((FTTypeCon Nothing) (packPTH "UTCTime")))
                     (SqlOther (packPTH "SqlType unset for birthDay")))
                    [packPTH "Maybe"])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "sex")))
                       (DBName (packPTH "sex")))
                      ((FTTypeCon Nothing) (packPTH "Int")))
                     (SqlOther (packPTH "SqlType unset for sex")))
                    [packPTH "Maybe"])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "createdTests")))
                       (DBName (packPTH "created_tests")))
                      (FTList ((FTTypeCon Nothing) (packPTH "ObjectId"))))
                     (SqlOther (packPTH "SqlType unset for createdTests")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "passedTests")))
                       (DBName (packPTH "passed_tests")))
                      (FTList ((FTTypeCon Nothing) (packPTH "TestResult"))))
                     (SqlOther (packPTH "SqlType unset for passedTests")))
                    [])
                   True)
                  (EmbedRef
                     ((EmbedEntityDef (HaskellName (packPTH "TestResult")))
                        [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing) Nothing,
                         ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                         ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                           Nothing]))])
              [(((UniqueDef (HaskellName (packPTH "Email")))
                   (DBName (packPTH "email")))
                  [(HaskellName (packPTH "email"), DBName (packPTH "email"))])
                 [],
               (((UniqueDef (HaskellName (packPTH "Username")))
                   (DBName (packPTH "username")))
                  [(HaskellName (packPTH "username"), DBName (packPTH "username"))])
                 []])
             [])
            [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
           (Data.Map.Internal.fromList []))
          False
          {entityFields = [((((((FieldDef (HaskellName (packPTH "username")))
                                  (DBName (packPTH "username")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "password")))
                                  (DBName (packPTH "password")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "email")))
                                  (DBName (packPTH "email")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "avatar")))
                                  (DBName (packPTH "avatar")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "firstName")))
                                  (DBName (packPTH "first_name")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [packPTH "Maybe"])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "secondName")))
                                  (DBName (packPTH "second_name")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [packPTH "Maybe"])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "birthDay")))
                                  (DBName (packPTH "birth_day")))
                                 ((FTTypeCon Nothing) (packPTH "UTCTime")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy UTCTime)))
                               [packPTH "Maybe"])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "sex")))
                                  (DBName (packPTH "sex")))
                                 ((FTTypeCon Nothing) (packPTH "Int")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Int)))
                               [packPTH "Maybe"])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "createdTests")))
                                  (DBName (packPTH "created_tests")))
                                 (FTList ((FTTypeCon Nothing) (packPTH "ObjectId"))))
                                SqlString)
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "passedTests")))
                                  (DBName (packPTH "passed_tests")))
                                 (FTList ((FTTypeCon Nothing) (packPTH "TestResult"))))
                                SqlString)
                               [])
                              True)
                             (EmbedRef
                                ((EmbedEntityDef (HaskellName (packPTH "TestResult")))
                                   [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing) Nothing,
                                    ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                                    ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                                      Nothing]))],
           entityId = ((((((FieldDef (HaskellName (packPTH "Id")))
                             (DBName (packPTH "id")))
                            ((FTTypeCon Nothing) (packPTH "UserId")))
                           (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                              (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                          [])
                         True)
                        ((ForeignRef (HaskellName (packPTH "User")))
                           ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))}])
  ======>
    instance PersistField TestResult where
      toPersistValue
        = \ ent_aVW8
            -> (PersistMap
                  $ ((Prelude.zip
                        ((Prelude.map pack) ["testKey", "result", "passingDate"]))
                       ((Prelude.map toPersistValue) $ (toPersistFields ent_aVW8))))
      fromPersistValue
        = ((\ x_aVW9
              -> let
                   columns_aVWa
                     = unordered-containers-0.2.9.0:Data.HashMap.Strict.fromList x_aVW9
                 in
                   (fromPersistValues
                      $ ((Prelude.map
                            (\ name_aVWb
                               -> case
                                      (unordered-containers-0.2.9.0:Data.HashMap.Base.lookup
                                         (pack name_aVWb))
                                        columns_aVWa
                                  of
                                    Just v_aVWc -> v_aVWc
                                    Nothing -> PersistNull))
                           $ ["testKey", "result", "passingDate"])))
             <=< getPersistMap)
    instance persistent-2.8.1:Database.Persist.Sql.Class.PersistFieldSql TestResult where
      persistent-2.8.1:Database.Persist.Sql.Class.sqlType _ = SqlString
    instance PersistField User where
      toPersistValue
        = \ ent_aVWd
            -> (PersistMap
                  $ ((Prelude.zip
                        ((Prelude.map pack)
                           ["username", "password", "email", "avatar", "firstName",
                            "secondName", "birthDay", "sex", "createdTests", "passedTests"]))
                       ((Prelude.map toPersistValue) $ (toPersistFields ent_aVWd))))
      fromPersistValue
        = ((\ x_aVWe
              -> let
                   columns_aVWf
                     = unordered-containers-0.2.9.0:Data.HashMap.Strict.fromList x_aVWe
                 in
                   (fromPersistValues
                      $ ((Prelude.map
                            (\ name_aVWg
                               -> case
                                      (unordered-containers-0.2.9.0:Data.HashMap.Base.lookup
                                         (pack name_aVWg))
                                        columns_aVWf
                                  of
                                    Just v_aVWh -> v_aVWh
                                    Nothing -> PersistNull))
                           $ ["username", "password", "email", "avatar", "firstName",
                              "secondName", "birthDay", "sex", "createdTests", "passedTests"])))
             <=< getPersistMap)
    instance persistent-2.8.1:Database.Persist.Sql.Class.PersistFieldSql User where
      persistent-2.8.1:Database.Persist.Sql.Class.sqlType _ = SqlString
    data TestResult
      = TestResult {testResultTestKey :: !Text,
                    testResultResult :: !Text,
                    testResultPassingDate :: !UTCTime}
      deriving (Eq, Read, Show, Generic)
    type TestResultId = Key TestResult
    instance PersistEntity TestResult where
      type PersistEntityBackend TestResult = MongoContext
      data Unique TestResult
      newtype Key TestResult
        = TestResultKey {unTestResultKey :: (BackendKey MongoContext)}
        deriving (Show,
                  Read,
                  Eq,
                  Ord,
                  path-pieces-0.2.1:Web.PathPieces.PathPiece,
                  http-api-data-0.3.7.2:Web.Internal.HttpApiData.ToHttpApiData,
                  http-api-data-0.3.7.2:Web.Internal.HttpApiData.FromHttpApiData,
                  PersistField,
                  persistent-2.8.1:Database.Persist.Sql.Class.PersistFieldSql,
                  Aeson.ToJSON,
                  Aeson.FromJSON)
      data EntityField TestResult typ
        = typ ~ Key TestResult => TestResultId |
          typ ~ Text => TestResultTestKey |
          typ ~ Text => TestResultResult |
          typ ~ UTCTime => TestResultPassingDate
      keyToValues
        = ((ghc-prim-0.5.1.1:GHC.Types.: [])
             . (toPersistValue . unTestResultKey))
      keyFromValues
        = ((fmap TestResultKey)
             . (fromPersistValue . Database.Persist.TH.headNote))
      entityDef _
        = (((((((((EntityDef (HaskellName (packPTH "TestResult")))
                    (DBName (packPTH "test_result")))
                   (((((((FieldDef (HaskellName (packPTH "Id")))
                           (DBName (packPTH "id")))
                          ((FTTypeCon Nothing) (packPTH "TestResultId")))
                         SqlInt64)
                        [])
                       True)
                      ((ForeignRef (HaskellName (packPTH "TestResult")))
                         ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                  [])
                 [((((((FieldDef (HaskellName (packPTH "testKey")))
                         (DBName (packPTH "test_key")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "result")))
                         (DBName (packPTH "result")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "passingDate")))
                         (DBName (packPTH "passing_date")))
                        ((FTTypeCon Nothing) (packPTH "UTCTime")))
                       SqlDayTime)
                      [])
                     True)
                    NoReference])
                [])
               [])
              [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
             (Data.Map.Internal.fromList []))
            False
      toPersistFields (TestResult x_aVWi x_aVWj x_aVWk)
        = [SomePersistField x_aVWi, SomePersistField x_aVWj,
           SomePersistField x_aVWk]
      fromPersistValues [x1_aVWm, x2_aVWn, x3_aVWo]
        = TestResult
            <$>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "testKey")))
                 . fromPersistValue)
                x1_aVWm
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "result")))
                 . fromPersistValue)
                x2_aVWn
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "passingDate")))
                 . fromPersistValue)
                x3_aVWo
      fromPersistValues x_aVWl
        = (Left
             $ ((mappend (packPTH "TestResult: fromPersistValues failed on: "))
                  (pack $ (show x_aVWl))))
      persistUniqueToFieldNames _
        = error "Degenerate case, should never happen"
      persistUniqueToValues _
        = error "Degenerate case, should never happen"
      persistUniqueKeys
        (TestResult _testKey_aVWp _result_aVWq _passingDate_aVWr)
        = []
      persistFieldDef TestResultId
        = ((((((FieldDef (HaskellName (packPTH "Id")))
                 (DBName (packPTH "id")))
                ((FTTypeCon Nothing) (packPTH "TestResultId")))
               SqlInt64)
              [])
             True)
            ((ForeignRef (HaskellName (packPTH "TestResult")))
               ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))
      persistFieldDef TestResultTestKey
        = ((((((FieldDef (HaskellName (packPTH "testKey")))
                 (DBName (packPTH "test_key")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef TestResultResult
        = ((((((FieldDef (HaskellName (packPTH "result")))
                 (DBName (packPTH "result")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef TestResultPassingDate
        = ((((((FieldDef (HaskellName (packPTH "passingDate")))
                 (DBName (packPTH "passing_date")))
                ((FTTypeCon Nothing) (packPTH "UTCTime")))
               SqlDayTime)
              [])
             True)
            NoReference
      persistIdField = TestResultId
      fieldLens TestResultId
        = (lensPTH entityKey)
            (\ Entity _ value_aVWs key_aVWt -> (Entity key_aVWt) value_aVWs)
      fieldLens TestResultTestKey
        = (lensPTH (testResultTestKey . entityVal))
            (\ Entity key_aVWu value_aVWv x_aVWw
               -> (Entity key_aVWu) value_aVWv {testResultTestKey = x_aVWw})
      fieldLens TestResultResult
        = (lensPTH (testResultResult . entityVal))
            (\ Entity key_aVWu value_aVWv x_aVWw
               -> (Entity key_aVWu) value_aVWv {testResultResult = x_aVWw})
      fieldLens TestResultPassingDate
        = (lensPTH (testResultPassingDate . entityVal))
            (\ Entity key_aVWu value_aVWv x_aVWw
               -> (Entity key_aVWu) value_aVWv {testResultPassingDate = x_aVWw})
    instance ToBackendKey MongoContext TestResult where
      toBackendKey = unTestResultKey
      fromBackendKey = TestResultKey
    data User
      = User {userUsername :: !Text,
              userPassword :: !Text,
              userEmail :: !Text,
              userAvatar :: !Text,
              userFirstName :: !(Maybe Text),
              userSecondName :: !(Maybe Text),
              userBirthDay :: !(Maybe UTCTime),
              userSex :: !(Maybe Int),
              userCreatedTests :: ![ObjectId],
              userPassedTests :: ![TestResult]}
      deriving (Eq, Read, Show, Generic)
    type UserId = Key User
    instance PersistEntity User where
      type PersistEntityBackend User = MongoContext
      data Unique User = Email Text | Username Text
      newtype Key User
        = UserKey {unUserKey :: (BackendKey MongoContext)}
        deriving (Show,
                  Read,
                  Eq,
                  Ord,
                  path-pieces-0.2.1:Web.PathPieces.PathPiece,
                  http-api-data-0.3.7.2:Web.Internal.HttpApiData.ToHttpApiData,
                  http-api-data-0.3.7.2:Web.Internal.HttpApiData.FromHttpApiData,
                  PersistField,
                  persistent-2.8.1:Database.Persist.Sql.Class.PersistFieldSql,
                  Aeson.ToJSON,
                  Aeson.FromJSON)
      data EntityField User typ
        = typ ~ Key User => UserId |
          typ ~ Text => UserUsername |
          typ ~ Text => UserPassword |
          typ ~ Text => UserEmail |
          typ ~ Text => UserAvatar |
          typ ~ Maybe Text => UserFirstName |
          typ ~ Maybe Text => UserSecondName |
          typ ~ Maybe UTCTime => UserBirthDay |
          typ ~ Maybe Int => UserSex |
          typ ~ [ObjectId] => UserCreatedTests |
          typ ~ [TestResult] => UserPassedTests
      keyToValues
        = ((ghc-prim-0.5.1.1:GHC.Types.: [])
             . (toPersistValue . unUserKey))
      keyFromValues
        = ((fmap UserKey)
             . (fromPersistValue . Database.Persist.TH.headNote))
      entityDef _
        = (((((((((EntityDef (HaskellName (packPTH "User")))
                    (DBName (packPTH "user")))
                   (((((((FieldDef (HaskellName (packPTH "Id")))
                           (DBName (packPTH "id")))
                          ((FTTypeCon Nothing) (packPTH "UserId")))
                         SqlInt64)
                        [])
                       True)
                      ((ForeignRef (HaskellName (packPTH "User")))
                         ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                  [])
                 [((((((FieldDef (HaskellName (packPTH "username")))
                         (DBName (packPTH "username")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "password")))
                         (DBName (packPTH "password")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "email")))
                         (DBName (packPTH "email")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "avatar")))
                         (DBName (packPTH "avatar")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "firstName")))
                         (DBName (packPTH "first_name")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [packPTH "Maybe"])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "secondName")))
                         (DBName (packPTH "second_name")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [packPTH "Maybe"])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "birthDay")))
                         (DBName (packPTH "birth_day")))
                        ((FTTypeCon Nothing) (packPTH "UTCTime")))
                       SqlDayTime)
                      [packPTH "Maybe"])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "sex")))
                         (DBName (packPTH "sex")))
                        ((FTTypeCon Nothing) (packPTH "Int")))
                       SqlInt64)
                      [packPTH "Maybe"])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "createdTests")))
                         (DBName (packPTH "created_tests")))
                        (FTList ((FTTypeCon Nothing) (packPTH "ObjectId"))))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "passedTests")))
                         (DBName (packPTH "passed_tests")))
                        (FTList ((FTTypeCon Nothing) (packPTH "TestResult"))))
                       SqlString)
                      [])
                     True)
                    (EmbedRef
                       ((EmbedEntityDef (HaskellName (packPTH "TestResult")))
                          [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing) Nothing,
                           ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                           ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                             Nothing]))])
                [(((UniqueDef (HaskellName (packPTH "Email")))
                     (DBName (packPTH "email")))
                    [(HaskellName (packPTH "email"), DBName (packPTH "email"))])
                   [],
                 (((UniqueDef (HaskellName (packPTH "Username")))
                     (DBName (packPTH "username")))
                    [(HaskellName (packPTH "username"), DBName (packPTH "username"))])
                   []])
               [])
              [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
             (Data.Map.Internal.fromList []))
            False
      toPersistFields
        (User x_aVWx
              x_aVWy
              x_aVWz
              x_aVWA
              x_aVWB
              x_aVWC
              x_aVWD
              x_aVWE
              x_aVWF
              x_aVWG)
        = [SomePersistField x_aVWx, SomePersistField x_aVWy,
           SomePersistField x_aVWz, SomePersistField x_aVWA,
           SomePersistField x_aVWB, SomePersistField x_aVWC,
           SomePersistField x_aVWD, SomePersistField x_aVWE,
           SomePersistField x_aVWF, SomePersistField x_aVWG]
      fromPersistValues
        [x1_aVWI,
         x2_aVWJ,
         x3_aVWK,
         x4_aVWL,
         x5_aVWM,
         x6_aVWN,
         x7_aVWO,
         x8_aVWP,
         x9_aVWQ,
         x10_aVWR]
        = User
            <$>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "username")))
                 . fromPersistValue)
                x1_aVWI
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "password")))
                 . fromPersistValue)
                x2_aVWJ
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "email")))
                 . fromPersistValue)
                x3_aVWK
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "avatar")))
                 . fromPersistValue)
                x4_aVWL
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "firstName")))
                 . fromPersistValue)
                x5_aVWM
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "secondName")))
                 . fromPersistValue)
                x6_aVWN
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "birthDay")))
                 . fromPersistValue)
                x7_aVWO
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "sex")))
                 . fromPersistValue)
                x8_aVWP
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "createdTests")))
                 . fromPersistValue)
                x9_aVWQ
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "passedTests")))
                 . fromPersistValue)
                x10_aVWR
      fromPersistValues x_aVWH
        = (Left
             $ ((mappend (packPTH "User: fromPersistValues failed on: "))
                  (pack $ (show x_aVWH))))
      persistUniqueToFieldNames Email {}
        = [(HaskellName (packPTH "email"), DBName (packPTH "email"))]
      persistUniqueToFieldNames Username {}
        = [(HaskellName (packPTH "username"), DBName (packPTH "username"))]
      persistUniqueToValues (Email x_aVWS) = [toPersistValue x_aVWS]
      persistUniqueToValues (Username x_aVWT) = [toPersistValue x_aVWT]
      persistUniqueKeys
        (User _username_aVWU
              _password_aVWV
              _email_aVWW
              _avatar_aVWX
              _firstName_aVWY
              _secondName_aVWZ
              _birthDay_aVX0
              _sex_aVX1
              _createdTests_aVX2
              _passedTests_aVX3)
        = [Email _email_aVWW, Username _username_aVWU]
      persistFieldDef UserId
        = ((((((FieldDef (HaskellName (packPTH "Id")))
                 (DBName (packPTH "id")))
                ((FTTypeCon Nothing) (packPTH "UserId")))
               SqlInt64)
              [])
             True)
            ((ForeignRef (HaskellName (packPTH "User")))
               ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))
      persistFieldDef UserUsername
        = ((((((FieldDef (HaskellName (packPTH "username")))
                 (DBName (packPTH "username")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef UserPassword
        = ((((((FieldDef (HaskellName (packPTH "password")))
                 (DBName (packPTH "password")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef UserEmail
        = ((((((FieldDef (HaskellName (packPTH "email")))
                 (DBName (packPTH "email")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef UserAvatar
        = ((((((FieldDef (HaskellName (packPTH "avatar")))
                 (DBName (packPTH "avatar")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef UserFirstName
        = ((((((FieldDef (HaskellName (packPTH "firstName")))
                 (DBName (packPTH "first_name")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [packPTH "Maybe"])
             True)
            NoReference
      persistFieldDef UserSecondName
        = ((((((FieldDef (HaskellName (packPTH "secondName")))
                 (DBName (packPTH "second_name")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [packPTH "Maybe"])
             True)
            NoReference
      persistFieldDef UserBirthDay
        = ((((((FieldDef (HaskellName (packPTH "birthDay")))
                 (DBName (packPTH "birth_day")))
                ((FTTypeCon Nothing) (packPTH "UTCTime")))
               SqlDayTime)
              [packPTH "Maybe"])
             True)
            NoReference
      persistFieldDef UserSex
        = ((((((FieldDef (HaskellName (packPTH "sex")))
                 (DBName (packPTH "sex")))
                ((FTTypeCon Nothing) (packPTH "Int")))
               SqlInt64)
              [packPTH "Maybe"])
             True)
            NoReference
      persistFieldDef UserCreatedTests
        = ((((((FieldDef (HaskellName (packPTH "createdTests")))
                 (DBName (packPTH "created_tests")))
                (FTList ((FTTypeCon Nothing) (packPTH "ObjectId"))))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef UserPassedTests
        = ((((((FieldDef (HaskellName (packPTH "passedTests")))
                 (DBName (packPTH "passed_tests")))
                (FTList ((FTTypeCon Nothing) (packPTH "TestResult"))))
               SqlString)
              [])
             True)
            (EmbedRef
               ((EmbedEntityDef (HaskellName (packPTH "TestResult")))
                  [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing) Nothing,
                   ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                   ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                     Nothing]))
      persistIdField = UserId
      fieldLens UserId
        = (lensPTH entityKey)
            (\ Entity _ value_aVX4 key_aVX5 -> (Entity key_aVX5) value_aVX4)
      fieldLens UserUsername
        = (lensPTH (userUsername . entityVal))
            (\ Entity key_aVX6 value_aVX7 x_aVX8
               -> (Entity key_aVX6) value_aVX7 {userUsername = x_aVX8})
      fieldLens UserPassword
        = (lensPTH (userPassword . entityVal))
            (\ Entity key_aVX6 value_aVX7 x_aVX8
               -> (Entity key_aVX6) value_aVX7 {userPassword = x_aVX8})
      fieldLens UserEmail
        = (lensPTH (userEmail . entityVal))
            (\ Entity key_aVX6 value_aVX7 x_aVX8
               -> (Entity key_aVX6) value_aVX7 {userEmail = x_aVX8})
      fieldLens UserAvatar
        = (lensPTH (userAvatar . entityVal))
            (\ Entity key_aVX6 value_aVX7 x_aVX8
               -> (Entity key_aVX6) value_aVX7 {userAvatar = x_aVX8})
      fieldLens UserFirstName
        = (lensPTH (userFirstName . entityVal))
            (\ Entity key_aVX6 value_aVX7 x_aVX8
               -> (Entity key_aVX6) value_aVX7 {userFirstName = x_aVX8})
      fieldLens UserSecondName
        = (lensPTH (userSecondName . entityVal))
            (\ Entity key_aVX6 value_aVX7 x_aVX8
               -> (Entity key_aVX6) value_aVX7 {userSecondName = x_aVX8})
      fieldLens UserBirthDay
        = (lensPTH (userBirthDay . entityVal))
            (\ Entity key_aVX6 value_aVX7 x_aVX8
               -> (Entity key_aVX6) value_aVX7 {userBirthDay = x_aVX8})
      fieldLens UserSex
        = (lensPTH (userSex . entityVal))
            (\ Entity key_aVX6 value_aVX7 x_aVX8
               -> (Entity key_aVX6) value_aVX7 {userSex = x_aVX8})
      fieldLens UserCreatedTests
        = (lensPTH (userCreatedTests . entityVal))
            (\ Entity key_aVX6 value_aVX7 x_aVX8
               -> (Entity key_aVX6) value_aVX7 {userCreatedTests = x_aVX8})
      fieldLens UserPassedTests
        = (lensPTH (userPassedTests . entityVal))
            (\ Entity key_aVX6 value_aVX7 x_aVX8
               -> (Entity key_aVX6) value_aVX7 {userPassedTests = x_aVX8})
    instance ToBackendKey MongoContext User where
      toBackendKey = unUserKey
      fromBackendKey = UserKey
    migrateAll :: persistent-2.8.1:Database.Persist.Sql.Types.Migration
    migrateAll
      = do let defs_aVX9
                 = [(((((((((EntityDef (HaskellName (packPTH "TestResult")))
                              (DBName (packPTH "test_result")))
                             (((((((FieldDef (HaskellName (packPTH "Id")))
                                     (DBName (packPTH "id")))
                                    ((FTTypeCon Nothing) (packPTH "TestResultId")))
                                   SqlInt64)
                                  [])
                                 True)
                                ((ForeignRef (HaskellName (packPTH "TestResult")))
                                   ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                            [])
                           [((((((FieldDef (HaskellName (packPTH "testKey")))
                                   (DBName (packPTH "test_key")))
                                  ((FTTypeCon Nothing) (packPTH "Text")))
                                 SqlString)
                                [])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "result")))
                                   (DBName (packPTH "result")))
                                  ((FTTypeCon Nothing) (packPTH "Text")))
                                 SqlString)
                                [])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "passingDate")))
                                   (DBName (packPTH "passing_date")))
                                  ((FTTypeCon Nothing) (packPTH "UTCTime")))
                                 SqlDayTime)
                                [])
                               True)
                              NoReference])
                          [])
                         [])
                        [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
                       (Data.Map.Internal.fromList []))
                      False,
                    (((((((((EntityDef (HaskellName (packPTH "User")))
                              (DBName (packPTH "user")))
                             (((((((FieldDef (HaskellName (packPTH "Id")))
                                     (DBName (packPTH "id")))
                                    ((FTTypeCon Nothing) (packPTH "UserId")))
                                   SqlInt64)
                                  [])
                                 True)
                                ((ForeignRef (HaskellName (packPTH "User")))
                                   ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                            [])
                           [((((((FieldDef (HaskellName (packPTH "username")))
                                   (DBName (packPTH "username")))
                                  ((FTTypeCon Nothing) (packPTH "Text")))
                                 SqlString)
                                [])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "password")))
                                   (DBName (packPTH "password")))
                                  ((FTTypeCon Nothing) (packPTH "Text")))
                                 SqlString)
                                [])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "email")))
                                   (DBName (packPTH "email")))
                                  ((FTTypeCon Nothing) (packPTH "Text")))
                                 SqlString)
                                [])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "avatar")))
                                   (DBName (packPTH "avatar")))
                                  ((FTTypeCon Nothing) (packPTH "Text")))
                                 SqlString)
                                [])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "firstName")))
                                   (DBName (packPTH "first_name")))
                                  ((FTTypeCon Nothing) (packPTH "Text")))
                                 SqlString)
                                [packPTH "Maybe"])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "secondName")))
                                   (DBName (packPTH "second_name")))
                                  ((FTTypeCon Nothing) (packPTH "Text")))
                                 SqlString)
                                [packPTH "Maybe"])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "birthDay")))
                                   (DBName (packPTH "birth_day")))
                                  ((FTTypeCon Nothing) (packPTH "UTCTime")))
                                 SqlDayTime)
                                [packPTH "Maybe"])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "sex")))
                                   (DBName (packPTH "sex")))
                                  ((FTTypeCon Nothing) (packPTH "Int")))
                                 SqlInt64)
                                [packPTH "Maybe"])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "createdTests")))
                                   (DBName (packPTH "created_tests")))
                                  (FTList ((FTTypeCon Nothing) (packPTH "ObjectId"))))
                                 SqlString)
                                [])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "passedTests")))
                                   (DBName (packPTH "passed_tests")))
                                  (FTList ((FTTypeCon Nothing) (packPTH "TestResult"))))
                                 SqlString)
                                [])
                               True)
                              (EmbedRef
                                 ((EmbedEntityDef (HaskellName (packPTH "TestResult")))
                                    [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing)
                                       Nothing,
                                     ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                                     ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                                       Nothing]))])
                          [(((UniqueDef (HaskellName (packPTH "Email")))
                               (DBName (packPTH "email")))
                              [(HaskellName (packPTH "email"), DBName (packPTH "email"))])
                             [],
                           (((UniqueDef (HaskellName (packPTH "Username")))
                               (DBName (packPTH "username")))
                              [(HaskellName (packPTH "username"), DBName (packPTH "username"))])
                             []])
                         [])
                        [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
                       (Data.Map.Internal.fromList []))
                      False]
           (persistent-2.8.1:Database.Persist.Sql.Migration.migrate defs_aVX9)
             ((((((((((EntityDef (HaskellName (packPTH "TestResult")))
                        (DBName (packPTH "test_result")))
                       (((((((FieldDef (HaskellName (packPTH "Id")))
                               (DBName (packPTH "id")))
                              ((FTTypeCon Nothing) (packPTH "TestResultId")))
                             SqlInt64)
                            [])
                           True)
                          ((ForeignRef (HaskellName (packPTH "TestResult")))
                             ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                      [])
                     [((((((FieldDef (HaskellName (packPTH "testKey")))
                             (DBName (packPTH "test_key")))
                            ((FTTypeCon Nothing) (packPTH "Text")))
                           SqlString)
                          [])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "result")))
                             (DBName (packPTH "result")))
                            ((FTTypeCon Nothing) (packPTH "Text")))
                           SqlString)
                          [])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "passingDate")))
                             (DBName (packPTH "passing_date")))
                            ((FTTypeCon Nothing) (packPTH "UTCTime")))
                           SqlDayTime)
                          [])
                         True)
                        NoReference])
                    [])
                   [])
                  [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
                 (Data.Map.Internal.fromList []))
                False)
           (persistent-2.8.1:Database.Persist.Sql.Migration.migrate defs_aVX9)
             ((((((((((EntityDef (HaskellName (packPTH "User")))
                        (DBName (packPTH "user")))
                       (((((((FieldDef (HaskellName (packPTH "Id")))
                               (DBName (packPTH "id")))
                              ((FTTypeCon Nothing) (packPTH "UserId")))
                             SqlInt64)
                            [])
                           True)
                          ((ForeignRef (HaskellName (packPTH "User")))
                             ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                      [])
                     [((((((FieldDef (HaskellName (packPTH "username")))
                             (DBName (packPTH "username")))
                            ((FTTypeCon Nothing) (packPTH "Text")))
                           SqlString)
                          [])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "password")))
                             (DBName (packPTH "password")))
                            ((FTTypeCon Nothing) (packPTH "Text")))
                           SqlString)
                          [])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "email")))
                             (DBName (packPTH "email")))
                            ((FTTypeCon Nothing) (packPTH "Text")))
                           SqlString)
                          [])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "avatar")))
                             (DBName (packPTH "avatar")))
                            ((FTTypeCon Nothing) (packPTH "Text")))
                           SqlString)
                          [])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "firstName")))
                             (DBName (packPTH "first_name")))
                            ((FTTypeCon Nothing) (packPTH "Text")))
                           SqlString)
                          [packPTH "Maybe"])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "secondName")))
                             (DBName (packPTH "second_name")))
                            ((FTTypeCon Nothing) (packPTH "Text")))
                           SqlString)
                          [packPTH "Maybe"])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "birthDay")))
                             (DBName (packPTH "birth_day")))
                            ((FTTypeCon Nothing) (packPTH "UTCTime")))
                           SqlDayTime)
                          [packPTH "Maybe"])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "sex")))
                             (DBName (packPTH "sex")))
                            ((FTTypeCon Nothing) (packPTH "Int")))
                           SqlInt64)
                          [packPTH "Maybe"])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "createdTests")))
                             (DBName (packPTH "created_tests")))
                            (FTList ((FTTypeCon Nothing) (packPTH "ObjectId"))))
                           SqlString)
                          [])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "passedTests")))
                             (DBName (packPTH "passed_tests")))
                            (FTList ((FTTypeCon Nothing) (packPTH "TestResult"))))
                           SqlString)
                          [])
                         True)
                        (EmbedRef
                           ((EmbedEntityDef (HaskellName (packPTH "TestResult")))
                              [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing) Nothing,
                               ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                               ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                                 Nothing]))])
                    [(((UniqueDef (HaskellName (packPTH "Email")))
                         (DBName (packPTH "email")))
                        [(HaskellName (packPTH "email"), DBName (packPTH "email"))])
                       [],
                     (((UniqueDef (HaskellName (packPTH "Username")))
                         (DBName (packPTH "username")))
                        [(HaskellName (packPTH "username"), DBName (packPTH "username"))])
                       []])
                   [])
                  [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
                 (Data.Map.Internal.fromList []))
                False)
/home/nikita/Projects/labs/Databases/Course-Project/Server/src/Model/User.hs:(27,103)-(47,2): Splicing expression
    Language.Haskell.TH.Quote.quoteExp
      persistLowerCase
      "\n\
      \TestResult\n\
      \  testKey       Text\n\
      \  result        Text\n\
      \  passingDate   UTCTime\n\
      \  deriving      Eq Read Show Generic\n\
      \User\n\
      \  username      Text\n\
      \  password      Text\n\
      \  email         Text\n\
      \  avatar        Text\n\
      \  firstName     Text Maybe\n\
      \  secondName    Text Maybe\n\
      \  birthDay      UTCTime Maybe\n\
      \  sex           Int Maybe\n\
      \  createdTests  [ObjectId]\n\
      \  passedTests   [TestResult]\n\
      \  Email         email\n\
      \  Username      username\n\
      \  deriving      Eq Read Show Generic\n"
  ======>
    [(((((((((EntityDef (HaskellName (packPTH "TestResult")))
               (DBName (packPTH "test_result")))
              (((((((FieldDef (HaskellName (packPTH "Id")))
                      (DBName (packPTH "id")))
                     ((FTTypeCon Nothing) (packPTH "TestResultId")))
                    SqlInt64)
                   [])
                  True)
                 ((ForeignRef (HaskellName (packPTH "TestResult")))
                    ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
             [])
            [((((((FieldDef (HaskellName (packPTH "testKey")))
                    (DBName (packPTH "test_key")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for testKey")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "result")))
                    (DBName (packPTH "result")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for result")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "passingDate")))
                    (DBName (packPTH "passing_date")))
                   ((FTTypeCon Nothing) (packPTH "UTCTime")))
                  (SqlOther (packPTH "SqlType unset for passingDate")))
                 [])
                True)
               NoReference])
           [])
          [])
         [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
        (Data.Map.Internal.fromList []))
       False
       {entityFields = [((((((FieldDef (HaskellName (packPTH "testKey")))
                               (DBName (packPTH "test_key")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "result")))
                               (DBName (packPTH "result")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "passingDate")))
                               (DBName (packPTH "passing_date")))
                              ((FTTypeCon Nothing) (packPTH "UTCTime")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy UTCTime)))
                            [])
                           True)
                          NoReference],
        entityId = ((((((FieldDef (HaskellName (packPTH "Id")))
                          (DBName (packPTH "id")))
                         ((FTTypeCon Nothing) (packPTH "TestResultId")))
                        (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                           (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                       [])
                      True)
                     ((ForeignRef (HaskellName (packPTH "TestResult")))
                        ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))},
     (((((((((EntityDef (HaskellName (packPTH "User")))
               (DBName (packPTH "user")))
              (((((((FieldDef (HaskellName (packPTH "Id")))
                      (DBName (packPTH "id")))
                     ((FTTypeCon Nothing) (packPTH "UserId")))
                    SqlInt64)
                   [])
                  True)
                 ((ForeignRef (HaskellName (packPTH "User")))
                    ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
             [])
            [((((((FieldDef (HaskellName (packPTH "username")))
                    (DBName (packPTH "username")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for username")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "password")))
                    (DBName (packPTH "password")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for password")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "email")))
                    (DBName (packPTH "email")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for email")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "avatar")))
                    (DBName (packPTH "avatar")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for avatar")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "firstName")))
                    (DBName (packPTH "first_name")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for firstName")))
                 [packPTH "Maybe"])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "secondName")))
                    (DBName (packPTH "second_name")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for secondName")))
                 [packPTH "Maybe"])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "birthDay")))
                    (DBName (packPTH "birth_day")))
                   ((FTTypeCon Nothing) (packPTH "UTCTime")))
                  (SqlOther (packPTH "SqlType unset for birthDay")))
                 [packPTH "Maybe"])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "sex")))
                    (DBName (packPTH "sex")))
                   ((FTTypeCon Nothing) (packPTH "Int")))
                  (SqlOther (packPTH "SqlType unset for sex")))
                 [packPTH "Maybe"])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "createdTests")))
                    (DBName (packPTH "created_tests")))
                   (FTList ((FTTypeCon Nothing) (packPTH "ObjectId"))))
                  (SqlOther (packPTH "SqlType unset for createdTests")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "passedTests")))
                    (DBName (packPTH "passed_tests")))
                   (FTList ((FTTypeCon Nothing) (packPTH "TestResult"))))
                  (SqlOther (packPTH "SqlType unset for passedTests")))
                 [])
                True)
               (EmbedRef
                  ((EmbedEntityDef (HaskellName (packPTH "TestResult")))
                     [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing) Nothing,
                      ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                      ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                        Nothing]))])
           [(((UniqueDef (HaskellName (packPTH "Email")))
                (DBName (packPTH "email")))
               [(HaskellName (packPTH "email"), DBName (packPTH "email"))])
              [],
            (((UniqueDef (HaskellName (packPTH "Username")))
                (DBName (packPTH "username")))
               [(HaskellName (packPTH "username"), DBName (packPTH "username"))])
              []])
          [])
         [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
        (Data.Map.Internal.fromList []))
       False
       {entityFields = [((((((FieldDef (HaskellName (packPTH "username")))
                               (DBName (packPTH "username")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "password")))
                               (DBName (packPTH "password")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "email")))
                               (DBName (packPTH "email")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "avatar")))
                               (DBName (packPTH "avatar")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "firstName")))
                               (DBName (packPTH "first_name")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [packPTH "Maybe"])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "secondName")))
                               (DBName (packPTH "second_name")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [packPTH "Maybe"])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "birthDay")))
                               (DBName (packPTH "birth_day")))
                              ((FTTypeCon Nothing) (packPTH "UTCTime")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy UTCTime)))
                            [packPTH "Maybe"])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "sex")))
                               (DBName (packPTH "sex")))
                              ((FTTypeCon Nothing) (packPTH "Int")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Int)))
                            [packPTH "Maybe"])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "createdTests")))
                               (DBName (packPTH "created_tests")))
                              (FTList ((FTTypeCon Nothing) (packPTH "ObjectId"))))
                             SqlString)
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "passedTests")))
                               (DBName (packPTH "passed_tests")))
                              (FTList ((FTTypeCon Nothing) (packPTH "TestResult"))))
                             SqlString)
                            [])
                           True)
                          (EmbedRef
                             ((EmbedEntityDef (HaskellName (packPTH "TestResult")))
                                [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing) Nothing,
                                 ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                                 ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                                   Nothing]))],
        entityId = ((((((FieldDef (HaskellName (packPTH "Id")))
                          (DBName (packPTH "id")))
                         ((FTTypeCon Nothing) (packPTH "UserId")))
                        (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                           (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                       [])
                      True)
                     ((ForeignRef (HaskellName (packPTH "User")))
                        ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))}]
/home/nikita/Projects/labs/Databases/Course-Project/Server/src/Model/User.hs:(27,1)-(47,2): Splicing declarations
    share
      [mkPersist (mkPersistSettings (ConT ''MongoContext)),
       mkMigrate "migrateAll"]
      ([(((((((((EntityDef (HaskellName (packPTH "TestResult")))
                  (DBName (packPTH "test_result")))
                 (((((((FieldDef (HaskellName (packPTH "Id")))
                         (DBName (packPTH "id")))
                        ((FTTypeCon Nothing) (packPTH "TestResultId")))
                       SqlInt64)
                      [])
                     True)
                    ((ForeignRef (HaskellName (packPTH "TestResult")))
                       ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                [])
               [((((((FieldDef (HaskellName (packPTH "testKey")))
                       (DBName (packPTH "test_key")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for testKey")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "result")))
                       (DBName (packPTH "result")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for result")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "passingDate")))
                       (DBName (packPTH "passing_date")))
                      ((FTTypeCon Nothing) (packPTH "UTCTime")))
                     (SqlOther (packPTH "SqlType unset for passingDate")))
                    [])
                   True)
                  NoReference])
              [])
             [])
            [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
           (Data.Map.Internal.fromList []))
          False
          {entityFields = [((((((FieldDef (HaskellName (packPTH "testKey")))
                                  (DBName (packPTH "test_key")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "result")))
                                  (DBName (packPTH "result")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "passingDate")))
                                  (DBName (packPTH "passing_date")))
                                 ((FTTypeCon Nothing) (packPTH "UTCTime")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy UTCTime)))
                               [])
                              True)
                             NoReference],
           entityId = ((((((FieldDef (HaskellName (packPTH "Id")))
                             (DBName (packPTH "id")))
                            ((FTTypeCon Nothing) (packPTH "TestResultId")))
                           (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                              (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                          [])
                         True)
                        ((ForeignRef (HaskellName (packPTH "TestResult")))
                           ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))},
        (((((((((EntityDef (HaskellName (packPTH "User")))
                  (DBName (packPTH "user")))
                 (((((((FieldDef (HaskellName (packPTH "Id")))
                         (DBName (packPTH "id")))
                        ((FTTypeCon Nothing) (packPTH "UserId")))
                       SqlInt64)
                      [])
                     True)
                    ((ForeignRef (HaskellName (packPTH "User")))
                       ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                [])
               [((((((FieldDef (HaskellName (packPTH "username")))
                       (DBName (packPTH "username")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for username")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "password")))
                       (DBName (packPTH "password")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for password")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "email")))
                       (DBName (packPTH "email")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for email")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "avatar")))
                       (DBName (packPTH "avatar")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for avatar")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "firstName")))
                       (DBName (packPTH "first_name")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for firstName")))
                    [packPTH "Maybe"])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "secondName")))
                       (DBName (packPTH "second_name")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for secondName")))
                    [packPTH "Maybe"])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "birthDay")))
                       (DBName (packPTH "birth_day")))
                      ((FTTypeCon Nothing) (packPTH "UTCTime")))
                     (SqlOther (packPTH "SqlType unset for birthDay")))
                    [packPTH "Maybe"])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "sex")))
                       (DBName (packPTH "sex")))
                      ((FTTypeCon Nothing) (packPTH "Int")))
                     (SqlOther (packPTH "SqlType unset for sex")))
                    [packPTH "Maybe"])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "createdTests")))
                       (DBName (packPTH "created_tests")))
                      (FTList ((FTTypeCon Nothing) (packPTH "ObjectId"))))
                     (SqlOther (packPTH "SqlType unset for createdTests")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "passedTests")))
                       (DBName (packPTH "passed_tests")))
                      (FTList ((FTTypeCon Nothing) (packPTH "TestResult"))))
                     (SqlOther (packPTH "SqlType unset for passedTests")))
                    [])
                   True)
                  (EmbedRef
                     ((EmbedEntityDef (HaskellName (packPTH "TestResult")))
                        [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing) Nothing,
                         ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                         ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                           Nothing]))])
              [(((UniqueDef (HaskellName (packPTH "Email")))
                   (DBName (packPTH "email")))
                  [(HaskellName (packPTH "email"), DBName (packPTH "email"))])
                 [],
               (((UniqueDef (HaskellName (packPTH "Username")))
                   (DBName (packPTH "username")))
                  [(HaskellName (packPTH "username"), DBName (packPTH "username"))])
                 []])
             [])
            [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
           (Data.Map.Internal.fromList []))
          False
          {entityFields = [((((((FieldDef (HaskellName (packPTH "username")))
                                  (DBName (packPTH "username")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "password")))
                                  (DBName (packPTH "password")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "email")))
                                  (DBName (packPTH "email")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "avatar")))
                                  (DBName (packPTH "avatar")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "firstName")))
                                  (DBName (packPTH "first_name")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [packPTH "Maybe"])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "secondName")))
                                  (DBName (packPTH "second_name")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [packPTH "Maybe"])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "birthDay")))
                                  (DBName (packPTH "birth_day")))
                                 ((FTTypeCon Nothing) (packPTH "UTCTime")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy UTCTime)))
                               [packPTH "Maybe"])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "sex")))
                                  (DBName (packPTH "sex")))
                                 ((FTTypeCon Nothing) (packPTH "Int")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Int)))
                               [packPTH "Maybe"])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "createdTests")))
                                  (DBName (packPTH "created_tests")))
                                 (FTList ((FTTypeCon Nothing) (packPTH "ObjectId"))))
                                SqlString)
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "passedTests")))
                                  (DBName (packPTH "passed_tests")))
                                 (FTList ((FTTypeCon Nothing) (packPTH "TestResult"))))
                                SqlString)
                               [])
                              True)
                             (EmbedRef
                                ((EmbedEntityDef (HaskellName (packPTH "TestResult")))
                                   [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing) Nothing,
                                    ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                                    ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                                      Nothing]))],
           entityId = ((((((FieldDef (HaskellName (packPTH "Id")))
                             (DBName (packPTH "id")))
                            ((FTTypeCon Nothing) (packPTH "UserId")))
                           (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                              (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                          [])
                         True)
                        ((ForeignRef (HaskellName (packPTH "User")))
                           ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))}])
  ======>
    instance PersistField TestResult where
      toPersistValue
        = \ ent_aZAn
            -> (PersistMap
                  $ ((Prelude.zip
                        ((Prelude.map pack) ["testKey", "result", "passingDate"]))
                       ((Prelude.map toPersistValue) $ (toPersistFields ent_aZAn))))
      fromPersistValue
        = ((\ x_aZAo
              -> let
                   columns_aZAp
                     = unordered-containers-0.2.9.0:Data.HashMap.Strict.fromList x_aZAo
                 in
                   (fromPersistValues
                      $ ((Prelude.map
                            (\ name_aZAq
                               -> case
                                      (unordered-containers-0.2.9.0:Data.HashMap.Base.lookup
                                         (pack name_aZAq))
                                        columns_aZAp
                                  of
                                    Just v_aZAr -> v_aZAr
                                    Nothing -> PersistNull))
                           $ ["testKey", "result", "passingDate"])))
             <=< getPersistMap)
    instance persistent-2.8.1:Database.Persist.Sql.Class.PersistFieldSql TestResult where
      persistent-2.8.1:Database.Persist.Sql.Class.sqlType _ = SqlString
    instance PersistField User where
      toPersistValue
        = \ ent_aZAs
            -> (PersistMap
                  $ ((Prelude.zip
                        ((Prelude.map pack)
                           ["username", "password", "email", "avatar", "firstName",
                            "secondName", "birthDay", "sex", "createdTests", "passedTests"]))
                       ((Prelude.map toPersistValue) $ (toPersistFields ent_aZAs))))
      fromPersistValue
        = ((\ x_aZAt
              -> let
                   columns_aZAu
                     = unordered-containers-0.2.9.0:Data.HashMap.Strict.fromList x_aZAt
                 in
                   (fromPersistValues
                      $ ((Prelude.map
                            (\ name_aZAv
                               -> case
                                      (unordered-containers-0.2.9.0:Data.HashMap.Base.lookup
                                         (pack name_aZAv))
                                        columns_aZAu
                                  of
                                    Just v_aZAw -> v_aZAw
                                    Nothing -> PersistNull))
                           $ ["username", "password", "email", "avatar", "firstName",
                              "secondName", "birthDay", "sex", "createdTests", "passedTests"])))
             <=< getPersistMap)
    instance persistent-2.8.1:Database.Persist.Sql.Class.PersistFieldSql User where
      persistent-2.8.1:Database.Persist.Sql.Class.sqlType _ = SqlString
    data TestResult
      = TestResult {testResultTestKey :: !Text,
                    testResultResult :: !Text,
                    testResultPassingDate :: !UTCTime}
      deriving (Eq, Read, Show, Generic)
    type TestResultId = Key TestResult
    instance PersistEntity TestResult where
      type PersistEntityBackend TestResult = MongoContext
      data Unique TestResult
      newtype Key TestResult
        = TestResultKey {unTestResultKey :: (BackendKey MongoContext)}
        deriving (Show,
                  Read,
                  Eq,
                  Ord,
                  path-pieces-0.2.1:Web.PathPieces.PathPiece,
                  http-api-data-0.3.7.2:Web.Internal.HttpApiData.ToHttpApiData,
                  http-api-data-0.3.7.2:Web.Internal.HttpApiData.FromHttpApiData,
                  PersistField,
                  persistent-2.8.1:Database.Persist.Sql.Class.PersistFieldSql,
                  Aeson.ToJSON,
                  Aeson.FromJSON)
      data EntityField TestResult typ
        = typ ~ Key TestResult => TestResultId |
          typ ~ Text => TestResultTestKey |
          typ ~ Text => TestResultResult |
          typ ~ UTCTime => TestResultPassingDate
      keyToValues
        = ((ghc-prim-0.5.1.1:GHC.Types.: [])
             . (toPersistValue . unTestResultKey))
      keyFromValues
        = ((fmap TestResultKey)
             . (fromPersistValue . Database.Persist.TH.headNote))
      entityDef _
        = (((((((((EntityDef (HaskellName (packPTH "TestResult")))
                    (DBName (packPTH "test_result")))
                   (((((((FieldDef (HaskellName (packPTH "Id")))
                           (DBName (packPTH "id")))
                          ((FTTypeCon Nothing) (packPTH "TestResultId")))
                         SqlInt64)
                        [])
                       True)
                      ((ForeignRef (HaskellName (packPTH "TestResult")))
                         ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                  [])
                 [((((((FieldDef (HaskellName (packPTH "testKey")))
                         (DBName (packPTH "test_key")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "result")))
                         (DBName (packPTH "result")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "passingDate")))
                         (DBName (packPTH "passing_date")))
                        ((FTTypeCon Nothing) (packPTH "UTCTime")))
                       SqlDayTime)
                      [])
                     True)
                    NoReference])
                [])
               [])
              [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
             (Data.Map.Internal.fromList []))
            False
      toPersistFields (TestResult x_aZAx x_aZAy x_aZAz)
        = [SomePersistField x_aZAx, SomePersistField x_aZAy,
           SomePersistField x_aZAz]
      fromPersistValues [x1_aZAB, x2_aZAC, x3_aZAD]
        = TestResult
            <$>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "testKey")))
                 . fromPersistValue)
                x1_aZAB
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "result")))
                 . fromPersistValue)
                x2_aZAC
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "passingDate")))
                 . fromPersistValue)
                x3_aZAD
      fromPersistValues x_aZAA
        = (Left
             $ ((mappend (packPTH "TestResult: fromPersistValues failed on: "))
                  (pack $ (show x_aZAA))))
      persistUniqueToFieldNames _
        = error "Degenerate case, should never happen"
      persistUniqueToValues _
        = error "Degenerate case, should never happen"
      persistUniqueKeys
        (TestResult _testKey_aZAE _result_aZAF _passingDate_aZAG)
        = []
      persistFieldDef TestResultId
        = ((((((FieldDef (HaskellName (packPTH "Id")))
                 (DBName (packPTH "id")))
                ((FTTypeCon Nothing) (packPTH "TestResultId")))
               SqlInt64)
              [])
             True)
            ((ForeignRef (HaskellName (packPTH "TestResult")))
               ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))
      persistFieldDef TestResultTestKey
        = ((((((FieldDef (HaskellName (packPTH "testKey")))
                 (DBName (packPTH "test_key")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef TestResultResult
        = ((((((FieldDef (HaskellName (packPTH "result")))
                 (DBName (packPTH "result")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef TestResultPassingDate
        = ((((((FieldDef (HaskellName (packPTH "passingDate")))
                 (DBName (packPTH "passing_date")))
                ((FTTypeCon Nothing) (packPTH "UTCTime")))
               SqlDayTime)
              [])
             True)
            NoReference
      persistIdField = TestResultId
      fieldLens TestResultId
        = (lensPTH entityKey)
            (\ Entity _ value_aZAH key_aZAI -> (Entity key_aZAI) value_aZAH)
      fieldLens TestResultTestKey
        = (lensPTH (testResultTestKey . entityVal))
            (\ Entity key_aZAJ value_aZAK x_aZAL
               -> (Entity key_aZAJ) value_aZAK {testResultTestKey = x_aZAL})
      fieldLens TestResultResult
        = (lensPTH (testResultResult . entityVal))
            (\ Entity key_aZAJ value_aZAK x_aZAL
               -> (Entity key_aZAJ) value_aZAK {testResultResult = x_aZAL})
      fieldLens TestResultPassingDate
        = (lensPTH (testResultPassingDate . entityVal))
            (\ Entity key_aZAJ value_aZAK x_aZAL
               -> (Entity key_aZAJ) value_aZAK {testResultPassingDate = x_aZAL})
    instance ToBackendKey MongoContext TestResult where
      toBackendKey = unTestResultKey
      fromBackendKey = TestResultKey
    data User
      = User {userUsername :: !Text,
              userPassword :: !Text,
              userEmail :: !Text,
              userAvatar :: !Text,
              userFirstName :: !(Maybe Text),
              userSecondName :: !(Maybe Text),
              userBirthDay :: !(Maybe UTCTime),
              userSex :: !(Maybe Int),
              userCreatedTests :: ![ObjectId],
              userPassedTests :: ![TestResult]}
      deriving (Eq, Read, Show, Generic)
    type UserId = Key User
    instance PersistEntity User where
      type PersistEntityBackend User = MongoContext
      data Unique User = Email Text | Username Text
      newtype Key User
        = UserKey {unUserKey :: (BackendKey MongoContext)}
        deriving (Show,
                  Read,
                  Eq,
                  Ord,
                  path-pieces-0.2.1:Web.PathPieces.PathPiece,
                  http-api-data-0.3.7.2:Web.Internal.HttpApiData.ToHttpApiData,
                  http-api-data-0.3.7.2:Web.Internal.HttpApiData.FromHttpApiData,
                  PersistField,
                  persistent-2.8.1:Database.Persist.Sql.Class.PersistFieldSql,
                  Aeson.ToJSON,
                  Aeson.FromJSON)
      data EntityField User typ
        = typ ~ Key User => UserId |
          typ ~ Text => UserUsername |
          typ ~ Text => UserPassword |
          typ ~ Text => UserEmail |
          typ ~ Text => UserAvatar |
          typ ~ Maybe Text => UserFirstName |
          typ ~ Maybe Text => UserSecondName |
          typ ~ Maybe UTCTime => UserBirthDay |
          typ ~ Maybe Int => UserSex |
          typ ~ [ObjectId] => UserCreatedTests |
          typ ~ [TestResult] => UserPassedTests
      keyToValues
        = ((ghc-prim-0.5.1.1:GHC.Types.: [])
             . (toPersistValue . unUserKey))
      keyFromValues
        = ((fmap UserKey)
             . (fromPersistValue . Database.Persist.TH.headNote))
      entityDef _
        = (((((((((EntityDef (HaskellName (packPTH "User")))
                    (DBName (packPTH "user")))
                   (((((((FieldDef (HaskellName (packPTH "Id")))
                           (DBName (packPTH "id")))
                          ((FTTypeCon Nothing) (packPTH "UserId")))
                         SqlInt64)
                        [])
                       True)
                      ((ForeignRef (HaskellName (packPTH "User")))
                         ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                  [])
                 [((((((FieldDef (HaskellName (packPTH "username")))
                         (DBName (packPTH "username")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "password")))
                         (DBName (packPTH "password")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "email")))
                         (DBName (packPTH "email")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "avatar")))
                         (DBName (packPTH "avatar")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "firstName")))
                         (DBName (packPTH "first_name")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [packPTH "Maybe"])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "secondName")))
                         (DBName (packPTH "second_name")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [packPTH "Maybe"])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "birthDay")))
                         (DBName (packPTH "birth_day")))
                        ((FTTypeCon Nothing) (packPTH "UTCTime")))
                       SqlDayTime)
                      [packPTH "Maybe"])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "sex")))
                         (DBName (packPTH "sex")))
                        ((FTTypeCon Nothing) (packPTH "Int")))
                       SqlInt64)
                      [packPTH "Maybe"])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "createdTests")))
                         (DBName (packPTH "created_tests")))
                        (FTList ((FTTypeCon Nothing) (packPTH "ObjectId"))))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "passedTests")))
                         (DBName (packPTH "passed_tests")))
                        (FTList ((FTTypeCon Nothing) (packPTH "TestResult"))))
                       SqlString)
                      [])
                     True)
                    (EmbedRef
                       ((EmbedEntityDef (HaskellName (packPTH "TestResult")))
                          [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing) Nothing,
                           ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                           ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                             Nothing]))])
                [(((UniqueDef (HaskellName (packPTH "Email")))
                     (DBName (packPTH "email")))
                    [(HaskellName (packPTH "email"), DBName (packPTH "email"))])
                   [],
                 (((UniqueDef (HaskellName (packPTH "Username")))
                     (DBName (packPTH "username")))
                    [(HaskellName (packPTH "username"), DBName (packPTH "username"))])
                   []])
               [])
              [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
             (Data.Map.Internal.fromList []))
            False
      toPersistFields
        (User x_aZAM
              x_aZAN
              x_aZAO
              x_aZAP
              x_aZAQ
              x_aZAR
              x_aZAS
              x_aZAT
              x_aZAU
              x_aZAV)
        = [SomePersistField x_aZAM, SomePersistField x_aZAN,
           SomePersistField x_aZAO, SomePersistField x_aZAP,
           SomePersistField x_aZAQ, SomePersistField x_aZAR,
           SomePersistField x_aZAS, SomePersistField x_aZAT,
           SomePersistField x_aZAU, SomePersistField x_aZAV]
      fromPersistValues
        [x1_aZAX,
         x2_aZAY,
         x3_aZAZ,
         x4_aZB0,
         x5_aZB1,
         x6_aZB2,
         x7_aZB3,
         x8_aZB4,
         x9_aZB5,
         x10_aZB6]
        = User
            <$>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "username")))
                 . fromPersistValue)
                x1_aZAX
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "password")))
                 . fromPersistValue)
                x2_aZAY
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "email")))
                 . fromPersistValue)
                x3_aZAZ
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "avatar")))
                 . fromPersistValue)
                x4_aZB0
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "firstName")))
                 . fromPersistValue)
                x5_aZB1
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "secondName")))
                 . fromPersistValue)
                x6_aZB2
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "birthDay")))
                 . fromPersistValue)
                x7_aZB3
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "sex")))
                 . fromPersistValue)
                x8_aZB4
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "createdTests")))
                 . fromPersistValue)
                x9_aZB5
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "passedTests")))
                 . fromPersistValue)
                x10_aZB6
      fromPersistValues x_aZAW
        = (Left
             $ ((mappend (packPTH "User: fromPersistValues failed on: "))
                  (pack $ (show x_aZAW))))
      persistUniqueToFieldNames Email {}
        = [(HaskellName (packPTH "email"), DBName (packPTH "email"))]
      persistUniqueToFieldNames Username {}
        = [(HaskellName (packPTH "username"), DBName (packPTH "username"))]
      persistUniqueToValues (Email x_aZB7) = [toPersistValue x_aZB7]
      persistUniqueToValues (Username x_aZB8) = [toPersistValue x_aZB8]
      persistUniqueKeys
        (User _username_aZB9
              _password_aZBa
              _email_aZBb
              _avatar_aZBc
              _firstName_aZBd
              _secondName_aZBe
              _birthDay_aZBf
              _sex_aZBg
              _createdTests_aZBh
              _passedTests_aZBi)
        = [Email _email_aZBb, Username _username_aZB9]
      persistFieldDef UserId
        = ((((((FieldDef (HaskellName (packPTH "Id")))
                 (DBName (packPTH "id")))
                ((FTTypeCon Nothing) (packPTH "UserId")))
               SqlInt64)
              [])
             True)
            ((ForeignRef (HaskellName (packPTH "User")))
               ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))
      persistFieldDef UserUsername
        = ((((((FieldDef (HaskellName (packPTH "username")))
                 (DBName (packPTH "username")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef UserPassword
        = ((((((FieldDef (HaskellName (packPTH "password")))
                 (DBName (packPTH "password")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef UserEmail
        = ((((((FieldDef (HaskellName (packPTH "email")))
                 (DBName (packPTH "email")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef UserAvatar
        = ((((((FieldDef (HaskellName (packPTH "avatar")))
                 (DBName (packPTH "avatar")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef UserFirstName
        = ((((((FieldDef (HaskellName (packPTH "firstName")))
                 (DBName (packPTH "first_name")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [packPTH "Maybe"])
             True)
            NoReference
      persistFieldDef UserSecondName
        = ((((((FieldDef (HaskellName (packPTH "secondName")))
                 (DBName (packPTH "second_name")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [packPTH "Maybe"])
             True)
            NoReference
      persistFieldDef UserBirthDay
        = ((((((FieldDef (HaskellName (packPTH "birthDay")))
                 (DBName (packPTH "birth_day")))
                ((FTTypeCon Nothing) (packPTH "UTCTime")))
               SqlDayTime)
              [packPTH "Maybe"])
             True)
            NoReference
      persistFieldDef UserSex
        = ((((((FieldDef (HaskellName (packPTH "sex")))
                 (DBName (packPTH "sex")))
                ((FTTypeCon Nothing) (packPTH "Int")))
               SqlInt64)
              [packPTH "Maybe"])
             True)
            NoReference
      persistFieldDef UserCreatedTests
        = ((((((FieldDef (HaskellName (packPTH "createdTests")))
                 (DBName (packPTH "created_tests")))
                (FTList ((FTTypeCon Nothing) (packPTH "ObjectId"))))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef UserPassedTests
        = ((((((FieldDef (HaskellName (packPTH "passedTests")))
                 (DBName (packPTH "passed_tests")))
                (FTList ((FTTypeCon Nothing) (packPTH "TestResult"))))
               SqlString)
              [])
             True)
            (EmbedRef
               ((EmbedEntityDef (HaskellName (packPTH "TestResult")))
                  [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing) Nothing,
                   ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                   ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                     Nothing]))
      persistIdField = UserId
      fieldLens UserId
        = (lensPTH entityKey)
            (\ Entity _ value_aZBj key_aZBk -> (Entity key_aZBk) value_aZBj)
      fieldLens UserUsername
        = (lensPTH (userUsername . entityVal))
            (\ Entity key_aZBl value_aZBm x_aZBn
               -> (Entity key_aZBl) value_aZBm {userUsername = x_aZBn})
      fieldLens UserPassword
        = (lensPTH (userPassword . entityVal))
            (\ Entity key_aZBl value_aZBm x_aZBn
               -> (Entity key_aZBl) value_aZBm {userPassword = x_aZBn})
      fieldLens UserEmail
        = (lensPTH (userEmail . entityVal))
            (\ Entity key_aZBl value_aZBm x_aZBn
               -> (Entity key_aZBl) value_aZBm {userEmail = x_aZBn})
      fieldLens UserAvatar
        = (lensPTH (userAvatar . entityVal))
            (\ Entity key_aZBl value_aZBm x_aZBn
               -> (Entity key_aZBl) value_aZBm {userAvatar = x_aZBn})
      fieldLens UserFirstName
        = (lensPTH (userFirstName . entityVal))
            (\ Entity key_aZBl value_aZBm x_aZBn
               -> (Entity key_aZBl) value_aZBm {userFirstName = x_aZBn})
      fieldLens UserSecondName
        = (lensPTH (userSecondName . entityVal))
            (\ Entity key_aZBl value_aZBm x_aZBn
               -> (Entity key_aZBl) value_aZBm {userSecondName = x_aZBn})
      fieldLens UserBirthDay
        = (lensPTH (userBirthDay . entityVal))
            (\ Entity key_aZBl value_aZBm x_aZBn
               -> (Entity key_aZBl) value_aZBm {userBirthDay = x_aZBn})
      fieldLens UserSex
        = (lensPTH (userSex . entityVal))
            (\ Entity key_aZBl value_aZBm x_aZBn
               -> (Entity key_aZBl) value_aZBm {userSex = x_aZBn})
      fieldLens UserCreatedTests
        = (lensPTH (userCreatedTests . entityVal))
            (\ Entity key_aZBl value_aZBm x_aZBn
               -> (Entity key_aZBl) value_aZBm {userCreatedTests = x_aZBn})
      fieldLens UserPassedTests
        = (lensPTH (userPassedTests . entityVal))
            (\ Entity key_aZBl value_aZBm x_aZBn
               -> (Entity key_aZBl) value_aZBm {userPassedTests = x_aZBn})
    instance ToBackendKey MongoContext User where
      toBackendKey = unUserKey
      fromBackendKey = UserKey
    migrateAll :: persistent-2.8.1:Database.Persist.Sql.Types.Migration
    migrateAll
      = do let defs_aZBo
                 = [(((((((((EntityDef (HaskellName (packPTH "TestResult")))
                              (DBName (packPTH "test_result")))
                             (((((((FieldDef (HaskellName (packPTH "Id")))
                                     (DBName (packPTH "id")))
                                    ((FTTypeCon Nothing) (packPTH "TestResultId")))
                                   SqlInt64)
                                  [])
                                 True)
                                ((ForeignRef (HaskellName (packPTH "TestResult")))
                                   ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                            [])
                           [((((((FieldDef (HaskellName (packPTH "testKey")))
                                   (DBName (packPTH "test_key")))
                                  ((FTTypeCon Nothing) (packPTH "Text")))
                                 SqlString)
                                [])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "result")))
                                   (DBName (packPTH "result")))
                                  ((FTTypeCon Nothing) (packPTH "Text")))
                                 SqlString)
                                [])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "passingDate")))
                                   (DBName (packPTH "passing_date")))
                                  ((FTTypeCon Nothing) (packPTH "UTCTime")))
                                 SqlDayTime)
                                [])
                               True)
                              NoReference])
                          [])
                         [])
                        [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
                       (Data.Map.Internal.fromList []))
                      False,
                    (((((((((EntityDef (HaskellName (packPTH "User")))
                              (DBName (packPTH "user")))
                             (((((((FieldDef (HaskellName (packPTH "Id")))
                                     (DBName (packPTH "id")))
                                    ((FTTypeCon Nothing) (packPTH "UserId")))
                                   SqlInt64)
                                  [])
                                 True)
                                ((ForeignRef (HaskellName (packPTH "User")))
                                   ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                            [])
                           [((((((FieldDef (HaskellName (packPTH "username")))
                                   (DBName (packPTH "username")))
                                  ((FTTypeCon Nothing) (packPTH "Text")))
                                 SqlString)
                                [])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "password")))
                                   (DBName (packPTH "password")))
                                  ((FTTypeCon Nothing) (packPTH "Text")))
                                 SqlString)
                                [])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "email")))
                                   (DBName (packPTH "email")))
                                  ((FTTypeCon Nothing) (packPTH "Text")))
                                 SqlString)
                                [])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "avatar")))
                                   (DBName (packPTH "avatar")))
                                  ((FTTypeCon Nothing) (packPTH "Text")))
                                 SqlString)
                                [])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "firstName")))
                                   (DBName (packPTH "first_name")))
                                  ((FTTypeCon Nothing) (packPTH "Text")))
                                 SqlString)
                                [packPTH "Maybe"])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "secondName")))
                                   (DBName (packPTH "second_name")))
                                  ((FTTypeCon Nothing) (packPTH "Text")))
                                 SqlString)
                                [packPTH "Maybe"])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "birthDay")))
                                   (DBName (packPTH "birth_day")))
                                  ((FTTypeCon Nothing) (packPTH "UTCTime")))
                                 SqlDayTime)
                                [packPTH "Maybe"])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "sex")))
                                   (DBName (packPTH "sex")))
                                  ((FTTypeCon Nothing) (packPTH "Int")))
                                 SqlInt64)
                                [packPTH "Maybe"])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "createdTests")))
                                   (DBName (packPTH "created_tests")))
                                  (FTList ((FTTypeCon Nothing) (packPTH "ObjectId"))))
                                 SqlString)
                                [])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "passedTests")))
                                   (DBName (packPTH "passed_tests")))
                                  (FTList ((FTTypeCon Nothing) (packPTH "TestResult"))))
                                 SqlString)
                                [])
                               True)
                              (EmbedRef
                                 ((EmbedEntityDef (HaskellName (packPTH "TestResult")))
                                    [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing)
                                       Nothing,
                                     ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                                     ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                                       Nothing]))])
                          [(((UniqueDef (HaskellName (packPTH "Email")))
                               (DBName (packPTH "email")))
                              [(HaskellName (packPTH "email"), DBName (packPTH "email"))])
                             [],
                           (((UniqueDef (HaskellName (packPTH "Username")))
                               (DBName (packPTH "username")))
                              [(HaskellName (packPTH "username"), DBName (packPTH "username"))])
                             []])
                         [])
                        [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
                       (Data.Map.Internal.fromList []))
                      False]
           (persistent-2.8.1:Database.Persist.Sql.Migration.migrate defs_aZBo)
             ((((((((((EntityDef (HaskellName (packPTH "TestResult")))
                        (DBName (packPTH "test_result")))
                       (((((((FieldDef (HaskellName (packPTH "Id")))
                               (DBName (packPTH "id")))
                              ((FTTypeCon Nothing) (packPTH "TestResultId")))
                             SqlInt64)
                            [])
                           True)
                          ((ForeignRef (HaskellName (packPTH "TestResult")))
                             ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                      [])
                     [((((((FieldDef (HaskellName (packPTH "testKey")))
                             (DBName (packPTH "test_key")))
                            ((FTTypeCon Nothing) (packPTH "Text")))
                           SqlString)
                          [])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "result")))
                             (DBName (packPTH "result")))
                            ((FTTypeCon Nothing) (packPTH "Text")))
                           SqlString)
                          [])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "passingDate")))
                             (DBName (packPTH "passing_date")))
                            ((FTTypeCon Nothing) (packPTH "UTCTime")))
                           SqlDayTime)
                          [])
                         True)
                        NoReference])
                    [])
                   [])
                  [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
                 (Data.Map.Internal.fromList []))
                False)
           (persistent-2.8.1:Database.Persist.Sql.Migration.migrate defs_aZBo)
             ((((((((((EntityDef (HaskellName (packPTH "User")))
                        (DBName (packPTH "user")))
                       (((((((FieldDef (HaskellName (packPTH "Id")))
                               (DBName (packPTH "id")))
                              ((FTTypeCon Nothing) (packPTH "UserId")))
                             SqlInt64)
                            [])
                           True)
                          ((ForeignRef (HaskellName (packPTH "User")))
                             ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                      [])
                     [((((((FieldDef (HaskellName (packPTH "username")))
                             (DBName (packPTH "username")))
                            ((FTTypeCon Nothing) (packPTH "Text")))
                           SqlString)
                          [])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "password")))
                             (DBName (packPTH "password")))
                            ((FTTypeCon Nothing) (packPTH "Text")))
                           SqlString)
                          [])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "email")))
                             (DBName (packPTH "email")))
                            ((FTTypeCon Nothing) (packPTH "Text")))
                           SqlString)
                          [])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "avatar")))
                             (DBName (packPTH "avatar")))
                            ((FTTypeCon Nothing) (packPTH "Text")))
                           SqlString)
                          [])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "firstName")))
                             (DBName (packPTH "first_name")))
                            ((FTTypeCon Nothing) (packPTH "Text")))
                           SqlString)
                          [packPTH "Maybe"])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "secondName")))
                             (DBName (packPTH "second_name")))
                            ((FTTypeCon Nothing) (packPTH "Text")))
                           SqlString)
                          [packPTH "Maybe"])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "birthDay")))
                             (DBName (packPTH "birth_day")))
                            ((FTTypeCon Nothing) (packPTH "UTCTime")))
                           SqlDayTime)
                          [packPTH "Maybe"])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "sex")))
                             (DBName (packPTH "sex")))
                            ((FTTypeCon Nothing) (packPTH "Int")))
                           SqlInt64)
                          [packPTH "Maybe"])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "createdTests")))
                             (DBName (packPTH "created_tests")))
                            (FTList ((FTTypeCon Nothing) (packPTH "ObjectId"))))
                           SqlString)
                          [])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "passedTests")))
                             (DBName (packPTH "passed_tests")))
                            (FTList ((FTTypeCon Nothing) (packPTH "TestResult"))))
                           SqlString)
                          [])
                         True)
                        (EmbedRef
                           ((EmbedEntityDef (HaskellName (packPTH "TestResult")))
                              [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing) Nothing,
                               ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                               ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                                 Nothing]))])
                    [(((UniqueDef (HaskellName (packPTH "Email")))
                         (DBName (packPTH "email")))
                        [(HaskellName (packPTH "email"), DBName (packPTH "email"))])
                       [],
                     (((UniqueDef (HaskellName (packPTH "Username")))
                         (DBName (packPTH "username")))
                        [(HaskellName (packPTH "username"), DBName (packPTH "username"))])
                       []])
                   [])
                  [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
                 (Data.Map.Internal.fromList []))
                False)
/home/nikita/Projects/labs/Databases/Course-Project/Server/src/Model/User.hs:(27,103)-(47,2): Splicing expression
    Language.Haskell.TH.Quote.quoteExp
      persistLowerCase
      "\n\
      \TestResult\n\
      \  testKey       Text\n\
      \  result        Text\n\
      \  passingDate   UTCTime\n\
      \  deriving      Eq Read Show Generic\n\
      \User\n\
      \  username      Text\n\
      \  password      Text\n\
      \  email         Text\n\
      \  avatar        Text\n\
      \  firstName     Text Maybe\n\
      \  secondName    Text Maybe\n\
      \  birthDay      UTCTime Maybe\n\
      \  sex           Int Maybe\n\
      \  createdTests  [ObjectId]\n\
      \  passedTests   [TestResult]\n\
      \  Email         email\n\
      \  Username      username\n\
      \  deriving      Eq Read Show Generic\n"
  ======>
    [(((((((((EntityDef (HaskellName (packPTH "TestResult")))
               (DBName (packPTH "test_result")))
              (((((((FieldDef (HaskellName (packPTH "Id")))
                      (DBName (packPTH "id")))
                     ((FTTypeCon Nothing) (packPTH "TestResultId")))
                    SqlInt64)
                   [])
                  True)
                 ((ForeignRef (HaskellName (packPTH "TestResult")))
                    ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
             [])
            [((((((FieldDef (HaskellName (packPTH "testKey")))
                    (DBName (packPTH "test_key")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for testKey")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "result")))
                    (DBName (packPTH "result")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for result")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "passingDate")))
                    (DBName (packPTH "passing_date")))
                   ((FTTypeCon Nothing) (packPTH "UTCTime")))
                  (SqlOther (packPTH "SqlType unset for passingDate")))
                 [])
                True)
               NoReference])
           [])
          [])
         [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
        (Data.Map.Internal.fromList []))
       False
       {entityFields = [((((((FieldDef (HaskellName (packPTH "testKey")))
                               (DBName (packPTH "test_key")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "result")))
                               (DBName (packPTH "result")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "passingDate")))
                               (DBName (packPTH "passing_date")))
                              ((FTTypeCon Nothing) (packPTH "UTCTime")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy UTCTime)))
                            [])
                           True)
                          NoReference],
        entityId = ((((((FieldDef (HaskellName (packPTH "Id")))
                          (DBName (packPTH "id")))
                         ((FTTypeCon Nothing) (packPTH "TestResultId")))
                        (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                           (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                       [])
                      True)
                     ((ForeignRef (HaskellName (packPTH "TestResult")))
                        ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))},
     (((((((((EntityDef (HaskellName (packPTH "User")))
               (DBName (packPTH "user")))
              (((((((FieldDef (HaskellName (packPTH "Id")))
                      (DBName (packPTH "id")))
                     ((FTTypeCon Nothing) (packPTH "UserId")))
                    SqlInt64)
                   [])
                  True)
                 ((ForeignRef (HaskellName (packPTH "User")))
                    ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
             [])
            [((((((FieldDef (HaskellName (packPTH "username")))
                    (DBName (packPTH "username")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for username")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "password")))
                    (DBName (packPTH "password")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for password")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "email")))
                    (DBName (packPTH "email")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for email")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "avatar")))
                    (DBName (packPTH "avatar")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for avatar")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "firstName")))
                    (DBName (packPTH "first_name")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for firstName")))
                 [packPTH "Maybe"])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "secondName")))
                    (DBName (packPTH "second_name")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for secondName")))
                 [packPTH "Maybe"])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "birthDay")))
                    (DBName (packPTH "birth_day")))
                   ((FTTypeCon Nothing) (packPTH "UTCTime")))
                  (SqlOther (packPTH "SqlType unset for birthDay")))
                 [packPTH "Maybe"])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "sex")))
                    (DBName (packPTH "sex")))
                   ((FTTypeCon Nothing) (packPTH "Int")))
                  (SqlOther (packPTH "SqlType unset for sex")))
                 [packPTH "Maybe"])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "createdTests")))
                    (DBName (packPTH "created_tests")))
                   (FTList ((FTTypeCon Nothing) (packPTH "ObjectId"))))
                  (SqlOther (packPTH "SqlType unset for createdTests")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "passedTests")))
                    (DBName (packPTH "passed_tests")))
                   (FTList ((FTTypeCon Nothing) (packPTH "TestResult"))))
                  (SqlOther (packPTH "SqlType unset for passedTests")))
                 [])
                True)
               (EmbedRef
                  ((EmbedEntityDef (HaskellName (packPTH "TestResult")))
                     [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing) Nothing,
                      ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                      ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                        Nothing]))])
           [(((UniqueDef (HaskellName (packPTH "Email")))
                (DBName (packPTH "email")))
               [(HaskellName (packPTH "email"), DBName (packPTH "email"))])
              [],
            (((UniqueDef (HaskellName (packPTH "Username")))
                (DBName (packPTH "username")))
               [(HaskellName (packPTH "username"), DBName (packPTH "username"))])
              []])
          [])
         [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
        (Data.Map.Internal.fromList []))
       False
       {entityFields = [((((((FieldDef (HaskellName (packPTH "username")))
                               (DBName (packPTH "username")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "password")))
                               (DBName (packPTH "password")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "email")))
                               (DBName (packPTH "email")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "avatar")))
                               (DBName (packPTH "avatar")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "firstName")))
                               (DBName (packPTH "first_name")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [packPTH "Maybe"])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "secondName")))
                               (DBName (packPTH "second_name")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [packPTH "Maybe"])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "birthDay")))
                               (DBName (packPTH "birth_day")))
                              ((FTTypeCon Nothing) (packPTH "UTCTime")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy UTCTime)))
                            [packPTH "Maybe"])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "sex")))
                               (DBName (packPTH "sex")))
                              ((FTTypeCon Nothing) (packPTH "Int")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Int)))
                            [packPTH "Maybe"])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "createdTests")))
                               (DBName (packPTH "created_tests")))
                              (FTList ((FTTypeCon Nothing) (packPTH "ObjectId"))))
                             SqlString)
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "passedTests")))
                               (DBName (packPTH "passed_tests")))
                              (FTList ((FTTypeCon Nothing) (packPTH "TestResult"))))
                             SqlString)
                            [])
                           True)
                          (EmbedRef
                             ((EmbedEntityDef (HaskellName (packPTH "TestResult")))
                                [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing) Nothing,
                                 ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                                 ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                                   Nothing]))],
        entityId = ((((((FieldDef (HaskellName (packPTH "Id")))
                          (DBName (packPTH "id")))
                         ((FTTypeCon Nothing) (packPTH "UserId")))
                        (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                           (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                       [])
                      True)
                     ((ForeignRef (HaskellName (packPTH "User")))
                        ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))}]
/home/nikita/Projects/labs/Databases/Course-Project/Server/src/Model/User.hs:(27,1)-(47,2): Splicing declarations
    share
      [mkPersist (mkPersistSettings (ConT ''MongoContext)),
       mkMigrate "migrateAll"]
      ([(((((((((EntityDef (HaskellName (packPTH "TestResult")))
                  (DBName (packPTH "test_result")))
                 (((((((FieldDef (HaskellName (packPTH "Id")))
                         (DBName (packPTH "id")))
                        ((FTTypeCon Nothing) (packPTH "TestResultId")))
                       SqlInt64)
                      [])
                     True)
                    ((ForeignRef (HaskellName (packPTH "TestResult")))
                       ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                [])
               [((((((FieldDef (HaskellName (packPTH "testKey")))
                       (DBName (packPTH "test_key")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for testKey")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "result")))
                       (DBName (packPTH "result")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for result")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "passingDate")))
                       (DBName (packPTH "passing_date")))
                      ((FTTypeCon Nothing) (packPTH "UTCTime")))
                     (SqlOther (packPTH "SqlType unset for passingDate")))
                    [])
                   True)
                  NoReference])
              [])
             [])
            [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
           (Data.Map.Internal.fromList []))
          False
          {entityFields = [((((((FieldDef (HaskellName (packPTH "testKey")))
                                  (DBName (packPTH "test_key")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "result")))
                                  (DBName (packPTH "result")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "passingDate")))
                                  (DBName (packPTH "passing_date")))
                                 ((FTTypeCon Nothing) (packPTH "UTCTime")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy UTCTime)))
                               [])
                              True)
                             NoReference],
           entityId = ((((((FieldDef (HaskellName (packPTH "Id")))
                             (DBName (packPTH "id")))
                            ((FTTypeCon Nothing) (packPTH "TestResultId")))
                           (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                              (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                          [])
                         True)
                        ((ForeignRef (HaskellName (packPTH "TestResult")))
                           ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))},
        (((((((((EntityDef (HaskellName (packPTH "User")))
                  (DBName (packPTH "user")))
                 (((((((FieldDef (HaskellName (packPTH "Id")))
                         (DBName (packPTH "id")))
                        ((FTTypeCon Nothing) (packPTH "UserId")))
                       SqlInt64)
                      [])
                     True)
                    ((ForeignRef (HaskellName (packPTH "User")))
                       ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                [])
               [((((((FieldDef (HaskellName (packPTH "username")))
                       (DBName (packPTH "username")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for username")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "password")))
                       (DBName (packPTH "password")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for password")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "email")))
                       (DBName (packPTH "email")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for email")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "avatar")))
                       (DBName (packPTH "avatar")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for avatar")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "firstName")))
                       (DBName (packPTH "first_name")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for firstName")))
                    [packPTH "Maybe"])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "secondName")))
                       (DBName (packPTH "second_name")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for secondName")))
                    [packPTH "Maybe"])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "birthDay")))
                       (DBName (packPTH "birth_day")))
                      ((FTTypeCon Nothing) (packPTH "UTCTime")))
                     (SqlOther (packPTH "SqlType unset for birthDay")))
                    [packPTH "Maybe"])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "sex")))
                       (DBName (packPTH "sex")))
                      ((FTTypeCon Nothing) (packPTH "Int")))
                     (SqlOther (packPTH "SqlType unset for sex")))
                    [packPTH "Maybe"])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "createdTests")))
                       (DBName (packPTH "created_tests")))
                      (FTList ((FTTypeCon Nothing) (packPTH "ObjectId"))))
                     (SqlOther (packPTH "SqlType unset for createdTests")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "passedTests")))
                       (DBName (packPTH "passed_tests")))
                      (FTList ((FTTypeCon Nothing) (packPTH "TestResult"))))
                     (SqlOther (packPTH "SqlType unset for passedTests")))
                    [])
                   True)
                  (EmbedRef
                     ((EmbedEntityDef (HaskellName (packPTH "TestResult")))
                        [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing) Nothing,
                         ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                         ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                           Nothing]))])
              [(((UniqueDef (HaskellName (packPTH "Email")))
                   (DBName (packPTH "email")))
                  [(HaskellName (packPTH "email"), DBName (packPTH "email"))])
                 [],
               (((UniqueDef (HaskellName (packPTH "Username")))
                   (DBName (packPTH "username")))
                  [(HaskellName (packPTH "username"), DBName (packPTH "username"))])
                 []])
             [])
            [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
           (Data.Map.Internal.fromList []))
          False
          {entityFields = [((((((FieldDef (HaskellName (packPTH "username")))
                                  (DBName (packPTH "username")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "password")))
                                  (DBName (packPTH "password")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "email")))
                                  (DBName (packPTH "email")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "avatar")))
                                  (DBName (packPTH "avatar")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "firstName")))
                                  (DBName (packPTH "first_name")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [packPTH "Maybe"])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "secondName")))
                                  (DBName (packPTH "second_name")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [packPTH "Maybe"])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "birthDay")))
                                  (DBName (packPTH "birth_day")))
                                 ((FTTypeCon Nothing) (packPTH "UTCTime")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy UTCTime)))
                               [packPTH "Maybe"])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "sex")))
                                  (DBName (packPTH "sex")))
                                 ((FTTypeCon Nothing) (packPTH "Int")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Int)))
                               [packPTH "Maybe"])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "createdTests")))
                                  (DBName (packPTH "created_tests")))
                                 (FTList ((FTTypeCon Nothing) (packPTH "ObjectId"))))
                                SqlString)
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "passedTests")))
                                  (DBName (packPTH "passed_tests")))
                                 (FTList ((FTTypeCon Nothing) (packPTH "TestResult"))))
                                SqlString)
                               [])
                              True)
                             (EmbedRef
                                ((EmbedEntityDef (HaskellName (packPTH "TestResult")))
                                   [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing) Nothing,
                                    ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                                    ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                                      Nothing]))],
           entityId = ((((((FieldDef (HaskellName (packPTH "Id")))
                             (DBName (packPTH "id")))
                            ((FTTypeCon Nothing) (packPTH "UserId")))
                           (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                              (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                          [])
                         True)
                        ((ForeignRef (HaskellName (packPTH "User")))
                           ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))}])
  ======>
    instance PersistField TestResult where
      toPersistValue
        = \ ent_a11QY
            -> (PersistMap
                  $ ((Prelude.zip
                        ((Prelude.map pack) ["testKey", "result", "passingDate"]))
                       ((Prelude.map toPersistValue) $ (toPersistFields ent_a11QY))))
      fromPersistValue
        = ((\ x_a11QZ
              -> let
                   columns_a11R0
                     = unordered-containers-0.2.9.0:Data.HashMap.Strict.fromList x_a11QZ
                 in
                   (fromPersistValues
                      $ ((Prelude.map
                            (\ name_a11R1
                               -> case
                                      (unordered-containers-0.2.9.0:Data.HashMap.Base.lookup
                                         (pack name_a11R1))
                                        columns_a11R0
                                  of
                                    Just v_a11R2 -> v_a11R2
                                    Nothing -> PersistNull))
                           $ ["testKey", "result", "passingDate"])))
             <=< getPersistMap)
    instance persistent-2.8.1:Database.Persist.Sql.Class.PersistFieldSql TestResult where
      persistent-2.8.1:Database.Persist.Sql.Class.sqlType _ = SqlString
    instance PersistField User where
      toPersistValue
        = \ ent_a11R3
            -> (PersistMap
                  $ ((Prelude.zip
                        ((Prelude.map pack)
                           ["username", "password", "email", "avatar", "firstName",
                            "secondName", "birthDay", "sex", "createdTests", "passedTests"]))
                       ((Prelude.map toPersistValue) $ (toPersistFields ent_a11R3))))
      fromPersistValue
        = ((\ x_a11R4
              -> let
                   columns_a11R5
                     = unordered-containers-0.2.9.0:Data.HashMap.Strict.fromList x_a11R4
                 in
                   (fromPersistValues
                      $ ((Prelude.map
                            (\ name_a11R6
                               -> case
                                      (unordered-containers-0.2.9.0:Data.HashMap.Base.lookup
                                         (pack name_a11R6))
                                        columns_a11R5
                                  of
                                    Just v_a11R7 -> v_a11R7
                                    Nothing -> PersistNull))
                           $ ["username", "password", "email", "avatar", "firstName",
                              "secondName", "birthDay", "sex", "createdTests", "passedTests"])))
             <=< getPersistMap)
    instance persistent-2.8.1:Database.Persist.Sql.Class.PersistFieldSql User where
      persistent-2.8.1:Database.Persist.Sql.Class.sqlType _ = SqlString
    data TestResult
      = TestResult {testResultTestKey :: !Text,
                    testResultResult :: !Text,
                    testResultPassingDate :: !UTCTime}
      deriving (Eq, Read, Show, Generic)
    type TestResultId = Key TestResult
    instance PersistEntity TestResult where
      type PersistEntityBackend TestResult = MongoContext
      data Unique TestResult
      newtype Key TestResult
        = TestResultKey {unTestResultKey :: (BackendKey MongoContext)}
        deriving (Show,
                  Read,
                  Eq,
                  Ord,
                  path-pieces-0.2.1:Web.PathPieces.PathPiece,
                  http-api-data-0.3.7.2:Web.Internal.HttpApiData.ToHttpApiData,
                  http-api-data-0.3.7.2:Web.Internal.HttpApiData.FromHttpApiData,
                  PersistField,
                  persistent-2.8.1:Database.Persist.Sql.Class.PersistFieldSql,
                  Aeson.ToJSON,
                  Aeson.FromJSON)
      data EntityField TestResult typ
        = typ ~ Key TestResult => TestResultId |
          typ ~ Text => TestResultTestKey |
          typ ~ Text => TestResultResult |
          typ ~ UTCTime => TestResultPassingDate
      keyToValues
        = ((ghc-prim-0.5.1.1:GHC.Types.: [])
             . (toPersistValue . unTestResultKey))
      keyFromValues
        = ((fmap TestResultKey)
             . (fromPersistValue . Database.Persist.TH.headNote))
      entityDef _
        = (((((((((EntityDef (HaskellName (packPTH "TestResult")))
                    (DBName (packPTH "test_result")))
                   (((((((FieldDef (HaskellName (packPTH "Id")))
                           (DBName (packPTH "id")))
                          ((FTTypeCon Nothing) (packPTH "TestResultId")))
                         SqlInt64)
                        [])
                       True)
                      ((ForeignRef (HaskellName (packPTH "TestResult")))
                         ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                  [])
                 [((((((FieldDef (HaskellName (packPTH "testKey")))
                         (DBName (packPTH "test_key")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "result")))
                         (DBName (packPTH "result")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "passingDate")))
                         (DBName (packPTH "passing_date")))
                        ((FTTypeCon Nothing) (packPTH "UTCTime")))
                       SqlDayTime)
                      [])
                     True)
                    NoReference])
                [])
               [])
              [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
             (Data.Map.Internal.fromList []))
            False
      toPersistFields (TestResult x_a11R8 x_a11R9 x_a11Ra)
        = [SomePersistField x_a11R8, SomePersistField x_a11R9,
           SomePersistField x_a11Ra]
      fromPersistValues [x1_a11Rc, x2_a11Rd, x3_a11Re]
        = TestResult
            <$>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "testKey")))
                 . fromPersistValue)
                x1_a11Rc
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "result")))
                 . fromPersistValue)
                x2_a11Rd
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "passingDate")))
                 . fromPersistValue)
                x3_a11Re
      fromPersistValues x_a11Rb
        = (Left
             $ ((mappend (packPTH "TestResult: fromPersistValues failed on: "))
                  (pack $ (show x_a11Rb))))
      persistUniqueToFieldNames _
        = error "Degenerate case, should never happen"
      persistUniqueToValues _
        = error "Degenerate case, should never happen"
      persistUniqueKeys
        (TestResult _testKey_a11Rf _result_a11Rg _passingDate_a11Rh)
        = []
      persistFieldDef TestResultId
        = ((((((FieldDef (HaskellName (packPTH "Id")))
                 (DBName (packPTH "id")))
                ((FTTypeCon Nothing) (packPTH "TestResultId")))
               SqlInt64)
              [])
             True)
            ((ForeignRef (HaskellName (packPTH "TestResult")))
               ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))
      persistFieldDef TestResultTestKey
        = ((((((FieldDef (HaskellName (packPTH "testKey")))
                 (DBName (packPTH "test_key")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef TestResultResult
        = ((((((FieldDef (HaskellName (packPTH "result")))
                 (DBName (packPTH "result")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef TestResultPassingDate
        = ((((((FieldDef (HaskellName (packPTH "passingDate")))
                 (DBName (packPTH "passing_date")))
                ((FTTypeCon Nothing) (packPTH "UTCTime")))
               SqlDayTime)
              [])
             True)
            NoReference
      persistIdField = TestResultId
      fieldLens TestResultId
        = (lensPTH entityKey)
            (\ Entity _ value_a11Ri key_a11Rj
               -> (Entity key_a11Rj) value_a11Ri)
      fieldLens TestResultTestKey
        = (lensPTH (testResultTestKey . entityVal))
            (\ Entity key_a11Rk value_a11Rl x_a11Rm
               -> (Entity key_a11Rk) value_a11Rl {testResultTestKey = x_a11Rm})
      fieldLens TestResultResult
        = (lensPTH (testResultResult . entityVal))
            (\ Entity key_a11Rk value_a11Rl x_a11Rm
               -> (Entity key_a11Rk) value_a11Rl {testResultResult = x_a11Rm})
      fieldLens TestResultPassingDate
        = (lensPTH (testResultPassingDate . entityVal))
            (\ Entity key_a11Rk value_a11Rl x_a11Rm
               -> (Entity key_a11Rk)
                    value_a11Rl {testResultPassingDate = x_a11Rm})
    instance ToBackendKey MongoContext TestResult where
      toBackendKey = unTestResultKey
      fromBackendKey = TestResultKey
    data User
      = User {userUsername :: !Text,
              userPassword :: !Text,
              userEmail :: !Text,
              userAvatar :: !Text,
              userFirstName :: !(Maybe Text),
              userSecondName :: !(Maybe Text),
              userBirthDay :: !(Maybe UTCTime),
              userSex :: !(Maybe Int),
              userCreatedTests :: ![ObjectId],
              userPassedTests :: ![TestResult]}
      deriving (Eq, Read, Show, Generic)
    type UserId = Key User
    instance PersistEntity User where
      type PersistEntityBackend User = MongoContext
      data Unique User = Email Text | Username Text
      newtype Key User
        = UserKey {unUserKey :: (BackendKey MongoContext)}
        deriving (Show,
                  Read,
                  Eq,
                  Ord,
                  path-pieces-0.2.1:Web.PathPieces.PathPiece,
                  http-api-data-0.3.7.2:Web.Internal.HttpApiData.ToHttpApiData,
                  http-api-data-0.3.7.2:Web.Internal.HttpApiData.FromHttpApiData,
                  PersistField,
                  persistent-2.8.1:Database.Persist.Sql.Class.PersistFieldSql,
                  Aeson.ToJSON,
                  Aeson.FromJSON)
      data EntityField User typ
        = typ ~ Key User => UserId |
          typ ~ Text => UserUsername |
          typ ~ Text => UserPassword |
          typ ~ Text => UserEmail |
          typ ~ Text => UserAvatar |
          typ ~ Maybe Text => UserFirstName |
          typ ~ Maybe Text => UserSecondName |
          typ ~ Maybe UTCTime => UserBirthDay |
          typ ~ Maybe Int => UserSex |
          typ ~ [ObjectId] => UserCreatedTests |
          typ ~ [TestResult] => UserPassedTests
      keyToValues
        = ((ghc-prim-0.5.1.1:GHC.Types.: [])
             . (toPersistValue . unUserKey))
      keyFromValues
        = ((fmap UserKey)
             . (fromPersistValue . Database.Persist.TH.headNote))
      entityDef _
        = (((((((((EntityDef (HaskellName (packPTH "User")))
                    (DBName (packPTH "user")))
                   (((((((FieldDef (HaskellName (packPTH "Id")))
                           (DBName (packPTH "id")))
                          ((FTTypeCon Nothing) (packPTH "UserId")))
                         SqlInt64)
                        [])
                       True)
                      ((ForeignRef (HaskellName (packPTH "User")))
                         ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                  [])
                 [((((((FieldDef (HaskellName (packPTH "username")))
                         (DBName (packPTH "username")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "password")))
                         (DBName (packPTH "password")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "email")))
                         (DBName (packPTH "email")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "avatar")))
                         (DBName (packPTH "avatar")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "firstName")))
                         (DBName (packPTH "first_name")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [packPTH "Maybe"])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "secondName")))
                         (DBName (packPTH "second_name")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [packPTH "Maybe"])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "birthDay")))
                         (DBName (packPTH "birth_day")))
                        ((FTTypeCon Nothing) (packPTH "UTCTime")))
                       SqlDayTime)
                      [packPTH "Maybe"])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "sex")))
                         (DBName (packPTH "sex")))
                        ((FTTypeCon Nothing) (packPTH "Int")))
                       SqlInt64)
                      [packPTH "Maybe"])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "createdTests")))
                         (DBName (packPTH "created_tests")))
                        (FTList ((FTTypeCon Nothing) (packPTH "ObjectId"))))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "passedTests")))
                         (DBName (packPTH "passed_tests")))
                        (FTList ((FTTypeCon Nothing) (packPTH "TestResult"))))
                       SqlString)
                      [])
                     True)
                    (EmbedRef
                       ((EmbedEntityDef (HaskellName (packPTH "TestResult")))
                          [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing) Nothing,
                           ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                           ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                             Nothing]))])
                [(((UniqueDef (HaskellName (packPTH "Email")))
                     (DBName (packPTH "email")))
                    [(HaskellName (packPTH "email"), DBName (packPTH "email"))])
                   [],
                 (((UniqueDef (HaskellName (packPTH "Username")))
                     (DBName (packPTH "username")))
                    [(HaskellName (packPTH "username"), DBName (packPTH "username"))])
                   []])
               [])
              [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
             (Data.Map.Internal.fromList []))
            False
      toPersistFields
        (User x_a11Rn
              x_a11Ro
              x_a11Rp
              x_a11Rq
              x_a11Rr
              x_a11Rs
              x_a11Rt
              x_a11Ru
              x_a11Rv
              x_a11Rw)
        = [SomePersistField x_a11Rn, SomePersistField x_a11Ro,
           SomePersistField x_a11Rp, SomePersistField x_a11Rq,
           SomePersistField x_a11Rr, SomePersistField x_a11Rs,
           SomePersistField x_a11Rt, SomePersistField x_a11Ru,
           SomePersistField x_a11Rv, SomePersistField x_a11Rw]
      fromPersistValues
        [x1_a11Ry,
         x2_a11Rz,
         x3_a11RA,
         x4_a11RB,
         x5_a11RC,
         x6_a11RD,
         x7_a11RE,
         x8_a11RF,
         x9_a11RG,
         x10_a11RH]
        = User
            <$>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "username")))
                 . fromPersistValue)
                x1_a11Ry
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "password")))
                 . fromPersistValue)
                x2_a11Rz
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "email")))
                 . fromPersistValue)
                x3_a11RA
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "avatar")))
                 . fromPersistValue)
                x4_a11RB
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "firstName")))
                 . fromPersistValue)
                x5_a11RC
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "secondName")))
                 . fromPersistValue)
                x6_a11RD
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "birthDay")))
                 . fromPersistValue)
                x7_a11RE
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "sex")))
                 . fromPersistValue)
                x8_a11RF
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "createdTests")))
                 . fromPersistValue)
                x9_a11RG
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "passedTests")))
                 . fromPersistValue)
                x10_a11RH
      fromPersistValues x_a11Rx
        = (Left
             $ ((mappend (packPTH "User: fromPersistValues failed on: "))
                  (pack $ (show x_a11Rx))))
      persistUniqueToFieldNames Email {}
        = [(HaskellName (packPTH "email"), DBName (packPTH "email"))]
      persistUniqueToFieldNames Username {}
        = [(HaskellName (packPTH "username"), DBName (packPTH "username"))]
      persistUniqueToValues (Email x_a11RI) = [toPersistValue x_a11RI]
      persistUniqueToValues (Username x_a11RJ) = [toPersistValue x_a11RJ]
      persistUniqueKeys
        (User _username_a11RK
              _password_a11RL
              _email_a11RM
              _avatar_a11RN
              _firstName_a11RO
              _secondName_a11RP
              _birthDay_a11RQ
              _sex_a11RR
              _createdTests_a11RS
              _passedTests_a11RT)
        = [Email _email_a11RM, Username _username_a11RK]
      persistFieldDef UserId
        = ((((((FieldDef (HaskellName (packPTH "Id")))
                 (DBName (packPTH "id")))
                ((FTTypeCon Nothing) (packPTH "UserId")))
               SqlInt64)
              [])
             True)
            ((ForeignRef (HaskellName (packPTH "User")))
               ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))
      persistFieldDef UserUsername
        = ((((((FieldDef (HaskellName (packPTH "username")))
                 (DBName (packPTH "username")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef UserPassword
        = ((((((FieldDef (HaskellName (packPTH "password")))
                 (DBName (packPTH "password")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef UserEmail
        = ((((((FieldDef (HaskellName (packPTH "email")))
                 (DBName (packPTH "email")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef UserAvatar
        = ((((((FieldDef (HaskellName (packPTH "avatar")))
                 (DBName (packPTH "avatar")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef UserFirstName
        = ((((((FieldDef (HaskellName (packPTH "firstName")))
                 (DBName (packPTH "first_name")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [packPTH "Maybe"])
             True)
            NoReference
      persistFieldDef UserSecondName
        = ((((((FieldDef (HaskellName (packPTH "secondName")))
                 (DBName (packPTH "second_name")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [packPTH "Maybe"])
             True)
            NoReference
      persistFieldDef UserBirthDay
        = ((((((FieldDef (HaskellName (packPTH "birthDay")))
                 (DBName (packPTH "birth_day")))
                ((FTTypeCon Nothing) (packPTH "UTCTime")))
               SqlDayTime)
              [packPTH "Maybe"])
             True)
            NoReference
      persistFieldDef UserSex
        = ((((((FieldDef (HaskellName (packPTH "sex")))
                 (DBName (packPTH "sex")))
                ((FTTypeCon Nothing) (packPTH "Int")))
               SqlInt64)
              [packPTH "Maybe"])
             True)
            NoReference
      persistFieldDef UserCreatedTests
        = ((((((FieldDef (HaskellName (packPTH "createdTests")))
                 (DBName (packPTH "created_tests")))
                (FTList ((FTTypeCon Nothing) (packPTH "ObjectId"))))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef UserPassedTests
        = ((((((FieldDef (HaskellName (packPTH "passedTests")))
                 (DBName (packPTH "passed_tests")))
                (FTList ((FTTypeCon Nothing) (packPTH "TestResult"))))
               SqlString)
              [])
             True)
            (EmbedRef
               ((EmbedEntityDef (HaskellName (packPTH "TestResult")))
                  [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing) Nothing,
                   ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                   ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                     Nothing]))
      persistIdField = UserId
      fieldLens UserId
        = (lensPTH entityKey)
            (\ Entity _ value_a11RU key_a11RV
               -> (Entity key_a11RV) value_a11RU)
      fieldLens UserUsername
        = (lensPTH (userUsername . entityVal))
            (\ Entity key_a11RW value_a11RX x_a11RY
               -> (Entity key_a11RW) value_a11RX {userUsername = x_a11RY})
      fieldLens UserPassword
        = (lensPTH (userPassword . entityVal))
            (\ Entity key_a11RW value_a11RX x_a11RY
               -> (Entity key_a11RW) value_a11RX {userPassword = x_a11RY})
      fieldLens UserEmail
        = (lensPTH (userEmail . entityVal))
            (\ Entity key_a11RW value_a11RX x_a11RY
               -> (Entity key_a11RW) value_a11RX {userEmail = x_a11RY})
      fieldLens UserAvatar
        = (lensPTH (userAvatar . entityVal))
            (\ Entity key_a11RW value_a11RX x_a11RY
               -> (Entity key_a11RW) value_a11RX {userAvatar = x_a11RY})
      fieldLens UserFirstName
        = (lensPTH (userFirstName . entityVal))
            (\ Entity key_a11RW value_a11RX x_a11RY
               -> (Entity key_a11RW) value_a11RX {userFirstName = x_a11RY})
      fieldLens UserSecondName
        = (lensPTH (userSecondName . entityVal))
            (\ Entity key_a11RW value_a11RX x_a11RY
               -> (Entity key_a11RW) value_a11RX {userSecondName = x_a11RY})
      fieldLens UserBirthDay
        = (lensPTH (userBirthDay . entityVal))
            (\ Entity key_a11RW value_a11RX x_a11RY
               -> (Entity key_a11RW) value_a11RX {userBirthDay = x_a11RY})
      fieldLens UserSex
        = (lensPTH (userSex . entityVal))
            (\ Entity key_a11RW value_a11RX x_a11RY
               -> (Entity key_a11RW) value_a11RX {userSex = x_a11RY})
      fieldLens UserCreatedTests
        = (lensPTH (userCreatedTests . entityVal))
            (\ Entity key_a11RW value_a11RX x_a11RY
               -> (Entity key_a11RW) value_a11RX {userCreatedTests = x_a11RY})
      fieldLens UserPassedTests
        = (lensPTH (userPassedTests . entityVal))
            (\ Entity key_a11RW value_a11RX x_a11RY
               -> (Entity key_a11RW) value_a11RX {userPassedTests = x_a11RY})
    instance ToBackendKey MongoContext User where
      toBackendKey = unUserKey
      fromBackendKey = UserKey
    migrateAll :: persistent-2.8.1:Database.Persist.Sql.Types.Migration
    migrateAll
      = do let defs_a11RZ
                 = [(((((((((EntityDef (HaskellName (packPTH "TestResult")))
                              (DBName (packPTH "test_result")))
                             (((((((FieldDef (HaskellName (packPTH "Id")))
                                     (DBName (packPTH "id")))
                                    ((FTTypeCon Nothing) (packPTH "TestResultId")))
                                   SqlInt64)
                                  [])
                                 True)
                                ((ForeignRef (HaskellName (packPTH "TestResult")))
                                   ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                            [])
                           [((((((FieldDef (HaskellName (packPTH "testKey")))
                                   (DBName (packPTH "test_key")))
                                  ((FTTypeCon Nothing) (packPTH "Text")))
                                 SqlString)
                                [])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "result")))
                                   (DBName (packPTH "result")))
                                  ((FTTypeCon Nothing) (packPTH "Text")))
                                 SqlString)
                                [])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "passingDate")))
                                   (DBName (packPTH "passing_date")))
                                  ((FTTypeCon Nothing) (packPTH "UTCTime")))
                                 SqlDayTime)
                                [])
                               True)
                              NoReference])
                          [])
                         [])
                        [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
                       (Data.Map.Internal.fromList []))
                      False,
                    (((((((((EntityDef (HaskellName (packPTH "User")))
                              (DBName (packPTH "user")))
                             (((((((FieldDef (HaskellName (packPTH "Id")))
                                     (DBName (packPTH "id")))
                                    ((FTTypeCon Nothing) (packPTH "UserId")))
                                   SqlInt64)
                                  [])
                                 True)
                                ((ForeignRef (HaskellName (packPTH "User")))
                                   ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                            [])
                           [((((((FieldDef (HaskellName (packPTH "username")))
                                   (DBName (packPTH "username")))
                                  ((FTTypeCon Nothing) (packPTH "Text")))
                                 SqlString)
                                [])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "password")))
                                   (DBName (packPTH "password")))
                                  ((FTTypeCon Nothing) (packPTH "Text")))
                                 SqlString)
                                [])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "email")))
                                   (DBName (packPTH "email")))
                                  ((FTTypeCon Nothing) (packPTH "Text")))
                                 SqlString)
                                [])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "avatar")))
                                   (DBName (packPTH "avatar")))
                                  ((FTTypeCon Nothing) (packPTH "Text")))
                                 SqlString)
                                [])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "firstName")))
                                   (DBName (packPTH "first_name")))
                                  ((FTTypeCon Nothing) (packPTH "Text")))
                                 SqlString)
                                [packPTH "Maybe"])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "secondName")))
                                   (DBName (packPTH "second_name")))
                                  ((FTTypeCon Nothing) (packPTH "Text")))
                                 SqlString)
                                [packPTH "Maybe"])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "birthDay")))
                                   (DBName (packPTH "birth_day")))
                                  ((FTTypeCon Nothing) (packPTH "UTCTime")))
                                 SqlDayTime)
                                [packPTH "Maybe"])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "sex")))
                                   (DBName (packPTH "sex")))
                                  ((FTTypeCon Nothing) (packPTH "Int")))
                                 SqlInt64)
                                [packPTH "Maybe"])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "createdTests")))
                                   (DBName (packPTH "created_tests")))
                                  (FTList ((FTTypeCon Nothing) (packPTH "ObjectId"))))
                                 SqlString)
                                [])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "passedTests")))
                                   (DBName (packPTH "passed_tests")))
                                  (FTList ((FTTypeCon Nothing) (packPTH "TestResult"))))
                                 SqlString)
                                [])
                               True)
                              (EmbedRef
                                 ((EmbedEntityDef (HaskellName (packPTH "TestResult")))
                                    [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing)
                                       Nothing,
                                     ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                                     ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                                       Nothing]))])
                          [(((UniqueDef (HaskellName (packPTH "Email")))
                               (DBName (packPTH "email")))
                              [(HaskellName (packPTH "email"), DBName (packPTH "email"))])
                             [],
                           (((UniqueDef (HaskellName (packPTH "Username")))
                               (DBName (packPTH "username")))
                              [(HaskellName (packPTH "username"), DBName (packPTH "username"))])
                             []])
                         [])
                        [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
                       (Data.Map.Internal.fromList []))
                      False]
           (persistent-2.8.1:Database.Persist.Sql.Migration.migrate
              defs_a11RZ)
             ((((((((((EntityDef (HaskellName (packPTH "TestResult")))
                        (DBName (packPTH "test_result")))
                       (((((((FieldDef (HaskellName (packPTH "Id")))
                               (DBName (packPTH "id")))
                              ((FTTypeCon Nothing) (packPTH "TestResultId")))
                             SqlInt64)
                            [])
                           True)
                          ((ForeignRef (HaskellName (packPTH "TestResult")))
                             ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                      [])
                     [((((((FieldDef (HaskellName (packPTH "testKey")))
                             (DBName (packPTH "test_key")))
                            ((FTTypeCon Nothing) (packPTH "Text")))
                           SqlString)
                          [])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "result")))
                             (DBName (packPTH "result")))
                            ((FTTypeCon Nothing) (packPTH "Text")))
                           SqlString)
                          [])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "passingDate")))
                             (DBName (packPTH "passing_date")))
                            ((FTTypeCon Nothing) (packPTH "UTCTime")))
                           SqlDayTime)
                          [])
                         True)
                        NoReference])
                    [])
                   [])
                  [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
                 (Data.Map.Internal.fromList []))
                False)
           (persistent-2.8.1:Database.Persist.Sql.Migration.migrate
              defs_a11RZ)
             ((((((((((EntityDef (HaskellName (packPTH "User")))
                        (DBName (packPTH "user")))
                       (((((((FieldDef (HaskellName (packPTH "Id")))
                               (DBName (packPTH "id")))
                              ((FTTypeCon Nothing) (packPTH "UserId")))
                             SqlInt64)
                            [])
                           True)
                          ((ForeignRef (HaskellName (packPTH "User")))
                             ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                      [])
                     [((((((FieldDef (HaskellName (packPTH "username")))
                             (DBName (packPTH "username")))
                            ((FTTypeCon Nothing) (packPTH "Text")))
                           SqlString)
                          [])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "password")))
                             (DBName (packPTH "password")))
                            ((FTTypeCon Nothing) (packPTH "Text")))
                           SqlString)
                          [])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "email")))
                             (DBName (packPTH "email")))
                            ((FTTypeCon Nothing) (packPTH "Text")))
                           SqlString)
                          [])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "avatar")))
                             (DBName (packPTH "avatar")))
                            ((FTTypeCon Nothing) (packPTH "Text")))
                           SqlString)
                          [])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "firstName")))
                             (DBName (packPTH "first_name")))
                            ((FTTypeCon Nothing) (packPTH "Text")))
                           SqlString)
                          [packPTH "Maybe"])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "secondName")))
                             (DBName (packPTH "second_name")))
                            ((FTTypeCon Nothing) (packPTH "Text")))
                           SqlString)
                          [packPTH "Maybe"])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "birthDay")))
                             (DBName (packPTH "birth_day")))
                            ((FTTypeCon Nothing) (packPTH "UTCTime")))
                           SqlDayTime)
                          [packPTH "Maybe"])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "sex")))
                             (DBName (packPTH "sex")))
                            ((FTTypeCon Nothing) (packPTH "Int")))
                           SqlInt64)
                          [packPTH "Maybe"])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "createdTests")))
                             (DBName (packPTH "created_tests")))
                            (FTList ((FTTypeCon Nothing) (packPTH "ObjectId"))))
                           SqlString)
                          [])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "passedTests")))
                             (DBName (packPTH "passed_tests")))
                            (FTList ((FTTypeCon Nothing) (packPTH "TestResult"))))
                           SqlString)
                          [])
                         True)
                        (EmbedRef
                           ((EmbedEntityDef (HaskellName (packPTH "TestResult")))
                              [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing) Nothing,
                               ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                               ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                                 Nothing]))])
                    [(((UniqueDef (HaskellName (packPTH "Email")))
                         (DBName (packPTH "email")))
                        [(HaskellName (packPTH "email"), DBName (packPTH "email"))])
                       [],
                     (((UniqueDef (HaskellName (packPTH "Username")))
                         (DBName (packPTH "username")))
                        [(HaskellName (packPTH "username"), DBName (packPTH "username"))])
                       []])
                   [])
                  [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
                 (Data.Map.Internal.fromList []))
                False)
/home/nikita/Projects/labs/Databases/Course-Project/Server/src/Model/User.hs:(27,103)-(47,2): Splicing expression
    Language.Haskell.TH.Quote.quoteExp
      persistLowerCase
      "\n\
      \TestResult\n\
      \  testKey       Text\n\
      \  result        Text\n\
      \  passingDate   UTCTime\n\
      \  deriving      Eq Read Show Generic\n\
      \User\n\
      \  username      Text\n\
      \  password      Text\n\
      \  email         Text\n\
      \  avatar        Text\n\
      \  firstName     Text Maybe\n\
      \  secondName    Text Maybe\n\
      \  birthDay      UTCTime Maybe\n\
      \  sex           Int Maybe\n\
      \  createdTests  [ObjectId]\n\
      \  passedTests   [TestResult]\n\
      \  Email         email\n\
      \  Username      username\n\
      \  deriving      Eq Read Show Generic\n"
  ======>
    [(((((((((EntityDef (HaskellName (packPTH "TestResult")))
               (DBName (packPTH "test_result")))
              (((((((FieldDef (HaskellName (packPTH "Id")))
                      (DBName (packPTH "id")))
                     ((FTTypeCon Nothing) (packPTH "TestResultId")))
                    SqlInt64)
                   [])
                  True)
                 ((ForeignRef (HaskellName (packPTH "TestResult")))
                    ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
             [])
            [((((((FieldDef (HaskellName (packPTH "testKey")))
                    (DBName (packPTH "test_key")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for testKey")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "result")))
                    (DBName (packPTH "result")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for result")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "passingDate")))
                    (DBName (packPTH "passing_date")))
                   ((FTTypeCon Nothing) (packPTH "UTCTime")))
                  (SqlOther (packPTH "SqlType unset for passingDate")))
                 [])
                True)
               NoReference])
           [])
          [])
         [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
        (Data.Map.Internal.fromList []))
       False
       {entityFields = [((((((FieldDef (HaskellName (packPTH "testKey")))
                               (DBName (packPTH "test_key")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "result")))
                               (DBName (packPTH "result")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "passingDate")))
                               (DBName (packPTH "passing_date")))
                              ((FTTypeCon Nothing) (packPTH "UTCTime")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy UTCTime)))
                            [])
                           True)
                          NoReference],
        entityId = ((((((FieldDef (HaskellName (packPTH "Id")))
                          (DBName (packPTH "id")))
                         ((FTTypeCon Nothing) (packPTH "TestResultId")))
                        (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                           (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                       [])
                      True)
                     ((ForeignRef (HaskellName (packPTH "TestResult")))
                        ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))},
     (((((((((EntityDef (HaskellName (packPTH "User")))
               (DBName (packPTH "user")))
              (((((((FieldDef (HaskellName (packPTH "Id")))
                      (DBName (packPTH "id")))
                     ((FTTypeCon Nothing) (packPTH "UserId")))
                    SqlInt64)
                   [])
                  True)
                 ((ForeignRef (HaskellName (packPTH "User")))
                    ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
             [])
            [((((((FieldDef (HaskellName (packPTH "username")))
                    (DBName (packPTH "username")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for username")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "password")))
                    (DBName (packPTH "password")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for password")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "email")))
                    (DBName (packPTH "email")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for email")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "avatar")))
                    (DBName (packPTH "avatar")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for avatar")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "firstName")))
                    (DBName (packPTH "first_name")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for firstName")))
                 [packPTH "Maybe"])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "secondName")))
                    (DBName (packPTH "second_name")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for secondName")))
                 [packPTH "Maybe"])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "birthDay")))
                    (DBName (packPTH "birth_day")))
                   ((FTTypeCon Nothing) (packPTH "UTCTime")))
                  (SqlOther (packPTH "SqlType unset for birthDay")))
                 [packPTH "Maybe"])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "sex")))
                    (DBName (packPTH "sex")))
                   ((FTTypeCon Nothing) (packPTH "Int")))
                  (SqlOther (packPTH "SqlType unset for sex")))
                 [packPTH "Maybe"])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "createdTests")))
                    (DBName (packPTH "created_tests")))
                   (FTList ((FTTypeCon Nothing) (packPTH "ObjectId"))))
                  (SqlOther (packPTH "SqlType unset for createdTests")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "passedTests")))
                    (DBName (packPTH "passed_tests")))
                   (FTList ((FTTypeCon Nothing) (packPTH "TestResult"))))
                  (SqlOther (packPTH "SqlType unset for passedTests")))
                 [])
                True)
               (EmbedRef
                  ((EmbedEntityDef (HaskellName (packPTH "TestResult")))
                     [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing) Nothing,
                      ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                      ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                        Nothing]))])
           [(((UniqueDef (HaskellName (packPTH "Email")))
                (DBName (packPTH "email")))
               [(HaskellName (packPTH "email"), DBName (packPTH "email"))])
              [],
            (((UniqueDef (HaskellName (packPTH "Username")))
                (DBName (packPTH "username")))
               [(HaskellName (packPTH "username"), DBName (packPTH "username"))])
              []])
          [])
         [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
        (Data.Map.Internal.fromList []))
       False
       {entityFields = [((((((FieldDef (HaskellName (packPTH "username")))
                               (DBName (packPTH "username")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "password")))
                               (DBName (packPTH "password")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "email")))
                               (DBName (packPTH "email")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "avatar")))
                               (DBName (packPTH "avatar")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "firstName")))
                               (DBName (packPTH "first_name")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [packPTH "Maybe"])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "secondName")))
                               (DBName (packPTH "second_name")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [packPTH "Maybe"])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "birthDay")))
                               (DBName (packPTH "birth_day")))
                              ((FTTypeCon Nothing) (packPTH "UTCTime")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy UTCTime)))
                            [packPTH "Maybe"])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "sex")))
                               (DBName (packPTH "sex")))
                              ((FTTypeCon Nothing) (packPTH "Int")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Int)))
                            [packPTH "Maybe"])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "createdTests")))
                               (DBName (packPTH "created_tests")))
                              (FTList ((FTTypeCon Nothing) (packPTH "ObjectId"))))
                             SqlString)
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "passedTests")))
                               (DBName (packPTH "passed_tests")))
                              (FTList ((FTTypeCon Nothing) (packPTH "TestResult"))))
                             SqlString)
                            [])
                           True)
                          (EmbedRef
                             ((EmbedEntityDef (HaskellName (packPTH "TestResult")))
                                [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing) Nothing,
                                 ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                                 ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                                   Nothing]))],
        entityId = ((((((FieldDef (HaskellName (packPTH "Id")))
                          (DBName (packPTH "id")))
                         ((FTTypeCon Nothing) (packPTH "UserId")))
                        (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                           (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                       [])
                      True)
                     ((ForeignRef (HaskellName (packPTH "User")))
                        ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))}]
/home/nikita/Projects/labs/Databases/Course-Project/Server/src/Model/User.hs:(27,1)-(47,2): Splicing declarations
    share
      [mkPersist (mkPersistSettings (ConT ''MongoContext)),
       mkMigrate "migrateAll"]
      ([(((((((((EntityDef (HaskellName (packPTH "TestResult")))
                  (DBName (packPTH "test_result")))
                 (((((((FieldDef (HaskellName (packPTH "Id")))
                         (DBName (packPTH "id")))
                        ((FTTypeCon Nothing) (packPTH "TestResultId")))
                       SqlInt64)
                      [])
                     True)
                    ((ForeignRef (HaskellName (packPTH "TestResult")))
                       ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                [])
               [((((((FieldDef (HaskellName (packPTH "testKey")))
                       (DBName (packPTH "test_key")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for testKey")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "result")))
                       (DBName (packPTH "result")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for result")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "passingDate")))
                       (DBName (packPTH "passing_date")))
                      ((FTTypeCon Nothing) (packPTH "UTCTime")))
                     (SqlOther (packPTH "SqlType unset for passingDate")))
                    [])
                   True)
                  NoReference])
              [])
             [])
            [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
           (Data.Map.Internal.fromList []))
          False
          {entityFields = [((((((FieldDef (HaskellName (packPTH "testKey")))
                                  (DBName (packPTH "test_key")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "result")))
                                  (DBName (packPTH "result")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "passingDate")))
                                  (DBName (packPTH "passing_date")))
                                 ((FTTypeCon Nothing) (packPTH "UTCTime")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy UTCTime)))
                               [])
                              True)
                             NoReference],
           entityId = ((((((FieldDef (HaskellName (packPTH "Id")))
                             (DBName (packPTH "id")))
                            ((FTTypeCon Nothing) (packPTH "TestResultId")))
                           (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                              (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                          [])
                         True)
                        ((ForeignRef (HaskellName (packPTH "TestResult")))
                           ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))},
        (((((((((EntityDef (HaskellName (packPTH "User")))
                  (DBName (packPTH "user")))
                 (((((((FieldDef (HaskellName (packPTH "Id")))
                         (DBName (packPTH "id")))
                        ((FTTypeCon Nothing) (packPTH "UserId")))
                       SqlInt64)
                      [])
                     True)
                    ((ForeignRef (HaskellName (packPTH "User")))
                       ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                [])
               [((((((FieldDef (HaskellName (packPTH "username")))
                       (DBName (packPTH "username")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for username")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "password")))
                       (DBName (packPTH "password")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for password")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "email")))
                       (DBName (packPTH "email")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for email")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "avatar")))
                       (DBName (packPTH "avatar")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for avatar")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "firstName")))
                       (DBName (packPTH "first_name")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for firstName")))
                    [packPTH "Maybe"])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "secondName")))
                       (DBName (packPTH "second_name")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for secondName")))
                    [packPTH "Maybe"])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "birthDay")))
                       (DBName (packPTH "birth_day")))
                      ((FTTypeCon Nothing) (packPTH "UTCTime")))
                     (SqlOther (packPTH "SqlType unset for birthDay")))
                    [packPTH "Maybe"])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "sex")))
                       (DBName (packPTH "sex")))
                      ((FTTypeCon Nothing) (packPTH "Int")))
                     (SqlOther (packPTH "SqlType unset for sex")))
                    [packPTH "Maybe"])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "createdTests")))
                       (DBName (packPTH "created_tests")))
                      (FTList ((FTTypeCon Nothing) (packPTH "ObjectId"))))
                     (SqlOther (packPTH "SqlType unset for createdTests")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "passedTests")))
                       (DBName (packPTH "passed_tests")))
                      (FTList ((FTTypeCon Nothing) (packPTH "TestResult"))))
                     (SqlOther (packPTH "SqlType unset for passedTests")))
                    [])
                   True)
                  (EmbedRef
                     ((EmbedEntityDef (HaskellName (packPTH "TestResult")))
                        [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing) Nothing,
                         ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                         ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                           Nothing]))])
              [(((UniqueDef (HaskellName (packPTH "Email")))
                   (DBName (packPTH "email")))
                  [(HaskellName (packPTH "email"), DBName (packPTH "email"))])
                 [],
               (((UniqueDef (HaskellName (packPTH "Username")))
                   (DBName (packPTH "username")))
                  [(HaskellName (packPTH "username"), DBName (packPTH "username"))])
                 []])
             [])
            [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
           (Data.Map.Internal.fromList []))
          False
          {entityFields = [((((((FieldDef (HaskellName (packPTH "username")))
                                  (DBName (packPTH "username")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "password")))
                                  (DBName (packPTH "password")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "email")))
                                  (DBName (packPTH "email")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "avatar")))
                                  (DBName (packPTH "avatar")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "firstName")))
                                  (DBName (packPTH "first_name")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [packPTH "Maybe"])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "secondName")))
                                  (DBName (packPTH "second_name")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [packPTH "Maybe"])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "birthDay")))
                                  (DBName (packPTH "birth_day")))
                                 ((FTTypeCon Nothing) (packPTH "UTCTime")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy UTCTime)))
                               [packPTH "Maybe"])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "sex")))
                                  (DBName (packPTH "sex")))
                                 ((FTTypeCon Nothing) (packPTH "Int")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Int)))
                               [packPTH "Maybe"])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "createdTests")))
                                  (DBName (packPTH "created_tests")))
                                 (FTList ((FTTypeCon Nothing) (packPTH "ObjectId"))))
                                SqlString)
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "passedTests")))
                                  (DBName (packPTH "passed_tests")))
                                 (FTList ((FTTypeCon Nothing) (packPTH "TestResult"))))
                                SqlString)
                               [])
                              True)
                             (EmbedRef
                                ((EmbedEntityDef (HaskellName (packPTH "TestResult")))
                                   [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing) Nothing,
                                    ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                                    ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                                      Nothing]))],
           entityId = ((((((FieldDef (HaskellName (packPTH "Id")))
                             (DBName (packPTH "id")))
                            ((FTTypeCon Nothing) (packPTH "UserId")))
                           (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                              (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                          [])
                         True)
                        ((ForeignRef (HaskellName (packPTH "User")))
                           ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))}])
  ======>
    instance PersistField TestResult where
      toPersistValue
        = \ ent_a15s9
            -> (PersistMap
                  $ ((Prelude.zip
                        ((Prelude.map pack) ["testKey", "result", "passingDate"]))
                       ((Prelude.map toPersistValue) $ (toPersistFields ent_a15s9))))
      fromPersistValue
        = ((\ x_a15sa
              -> let
                   columns_a15sb
                     = unordered-containers-0.2.9.0:Data.HashMap.Strict.fromList x_a15sa
                 in
                   (fromPersistValues
                      $ ((Prelude.map
                            (\ name_a15sc
                               -> case
                                      (unordered-containers-0.2.9.0:Data.HashMap.Base.lookup
                                         (pack name_a15sc))
                                        columns_a15sb
                                  of
                                    Just v_a15sd -> v_a15sd
                                    Nothing -> PersistNull))
                           $ ["testKey", "result", "passingDate"])))
             <=< getPersistMap)
    instance persistent-2.8.1:Database.Persist.Sql.Class.PersistFieldSql TestResult where
      persistent-2.8.1:Database.Persist.Sql.Class.sqlType _ = SqlString
    instance PersistField User where
      toPersistValue
        = \ ent_a15se
            -> (PersistMap
                  $ ((Prelude.zip
                        ((Prelude.map pack)
                           ["username", "password", "email", "avatar", "firstName",
                            "secondName", "birthDay", "sex", "createdTests", "passedTests"]))
                       ((Prelude.map toPersistValue) $ (toPersistFields ent_a15se))))
      fromPersistValue
        = ((\ x_a15sf
              -> let
                   columns_a15sg
                     = unordered-containers-0.2.9.0:Data.HashMap.Strict.fromList x_a15sf
                 in
                   (fromPersistValues
                      $ ((Prelude.map
                            (\ name_a15sh
                               -> case
                                      (unordered-containers-0.2.9.0:Data.HashMap.Base.lookup
                                         (pack name_a15sh))
                                        columns_a15sg
                                  of
                                    Just v_a15si -> v_a15si
                                    Nothing -> PersistNull))
                           $ ["username", "password", "email", "avatar", "firstName",
                              "secondName", "birthDay", "sex", "createdTests", "passedTests"])))
             <=< getPersistMap)
    instance persistent-2.8.1:Database.Persist.Sql.Class.PersistFieldSql User where
      persistent-2.8.1:Database.Persist.Sql.Class.sqlType _ = SqlString
    data TestResult
      = TestResult {testResultTestKey :: !Text,
                    testResultResult :: !Text,
                    testResultPassingDate :: !UTCTime}
      deriving (Eq, Read, Show, Generic)
    type TestResultId = Key TestResult
    instance PersistEntity TestResult where
      type PersistEntityBackend TestResult = MongoContext
      data Unique TestResult
      newtype Key TestResult
        = TestResultKey {unTestResultKey :: (BackendKey MongoContext)}
        deriving (Show,
                  Read,
                  Eq,
                  Ord,
                  path-pieces-0.2.1:Web.PathPieces.PathPiece,
                  http-api-data-0.3.7.2:Web.Internal.HttpApiData.ToHttpApiData,
                  http-api-data-0.3.7.2:Web.Internal.HttpApiData.FromHttpApiData,
                  PersistField,
                  persistent-2.8.1:Database.Persist.Sql.Class.PersistFieldSql,
                  Aeson.ToJSON,
                  Aeson.FromJSON)
      data EntityField TestResult typ
        = typ ~ Key TestResult => TestResultId |
          typ ~ Text => TestResultTestKey |
          typ ~ Text => TestResultResult |
          typ ~ UTCTime => TestResultPassingDate
      keyToValues
        = ((ghc-prim-0.5.1.1:GHC.Types.: [])
             . (toPersistValue . unTestResultKey))
      keyFromValues
        = ((fmap TestResultKey)
             . (fromPersistValue . Database.Persist.TH.headNote))
      entityDef _
        = (((((((((EntityDef (HaskellName (packPTH "TestResult")))
                    (DBName (packPTH "test_result")))
                   (((((((FieldDef (HaskellName (packPTH "Id")))
                           (DBName (packPTH "id")))
                          ((FTTypeCon Nothing) (packPTH "TestResultId")))
                         SqlInt64)
                        [])
                       True)
                      ((ForeignRef (HaskellName (packPTH "TestResult")))
                         ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                  [])
                 [((((((FieldDef (HaskellName (packPTH "testKey")))
                         (DBName (packPTH "test_key")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "result")))
                         (DBName (packPTH "result")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "passingDate")))
                         (DBName (packPTH "passing_date")))
                        ((FTTypeCon Nothing) (packPTH "UTCTime")))
                       SqlDayTime)
                      [])
                     True)
                    NoReference])
                [])
               [])
              [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
             (Data.Map.Internal.fromList []))
            False
      toPersistFields (TestResult x_a15sj x_a15sk x_a15sl)
        = [SomePersistField x_a15sj, SomePersistField x_a15sk,
           SomePersistField x_a15sl]
      fromPersistValues [x1_a15sn, x2_a15so, x3_a15sp]
        = TestResult
            <$>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "testKey")))
                 . fromPersistValue)
                x1_a15sn
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "result")))
                 . fromPersistValue)
                x2_a15so
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "passingDate")))
                 . fromPersistValue)
                x3_a15sp
      fromPersistValues x_a15sm
        = (Left
             $ ((mappend (packPTH "TestResult: fromPersistValues failed on: "))
                  (pack $ (show x_a15sm))))
      persistUniqueToFieldNames _
        = error "Degenerate case, should never happen"
      persistUniqueToValues _
        = error "Degenerate case, should never happen"
      persistUniqueKeys
        (TestResult _testKey_a15sq _result_a15sr _passingDate_a15ss)
        = []
      persistFieldDef TestResultId
        = ((((((FieldDef (HaskellName (packPTH "Id")))
                 (DBName (packPTH "id")))
                ((FTTypeCon Nothing) (packPTH "TestResultId")))
               SqlInt64)
              [])
             True)
            ((ForeignRef (HaskellName (packPTH "TestResult")))
               ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))
      persistFieldDef TestResultTestKey
        = ((((((FieldDef (HaskellName (packPTH "testKey")))
                 (DBName (packPTH "test_key")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef TestResultResult
        = ((((((FieldDef (HaskellName (packPTH "result")))
                 (DBName (packPTH "result")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef TestResultPassingDate
        = ((((((FieldDef (HaskellName (packPTH "passingDate")))
                 (DBName (packPTH "passing_date")))
                ((FTTypeCon Nothing) (packPTH "UTCTime")))
               SqlDayTime)
              [])
             True)
            NoReference
      persistIdField = TestResultId
      fieldLens TestResultId
        = (lensPTH entityKey)
            (\ Entity _ value_a15st key_a15su
               -> (Entity key_a15su) value_a15st)
      fieldLens TestResultTestKey
        = (lensPTH (testResultTestKey . entityVal))
            (\ Entity key_a15sv value_a15sw x_a15sx
               -> (Entity key_a15sv) value_a15sw {testResultTestKey = x_a15sx})
      fieldLens TestResultResult
        = (lensPTH (testResultResult . entityVal))
            (\ Entity key_a15sv value_a15sw x_a15sx
               -> (Entity key_a15sv) value_a15sw {testResultResult = x_a15sx})
      fieldLens TestResultPassingDate
        = (lensPTH (testResultPassingDate . entityVal))
            (\ Entity key_a15sv value_a15sw x_a15sx
               -> (Entity key_a15sv)
                    value_a15sw {testResultPassingDate = x_a15sx})
    instance ToBackendKey MongoContext TestResult where
      toBackendKey = unTestResultKey
      fromBackendKey = TestResultKey
    data User
      = User {userUsername :: !Text,
              userPassword :: !Text,
              userEmail :: !Text,
              userAvatar :: !Text,
              userFirstName :: !(Maybe Text),
              userSecondName :: !(Maybe Text),
              userBirthDay :: !(Maybe UTCTime),
              userSex :: !(Maybe Int),
              userCreatedTests :: ![ObjectId],
              userPassedTests :: ![TestResult]}
      deriving (Eq, Read, Show, Generic)
    type UserId = Key User
    instance PersistEntity User where
      type PersistEntityBackend User = MongoContext
      data Unique User = Email Text | Username Text
      newtype Key User
        = UserKey {unUserKey :: (BackendKey MongoContext)}
        deriving (Show,
                  Read,
                  Eq,
                  Ord,
                  path-pieces-0.2.1:Web.PathPieces.PathPiece,
                  http-api-data-0.3.7.2:Web.Internal.HttpApiData.ToHttpApiData,
                  http-api-data-0.3.7.2:Web.Internal.HttpApiData.FromHttpApiData,
                  PersistField,
                  persistent-2.8.1:Database.Persist.Sql.Class.PersistFieldSql,
                  Aeson.ToJSON,
                  Aeson.FromJSON)
      data EntityField User typ
        = typ ~ Key User => UserId |
          typ ~ Text => UserUsername |
          typ ~ Text => UserPassword |
          typ ~ Text => UserEmail |
          typ ~ Text => UserAvatar |
          typ ~ Maybe Text => UserFirstName |
          typ ~ Maybe Text => UserSecondName |
          typ ~ Maybe UTCTime => UserBirthDay |
          typ ~ Maybe Int => UserSex |
          typ ~ [ObjectId] => UserCreatedTests |
          typ ~ [TestResult] => UserPassedTests
      keyToValues
        = ((ghc-prim-0.5.1.1:GHC.Types.: [])
             . (toPersistValue . unUserKey))
      keyFromValues
        = ((fmap UserKey)
             . (fromPersistValue . Database.Persist.TH.headNote))
      entityDef _
        = (((((((((EntityDef (HaskellName (packPTH "User")))
                    (DBName (packPTH "user")))
                   (((((((FieldDef (HaskellName (packPTH "Id")))
                           (DBName (packPTH "id")))
                          ((FTTypeCon Nothing) (packPTH "UserId")))
                         SqlInt64)
                        [])
                       True)
                      ((ForeignRef (HaskellName (packPTH "User")))
                         ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                  [])
                 [((((((FieldDef (HaskellName (packPTH "username")))
                         (DBName (packPTH "username")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "password")))
                         (DBName (packPTH "password")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "email")))
                         (DBName (packPTH "email")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "avatar")))
                         (DBName (packPTH "avatar")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "firstName")))
                         (DBName (packPTH "first_name")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [packPTH "Maybe"])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "secondName")))
                         (DBName (packPTH "second_name")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [packPTH "Maybe"])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "birthDay")))
                         (DBName (packPTH "birth_day")))
                        ((FTTypeCon Nothing) (packPTH "UTCTime")))
                       SqlDayTime)
                      [packPTH "Maybe"])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "sex")))
                         (DBName (packPTH "sex")))
                        ((FTTypeCon Nothing) (packPTH "Int")))
                       SqlInt64)
                      [packPTH "Maybe"])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "createdTests")))
                         (DBName (packPTH "created_tests")))
                        (FTList ((FTTypeCon Nothing) (packPTH "ObjectId"))))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "passedTests")))
                         (DBName (packPTH "passed_tests")))
                        (FTList ((FTTypeCon Nothing) (packPTH "TestResult"))))
                       SqlString)
                      [])
                     True)
                    (EmbedRef
                       ((EmbedEntityDef (HaskellName (packPTH "TestResult")))
                          [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing) Nothing,
                           ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                           ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                             Nothing]))])
                [(((UniqueDef (HaskellName (packPTH "Email")))
                     (DBName (packPTH "email")))
                    [(HaskellName (packPTH "email"), DBName (packPTH "email"))])
                   [],
                 (((UniqueDef (HaskellName (packPTH "Username")))
                     (DBName (packPTH "username")))
                    [(HaskellName (packPTH "username"), DBName (packPTH "username"))])
                   []])
               [])
              [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
             (Data.Map.Internal.fromList []))
            False
      toPersistFields
        (User x_a15sy
              x_a15sz
              x_a15sA
              x_a15sB
              x_a15sC
              x_a15sD
              x_a15sE
              x_a15sF
              x_a15sG
              x_a15sH)
        = [SomePersistField x_a15sy, SomePersistField x_a15sz,
           SomePersistField x_a15sA, SomePersistField x_a15sB,
           SomePersistField x_a15sC, SomePersistField x_a15sD,
           SomePersistField x_a15sE, SomePersistField x_a15sF,
           SomePersistField x_a15sG, SomePersistField x_a15sH]
      fromPersistValues
        [x1_a15sJ,
         x2_a15sK,
         x3_a15sL,
         x4_a15sM,
         x5_a15sN,
         x6_a15sO,
         x7_a15sP,
         x8_a15sQ,
         x9_a15sR,
         x10_a15sS]
        = User
            <$>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "username")))
                 . fromPersistValue)
                x1_a15sJ
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "password")))
                 . fromPersistValue)
                x2_a15sK
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "email")))
                 . fromPersistValue)
                x3_a15sL
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "avatar")))
                 . fromPersistValue)
                x4_a15sM
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "firstName")))
                 . fromPersistValue)
                x5_a15sN
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "secondName")))
                 . fromPersistValue)
                x6_a15sO
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "birthDay")))
                 . fromPersistValue)
                x7_a15sP
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "sex")))
                 . fromPersistValue)
                x8_a15sQ
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "createdTests")))
                 . fromPersistValue)
                x9_a15sR
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "passedTests")))
                 . fromPersistValue)
                x10_a15sS
      fromPersistValues x_a15sI
        = (Left
             $ ((mappend (packPTH "User: fromPersistValues failed on: "))
                  (pack $ (show x_a15sI))))
      persistUniqueToFieldNames Email {}
        = [(HaskellName (packPTH "email"), DBName (packPTH "email"))]
      persistUniqueToFieldNames Username {}
        = [(HaskellName (packPTH "username"), DBName (packPTH "username"))]
      persistUniqueToValues (Email x_a15sT) = [toPersistValue x_a15sT]
      persistUniqueToValues (Username x_a15sU) = [toPersistValue x_a15sU]
      persistUniqueKeys
        (User _username_a15sV
              _password_a15sW
              _email_a15sX
              _avatar_a15sY
              _firstName_a15sZ
              _secondName_a15t0
              _birthDay_a15t1
              _sex_a15t2
              _createdTests_a15t3
              _passedTests_a15t4)
        = [Email _email_a15sX, Username _username_a15sV]
      persistFieldDef UserId
        = ((((((FieldDef (HaskellName (packPTH "Id")))
                 (DBName (packPTH "id")))
                ((FTTypeCon Nothing) (packPTH "UserId")))
               SqlInt64)
              [])
             True)
            ((ForeignRef (HaskellName (packPTH "User")))
               ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))
      persistFieldDef UserUsername
        = ((((((FieldDef (HaskellName (packPTH "username")))
                 (DBName (packPTH "username")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef UserPassword
        = ((((((FieldDef (HaskellName (packPTH "password")))
                 (DBName (packPTH "password")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef UserEmail
        = ((((((FieldDef (HaskellName (packPTH "email")))
                 (DBName (packPTH "email")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef UserAvatar
        = ((((((FieldDef (HaskellName (packPTH "avatar")))
                 (DBName (packPTH "avatar")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef UserFirstName
        = ((((((FieldDef (HaskellName (packPTH "firstName")))
                 (DBName (packPTH "first_name")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [packPTH "Maybe"])
             True)
            NoReference
      persistFieldDef UserSecondName
        = ((((((FieldDef (HaskellName (packPTH "secondName")))
                 (DBName (packPTH "second_name")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [packPTH "Maybe"])
             True)
            NoReference
      persistFieldDef UserBirthDay
        = ((((((FieldDef (HaskellName (packPTH "birthDay")))
                 (DBName (packPTH "birth_day")))
                ((FTTypeCon Nothing) (packPTH "UTCTime")))
               SqlDayTime)
              [packPTH "Maybe"])
             True)
            NoReference
      persistFieldDef UserSex
        = ((((((FieldDef (HaskellName (packPTH "sex")))
                 (DBName (packPTH "sex")))
                ((FTTypeCon Nothing) (packPTH "Int")))
               SqlInt64)
              [packPTH "Maybe"])
             True)
            NoReference
      persistFieldDef UserCreatedTests
        = ((((((FieldDef (HaskellName (packPTH "createdTests")))
                 (DBName (packPTH "created_tests")))
                (FTList ((FTTypeCon Nothing) (packPTH "ObjectId"))))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef UserPassedTests
        = ((((((FieldDef (HaskellName (packPTH "passedTests")))
                 (DBName (packPTH "passed_tests")))
                (FTList ((FTTypeCon Nothing) (packPTH "TestResult"))))
               SqlString)
              [])
             True)
            (EmbedRef
               ((EmbedEntityDef (HaskellName (packPTH "TestResult")))
                  [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing) Nothing,
                   ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                   ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                     Nothing]))
      persistIdField = UserId
      fieldLens UserId
        = (lensPTH entityKey)
            (\ Entity _ value_a15t5 key_a15t6
               -> (Entity key_a15t6) value_a15t5)
      fieldLens UserUsername
        = (lensPTH (userUsername . entityVal))
            (\ Entity key_a15t7 value_a15t8 x_a15t9
               -> (Entity key_a15t7) value_a15t8 {userUsername = x_a15t9})
      fieldLens UserPassword
        = (lensPTH (userPassword . entityVal))
            (\ Entity key_a15t7 value_a15t8 x_a15t9
               -> (Entity key_a15t7) value_a15t8 {userPassword = x_a15t9})
      fieldLens UserEmail
        = (lensPTH (userEmail . entityVal))
            (\ Entity key_a15t7 value_a15t8 x_a15t9
               -> (Entity key_a15t7) value_a15t8 {userEmail = x_a15t9})
      fieldLens UserAvatar
        = (lensPTH (userAvatar . entityVal))
            (\ Entity key_a15t7 value_a15t8 x_a15t9
               -> (Entity key_a15t7) value_a15t8 {userAvatar = x_a15t9})
      fieldLens UserFirstName
        = (lensPTH (userFirstName . entityVal))
            (\ Entity key_a15t7 value_a15t8 x_a15t9
               -> (Entity key_a15t7) value_a15t8 {userFirstName = x_a15t9})
      fieldLens UserSecondName
        = (lensPTH (userSecondName . entityVal))
            (\ Entity key_a15t7 value_a15t8 x_a15t9
               -> (Entity key_a15t7) value_a15t8 {userSecondName = x_a15t9})
      fieldLens UserBirthDay
        = (lensPTH (userBirthDay . entityVal))
            (\ Entity key_a15t7 value_a15t8 x_a15t9
               -> (Entity key_a15t7) value_a15t8 {userBirthDay = x_a15t9})
      fieldLens UserSex
        = (lensPTH (userSex . entityVal))
            (\ Entity key_a15t7 value_a15t8 x_a15t9
               -> (Entity key_a15t7) value_a15t8 {userSex = x_a15t9})
      fieldLens UserCreatedTests
        = (lensPTH (userCreatedTests . entityVal))
            (\ Entity key_a15t7 value_a15t8 x_a15t9
               -> (Entity key_a15t7) value_a15t8 {userCreatedTests = x_a15t9})
      fieldLens UserPassedTests
        = (lensPTH (userPassedTests . entityVal))
            (\ Entity key_a15t7 value_a15t8 x_a15t9
               -> (Entity key_a15t7) value_a15t8 {userPassedTests = x_a15t9})
    instance ToBackendKey MongoContext User where
      toBackendKey = unUserKey
      fromBackendKey = UserKey
    migrateAll :: persistent-2.8.1:Database.Persist.Sql.Types.Migration
    migrateAll
      = do let defs_a15ta
                 = [(((((((((EntityDef (HaskellName (packPTH "TestResult")))
                              (DBName (packPTH "test_result")))
                             (((((((FieldDef (HaskellName (packPTH "Id")))
                                     (DBName (packPTH "id")))
                                    ((FTTypeCon Nothing) (packPTH "TestResultId")))
                                   SqlInt64)
                                  [])
                                 True)
                                ((ForeignRef (HaskellName (packPTH "TestResult")))
                                   ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                            [])
                           [((((((FieldDef (HaskellName (packPTH "testKey")))
                                   (DBName (packPTH "test_key")))
                                  ((FTTypeCon Nothing) (packPTH "Text")))
                                 SqlString)
                                [])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "result")))
                                   (DBName (packPTH "result")))
                                  ((FTTypeCon Nothing) (packPTH "Text")))
                                 SqlString)
                                [])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "passingDate")))
                                   (DBName (packPTH "passing_date")))
                                  ((FTTypeCon Nothing) (packPTH "UTCTime")))
                                 SqlDayTime)
                                [])
                               True)
                              NoReference])
                          [])
                         [])
                        [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
                       (Data.Map.Internal.fromList []))
                      False,
                    (((((((((EntityDef (HaskellName (packPTH "User")))
                              (DBName (packPTH "user")))
                             (((((((FieldDef (HaskellName (packPTH "Id")))
                                     (DBName (packPTH "id")))
                                    ((FTTypeCon Nothing) (packPTH "UserId")))
                                   SqlInt64)
                                  [])
                                 True)
                                ((ForeignRef (HaskellName (packPTH "User")))
                                   ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                            [])
                           [((((((FieldDef (HaskellName (packPTH "username")))
                                   (DBName (packPTH "username")))
                                  ((FTTypeCon Nothing) (packPTH "Text")))
                                 SqlString)
                                [])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "password")))
                                   (DBName (packPTH "password")))
                                  ((FTTypeCon Nothing) (packPTH "Text")))
                                 SqlString)
                                [])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "email")))
                                   (DBName (packPTH "email")))
                                  ((FTTypeCon Nothing) (packPTH "Text")))
                                 SqlString)
                                [])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "avatar")))
                                   (DBName (packPTH "avatar")))
                                  ((FTTypeCon Nothing) (packPTH "Text")))
                                 SqlString)
                                [])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "firstName")))
                                   (DBName (packPTH "first_name")))
                                  ((FTTypeCon Nothing) (packPTH "Text")))
                                 SqlString)
                                [packPTH "Maybe"])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "secondName")))
                                   (DBName (packPTH "second_name")))
                                  ((FTTypeCon Nothing) (packPTH "Text")))
                                 SqlString)
                                [packPTH "Maybe"])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "birthDay")))
                                   (DBName (packPTH "birth_day")))
                                  ((FTTypeCon Nothing) (packPTH "UTCTime")))
                                 SqlDayTime)
                                [packPTH "Maybe"])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "sex")))
                                   (DBName (packPTH "sex")))
                                  ((FTTypeCon Nothing) (packPTH "Int")))
                                 SqlInt64)
                                [packPTH "Maybe"])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "createdTests")))
                                   (DBName (packPTH "created_tests")))
                                  (FTList ((FTTypeCon Nothing) (packPTH "ObjectId"))))
                                 SqlString)
                                [])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "passedTests")))
                                   (DBName (packPTH "passed_tests")))
                                  (FTList ((FTTypeCon Nothing) (packPTH "TestResult"))))
                                 SqlString)
                                [])
                               True)
                              (EmbedRef
                                 ((EmbedEntityDef (HaskellName (packPTH "TestResult")))
                                    [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing)
                                       Nothing,
                                     ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                                     ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                                       Nothing]))])
                          [(((UniqueDef (HaskellName (packPTH "Email")))
                               (DBName (packPTH "email")))
                              [(HaskellName (packPTH "email"), DBName (packPTH "email"))])
                             [],
                           (((UniqueDef (HaskellName (packPTH "Username")))
                               (DBName (packPTH "username")))
                              [(HaskellName (packPTH "username"), DBName (packPTH "username"))])
                             []])
                         [])
                        [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
                       (Data.Map.Internal.fromList []))
                      False]
           (persistent-2.8.1:Database.Persist.Sql.Migration.migrate
              defs_a15ta)
             ((((((((((EntityDef (HaskellName (packPTH "TestResult")))
                        (DBName (packPTH "test_result")))
                       (((((((FieldDef (HaskellName (packPTH "Id")))
                               (DBName (packPTH "id")))
                              ((FTTypeCon Nothing) (packPTH "TestResultId")))
                             SqlInt64)
                            [])
                           True)
                          ((ForeignRef (HaskellName (packPTH "TestResult")))
                             ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                      [])
                     [((((((FieldDef (HaskellName (packPTH "testKey")))
                             (DBName (packPTH "test_key")))
                            ((FTTypeCon Nothing) (packPTH "Text")))
                           SqlString)
                          [])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "result")))
                             (DBName (packPTH "result")))
                            ((FTTypeCon Nothing) (packPTH "Text")))
                           SqlString)
                          [])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "passingDate")))
                             (DBName (packPTH "passing_date")))
                            ((FTTypeCon Nothing) (packPTH "UTCTime")))
                           SqlDayTime)
                          [])
                         True)
                        NoReference])
                    [])
                   [])
                  [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
                 (Data.Map.Internal.fromList []))
                False)
           (persistent-2.8.1:Database.Persist.Sql.Migration.migrate
              defs_a15ta)
             ((((((((((EntityDef (HaskellName (packPTH "User")))
                        (DBName (packPTH "user")))
                       (((((((FieldDef (HaskellName (packPTH "Id")))
                               (DBName (packPTH "id")))
                              ((FTTypeCon Nothing) (packPTH "UserId")))
                             SqlInt64)
                            [])
                           True)
                          ((ForeignRef (HaskellName (packPTH "User")))
                             ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                      [])
                     [((((((FieldDef (HaskellName (packPTH "username")))
                             (DBName (packPTH "username")))
                            ((FTTypeCon Nothing) (packPTH "Text")))
                           SqlString)
                          [])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "password")))
                             (DBName (packPTH "password")))
                            ((FTTypeCon Nothing) (packPTH "Text")))
                           SqlString)
                          [])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "email")))
                             (DBName (packPTH "email")))
                            ((FTTypeCon Nothing) (packPTH "Text")))
                           SqlString)
                          [])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "avatar")))
                             (DBName (packPTH "avatar")))
                            ((FTTypeCon Nothing) (packPTH "Text")))
                           SqlString)
                          [])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "firstName")))
                             (DBName (packPTH "first_name")))
                            ((FTTypeCon Nothing) (packPTH "Text")))
                           SqlString)
                          [packPTH "Maybe"])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "secondName")))
                             (DBName (packPTH "second_name")))
                            ((FTTypeCon Nothing) (packPTH "Text")))
                           SqlString)
                          [packPTH "Maybe"])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "birthDay")))
                             (DBName (packPTH "birth_day")))
                            ((FTTypeCon Nothing) (packPTH "UTCTime")))
                           SqlDayTime)
                          [packPTH "Maybe"])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "sex")))
                             (DBName (packPTH "sex")))
                            ((FTTypeCon Nothing) (packPTH "Int")))
                           SqlInt64)
                          [packPTH "Maybe"])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "createdTests")))
                             (DBName (packPTH "created_tests")))
                            (FTList ((FTTypeCon Nothing) (packPTH "ObjectId"))))
                           SqlString)
                          [])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "passedTests")))
                             (DBName (packPTH "passed_tests")))
                            (FTList ((FTTypeCon Nothing) (packPTH "TestResult"))))
                           SqlString)
                          [])
                         True)
                        (EmbedRef
                           ((EmbedEntityDef (HaskellName (packPTH "TestResult")))
                              [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing) Nothing,
                               ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                               ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                                 Nothing]))])
                    [(((UniqueDef (HaskellName (packPTH "Email")))
                         (DBName (packPTH "email")))
                        [(HaskellName (packPTH "email"), DBName (packPTH "email"))])
                       [],
                     (((UniqueDef (HaskellName (packPTH "Username")))
                         (DBName (packPTH "username")))
                        [(HaskellName (packPTH "username"), DBName (packPTH "username"))])
                       []])
                   [])
                  [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
                 (Data.Map.Internal.fromList []))
                False)
