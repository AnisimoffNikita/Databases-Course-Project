/home/nikita/Projects/labs/Databases/Course-Project/Server/src/Model/User.hs:(27,103)-(47,2): Splicing expression
    Language.Haskell.TH.Quote.quoteExp
      persistLowerCase
      "\n\
      \TestResult\n\
      \  testKey       Text\n\
      \  result        Text\n\
      \  passingDate   UTCTime\n\
      \  deriving      Eq Read Show Generic\n\
      \User\n\
      \  username      Text\n\
      \  password      Text\n\
      \  email         Text\n\
      \  avatar        Text\n\
      \  firstName     Text Maybe\n\
      \  secondName    Text Maybe\n\
      \  birthDay      UTCTime Maybe\n\
      \  sex           Int Maybe\n\
      \  createdTests  [ObjectId]\n\
      \  passedTests   [TestResult]\n\
      \  Email         email\n\
      \  Username      username\n\
      \  deriving      Eq Read Show Generic\n"
  ======>
    [(((((((((EntityDef (HaskellName (packPTH "TestResult")))
               (DBName (packPTH "test_result")))
              (((((((FieldDef (HaskellName (packPTH "Id")))
                      (DBName (packPTH "id")))
                     ((FTTypeCon Nothing) (packPTH "TestResultId")))
                    SqlInt64)
                   [])
                  True)
                 ((ForeignRef (HaskellName (packPTH "TestResult")))
                    ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
             [])
            [((((((FieldDef (HaskellName (packPTH "testKey")))
                    (DBName (packPTH "test_key")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for testKey")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "result")))
                    (DBName (packPTH "result")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for result")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "passingDate")))
                    (DBName (packPTH "passing_date")))
                   ((FTTypeCon Nothing) (packPTH "UTCTime")))
                  (SqlOther (packPTH "SqlType unset for passingDate")))
                 [])
                True)
               NoReference])
           [])
          [])
         [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
        (Data.Map.Internal.fromList []))
       False
       {entityFields = [((((((FieldDef (HaskellName (packPTH "testKey")))
                               (DBName (packPTH "test_key")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "result")))
                               (DBName (packPTH "result")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "passingDate")))
                               (DBName (packPTH "passing_date")))
                              ((FTTypeCon Nothing) (packPTH "UTCTime")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy UTCTime)))
                            [])
                           True)
                          NoReference],
        entityId = ((((((FieldDef (HaskellName (packPTH "Id")))
                          (DBName (packPTH "id")))
                         ((FTTypeCon Nothing) (packPTH "TestResultId")))
                        (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                           (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                       [])
                      True)
                     ((ForeignRef (HaskellName (packPTH "TestResult")))
                        ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))},
     (((((((((EntityDef (HaskellName (packPTH "User")))
               (DBName (packPTH "user")))
              (((((((FieldDef (HaskellName (packPTH "Id")))
                      (DBName (packPTH "id")))
                     ((FTTypeCon Nothing) (packPTH "UserId")))
                    SqlInt64)
                   [])
                  True)
                 ((ForeignRef (HaskellName (packPTH "User")))
                    ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
             [])
            [((((((FieldDef (HaskellName (packPTH "username")))
                    (DBName (packPTH "username")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for username")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "password")))
                    (DBName (packPTH "password")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for password")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "email")))
                    (DBName (packPTH "email")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for email")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "avatar")))
                    (DBName (packPTH "avatar")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for avatar")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "firstName")))
                    (DBName (packPTH "first_name")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for firstName")))
                 [packPTH "Maybe"])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "secondName")))
                    (DBName (packPTH "second_name")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for secondName")))
                 [packPTH "Maybe"])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "birthDay")))
                    (DBName (packPTH "birth_day")))
                   ((FTTypeCon Nothing) (packPTH "UTCTime")))
                  (SqlOther (packPTH "SqlType unset for birthDay")))
                 [packPTH "Maybe"])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "sex")))
                    (DBName (packPTH "sex")))
                   ((FTTypeCon Nothing) (packPTH "Int")))
                  (SqlOther (packPTH "SqlType unset for sex")))
                 [packPTH "Maybe"])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "createdTests")))
                    (DBName (packPTH "created_tests")))
                   (FTList ((FTTypeCon Nothing) (packPTH "ObjectId"))))
                  (SqlOther (packPTH "SqlType unset for createdTests")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "passedTests")))
                    (DBName (packPTH "passed_tests")))
                   (FTList ((FTTypeCon Nothing) (packPTH "TestResult"))))
                  (SqlOther (packPTH "SqlType unset for passedTests")))
                 [])
                True)
               (EmbedRef
                  ((EmbedEntityDef (HaskellName (packPTH "TestResult")))
                     [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing) Nothing,
                      ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                      ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                        Nothing]))])
           [(((UniqueDef (HaskellName (packPTH "Email")))
                (DBName (packPTH "email")))
               [(HaskellName (packPTH "email"), DBName (packPTH "email"))])
              [],
            (((UniqueDef (HaskellName (packPTH "Username")))
                (DBName (packPTH "username")))
               [(HaskellName (packPTH "username"), DBName (packPTH "username"))])
              []])
          [])
         [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
        (Data.Map.Internal.fromList []))
       False
       {entityFields = [((((((FieldDef (HaskellName (packPTH "username")))
                               (DBName (packPTH "username")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "password")))
                               (DBName (packPTH "password")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "email")))
                               (DBName (packPTH "email")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "avatar")))
                               (DBName (packPTH "avatar")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "firstName")))
                               (DBName (packPTH "first_name")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [packPTH "Maybe"])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "secondName")))
                               (DBName (packPTH "second_name")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [packPTH "Maybe"])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "birthDay")))
                               (DBName (packPTH "birth_day")))
                              ((FTTypeCon Nothing) (packPTH "UTCTime")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy UTCTime)))
                            [packPTH "Maybe"])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "sex")))
                               (DBName (packPTH "sex")))
                              ((FTTypeCon Nothing) (packPTH "Int")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Int)))
                            [packPTH "Maybe"])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "createdTests")))
                               (DBName (packPTH "created_tests")))
                              (FTList ((FTTypeCon Nothing) (packPTH "ObjectId"))))
                             SqlString)
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "passedTests")))
                               (DBName (packPTH "passed_tests")))
                              (FTList ((FTTypeCon Nothing) (packPTH "TestResult"))))
                             SqlString)
                            [])
                           True)
                          (EmbedRef
                             ((EmbedEntityDef (HaskellName (packPTH "TestResult")))
                                [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing) Nothing,
                                 ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                                 ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                                   Nothing]))],
        entityId = ((((((FieldDef (HaskellName (packPTH "Id")))
                          (DBName (packPTH "id")))
                         ((FTTypeCon Nothing) (packPTH "UserId")))
                        (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                           (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                       [])
                      True)
                     ((ForeignRef (HaskellName (packPTH "User")))
                        ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))}]
/home/nikita/Projects/labs/Databases/Course-Project/Server/src/Model/User.hs:(27,1)-(47,2): Splicing declarations
    share
      [mkPersist (mkPersistSettings (ConT ''MongoContext)),
       mkMigrate "migrateAll"]
      ([(((((((((EntityDef (HaskellName (packPTH "TestResult")))
                  (DBName (packPTH "test_result")))
                 (((((((FieldDef (HaskellName (packPTH "Id")))
                         (DBName (packPTH "id")))
                        ((FTTypeCon Nothing) (packPTH "TestResultId")))
                       SqlInt64)
                      [])
                     True)
                    ((ForeignRef (HaskellName (packPTH "TestResult")))
                       ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                [])
               [((((((FieldDef (HaskellName (packPTH "testKey")))
                       (DBName (packPTH "test_key")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for testKey")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "result")))
                       (DBName (packPTH "result")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for result")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "passingDate")))
                       (DBName (packPTH "passing_date")))
                      ((FTTypeCon Nothing) (packPTH "UTCTime")))
                     (SqlOther (packPTH "SqlType unset for passingDate")))
                    [])
                   True)
                  NoReference])
              [])
             [])
            [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
           (Data.Map.Internal.fromList []))
          False
          {entityFields = [((((((FieldDef (HaskellName (packPTH "testKey")))
                                  (DBName (packPTH "test_key")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "result")))
                                  (DBName (packPTH "result")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "passingDate")))
                                  (DBName (packPTH "passing_date")))
                                 ((FTTypeCon Nothing) (packPTH "UTCTime")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy UTCTime)))
                               [])
                              True)
                             NoReference],
           entityId = ((((((FieldDef (HaskellName (packPTH "Id")))
                             (DBName (packPTH "id")))
                            ((FTTypeCon Nothing) (packPTH "TestResultId")))
                           (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                              (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                          [])
                         True)
                        ((ForeignRef (HaskellName (packPTH "TestResult")))
                           ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))},
        (((((((((EntityDef (HaskellName (packPTH "User")))
                  (DBName (packPTH "user")))
                 (((((((FieldDef (HaskellName (packPTH "Id")))
                         (DBName (packPTH "id")))
                        ((FTTypeCon Nothing) (packPTH "UserId")))
                       SqlInt64)
                      [])
                     True)
                    ((ForeignRef (HaskellName (packPTH "User")))
                       ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                [])
               [((((((FieldDef (HaskellName (packPTH "username")))
                       (DBName (packPTH "username")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for username")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "password")))
                       (DBName (packPTH "password")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for password")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "email")))
                       (DBName (packPTH "email")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for email")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "avatar")))
                       (DBName (packPTH "avatar")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for avatar")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "firstName")))
                       (DBName (packPTH "first_name")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for firstName")))
                    [packPTH "Maybe"])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "secondName")))
                       (DBName (packPTH "second_name")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for secondName")))
                    [packPTH "Maybe"])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "birthDay")))
                       (DBName (packPTH "birth_day")))
                      ((FTTypeCon Nothing) (packPTH "UTCTime")))
                     (SqlOther (packPTH "SqlType unset for birthDay")))
                    [packPTH "Maybe"])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "sex")))
                       (DBName (packPTH "sex")))
                      ((FTTypeCon Nothing) (packPTH "Int")))
                     (SqlOther (packPTH "SqlType unset for sex")))
                    [packPTH "Maybe"])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "createdTests")))
                       (DBName (packPTH "created_tests")))
                      (FTList ((FTTypeCon Nothing) (packPTH "ObjectId"))))
                     (SqlOther (packPTH "SqlType unset for createdTests")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "passedTests")))
                       (DBName (packPTH "passed_tests")))
                      (FTList ((FTTypeCon Nothing) (packPTH "TestResult"))))
                     (SqlOther (packPTH "SqlType unset for passedTests")))
                    [])
                   True)
                  (EmbedRef
                     ((EmbedEntityDef (HaskellName (packPTH "TestResult")))
                        [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing) Nothing,
                         ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                         ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                           Nothing]))])
              [(((UniqueDef (HaskellName (packPTH "Email")))
                   (DBName (packPTH "email")))
                  [(HaskellName (packPTH "email"), DBName (packPTH "email"))])
                 [],
               (((UniqueDef (HaskellName (packPTH "Username")))
                   (DBName (packPTH "username")))
                  [(HaskellName (packPTH "username"), DBName (packPTH "username"))])
                 []])
             [])
            [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
           (Data.Map.Internal.fromList []))
          False
          {entityFields = [((((((FieldDef (HaskellName (packPTH "username")))
                                  (DBName (packPTH "username")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "password")))
                                  (DBName (packPTH "password")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "email")))
                                  (DBName (packPTH "email")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "avatar")))
                                  (DBName (packPTH "avatar")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "firstName")))
                                  (DBName (packPTH "first_name")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [packPTH "Maybe"])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "secondName")))
                                  (DBName (packPTH "second_name")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [packPTH "Maybe"])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "birthDay")))
                                  (DBName (packPTH "birth_day")))
                                 ((FTTypeCon Nothing) (packPTH "UTCTime")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy UTCTime)))
                               [packPTH "Maybe"])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "sex")))
                                  (DBName (packPTH "sex")))
                                 ((FTTypeCon Nothing) (packPTH "Int")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Int)))
                               [packPTH "Maybe"])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "createdTests")))
                                  (DBName (packPTH "created_tests")))
                                 (FTList ((FTTypeCon Nothing) (packPTH "ObjectId"))))
                                SqlString)
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "passedTests")))
                                  (DBName (packPTH "passed_tests")))
                                 (FTList ((FTTypeCon Nothing) (packPTH "TestResult"))))
                                SqlString)
                               [])
                              True)
                             (EmbedRef
                                ((EmbedEntityDef (HaskellName (packPTH "TestResult")))
                                   [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing) Nothing,
                                    ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                                    ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                                      Nothing]))],
           entityId = ((((((FieldDef (HaskellName (packPTH "Id")))
                             (DBName (packPTH "id")))
                            ((FTTypeCon Nothing) (packPTH "UserId")))
                           (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                              (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                          [])
                         True)
                        ((ForeignRef (HaskellName (packPTH "User")))
                           ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))}])
  ======>
    instance PersistField TestResult where
      toPersistValue
        = \ ent_a28vy
            -> (PersistMap
                  $ ((Prelude.zip
                        ((Prelude.map pack) ["testKey", "result", "passingDate"]))
                       ((Prelude.map toPersistValue) $ (toPersistFields ent_a28vy))))
      fromPersistValue
        = ((\ x_a28vz
              -> let
                   columns_a28vA
                     = unordered-containers-0.2.9.0:Data.HashMap.Strict.fromList x_a28vz
                 in
                   (fromPersistValues
                      $ ((Prelude.map
                            (\ name_a28vB
                               -> case
                                      (unordered-containers-0.2.9.0:Data.HashMap.Base.lookup
                                         (pack name_a28vB))
                                        columns_a28vA
                                  of
                                    Just v_a28vC -> v_a28vC
                                    Nothing -> PersistNull))
                           $ ["testKey", "result", "passingDate"])))
             <=< getPersistMap)
    instance persistent-2.8.1:Database.Persist.Sql.Class.PersistFieldSql TestResult where
      persistent-2.8.1:Database.Persist.Sql.Class.sqlType _ = SqlString
    instance PersistField User where
      toPersistValue
        = \ ent_a28vD
            -> (PersistMap
                  $ ((Prelude.zip
                        ((Prelude.map pack)
                           ["username", "password", "email", "avatar", "firstName",
                            "secondName", "birthDay", "sex", "createdTests", "passedTests"]))
                       ((Prelude.map toPersistValue) $ (toPersistFields ent_a28vD))))
      fromPersistValue
        = ((\ x_a28vE
              -> let
                   columns_a28vF
                     = unordered-containers-0.2.9.0:Data.HashMap.Strict.fromList x_a28vE
                 in
                   (fromPersistValues
                      $ ((Prelude.map
                            (\ name_a28vG
                               -> case
                                      (unordered-containers-0.2.9.0:Data.HashMap.Base.lookup
                                         (pack name_a28vG))
                                        columns_a28vF
                                  of
                                    Just v_a28vH -> v_a28vH
                                    Nothing -> PersistNull))
                           $ ["username", "password", "email", "avatar", "firstName",
                              "secondName", "birthDay", "sex", "createdTests", "passedTests"])))
             <=< getPersistMap)
    instance persistent-2.8.1:Database.Persist.Sql.Class.PersistFieldSql User where
      persistent-2.8.1:Database.Persist.Sql.Class.sqlType _ = SqlString
    data TestResult
      = TestResult {testResultTestKey :: !Text,
                    testResultResult :: !Text,
                    testResultPassingDate :: !UTCTime}
      deriving (Eq, Read, Show, Generic)
    type TestResultId = Key TestResult
    instance PersistEntity TestResult where
      type PersistEntityBackend TestResult = MongoContext
      data Unique TestResult
      newtype Key TestResult
        = TestResultKey {unTestResultKey :: (BackendKey MongoContext)}
        deriving (Show,
                  Read,
                  Eq,
                  Ord,
                  path-pieces-0.2.1:Web.PathPieces.PathPiece,
                  http-api-data-0.3.7.2:Web.Internal.HttpApiData.ToHttpApiData,
                  http-api-data-0.3.7.2:Web.Internal.HttpApiData.FromHttpApiData,
                  PersistField,
                  persistent-2.8.1:Database.Persist.Sql.Class.PersistFieldSql,
                  Aeson.ToJSON,
                  Aeson.FromJSON)
      data EntityField TestResult typ
        = typ ~ Key TestResult => TestResultId |
          typ ~ Text => TestResultTestKey |
          typ ~ Text => TestResultResult |
          typ ~ UTCTime => TestResultPassingDate
      keyToValues
        = ((ghc-prim-0.5.1.1:GHC.Types.: [])
             . (toPersistValue . unTestResultKey))
      keyFromValues
        = ((fmap TestResultKey)
             . (fromPersistValue . Database.Persist.TH.headNote))
      entityDef _
        = (((((((((EntityDef (HaskellName (packPTH "TestResult")))
                    (DBName (packPTH "test_result")))
                   (((((((FieldDef (HaskellName (packPTH "Id")))
                           (DBName (packPTH "id")))
                          ((FTTypeCon Nothing) (packPTH "TestResultId")))
                         SqlInt64)
                        [])
                       True)
                      ((ForeignRef (HaskellName (packPTH "TestResult")))
                         ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                  [])
                 [((((((FieldDef (HaskellName (packPTH "testKey")))
                         (DBName (packPTH "test_key")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "result")))
                         (DBName (packPTH "result")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "passingDate")))
                         (DBName (packPTH "passing_date")))
                        ((FTTypeCon Nothing) (packPTH "UTCTime")))
                       SqlDayTime)
                      [])
                     True)
                    NoReference])
                [])
               [])
              [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
             (Data.Map.Internal.fromList []))
            False
      toPersistFields (TestResult x_a28vI x_a28vJ x_a28vK)
        = [SomePersistField x_a28vI, SomePersistField x_a28vJ,
           SomePersistField x_a28vK]
      fromPersistValues [x1_a28vM, x2_a28vN, x3_a28vO]
        = TestResult
            <$>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "testKey")))
                 . fromPersistValue)
                x1_a28vM
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "result")))
                 . fromPersistValue)
                x2_a28vN
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "passingDate")))
                 . fromPersistValue)
                x3_a28vO
      fromPersistValues x_a28vL
        = (Left
             $ ((mappend (packPTH "TestResult: fromPersistValues failed on: "))
                  (pack $ (show x_a28vL))))
      persistUniqueToFieldNames _
        = error "Degenerate case, should never happen"
      persistUniqueToValues _
        = error "Degenerate case, should never happen"
      persistUniqueKeys
        (TestResult _testKey_a28vP _result_a28vQ _passingDate_a28vR)
        = []
      persistFieldDef TestResultId
        = ((((((FieldDef (HaskellName (packPTH "Id")))
                 (DBName (packPTH "id")))
                ((FTTypeCon Nothing) (packPTH "TestResultId")))
               SqlInt64)
              [])
             True)
            ((ForeignRef (HaskellName (packPTH "TestResult")))
               ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))
      persistFieldDef TestResultTestKey
        = ((((((FieldDef (HaskellName (packPTH "testKey")))
                 (DBName (packPTH "test_key")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef TestResultResult
        = ((((((FieldDef (HaskellName (packPTH "result")))
                 (DBName (packPTH "result")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef TestResultPassingDate
        = ((((((FieldDef (HaskellName (packPTH "passingDate")))
                 (DBName (packPTH "passing_date")))
                ((FTTypeCon Nothing) (packPTH "UTCTime")))
               SqlDayTime)
              [])
             True)
            NoReference
      persistIdField = TestResultId
      fieldLens TestResultId
        = (lensPTH entityKey)
            (\ Entity _ value_a28vS key_a28vT
               -> (Entity key_a28vT) value_a28vS)
      fieldLens TestResultTestKey
        = (lensPTH (testResultTestKey . entityVal))
            (\ Entity key_a28vU value_a28vV x_a28vW
               -> (Entity key_a28vU) value_a28vV {testResultTestKey = x_a28vW})
      fieldLens TestResultResult
        = (lensPTH (testResultResult . entityVal))
            (\ Entity key_a28vU value_a28vV x_a28vW
               -> (Entity key_a28vU) value_a28vV {testResultResult = x_a28vW})
      fieldLens TestResultPassingDate
        = (lensPTH (testResultPassingDate . entityVal))
            (\ Entity key_a28vU value_a28vV x_a28vW
               -> (Entity key_a28vU)
                    value_a28vV {testResultPassingDate = x_a28vW})
    instance ToBackendKey MongoContext TestResult where
      toBackendKey = unTestResultKey
      fromBackendKey = TestResultKey
    data User
      = User {userUsername :: !Text,
              userPassword :: !Text,
              userEmail :: !Text,
              userAvatar :: !Text,
              userFirstName :: !(Maybe Text),
              userSecondName :: !(Maybe Text),
              userBirthDay :: !(Maybe UTCTime),
              userSex :: !(Maybe Int),
              userCreatedTests :: ![ObjectId],
              userPassedTests :: ![TestResult]}
      deriving (Eq, Read, Show, Generic)
    type UserId = Key User
    instance PersistEntity User where
      type PersistEntityBackend User = MongoContext
      data Unique User = Email Text | Username Text
      newtype Key User
        = UserKey {unUserKey :: (BackendKey MongoContext)}
        deriving (Show,
                  Read,
                  Eq,
                  Ord,
                  path-pieces-0.2.1:Web.PathPieces.PathPiece,
                  http-api-data-0.3.7.2:Web.Internal.HttpApiData.ToHttpApiData,
                  http-api-data-0.3.7.2:Web.Internal.HttpApiData.FromHttpApiData,
                  PersistField,
                  persistent-2.8.1:Database.Persist.Sql.Class.PersistFieldSql,
                  Aeson.ToJSON,
                  Aeson.FromJSON)
      data EntityField User typ
        = typ ~ Key User => UserId |
          typ ~ Text => UserUsername |
          typ ~ Text => UserPassword |
          typ ~ Text => UserEmail |
          typ ~ Text => UserAvatar |
          typ ~ Maybe Text => UserFirstName |
          typ ~ Maybe Text => UserSecondName |
          typ ~ Maybe UTCTime => UserBirthDay |
          typ ~ Maybe Int => UserSex |
          typ ~ [ObjectId] => UserCreatedTests |
          typ ~ [TestResult] => UserPassedTests
      keyToValues
        = ((ghc-prim-0.5.1.1:GHC.Types.: [])
             . (toPersistValue . unUserKey))
      keyFromValues
        = ((fmap UserKey)
             . (fromPersistValue . Database.Persist.TH.headNote))
      entityDef _
        = (((((((((EntityDef (HaskellName (packPTH "User")))
                    (DBName (packPTH "user")))
                   (((((((FieldDef (HaskellName (packPTH "Id")))
                           (DBName (packPTH "id")))
                          ((FTTypeCon Nothing) (packPTH "UserId")))
                         SqlInt64)
                        [])
                       True)
                      ((ForeignRef (HaskellName (packPTH "User")))
                         ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                  [])
                 [((((((FieldDef (HaskellName (packPTH "username")))
                         (DBName (packPTH "username")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "password")))
                         (DBName (packPTH "password")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "email")))
                         (DBName (packPTH "email")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "avatar")))
                         (DBName (packPTH "avatar")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "firstName")))
                         (DBName (packPTH "first_name")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [packPTH "Maybe"])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "secondName")))
                         (DBName (packPTH "second_name")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [packPTH "Maybe"])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "birthDay")))
                         (DBName (packPTH "birth_day")))
                        ((FTTypeCon Nothing) (packPTH "UTCTime")))
                       SqlDayTime)
                      [packPTH "Maybe"])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "sex")))
                         (DBName (packPTH "sex")))
                        ((FTTypeCon Nothing) (packPTH "Int")))
                       SqlInt64)
                      [packPTH "Maybe"])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "createdTests")))
                         (DBName (packPTH "created_tests")))
                        (FTList ((FTTypeCon Nothing) (packPTH "ObjectId"))))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "passedTests")))
                         (DBName (packPTH "passed_tests")))
                        (FTList ((FTTypeCon Nothing) (packPTH "TestResult"))))
                       SqlString)
                      [])
                     True)
                    (EmbedRef
                       ((EmbedEntityDef (HaskellName (packPTH "TestResult")))
                          [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing) Nothing,
                           ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                           ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                             Nothing]))])
                [(((UniqueDef (HaskellName (packPTH "Email")))
                     (DBName (packPTH "email")))
                    [(HaskellName (packPTH "email"), DBName (packPTH "email"))])
                   [],
                 (((UniqueDef (HaskellName (packPTH "Username")))
                     (DBName (packPTH "username")))
                    [(HaskellName (packPTH "username"), DBName (packPTH "username"))])
                   []])
               [])
              [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
             (Data.Map.Internal.fromList []))
            False
      toPersistFields
        (User x_a28vX
              x_a28vY
              x_a28vZ
              x_a28w0
              x_a28w1
              x_a28w2
              x_a28w3
              x_a28w4
              x_a28w5
              x_a28w6)
        = [SomePersistField x_a28vX, SomePersistField x_a28vY,
           SomePersistField x_a28vZ, SomePersistField x_a28w0,
           SomePersistField x_a28w1, SomePersistField x_a28w2,
           SomePersistField x_a28w3, SomePersistField x_a28w4,
           SomePersistField x_a28w5, SomePersistField x_a28w6]
      fromPersistValues
        [x1_a28w8,
         x2_a28w9,
         x3_a28wa,
         x4_a28wb,
         x5_a28wc,
         x6_a28wd,
         x7_a28we,
         x8_a28wf,
         x9_a28wg,
         x10_a28wh]
        = User
            <$>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "username")))
                 . fromPersistValue)
                x1_a28w8
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "password")))
                 . fromPersistValue)
                x2_a28w9
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "email")))
                 . fromPersistValue)
                x3_a28wa
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "avatar")))
                 . fromPersistValue)
                x4_a28wb
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "firstName")))
                 . fromPersistValue)
                x5_a28wc
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "secondName")))
                 . fromPersistValue)
                x6_a28wd
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "birthDay")))
                 . fromPersistValue)
                x7_a28we
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "sex")))
                 . fromPersistValue)
                x8_a28wf
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "createdTests")))
                 . fromPersistValue)
                x9_a28wg
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "passedTests")))
                 . fromPersistValue)
                x10_a28wh
      fromPersistValues x_a28w7
        = (Left
             $ ((mappend (packPTH "User: fromPersistValues failed on: "))
                  (pack $ (show x_a28w7))))
      persistUniqueToFieldNames Email {}
        = [(HaskellName (packPTH "email"), DBName (packPTH "email"))]
      persistUniqueToFieldNames Username {}
        = [(HaskellName (packPTH "username"), DBName (packPTH "username"))]
      persistUniqueToValues (Email x_a28wi) = [toPersistValue x_a28wi]
      persistUniqueToValues (Username x_a28wj) = [toPersistValue x_a28wj]
      persistUniqueKeys
        (User _username_a28wk
              _password_a28wl
              _email_a28wm
              _avatar_a28wn
              _firstName_a28wo
              _secondName_a28wp
              _birthDay_a28wq
              _sex_a28wr
              _createdTests_a28ws
              _passedTests_a28wt)
        = [Email _email_a28wm, Username _username_a28wk]
      persistFieldDef UserId
        = ((((((FieldDef (HaskellName (packPTH "Id")))
                 (DBName (packPTH "id")))
                ((FTTypeCon Nothing) (packPTH "UserId")))
               SqlInt64)
              [])
             True)
            ((ForeignRef (HaskellName (packPTH "User")))
               ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))
      persistFieldDef UserUsername
        = ((((((FieldDef (HaskellName (packPTH "username")))
                 (DBName (packPTH "username")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef UserPassword
        = ((((((FieldDef (HaskellName (packPTH "password")))
                 (DBName (packPTH "password")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef UserEmail
        = ((((((FieldDef (HaskellName (packPTH "email")))
                 (DBName (packPTH "email")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef UserAvatar
        = ((((((FieldDef (HaskellName (packPTH "avatar")))
                 (DBName (packPTH "avatar")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef UserFirstName
        = ((((((FieldDef (HaskellName (packPTH "firstName")))
                 (DBName (packPTH "first_name")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [packPTH "Maybe"])
             True)
            NoReference
      persistFieldDef UserSecondName
        = ((((((FieldDef (HaskellName (packPTH "secondName")))
                 (DBName (packPTH "second_name")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [packPTH "Maybe"])
             True)
            NoReference
      persistFieldDef UserBirthDay
        = ((((((FieldDef (HaskellName (packPTH "birthDay")))
                 (DBName (packPTH "birth_day")))
                ((FTTypeCon Nothing) (packPTH "UTCTime")))
               SqlDayTime)
              [packPTH "Maybe"])
             True)
            NoReference
      persistFieldDef UserSex
        = ((((((FieldDef (HaskellName (packPTH "sex")))
                 (DBName (packPTH "sex")))
                ((FTTypeCon Nothing) (packPTH "Int")))
               SqlInt64)
              [packPTH "Maybe"])
             True)
            NoReference
      persistFieldDef UserCreatedTests
        = ((((((FieldDef (HaskellName (packPTH "createdTests")))
                 (DBName (packPTH "created_tests")))
                (FTList ((FTTypeCon Nothing) (packPTH "ObjectId"))))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef UserPassedTests
        = ((((((FieldDef (HaskellName (packPTH "passedTests")))
                 (DBName (packPTH "passed_tests")))
                (FTList ((FTTypeCon Nothing) (packPTH "TestResult"))))
               SqlString)
              [])
             True)
            (EmbedRef
               ((EmbedEntityDef (HaskellName (packPTH "TestResult")))
                  [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing) Nothing,
                   ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                   ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                     Nothing]))
      persistIdField = UserId
      fieldLens UserId
        = (lensPTH entityKey)
            (\ Entity _ value_a28wu key_a28wv
               -> (Entity key_a28wv) value_a28wu)
      fieldLens UserUsername
        = (lensPTH (userUsername . entityVal))
            (\ Entity key_a28ww value_a28wx x_a28wy
               -> (Entity key_a28ww) value_a28wx {userUsername = x_a28wy})
      fieldLens UserPassword
        = (lensPTH (userPassword . entityVal))
            (\ Entity key_a28ww value_a28wx x_a28wy
               -> (Entity key_a28ww) value_a28wx {userPassword = x_a28wy})
      fieldLens UserEmail
        = (lensPTH (userEmail . entityVal))
            (\ Entity key_a28ww value_a28wx x_a28wy
               -> (Entity key_a28ww) value_a28wx {userEmail = x_a28wy})
      fieldLens UserAvatar
        = (lensPTH (userAvatar . entityVal))
            (\ Entity key_a28ww value_a28wx x_a28wy
               -> (Entity key_a28ww) value_a28wx {userAvatar = x_a28wy})
      fieldLens UserFirstName
        = (lensPTH (userFirstName . entityVal))
            (\ Entity key_a28ww value_a28wx x_a28wy
               -> (Entity key_a28ww) value_a28wx {userFirstName = x_a28wy})
      fieldLens UserSecondName
        = (lensPTH (userSecondName . entityVal))
            (\ Entity key_a28ww value_a28wx x_a28wy
               -> (Entity key_a28ww) value_a28wx {userSecondName = x_a28wy})
      fieldLens UserBirthDay
        = (lensPTH (userBirthDay . entityVal))
            (\ Entity key_a28ww value_a28wx x_a28wy
               -> (Entity key_a28ww) value_a28wx {userBirthDay = x_a28wy})
      fieldLens UserSex
        = (lensPTH (userSex . entityVal))
            (\ Entity key_a28ww value_a28wx x_a28wy
               -> (Entity key_a28ww) value_a28wx {userSex = x_a28wy})
      fieldLens UserCreatedTests
        = (lensPTH (userCreatedTests . entityVal))
            (\ Entity key_a28ww value_a28wx x_a28wy
               -> (Entity key_a28ww) value_a28wx {userCreatedTests = x_a28wy})
      fieldLens UserPassedTests
        = (lensPTH (userPassedTests . entityVal))
            (\ Entity key_a28ww value_a28wx x_a28wy
               -> (Entity key_a28ww) value_a28wx {userPassedTests = x_a28wy})
    instance ToBackendKey MongoContext User where
      toBackendKey = unUserKey
      fromBackendKey = UserKey
    migrateAll :: persistent-2.8.1:Database.Persist.Sql.Types.Migration
    migrateAll
      = do let defs_a28wz
                 = [(((((((((EntityDef (HaskellName (packPTH "TestResult")))
                              (DBName (packPTH "test_result")))
                             (((((((FieldDef (HaskellName (packPTH "Id")))
                                     (DBName (packPTH "id")))
                                    ((FTTypeCon Nothing) (packPTH "TestResultId")))
                                   SqlInt64)
                                  [])
                                 True)
                                ((ForeignRef (HaskellName (packPTH "TestResult")))
                                   ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                            [])
                           [((((((FieldDef (HaskellName (packPTH "testKey")))
                                   (DBName (packPTH "test_key")))
                                  ((FTTypeCon Nothing) (packPTH "Text")))
                                 SqlString)
                                [])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "result")))
                                   (DBName (packPTH "result")))
                                  ((FTTypeCon Nothing) (packPTH "Text")))
                                 SqlString)
                                [])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "passingDate")))
                                   (DBName (packPTH "passing_date")))
                                  ((FTTypeCon Nothing) (packPTH "UTCTime")))
                                 SqlDayTime)
                                [])
                               True)
                              NoReference])
                          [])
                         [])
                        [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
                       (Data.Map.Internal.fromList []))
                      False,
                    (((((((((EntityDef (HaskellName (packPTH "User")))
                              (DBName (packPTH "user")))
                             (((((((FieldDef (HaskellName (packPTH "Id")))
                                     (DBName (packPTH "id")))
                                    ((FTTypeCon Nothing) (packPTH "UserId")))
                                   SqlInt64)
                                  [])
                                 True)
                                ((ForeignRef (HaskellName (packPTH "User")))
                                   ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                            [])
                           [((((((FieldDef (HaskellName (packPTH "username")))
                                   (DBName (packPTH "username")))
                                  ((FTTypeCon Nothing) (packPTH "Text")))
                                 SqlString)
                                [])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "password")))
                                   (DBName (packPTH "password")))
                                  ((FTTypeCon Nothing) (packPTH "Text")))
                                 SqlString)
                                [])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "email")))
                                   (DBName (packPTH "email")))
                                  ((FTTypeCon Nothing) (packPTH "Text")))
                                 SqlString)
                                [])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "avatar")))
                                   (DBName (packPTH "avatar")))
                                  ((FTTypeCon Nothing) (packPTH "Text")))
                                 SqlString)
                                [])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "firstName")))
                                   (DBName (packPTH "first_name")))
                                  ((FTTypeCon Nothing) (packPTH "Text")))
                                 SqlString)
                                [packPTH "Maybe"])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "secondName")))
                                   (DBName (packPTH "second_name")))
                                  ((FTTypeCon Nothing) (packPTH "Text")))
                                 SqlString)
                                [packPTH "Maybe"])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "birthDay")))
                                   (DBName (packPTH "birth_day")))
                                  ((FTTypeCon Nothing) (packPTH "UTCTime")))
                                 SqlDayTime)
                                [packPTH "Maybe"])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "sex")))
                                   (DBName (packPTH "sex")))
                                  ((FTTypeCon Nothing) (packPTH "Int")))
                                 SqlInt64)
                                [packPTH "Maybe"])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "createdTests")))
                                   (DBName (packPTH "created_tests")))
                                  (FTList ((FTTypeCon Nothing) (packPTH "ObjectId"))))
                                 SqlString)
                                [])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "passedTests")))
                                   (DBName (packPTH "passed_tests")))
                                  (FTList ((FTTypeCon Nothing) (packPTH "TestResult"))))
                                 SqlString)
                                [])
                               True)
                              (EmbedRef
                                 ((EmbedEntityDef (HaskellName (packPTH "TestResult")))
                                    [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing)
                                       Nothing,
                                     ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                                     ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                                       Nothing]))])
                          [(((UniqueDef (HaskellName (packPTH "Email")))
                               (DBName (packPTH "email")))
                              [(HaskellName (packPTH "email"), DBName (packPTH "email"))])
                             [],
                           (((UniqueDef (HaskellName (packPTH "Username")))
                               (DBName (packPTH "username")))
                              [(HaskellName (packPTH "username"), DBName (packPTH "username"))])
                             []])
                         [])
                        [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
                       (Data.Map.Internal.fromList []))
                      False]
           (persistent-2.8.1:Database.Persist.Sql.Migration.migrate
              defs_a28wz)
             ((((((((((EntityDef (HaskellName (packPTH "TestResult")))
                        (DBName (packPTH "test_result")))
                       (((((((FieldDef (HaskellName (packPTH "Id")))
                               (DBName (packPTH "id")))
                              ((FTTypeCon Nothing) (packPTH "TestResultId")))
                             SqlInt64)
                            [])
                           True)
                          ((ForeignRef (HaskellName (packPTH "TestResult")))
                             ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                      [])
                     [((((((FieldDef (HaskellName (packPTH "testKey")))
                             (DBName (packPTH "test_key")))
                            ((FTTypeCon Nothing) (packPTH "Text")))
                           SqlString)
                          [])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "result")))
                             (DBName (packPTH "result")))
                            ((FTTypeCon Nothing) (packPTH "Text")))
                           SqlString)
                          [])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "passingDate")))
                             (DBName (packPTH "passing_date")))
                            ((FTTypeCon Nothing) (packPTH "UTCTime")))
                           SqlDayTime)
                          [])
                         True)
                        NoReference])
                    [])
                   [])
                  [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
                 (Data.Map.Internal.fromList []))
                False)
           (persistent-2.8.1:Database.Persist.Sql.Migration.migrate
              defs_a28wz)
             ((((((((((EntityDef (HaskellName (packPTH "User")))
                        (DBName (packPTH "user")))
                       (((((((FieldDef (HaskellName (packPTH "Id")))
                               (DBName (packPTH "id")))
                              ((FTTypeCon Nothing) (packPTH "UserId")))
                             SqlInt64)
                            [])
                           True)
                          ((ForeignRef (HaskellName (packPTH "User")))
                             ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                      [])
                     [((((((FieldDef (HaskellName (packPTH "username")))
                             (DBName (packPTH "username")))
                            ((FTTypeCon Nothing) (packPTH "Text")))
                           SqlString)
                          [])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "password")))
                             (DBName (packPTH "password")))
                            ((FTTypeCon Nothing) (packPTH "Text")))
                           SqlString)
                          [])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "email")))
                             (DBName (packPTH "email")))
                            ((FTTypeCon Nothing) (packPTH "Text")))
                           SqlString)
                          [])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "avatar")))
                             (DBName (packPTH "avatar")))
                            ((FTTypeCon Nothing) (packPTH "Text")))
                           SqlString)
                          [])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "firstName")))
                             (DBName (packPTH "first_name")))
                            ((FTTypeCon Nothing) (packPTH "Text")))
                           SqlString)
                          [packPTH "Maybe"])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "secondName")))
                             (DBName (packPTH "second_name")))
                            ((FTTypeCon Nothing) (packPTH "Text")))
                           SqlString)
                          [packPTH "Maybe"])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "birthDay")))
                             (DBName (packPTH "birth_day")))
                            ((FTTypeCon Nothing) (packPTH "UTCTime")))
                           SqlDayTime)
                          [packPTH "Maybe"])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "sex")))
                             (DBName (packPTH "sex")))
                            ((FTTypeCon Nothing) (packPTH "Int")))
                           SqlInt64)
                          [packPTH "Maybe"])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "createdTests")))
                             (DBName (packPTH "created_tests")))
                            (FTList ((FTTypeCon Nothing) (packPTH "ObjectId"))))
                           SqlString)
                          [])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "passedTests")))
                             (DBName (packPTH "passed_tests")))
                            (FTList ((FTTypeCon Nothing) (packPTH "TestResult"))))
                           SqlString)
                          [])
                         True)
                        (EmbedRef
                           ((EmbedEntityDef (HaskellName (packPTH "TestResult")))
                              [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing) Nothing,
                               ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                               ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                                 Nothing]))])
                    [(((UniqueDef (HaskellName (packPTH "Email")))
                         (DBName (packPTH "email")))
                        [(HaskellName (packPTH "email"), DBName (packPTH "email"))])
                       [],
                     (((UniqueDef (HaskellName (packPTH "Username")))
                         (DBName (packPTH "username")))
                        [(HaskellName (packPTH "username"), DBName (packPTH "username"))])
                       []])
                   [])
                  [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
                 (Data.Map.Internal.fromList []))
                False)
/home/nikita/Projects/labs/Databases/Course-Project/Server/src/Model/User.hs:(27,103)-(47,2): Splicing expression
    Language.Haskell.TH.Quote.quoteExp
      persistLowerCase
      "\n\
      \TestResult\n\
      \  testKey       Text\n\
      \  result        Text\n\
      \  passingDate   UTCTime\n\
      \  deriving      Eq Read Show Generic\n\
      \User\n\
      \  username      Text\n\
      \  password      Text\n\
      \  email         Text\n\
      \  avatar        Text\n\
      \  firstName     Text Maybe\n\
      \  secondName    Text Maybe\n\
      \  birthDay      UTCTime Maybe\n\
      \  sex           Int Maybe\n\
      \  createdTests  [ObjectId]\n\
      \  passedTests   [TestResult]\n\
      \  Email         email\n\
      \  Username      username\n\
      \  deriving      Eq Read Show Generic\n"
  ======>
    [(((((((((EntityDef (HaskellName (packPTH "TestResult")))
               (DBName (packPTH "test_result")))
              (((((((FieldDef (HaskellName (packPTH "Id")))
                      (DBName (packPTH "id")))
                     ((FTTypeCon Nothing) (packPTH "TestResultId")))
                    SqlInt64)
                   [])
                  True)
                 ((ForeignRef (HaskellName (packPTH "TestResult")))
                    ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
             [])
            [((((((FieldDef (HaskellName (packPTH "testKey")))
                    (DBName (packPTH "test_key")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for testKey")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "result")))
                    (DBName (packPTH "result")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for result")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "passingDate")))
                    (DBName (packPTH "passing_date")))
                   ((FTTypeCon Nothing) (packPTH "UTCTime")))
                  (SqlOther (packPTH "SqlType unset for passingDate")))
                 [])
                True)
               NoReference])
           [])
          [])
         [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
        (Data.Map.Internal.fromList []))
       False
       {entityFields = [((((((FieldDef (HaskellName (packPTH "testKey")))
                               (DBName (packPTH "test_key")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "result")))
                               (DBName (packPTH "result")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "passingDate")))
                               (DBName (packPTH "passing_date")))
                              ((FTTypeCon Nothing) (packPTH "UTCTime")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy UTCTime)))
                            [])
                           True)
                          NoReference],
        entityId = ((((((FieldDef (HaskellName (packPTH "Id")))
                          (DBName (packPTH "id")))
                         ((FTTypeCon Nothing) (packPTH "TestResultId")))
                        (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                           (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                       [])
                      True)
                     ((ForeignRef (HaskellName (packPTH "TestResult")))
                        ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))},
     (((((((((EntityDef (HaskellName (packPTH "User")))
               (DBName (packPTH "user")))
              (((((((FieldDef (HaskellName (packPTH "Id")))
                      (DBName (packPTH "id")))
                     ((FTTypeCon Nothing) (packPTH "UserId")))
                    SqlInt64)
                   [])
                  True)
                 ((ForeignRef (HaskellName (packPTH "User")))
                    ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
             [])
            [((((((FieldDef (HaskellName (packPTH "username")))
                    (DBName (packPTH "username")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for username")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "password")))
                    (DBName (packPTH "password")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for password")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "email")))
                    (DBName (packPTH "email")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for email")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "avatar")))
                    (DBName (packPTH "avatar")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for avatar")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "firstName")))
                    (DBName (packPTH "first_name")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for firstName")))
                 [packPTH "Maybe"])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "secondName")))
                    (DBName (packPTH "second_name")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for secondName")))
                 [packPTH "Maybe"])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "birthDay")))
                    (DBName (packPTH "birth_day")))
                   ((FTTypeCon Nothing) (packPTH "UTCTime")))
                  (SqlOther (packPTH "SqlType unset for birthDay")))
                 [packPTH "Maybe"])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "sex")))
                    (DBName (packPTH "sex")))
                   ((FTTypeCon Nothing) (packPTH "Int")))
                  (SqlOther (packPTH "SqlType unset for sex")))
                 [packPTH "Maybe"])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "createdTests")))
                    (DBName (packPTH "created_tests")))
                   (FTList ((FTTypeCon Nothing) (packPTH "ObjectId"))))
                  (SqlOther (packPTH "SqlType unset for createdTests")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "passedTests")))
                    (DBName (packPTH "passed_tests")))
                   (FTList ((FTTypeCon Nothing) (packPTH "TestResult"))))
                  (SqlOther (packPTH "SqlType unset for passedTests")))
                 [])
                True)
               (EmbedRef
                  ((EmbedEntityDef (HaskellName (packPTH "TestResult")))
                     [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing) Nothing,
                      ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                      ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                        Nothing]))])
           [(((UniqueDef (HaskellName (packPTH "Email")))
                (DBName (packPTH "email")))
               [(HaskellName (packPTH "email"), DBName (packPTH "email"))])
              [],
            (((UniqueDef (HaskellName (packPTH "Username")))
                (DBName (packPTH "username")))
               [(HaskellName (packPTH "username"), DBName (packPTH "username"))])
              []])
          [])
         [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
        (Data.Map.Internal.fromList []))
       False
       {entityFields = [((((((FieldDef (HaskellName (packPTH "username")))
                               (DBName (packPTH "username")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "password")))
                               (DBName (packPTH "password")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "email")))
                               (DBName (packPTH "email")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "avatar")))
                               (DBName (packPTH "avatar")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "firstName")))
                               (DBName (packPTH "first_name")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [packPTH "Maybe"])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "secondName")))
                               (DBName (packPTH "second_name")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [packPTH "Maybe"])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "birthDay")))
                               (DBName (packPTH "birth_day")))
                              ((FTTypeCon Nothing) (packPTH "UTCTime")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy UTCTime)))
                            [packPTH "Maybe"])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "sex")))
                               (DBName (packPTH "sex")))
                              ((FTTypeCon Nothing) (packPTH "Int")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Int)))
                            [packPTH "Maybe"])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "createdTests")))
                               (DBName (packPTH "created_tests")))
                              (FTList ((FTTypeCon Nothing) (packPTH "ObjectId"))))
                             SqlString)
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "passedTests")))
                               (DBName (packPTH "passed_tests")))
                              (FTList ((FTTypeCon Nothing) (packPTH "TestResult"))))
                             SqlString)
                            [])
                           True)
                          (EmbedRef
                             ((EmbedEntityDef (HaskellName (packPTH "TestResult")))
                                [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing) Nothing,
                                 ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                                 ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                                   Nothing]))],
        entityId = ((((((FieldDef (HaskellName (packPTH "Id")))
                          (DBName (packPTH "id")))
                         ((FTTypeCon Nothing) (packPTH "UserId")))
                        (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                           (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                       [])
                      True)
                     ((ForeignRef (HaskellName (packPTH "User")))
                        ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))}]
/home/nikita/Projects/labs/Databases/Course-Project/Server/src/Model/User.hs:(27,1)-(47,2): Splicing declarations
    share
      [mkPersist (mkPersistSettings (ConT ''MongoContext)),
       mkMigrate "migrateAll"]
      ([(((((((((EntityDef (HaskellName (packPTH "TestResult")))
                  (DBName (packPTH "test_result")))
                 (((((((FieldDef (HaskellName (packPTH "Id")))
                         (DBName (packPTH "id")))
                        ((FTTypeCon Nothing) (packPTH "TestResultId")))
                       SqlInt64)
                      [])
                     True)
                    ((ForeignRef (HaskellName (packPTH "TestResult")))
                       ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                [])
               [((((((FieldDef (HaskellName (packPTH "testKey")))
                       (DBName (packPTH "test_key")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for testKey")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "result")))
                       (DBName (packPTH "result")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for result")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "passingDate")))
                       (DBName (packPTH "passing_date")))
                      ((FTTypeCon Nothing) (packPTH "UTCTime")))
                     (SqlOther (packPTH "SqlType unset for passingDate")))
                    [])
                   True)
                  NoReference])
              [])
             [])
            [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
           (Data.Map.Internal.fromList []))
          False
          {entityFields = [((((((FieldDef (HaskellName (packPTH "testKey")))
                                  (DBName (packPTH "test_key")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "result")))
                                  (DBName (packPTH "result")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "passingDate")))
                                  (DBName (packPTH "passing_date")))
                                 ((FTTypeCon Nothing) (packPTH "UTCTime")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy UTCTime)))
                               [])
                              True)
                             NoReference],
           entityId = ((((((FieldDef (HaskellName (packPTH "Id")))
                             (DBName (packPTH "id")))
                            ((FTTypeCon Nothing) (packPTH "TestResultId")))
                           (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                              (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                          [])
                         True)
                        ((ForeignRef (HaskellName (packPTH "TestResult")))
                           ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))},
        (((((((((EntityDef (HaskellName (packPTH "User")))
                  (DBName (packPTH "user")))
                 (((((((FieldDef (HaskellName (packPTH "Id")))
                         (DBName (packPTH "id")))
                        ((FTTypeCon Nothing) (packPTH "UserId")))
                       SqlInt64)
                      [])
                     True)
                    ((ForeignRef (HaskellName (packPTH "User")))
                       ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                [])
               [((((((FieldDef (HaskellName (packPTH "username")))
                       (DBName (packPTH "username")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for username")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "password")))
                       (DBName (packPTH "password")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for password")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "email")))
                       (DBName (packPTH "email")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for email")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "avatar")))
                       (DBName (packPTH "avatar")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for avatar")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "firstName")))
                       (DBName (packPTH "first_name")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for firstName")))
                    [packPTH "Maybe"])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "secondName")))
                       (DBName (packPTH "second_name")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for secondName")))
                    [packPTH "Maybe"])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "birthDay")))
                       (DBName (packPTH "birth_day")))
                      ((FTTypeCon Nothing) (packPTH "UTCTime")))
                     (SqlOther (packPTH "SqlType unset for birthDay")))
                    [packPTH "Maybe"])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "sex")))
                       (DBName (packPTH "sex")))
                      ((FTTypeCon Nothing) (packPTH "Int")))
                     (SqlOther (packPTH "SqlType unset for sex")))
                    [packPTH "Maybe"])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "createdTests")))
                       (DBName (packPTH "created_tests")))
                      (FTList ((FTTypeCon Nothing) (packPTH "ObjectId"))))
                     (SqlOther (packPTH "SqlType unset for createdTests")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "passedTests")))
                       (DBName (packPTH "passed_tests")))
                      (FTList ((FTTypeCon Nothing) (packPTH "TestResult"))))
                     (SqlOther (packPTH "SqlType unset for passedTests")))
                    [])
                   True)
                  (EmbedRef
                     ((EmbedEntityDef (HaskellName (packPTH "TestResult")))
                        [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing) Nothing,
                         ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                         ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                           Nothing]))])
              [(((UniqueDef (HaskellName (packPTH "Email")))
                   (DBName (packPTH "email")))
                  [(HaskellName (packPTH "email"), DBName (packPTH "email"))])
                 [],
               (((UniqueDef (HaskellName (packPTH "Username")))
                   (DBName (packPTH "username")))
                  [(HaskellName (packPTH "username"), DBName (packPTH "username"))])
                 []])
             [])
            [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
           (Data.Map.Internal.fromList []))
          False
          {entityFields = [((((((FieldDef (HaskellName (packPTH "username")))
                                  (DBName (packPTH "username")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "password")))
                                  (DBName (packPTH "password")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "email")))
                                  (DBName (packPTH "email")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "avatar")))
                                  (DBName (packPTH "avatar")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "firstName")))
                                  (DBName (packPTH "first_name")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [packPTH "Maybe"])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "secondName")))
                                  (DBName (packPTH "second_name")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [packPTH "Maybe"])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "birthDay")))
                                  (DBName (packPTH "birth_day")))
                                 ((FTTypeCon Nothing) (packPTH "UTCTime")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy UTCTime)))
                               [packPTH "Maybe"])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "sex")))
                                  (DBName (packPTH "sex")))
                                 ((FTTypeCon Nothing) (packPTH "Int")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Int)))
                               [packPTH "Maybe"])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "createdTests")))
                                  (DBName (packPTH "created_tests")))
                                 (FTList ((FTTypeCon Nothing) (packPTH "ObjectId"))))
                                SqlString)
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "passedTests")))
                                  (DBName (packPTH "passed_tests")))
                                 (FTList ((FTTypeCon Nothing) (packPTH "TestResult"))))
                                SqlString)
                               [])
                              True)
                             (EmbedRef
                                ((EmbedEntityDef (HaskellName (packPTH "TestResult")))
                                   [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing) Nothing,
                                    ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                                    ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                                      Nothing]))],
           entityId = ((((((FieldDef (HaskellName (packPTH "Id")))
                             (DBName (packPTH "id")))
                            ((FTTypeCon Nothing) (packPTH "UserId")))
                           (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                              (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                          [])
                         True)
                        ((ForeignRef (HaskellName (packPTH "User")))
                           ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))}])
  ======>
    instance PersistField TestResult where
      toPersistValue
        = \ ent_a2c9q
            -> (PersistMap
                  $ ((Prelude.zip
                        ((Prelude.map pack) ["testKey", "result", "passingDate"]))
                       ((Prelude.map toPersistValue) $ (toPersistFields ent_a2c9q))))
      fromPersistValue
        = ((\ x_a2c9r
              -> let
                   columns_a2c9s
                     = unordered-containers-0.2.9.0:Data.HashMap.Strict.fromList x_a2c9r
                 in
                   (fromPersistValues
                      $ ((Prelude.map
                            (\ name_a2c9t
                               -> case
                                      (unordered-containers-0.2.9.0:Data.HashMap.Base.lookup
                                         (pack name_a2c9t))
                                        columns_a2c9s
                                  of
                                    Just v_a2c9u -> v_a2c9u
                                    Nothing -> PersistNull))
                           $ ["testKey", "result", "passingDate"])))
             <=< getPersistMap)
    instance persistent-2.8.1:Database.Persist.Sql.Class.PersistFieldSql TestResult where
      persistent-2.8.1:Database.Persist.Sql.Class.sqlType _ = SqlString
    instance PersistField User where
      toPersistValue
        = \ ent_a2c9v
            -> (PersistMap
                  $ ((Prelude.zip
                        ((Prelude.map pack)
                           ["username", "password", "email", "avatar", "firstName",
                            "secondName", "birthDay", "sex", "createdTests", "passedTests"]))
                       ((Prelude.map toPersistValue) $ (toPersistFields ent_a2c9v))))
      fromPersistValue
        = ((\ x_a2c9w
              -> let
                   columns_a2c9x
                     = unordered-containers-0.2.9.0:Data.HashMap.Strict.fromList x_a2c9w
                 in
                   (fromPersistValues
                      $ ((Prelude.map
                            (\ name_a2c9y
                               -> case
                                      (unordered-containers-0.2.9.0:Data.HashMap.Base.lookup
                                         (pack name_a2c9y))
                                        columns_a2c9x
                                  of
                                    Just v_a2c9z -> v_a2c9z
                                    Nothing -> PersistNull))
                           $ ["username", "password", "email", "avatar", "firstName",
                              "secondName", "birthDay", "sex", "createdTests", "passedTests"])))
             <=< getPersistMap)
    instance persistent-2.8.1:Database.Persist.Sql.Class.PersistFieldSql User where
      persistent-2.8.1:Database.Persist.Sql.Class.sqlType _ = SqlString
    data TestResult
      = TestResult {testResultTestKey :: !Text,
                    testResultResult :: !Text,
                    testResultPassingDate :: !UTCTime}
      deriving (Eq, Read, Show, Generic)
    type TestResultId = Key TestResult
    instance PersistEntity TestResult where
      type PersistEntityBackend TestResult = MongoContext
      data Unique TestResult
      newtype Key TestResult
        = TestResultKey {unTestResultKey :: (BackendKey MongoContext)}
        deriving (Show,
                  Read,
                  Eq,
                  Ord,
                  path-pieces-0.2.1:Web.PathPieces.PathPiece,
                  http-api-data-0.3.7.2:Web.Internal.HttpApiData.ToHttpApiData,
                  http-api-data-0.3.7.2:Web.Internal.HttpApiData.FromHttpApiData,
                  PersistField,
                  persistent-2.8.1:Database.Persist.Sql.Class.PersistFieldSql,
                  Aeson.ToJSON,
                  Aeson.FromJSON)
      data EntityField TestResult typ
        = typ ~ Key TestResult => TestResultId |
          typ ~ Text => TestResultTestKey |
          typ ~ Text => TestResultResult |
          typ ~ UTCTime => TestResultPassingDate
      keyToValues
        = ((ghc-prim-0.5.1.1:GHC.Types.: [])
             . (toPersistValue . unTestResultKey))
      keyFromValues
        = ((fmap TestResultKey)
             . (fromPersistValue . Database.Persist.TH.headNote))
      entityDef _
        = (((((((((EntityDef (HaskellName (packPTH "TestResult")))
                    (DBName (packPTH "test_result")))
                   (((((((FieldDef (HaskellName (packPTH "Id")))
                           (DBName (packPTH "id")))
                          ((FTTypeCon Nothing) (packPTH "TestResultId")))
                         SqlInt64)
                        [])
                       True)
                      ((ForeignRef (HaskellName (packPTH "TestResult")))
                         ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                  [])
                 [((((((FieldDef (HaskellName (packPTH "testKey")))
                         (DBName (packPTH "test_key")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "result")))
                         (DBName (packPTH "result")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "passingDate")))
                         (DBName (packPTH "passing_date")))
                        ((FTTypeCon Nothing) (packPTH "UTCTime")))
                       SqlDayTime)
                      [])
                     True)
                    NoReference])
                [])
               [])
              [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
             (Data.Map.Internal.fromList []))
            False
      toPersistFields (TestResult x_a2c9A x_a2c9B x_a2c9C)
        = [SomePersistField x_a2c9A, SomePersistField x_a2c9B,
           SomePersistField x_a2c9C]
      fromPersistValues [x1_a2c9E, x2_a2c9F, x3_a2c9G]
        = TestResult
            <$>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "testKey")))
                 . fromPersistValue)
                x1_a2c9E
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "result")))
                 . fromPersistValue)
                x2_a2c9F
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "passingDate")))
                 . fromPersistValue)
                x3_a2c9G
      fromPersistValues x_a2c9D
        = (Left
             $ ((mappend (packPTH "TestResult: fromPersistValues failed on: "))
                  (pack $ (show x_a2c9D))))
      persistUniqueToFieldNames _
        = error "Degenerate case, should never happen"
      persistUniqueToValues _
        = error "Degenerate case, should never happen"
      persistUniqueKeys
        (TestResult _testKey_a2c9H _result_a2c9I _passingDate_a2c9J)
        = []
      persistFieldDef TestResultId
        = ((((((FieldDef (HaskellName (packPTH "Id")))
                 (DBName (packPTH "id")))
                ((FTTypeCon Nothing) (packPTH "TestResultId")))
               SqlInt64)
              [])
             True)
            ((ForeignRef (HaskellName (packPTH "TestResult")))
               ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))
      persistFieldDef TestResultTestKey
        = ((((((FieldDef (HaskellName (packPTH "testKey")))
                 (DBName (packPTH "test_key")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef TestResultResult
        = ((((((FieldDef (HaskellName (packPTH "result")))
                 (DBName (packPTH "result")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef TestResultPassingDate
        = ((((((FieldDef (HaskellName (packPTH "passingDate")))
                 (DBName (packPTH "passing_date")))
                ((FTTypeCon Nothing) (packPTH "UTCTime")))
               SqlDayTime)
              [])
             True)
            NoReference
      persistIdField = TestResultId
      fieldLens TestResultId
        = (lensPTH entityKey)
            (\ Entity _ value_a2c9K key_a2c9L
               -> (Entity key_a2c9L) value_a2c9K)
      fieldLens TestResultTestKey
        = (lensPTH (testResultTestKey . entityVal))
            (\ Entity key_a2c9M value_a2c9N x_a2c9O
               -> (Entity key_a2c9M) value_a2c9N {testResultTestKey = x_a2c9O})
      fieldLens TestResultResult
        = (lensPTH (testResultResult . entityVal))
            (\ Entity key_a2c9M value_a2c9N x_a2c9O
               -> (Entity key_a2c9M) value_a2c9N {testResultResult = x_a2c9O})
      fieldLens TestResultPassingDate
        = (lensPTH (testResultPassingDate . entityVal))
            (\ Entity key_a2c9M value_a2c9N x_a2c9O
               -> (Entity key_a2c9M)
                    value_a2c9N {testResultPassingDate = x_a2c9O})
    instance ToBackendKey MongoContext TestResult where
      toBackendKey = unTestResultKey
      fromBackendKey = TestResultKey
    data User
      = User {userUsername :: !Text,
              userPassword :: !Text,
              userEmail :: !Text,
              userAvatar :: !Text,
              userFirstName :: !(Maybe Text),
              userSecondName :: !(Maybe Text),
              userBirthDay :: !(Maybe UTCTime),
              userSex :: !(Maybe Int),
              userCreatedTests :: ![ObjectId],
              userPassedTests :: ![TestResult]}
      deriving (Eq, Read, Show, Generic)
    type UserId = Key User
    instance PersistEntity User where
      type PersistEntityBackend User = MongoContext
      data Unique User = Email Text | Username Text
      newtype Key User
        = UserKey {unUserKey :: (BackendKey MongoContext)}
        deriving (Show,
                  Read,
                  Eq,
                  Ord,
                  path-pieces-0.2.1:Web.PathPieces.PathPiece,
                  http-api-data-0.3.7.2:Web.Internal.HttpApiData.ToHttpApiData,
                  http-api-data-0.3.7.2:Web.Internal.HttpApiData.FromHttpApiData,
                  PersistField,
                  persistent-2.8.1:Database.Persist.Sql.Class.PersistFieldSql,
                  Aeson.ToJSON,
                  Aeson.FromJSON)
      data EntityField User typ
        = typ ~ Key User => UserId |
          typ ~ Text => UserUsername |
          typ ~ Text => UserPassword |
          typ ~ Text => UserEmail |
          typ ~ Text => UserAvatar |
          typ ~ Maybe Text => UserFirstName |
          typ ~ Maybe Text => UserSecondName |
          typ ~ Maybe UTCTime => UserBirthDay |
          typ ~ Maybe Int => UserSex |
          typ ~ [ObjectId] => UserCreatedTests |
          typ ~ [TestResult] => UserPassedTests
      keyToValues
        = ((ghc-prim-0.5.1.1:GHC.Types.: [])
             . (toPersistValue . unUserKey))
      keyFromValues
        = ((fmap UserKey)
             . (fromPersistValue . Database.Persist.TH.headNote))
      entityDef _
        = (((((((((EntityDef (HaskellName (packPTH "User")))
                    (DBName (packPTH "user")))
                   (((((((FieldDef (HaskellName (packPTH "Id")))
                           (DBName (packPTH "id")))
                          ((FTTypeCon Nothing) (packPTH "UserId")))
                         SqlInt64)
                        [])
                       True)
                      ((ForeignRef (HaskellName (packPTH "User")))
                         ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                  [])
                 [((((((FieldDef (HaskellName (packPTH "username")))
                         (DBName (packPTH "username")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "password")))
                         (DBName (packPTH "password")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "email")))
                         (DBName (packPTH "email")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "avatar")))
                         (DBName (packPTH "avatar")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "firstName")))
                         (DBName (packPTH "first_name")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [packPTH "Maybe"])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "secondName")))
                         (DBName (packPTH "second_name")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [packPTH "Maybe"])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "birthDay")))
                         (DBName (packPTH "birth_day")))
                        ((FTTypeCon Nothing) (packPTH "UTCTime")))
                       SqlDayTime)
                      [packPTH "Maybe"])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "sex")))
                         (DBName (packPTH "sex")))
                        ((FTTypeCon Nothing) (packPTH "Int")))
                       SqlInt64)
                      [packPTH "Maybe"])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "createdTests")))
                         (DBName (packPTH "created_tests")))
                        (FTList ((FTTypeCon Nothing) (packPTH "ObjectId"))))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "passedTests")))
                         (DBName (packPTH "passed_tests")))
                        (FTList ((FTTypeCon Nothing) (packPTH "TestResult"))))
                       SqlString)
                      [])
                     True)
                    (EmbedRef
                       ((EmbedEntityDef (HaskellName (packPTH "TestResult")))
                          [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing) Nothing,
                           ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                           ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                             Nothing]))])
                [(((UniqueDef (HaskellName (packPTH "Email")))
                     (DBName (packPTH "email")))
                    [(HaskellName (packPTH "email"), DBName (packPTH "email"))])
                   [],
                 (((UniqueDef (HaskellName (packPTH "Username")))
                     (DBName (packPTH "username")))
                    [(HaskellName (packPTH "username"), DBName (packPTH "username"))])
                   []])
               [])
              [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
             (Data.Map.Internal.fromList []))
            False
      toPersistFields
        (User x_a2c9P
              x_a2c9Q
              x_a2c9R
              x_a2c9S
              x_a2c9T
              x_a2c9U
              x_a2c9V
              x_a2c9W
              x_a2c9X
              x_a2c9Y)
        = [SomePersistField x_a2c9P, SomePersistField x_a2c9Q,
           SomePersistField x_a2c9R, SomePersistField x_a2c9S,
           SomePersistField x_a2c9T, SomePersistField x_a2c9U,
           SomePersistField x_a2c9V, SomePersistField x_a2c9W,
           SomePersistField x_a2c9X, SomePersistField x_a2c9Y]
      fromPersistValues
        [x1_a2ca0,
         x2_a2ca1,
         x3_a2ca2,
         x4_a2ca3,
         x5_a2ca4,
         x6_a2ca5,
         x7_a2ca6,
         x8_a2ca7,
         x9_a2ca8,
         x10_a2ca9]
        = User
            <$>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "username")))
                 . fromPersistValue)
                x1_a2ca0
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "password")))
                 . fromPersistValue)
                x2_a2ca1
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "email")))
                 . fromPersistValue)
                x3_a2ca2
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "avatar")))
                 . fromPersistValue)
                x4_a2ca3
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "firstName")))
                 . fromPersistValue)
                x5_a2ca4
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "secondName")))
                 . fromPersistValue)
                x6_a2ca5
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "birthDay")))
                 . fromPersistValue)
                x7_a2ca6
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "sex")))
                 . fromPersistValue)
                x8_a2ca7
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "createdTests")))
                 . fromPersistValue)
                x9_a2ca8
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "passedTests")))
                 . fromPersistValue)
                x10_a2ca9
      fromPersistValues x_a2c9Z
        = (Left
             $ ((mappend (packPTH "User: fromPersistValues failed on: "))
                  (pack $ (show x_a2c9Z))))
      persistUniqueToFieldNames Email {}
        = [(HaskellName (packPTH "email"), DBName (packPTH "email"))]
      persistUniqueToFieldNames Username {}
        = [(HaskellName (packPTH "username"), DBName (packPTH "username"))]
      persistUniqueToValues (Email x_a2caa) = [toPersistValue x_a2caa]
      persistUniqueToValues (Username x_a2cab) = [toPersistValue x_a2cab]
      persistUniqueKeys
        (User _username_a2cac
              _password_a2cad
              _email_a2cae
              _avatar_a2caf
              _firstName_a2cag
              _secondName_a2cah
              _birthDay_a2cai
              _sex_a2caj
              _createdTests_a2cak
              _passedTests_a2cal)
        = [Email _email_a2cae, Username _username_a2cac]
      persistFieldDef UserId
        = ((((((FieldDef (HaskellName (packPTH "Id")))
                 (DBName (packPTH "id")))
                ((FTTypeCon Nothing) (packPTH "UserId")))
               SqlInt64)
              [])
             True)
            ((ForeignRef (HaskellName (packPTH "User")))
               ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))
      persistFieldDef UserUsername
        = ((((((FieldDef (HaskellName (packPTH "username")))
                 (DBName (packPTH "username")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef UserPassword
        = ((((((FieldDef (HaskellName (packPTH "password")))
                 (DBName (packPTH "password")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef UserEmail
        = ((((((FieldDef (HaskellName (packPTH "email")))
                 (DBName (packPTH "email")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef UserAvatar
        = ((((((FieldDef (HaskellName (packPTH "avatar")))
                 (DBName (packPTH "avatar")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef UserFirstName
        = ((((((FieldDef (HaskellName (packPTH "firstName")))
                 (DBName (packPTH "first_name")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [packPTH "Maybe"])
             True)
            NoReference
      persistFieldDef UserSecondName
        = ((((((FieldDef (HaskellName (packPTH "secondName")))
                 (DBName (packPTH "second_name")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [packPTH "Maybe"])
             True)
            NoReference
      persistFieldDef UserBirthDay
        = ((((((FieldDef (HaskellName (packPTH "birthDay")))
                 (DBName (packPTH "birth_day")))
                ((FTTypeCon Nothing) (packPTH "UTCTime")))
               SqlDayTime)
              [packPTH "Maybe"])
             True)
            NoReference
      persistFieldDef UserSex
        = ((((((FieldDef (HaskellName (packPTH "sex")))
                 (DBName (packPTH "sex")))
                ((FTTypeCon Nothing) (packPTH "Int")))
               SqlInt64)
              [packPTH "Maybe"])
             True)
            NoReference
      persistFieldDef UserCreatedTests
        = ((((((FieldDef (HaskellName (packPTH "createdTests")))
                 (DBName (packPTH "created_tests")))
                (FTList ((FTTypeCon Nothing) (packPTH "ObjectId"))))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef UserPassedTests
        = ((((((FieldDef (HaskellName (packPTH "passedTests")))
                 (DBName (packPTH "passed_tests")))
                (FTList ((FTTypeCon Nothing) (packPTH "TestResult"))))
               SqlString)
              [])
             True)
            (EmbedRef
               ((EmbedEntityDef (HaskellName (packPTH "TestResult")))
                  [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing) Nothing,
                   ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                   ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                     Nothing]))
      persistIdField = UserId
      fieldLens UserId
        = (lensPTH entityKey)
            (\ Entity _ value_a2cam key_a2can
               -> (Entity key_a2can) value_a2cam)
      fieldLens UserUsername
        = (lensPTH (userUsername . entityVal))
            (\ Entity key_a2cao value_a2cap x_a2caq
               -> (Entity key_a2cao) value_a2cap {userUsername = x_a2caq})
      fieldLens UserPassword
        = (lensPTH (userPassword . entityVal))
            (\ Entity key_a2cao value_a2cap x_a2caq
               -> (Entity key_a2cao) value_a2cap {userPassword = x_a2caq})
      fieldLens UserEmail
        = (lensPTH (userEmail . entityVal))
            (\ Entity key_a2cao value_a2cap x_a2caq
               -> (Entity key_a2cao) value_a2cap {userEmail = x_a2caq})
      fieldLens UserAvatar
        = (lensPTH (userAvatar . entityVal))
            (\ Entity key_a2cao value_a2cap x_a2caq
               -> (Entity key_a2cao) value_a2cap {userAvatar = x_a2caq})
      fieldLens UserFirstName
        = (lensPTH (userFirstName . entityVal))
            (\ Entity key_a2cao value_a2cap x_a2caq
               -> (Entity key_a2cao) value_a2cap {userFirstName = x_a2caq})
      fieldLens UserSecondName
        = (lensPTH (userSecondName . entityVal))
            (\ Entity key_a2cao value_a2cap x_a2caq
               -> (Entity key_a2cao) value_a2cap {userSecondName = x_a2caq})
      fieldLens UserBirthDay
        = (lensPTH (userBirthDay . entityVal))
            (\ Entity key_a2cao value_a2cap x_a2caq
               -> (Entity key_a2cao) value_a2cap {userBirthDay = x_a2caq})
      fieldLens UserSex
        = (lensPTH (userSex . entityVal))
            (\ Entity key_a2cao value_a2cap x_a2caq
               -> (Entity key_a2cao) value_a2cap {userSex = x_a2caq})
      fieldLens UserCreatedTests
        = (lensPTH (userCreatedTests . entityVal))
            (\ Entity key_a2cao value_a2cap x_a2caq
               -> (Entity key_a2cao) value_a2cap {userCreatedTests = x_a2caq})
      fieldLens UserPassedTests
        = (lensPTH (userPassedTests . entityVal))
            (\ Entity key_a2cao value_a2cap x_a2caq
               -> (Entity key_a2cao) value_a2cap {userPassedTests = x_a2caq})
    instance ToBackendKey MongoContext User where
      toBackendKey = unUserKey
      fromBackendKey = UserKey
    migrateAll :: persistent-2.8.1:Database.Persist.Sql.Types.Migration
    migrateAll
      = do let defs_a2car
                 = [(((((((((EntityDef (HaskellName (packPTH "TestResult")))
                              (DBName (packPTH "test_result")))
                             (((((((FieldDef (HaskellName (packPTH "Id")))
                                     (DBName (packPTH "id")))
                                    ((FTTypeCon Nothing) (packPTH "TestResultId")))
                                   SqlInt64)
                                  [])
                                 True)
                                ((ForeignRef (HaskellName (packPTH "TestResult")))
                                   ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                            [])
                           [((((((FieldDef (HaskellName (packPTH "testKey")))
                                   (DBName (packPTH "test_key")))
                                  ((FTTypeCon Nothing) (packPTH "Text")))
                                 SqlString)
                                [])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "result")))
                                   (DBName (packPTH "result")))
                                  ((FTTypeCon Nothing) (packPTH "Text")))
                                 SqlString)
                                [])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "passingDate")))
                                   (DBName (packPTH "passing_date")))
                                  ((FTTypeCon Nothing) (packPTH "UTCTime")))
                                 SqlDayTime)
                                [])
                               True)
                              NoReference])
                          [])
                         [])
                        [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
                       (Data.Map.Internal.fromList []))
                      False,
                    (((((((((EntityDef (HaskellName (packPTH "User")))
                              (DBName (packPTH "user")))
                             (((((((FieldDef (HaskellName (packPTH "Id")))
                                     (DBName (packPTH "id")))
                                    ((FTTypeCon Nothing) (packPTH "UserId")))
                                   SqlInt64)
                                  [])
                                 True)
                                ((ForeignRef (HaskellName (packPTH "User")))
                                   ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                            [])
                           [((((((FieldDef (HaskellName (packPTH "username")))
                                   (DBName (packPTH "username")))
                                  ((FTTypeCon Nothing) (packPTH "Text")))
                                 SqlString)
                                [])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "password")))
                                   (DBName (packPTH "password")))
                                  ((FTTypeCon Nothing) (packPTH "Text")))
                                 SqlString)
                                [])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "email")))
                                   (DBName (packPTH "email")))
                                  ((FTTypeCon Nothing) (packPTH "Text")))
                                 SqlString)
                                [])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "avatar")))
                                   (DBName (packPTH "avatar")))
                                  ((FTTypeCon Nothing) (packPTH "Text")))
                                 SqlString)
                                [])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "firstName")))
                                   (DBName (packPTH "first_name")))
                                  ((FTTypeCon Nothing) (packPTH "Text")))
                                 SqlString)
                                [packPTH "Maybe"])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "secondName")))
                                   (DBName (packPTH "second_name")))
                                  ((FTTypeCon Nothing) (packPTH "Text")))
                                 SqlString)
                                [packPTH "Maybe"])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "birthDay")))
                                   (DBName (packPTH "birth_day")))
                                  ((FTTypeCon Nothing) (packPTH "UTCTime")))
                                 SqlDayTime)
                                [packPTH "Maybe"])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "sex")))
                                   (DBName (packPTH "sex")))
                                  ((FTTypeCon Nothing) (packPTH "Int")))
                                 SqlInt64)
                                [packPTH "Maybe"])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "createdTests")))
                                   (DBName (packPTH "created_tests")))
                                  (FTList ((FTTypeCon Nothing) (packPTH "ObjectId"))))
                                 SqlString)
                                [])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "passedTests")))
                                   (DBName (packPTH "passed_tests")))
                                  (FTList ((FTTypeCon Nothing) (packPTH "TestResult"))))
                                 SqlString)
                                [])
                               True)
                              (EmbedRef
                                 ((EmbedEntityDef (HaskellName (packPTH "TestResult")))
                                    [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing)
                                       Nothing,
                                     ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                                     ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                                       Nothing]))])
                          [(((UniqueDef (HaskellName (packPTH "Email")))
                               (DBName (packPTH "email")))
                              [(HaskellName (packPTH "email"), DBName (packPTH "email"))])
                             [],
                           (((UniqueDef (HaskellName (packPTH "Username")))
                               (DBName (packPTH "username")))
                              [(HaskellName (packPTH "username"), DBName (packPTH "username"))])
                             []])
                         [])
                        [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
                       (Data.Map.Internal.fromList []))
                      False]
           (persistent-2.8.1:Database.Persist.Sql.Migration.migrate
              defs_a2car)
             ((((((((((EntityDef (HaskellName (packPTH "TestResult")))
                        (DBName (packPTH "test_result")))
                       (((((((FieldDef (HaskellName (packPTH "Id")))
                               (DBName (packPTH "id")))
                              ((FTTypeCon Nothing) (packPTH "TestResultId")))
                             SqlInt64)
                            [])
                           True)
                          ((ForeignRef (HaskellName (packPTH "TestResult")))
                             ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                      [])
                     [((((((FieldDef (HaskellName (packPTH "testKey")))
                             (DBName (packPTH "test_key")))
                            ((FTTypeCon Nothing) (packPTH "Text")))
                           SqlString)
                          [])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "result")))
                             (DBName (packPTH "result")))
                            ((FTTypeCon Nothing) (packPTH "Text")))
                           SqlString)
                          [])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "passingDate")))
                             (DBName (packPTH "passing_date")))
                            ((FTTypeCon Nothing) (packPTH "UTCTime")))
                           SqlDayTime)
                          [])
                         True)
                        NoReference])
                    [])
                   [])
                  [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
                 (Data.Map.Internal.fromList []))
                False)
           (persistent-2.8.1:Database.Persist.Sql.Migration.migrate
              defs_a2car)
             ((((((((((EntityDef (HaskellName (packPTH "User")))
                        (DBName (packPTH "user")))
                       (((((((FieldDef (HaskellName (packPTH "Id")))
                               (DBName (packPTH "id")))
                              ((FTTypeCon Nothing) (packPTH "UserId")))
                             SqlInt64)
                            [])
                           True)
                          ((ForeignRef (HaskellName (packPTH "User")))
                             ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                      [])
                     [((((((FieldDef (HaskellName (packPTH "username")))
                             (DBName (packPTH "username")))
                            ((FTTypeCon Nothing) (packPTH "Text")))
                           SqlString)
                          [])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "password")))
                             (DBName (packPTH "password")))
                            ((FTTypeCon Nothing) (packPTH "Text")))
                           SqlString)
                          [])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "email")))
                             (DBName (packPTH "email")))
                            ((FTTypeCon Nothing) (packPTH "Text")))
                           SqlString)
                          [])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "avatar")))
                             (DBName (packPTH "avatar")))
                            ((FTTypeCon Nothing) (packPTH "Text")))
                           SqlString)
                          [])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "firstName")))
                             (DBName (packPTH "first_name")))
                            ((FTTypeCon Nothing) (packPTH "Text")))
                           SqlString)
                          [packPTH "Maybe"])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "secondName")))
                             (DBName (packPTH "second_name")))
                            ((FTTypeCon Nothing) (packPTH "Text")))
                           SqlString)
                          [packPTH "Maybe"])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "birthDay")))
                             (DBName (packPTH "birth_day")))
                            ((FTTypeCon Nothing) (packPTH "UTCTime")))
                           SqlDayTime)
                          [packPTH "Maybe"])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "sex")))
                             (DBName (packPTH "sex")))
                            ((FTTypeCon Nothing) (packPTH "Int")))
                           SqlInt64)
                          [packPTH "Maybe"])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "createdTests")))
                             (DBName (packPTH "created_tests")))
                            (FTList ((FTTypeCon Nothing) (packPTH "ObjectId"))))
                           SqlString)
                          [])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "passedTests")))
                             (DBName (packPTH "passed_tests")))
                            (FTList ((FTTypeCon Nothing) (packPTH "TestResult"))))
                           SqlString)
                          [])
                         True)
                        (EmbedRef
                           ((EmbedEntityDef (HaskellName (packPTH "TestResult")))
                              [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing) Nothing,
                               ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                               ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                                 Nothing]))])
                    [(((UniqueDef (HaskellName (packPTH "Email")))
                         (DBName (packPTH "email")))
                        [(HaskellName (packPTH "email"), DBName (packPTH "email"))])
                       [],
                     (((UniqueDef (HaskellName (packPTH "Username")))
                         (DBName (packPTH "username")))
                        [(HaskellName (packPTH "username"), DBName (packPTH "username"))])
                       []])
                   [])
                  [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
                 (Data.Map.Internal.fromList []))
                False)
/home/nikita/Projects/labs/Databases/Course-Project/Server/src/Model/User.hs:(27,103)-(47,2): Splicing expression
    Language.Haskell.TH.Quote.quoteExp
      persistLowerCase
      "\n\
      \TestResult\n\
      \  testKey       Text\n\
      \  result        Text\n\
      \  passingDate   UTCTime\n\
      \  deriving      Eq Read Show Generic\n\
      \User\n\
      \  username      Text\n\
      \  password      Text\n\
      \  email         Text\n\
      \  avatar        Text\n\
      \  firstName     Text Maybe\n\
      \  secondName    Text Maybe\n\
      \  birthDay      UTCTime Maybe\n\
      \  sex           Int Maybe\n\
      \  createdTests  [ObjectId]\n\
      \  passedTests   [TestResult]\n\
      \  Email         email\n\
      \  Username      username\n\
      \  deriving      Eq Read Show Generic\n"
  ======>
    [(((((((((EntityDef (HaskellName (packPTH "TestResult")))
               (DBName (packPTH "test_result")))
              (((((((FieldDef (HaskellName (packPTH "Id")))
                      (DBName (packPTH "id")))
                     ((FTTypeCon Nothing) (packPTH "TestResultId")))
                    SqlInt64)
                   [])
                  True)
                 ((ForeignRef (HaskellName (packPTH "TestResult")))
                    ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
             [])
            [((((((FieldDef (HaskellName (packPTH "testKey")))
                    (DBName (packPTH "test_key")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for testKey")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "result")))
                    (DBName (packPTH "result")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for result")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "passingDate")))
                    (DBName (packPTH "passing_date")))
                   ((FTTypeCon Nothing) (packPTH "UTCTime")))
                  (SqlOther (packPTH "SqlType unset for passingDate")))
                 [])
                True)
               NoReference])
           [])
          [])
         [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
        (Data.Map.Internal.fromList []))
       False
       {entityFields = [((((((FieldDef (HaskellName (packPTH "testKey")))
                               (DBName (packPTH "test_key")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "result")))
                               (DBName (packPTH "result")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "passingDate")))
                               (DBName (packPTH "passing_date")))
                              ((FTTypeCon Nothing) (packPTH "UTCTime")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy UTCTime)))
                            [])
                           True)
                          NoReference],
        entityId = ((((((FieldDef (HaskellName (packPTH "Id")))
                          (DBName (packPTH "id")))
                         ((FTTypeCon Nothing) (packPTH "TestResultId")))
                        (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                           (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                       [])
                      True)
                     ((ForeignRef (HaskellName (packPTH "TestResult")))
                        ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))},
     (((((((((EntityDef (HaskellName (packPTH "User")))
               (DBName (packPTH "user")))
              (((((((FieldDef (HaskellName (packPTH "Id")))
                      (DBName (packPTH "id")))
                     ((FTTypeCon Nothing) (packPTH "UserId")))
                    SqlInt64)
                   [])
                  True)
                 ((ForeignRef (HaskellName (packPTH "User")))
                    ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
             [])
            [((((((FieldDef (HaskellName (packPTH "username")))
                    (DBName (packPTH "username")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for username")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "password")))
                    (DBName (packPTH "password")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for password")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "email")))
                    (DBName (packPTH "email")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for email")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "avatar")))
                    (DBName (packPTH "avatar")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for avatar")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "firstName")))
                    (DBName (packPTH "first_name")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for firstName")))
                 [packPTH "Maybe"])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "secondName")))
                    (DBName (packPTH "second_name")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for secondName")))
                 [packPTH "Maybe"])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "birthDay")))
                    (DBName (packPTH "birth_day")))
                   ((FTTypeCon Nothing) (packPTH "UTCTime")))
                  (SqlOther (packPTH "SqlType unset for birthDay")))
                 [packPTH "Maybe"])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "sex")))
                    (DBName (packPTH "sex")))
                   ((FTTypeCon Nothing) (packPTH "Int")))
                  (SqlOther (packPTH "SqlType unset for sex")))
                 [packPTH "Maybe"])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "createdTests")))
                    (DBName (packPTH "created_tests")))
                   (FTList ((FTTypeCon Nothing) (packPTH "ObjectId"))))
                  (SqlOther (packPTH "SqlType unset for createdTests")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "passedTests")))
                    (DBName (packPTH "passed_tests")))
                   (FTList ((FTTypeCon Nothing) (packPTH "TestResult"))))
                  (SqlOther (packPTH "SqlType unset for passedTests")))
                 [])
                True)
               (EmbedRef
                  ((EmbedEntityDef (HaskellName (packPTH "TestResult")))
                     [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing) Nothing,
                      ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                      ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                        Nothing]))])
           [(((UniqueDef (HaskellName (packPTH "Email")))
                (DBName (packPTH "email")))
               [(HaskellName (packPTH "email"), DBName (packPTH "email"))])
              [],
            (((UniqueDef (HaskellName (packPTH "Username")))
                (DBName (packPTH "username")))
               [(HaskellName (packPTH "username"), DBName (packPTH "username"))])
              []])
          [])
         [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
        (Data.Map.Internal.fromList []))
       False
       {entityFields = [((((((FieldDef (HaskellName (packPTH "username")))
                               (DBName (packPTH "username")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "password")))
                               (DBName (packPTH "password")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "email")))
                               (DBName (packPTH "email")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "avatar")))
                               (DBName (packPTH "avatar")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "firstName")))
                               (DBName (packPTH "first_name")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [packPTH "Maybe"])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "secondName")))
                               (DBName (packPTH "second_name")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [packPTH "Maybe"])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "birthDay")))
                               (DBName (packPTH "birth_day")))
                              ((FTTypeCon Nothing) (packPTH "UTCTime")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy UTCTime)))
                            [packPTH "Maybe"])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "sex")))
                               (DBName (packPTH "sex")))
                              ((FTTypeCon Nothing) (packPTH "Int")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Int)))
                            [packPTH "Maybe"])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "createdTests")))
                               (DBName (packPTH "created_tests")))
                              (FTList ((FTTypeCon Nothing) (packPTH "ObjectId"))))
                             SqlString)
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "passedTests")))
                               (DBName (packPTH "passed_tests")))
                              (FTList ((FTTypeCon Nothing) (packPTH "TestResult"))))
                             SqlString)
                            [])
                           True)
                          (EmbedRef
                             ((EmbedEntityDef (HaskellName (packPTH "TestResult")))
                                [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing) Nothing,
                                 ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                                 ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                                   Nothing]))],
        entityId = ((((((FieldDef (HaskellName (packPTH "Id")))
                          (DBName (packPTH "id")))
                         ((FTTypeCon Nothing) (packPTH "UserId")))
                        (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                           (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                       [])
                      True)
                     ((ForeignRef (HaskellName (packPTH "User")))
                        ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))}]
/home/nikita/Projects/labs/Databases/Course-Project/Server/src/Model/User.hs:(27,1)-(47,2): Splicing declarations
    share
      [mkPersist (mkPersistSettings (ConT ''MongoContext)),
       mkMigrate "migrateAll"]
      ([(((((((((EntityDef (HaskellName (packPTH "TestResult")))
                  (DBName (packPTH "test_result")))
                 (((((((FieldDef (HaskellName (packPTH "Id")))
                         (DBName (packPTH "id")))
                        ((FTTypeCon Nothing) (packPTH "TestResultId")))
                       SqlInt64)
                      [])
                     True)
                    ((ForeignRef (HaskellName (packPTH "TestResult")))
                       ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                [])
               [((((((FieldDef (HaskellName (packPTH "testKey")))
                       (DBName (packPTH "test_key")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for testKey")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "result")))
                       (DBName (packPTH "result")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for result")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "passingDate")))
                       (DBName (packPTH "passing_date")))
                      ((FTTypeCon Nothing) (packPTH "UTCTime")))
                     (SqlOther (packPTH "SqlType unset for passingDate")))
                    [])
                   True)
                  NoReference])
              [])
             [])
            [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
           (Data.Map.Internal.fromList []))
          False
          {entityFields = [((((((FieldDef (HaskellName (packPTH "testKey")))
                                  (DBName (packPTH "test_key")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "result")))
                                  (DBName (packPTH "result")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "passingDate")))
                                  (DBName (packPTH "passing_date")))
                                 ((FTTypeCon Nothing) (packPTH "UTCTime")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy UTCTime)))
                               [])
                              True)
                             NoReference],
           entityId = ((((((FieldDef (HaskellName (packPTH "Id")))
                             (DBName (packPTH "id")))
                            ((FTTypeCon Nothing) (packPTH "TestResultId")))
                           (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                              (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                          [])
                         True)
                        ((ForeignRef (HaskellName (packPTH "TestResult")))
                           ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))},
        (((((((((EntityDef (HaskellName (packPTH "User")))
                  (DBName (packPTH "user")))
                 (((((((FieldDef (HaskellName (packPTH "Id")))
                         (DBName (packPTH "id")))
                        ((FTTypeCon Nothing) (packPTH "UserId")))
                       SqlInt64)
                      [])
                     True)
                    ((ForeignRef (HaskellName (packPTH "User")))
                       ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                [])
               [((((((FieldDef (HaskellName (packPTH "username")))
                       (DBName (packPTH "username")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for username")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "password")))
                       (DBName (packPTH "password")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for password")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "email")))
                       (DBName (packPTH "email")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for email")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "avatar")))
                       (DBName (packPTH "avatar")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for avatar")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "firstName")))
                       (DBName (packPTH "first_name")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for firstName")))
                    [packPTH "Maybe"])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "secondName")))
                       (DBName (packPTH "second_name")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for secondName")))
                    [packPTH "Maybe"])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "birthDay")))
                       (DBName (packPTH "birth_day")))
                      ((FTTypeCon Nothing) (packPTH "UTCTime")))
                     (SqlOther (packPTH "SqlType unset for birthDay")))
                    [packPTH "Maybe"])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "sex")))
                       (DBName (packPTH "sex")))
                      ((FTTypeCon Nothing) (packPTH "Int")))
                     (SqlOther (packPTH "SqlType unset for sex")))
                    [packPTH "Maybe"])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "createdTests")))
                       (DBName (packPTH "created_tests")))
                      (FTList ((FTTypeCon Nothing) (packPTH "ObjectId"))))
                     (SqlOther (packPTH "SqlType unset for createdTests")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "passedTests")))
                       (DBName (packPTH "passed_tests")))
                      (FTList ((FTTypeCon Nothing) (packPTH "TestResult"))))
                     (SqlOther (packPTH "SqlType unset for passedTests")))
                    [])
                   True)
                  (EmbedRef
                     ((EmbedEntityDef (HaskellName (packPTH "TestResult")))
                        [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing) Nothing,
                         ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                         ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                           Nothing]))])
              [(((UniqueDef (HaskellName (packPTH "Email")))
                   (DBName (packPTH "email")))
                  [(HaskellName (packPTH "email"), DBName (packPTH "email"))])
                 [],
               (((UniqueDef (HaskellName (packPTH "Username")))
                   (DBName (packPTH "username")))
                  [(HaskellName (packPTH "username"), DBName (packPTH "username"))])
                 []])
             [])
            [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
           (Data.Map.Internal.fromList []))
          False
          {entityFields = [((((((FieldDef (HaskellName (packPTH "username")))
                                  (DBName (packPTH "username")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "password")))
                                  (DBName (packPTH "password")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "email")))
                                  (DBName (packPTH "email")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "avatar")))
                                  (DBName (packPTH "avatar")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "firstName")))
                                  (DBName (packPTH "first_name")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [packPTH "Maybe"])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "secondName")))
                                  (DBName (packPTH "second_name")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [packPTH "Maybe"])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "birthDay")))
                                  (DBName (packPTH "birth_day")))
                                 ((FTTypeCon Nothing) (packPTH "UTCTime")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy UTCTime)))
                               [packPTH "Maybe"])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "sex")))
                                  (DBName (packPTH "sex")))
                                 ((FTTypeCon Nothing) (packPTH "Int")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Int)))
                               [packPTH "Maybe"])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "createdTests")))
                                  (DBName (packPTH "created_tests")))
                                 (FTList ((FTTypeCon Nothing) (packPTH "ObjectId"))))
                                SqlString)
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "passedTests")))
                                  (DBName (packPTH "passed_tests")))
                                 (FTList ((FTTypeCon Nothing) (packPTH "TestResult"))))
                                SqlString)
                               [])
                              True)
                             (EmbedRef
                                ((EmbedEntityDef (HaskellName (packPTH "TestResult")))
                                   [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing) Nothing,
                                    ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                                    ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                                      Nothing]))],
           entityId = ((((((FieldDef (HaskellName (packPTH "Id")))
                             (DBName (packPTH "id")))
                            ((FTTypeCon Nothing) (packPTH "UserId")))
                           (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                              (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                          [])
                         True)
                        ((ForeignRef (HaskellName (packPTH "User")))
                           ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))}])
  ======>
    instance PersistField TestResult where
      toPersistValue
        = \ ent_a2elJ
            -> (PersistMap
                  $ ((Prelude.zip
                        ((Prelude.map pack) ["testKey", "result", "passingDate"]))
                       ((Prelude.map toPersistValue) $ (toPersistFields ent_a2elJ))))
      fromPersistValue
        = ((\ x_a2elK
              -> let
                   columns_a2elL
                     = unordered-containers-0.2.9.0:Data.HashMap.Strict.fromList x_a2elK
                 in
                   (fromPersistValues
                      $ ((Prelude.map
                            (\ name_a2elM
                               -> case
                                      (unordered-containers-0.2.9.0:Data.HashMap.Base.lookup
                                         (pack name_a2elM))
                                        columns_a2elL
                                  of
                                    Just v_a2elN -> v_a2elN
                                    Nothing -> PersistNull))
                           $ ["testKey", "result", "passingDate"])))
             <=< getPersistMap)
    instance persistent-2.8.1:Database.Persist.Sql.Class.PersistFieldSql TestResult where
      persistent-2.8.1:Database.Persist.Sql.Class.sqlType _ = SqlString
    instance PersistField User where
      toPersistValue
        = \ ent_a2elO
            -> (PersistMap
                  $ ((Prelude.zip
                        ((Prelude.map pack)
                           ["username", "password", "email", "avatar", "firstName",
                            "secondName", "birthDay", "sex", "createdTests", "passedTests"]))
                       ((Prelude.map toPersistValue) $ (toPersistFields ent_a2elO))))
      fromPersistValue
        = ((\ x_a2elP
              -> let
                   columns_a2elQ
                     = unordered-containers-0.2.9.0:Data.HashMap.Strict.fromList x_a2elP
                 in
                   (fromPersistValues
                      $ ((Prelude.map
                            (\ name_a2elR
                               -> case
                                      (unordered-containers-0.2.9.0:Data.HashMap.Base.lookup
                                         (pack name_a2elR))
                                        columns_a2elQ
                                  of
                                    Just v_a2elS -> v_a2elS
                                    Nothing -> PersistNull))
                           $ ["username", "password", "email", "avatar", "firstName",
                              "secondName", "birthDay", "sex", "createdTests", "passedTests"])))
             <=< getPersistMap)
    instance persistent-2.8.1:Database.Persist.Sql.Class.PersistFieldSql User where
      persistent-2.8.1:Database.Persist.Sql.Class.sqlType _ = SqlString
    data TestResult
      = TestResult {testResultTestKey :: !Text,
                    testResultResult :: !Text,
                    testResultPassingDate :: !UTCTime}
      deriving (Eq, Read, Show, Generic)
    type TestResultId = Key TestResult
    instance PersistEntity TestResult where
      type PersistEntityBackend TestResult = MongoContext
      data Unique TestResult
      newtype Key TestResult
        = TestResultKey {unTestResultKey :: (BackendKey MongoContext)}
        deriving (Show,
                  Read,
                  Eq,
                  Ord,
                  path-pieces-0.2.1:Web.PathPieces.PathPiece,
                  http-api-data-0.3.7.2:Web.Internal.HttpApiData.ToHttpApiData,
                  http-api-data-0.3.7.2:Web.Internal.HttpApiData.FromHttpApiData,
                  PersistField,
                  persistent-2.8.1:Database.Persist.Sql.Class.PersistFieldSql,
                  Aeson.ToJSON,
                  Aeson.FromJSON)
      data EntityField TestResult typ
        = typ ~ Key TestResult => TestResultId |
          typ ~ Text => TestResultTestKey |
          typ ~ Text => TestResultResult |
          typ ~ UTCTime => TestResultPassingDate
      keyToValues
        = ((ghc-prim-0.5.1.1:GHC.Types.: [])
             . (toPersistValue . unTestResultKey))
      keyFromValues
        = ((fmap TestResultKey)
             . (fromPersistValue . Database.Persist.TH.headNote))
      entityDef _
        = (((((((((EntityDef (HaskellName (packPTH "TestResult")))
                    (DBName (packPTH "test_result")))
                   (((((((FieldDef (HaskellName (packPTH "Id")))
                           (DBName (packPTH "id")))
                          ((FTTypeCon Nothing) (packPTH "TestResultId")))
                         SqlInt64)
                        [])
                       True)
                      ((ForeignRef (HaskellName (packPTH "TestResult")))
                         ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                  [])
                 [((((((FieldDef (HaskellName (packPTH "testKey")))
                         (DBName (packPTH "test_key")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "result")))
                         (DBName (packPTH "result")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "passingDate")))
                         (DBName (packPTH "passing_date")))
                        ((FTTypeCon Nothing) (packPTH "UTCTime")))
                       SqlDayTime)
                      [])
                     True)
                    NoReference])
                [])
               [])
              [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
             (Data.Map.Internal.fromList []))
            False
      toPersistFields (TestResult x_a2elT x_a2elU x_a2elV)
        = [SomePersistField x_a2elT, SomePersistField x_a2elU,
           SomePersistField x_a2elV]
      fromPersistValues [x1_a2elX, x2_a2elY, x3_a2elZ]
        = TestResult
            <$>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "testKey")))
                 . fromPersistValue)
                x1_a2elX
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "result")))
                 . fromPersistValue)
                x2_a2elY
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "passingDate")))
                 . fromPersistValue)
                x3_a2elZ
      fromPersistValues x_a2elW
        = (Left
             $ ((mappend (packPTH "TestResult: fromPersistValues failed on: "))
                  (pack $ (show x_a2elW))))
      persistUniqueToFieldNames _
        = error "Degenerate case, should never happen"
      persistUniqueToValues _
        = error "Degenerate case, should never happen"
      persistUniqueKeys
        (TestResult _testKey_a2em0 _result_a2em1 _passingDate_a2em2)
        = []
      persistFieldDef TestResultId
        = ((((((FieldDef (HaskellName (packPTH "Id")))
                 (DBName (packPTH "id")))
                ((FTTypeCon Nothing) (packPTH "TestResultId")))
               SqlInt64)
              [])
             True)
            ((ForeignRef (HaskellName (packPTH "TestResult")))
               ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))
      persistFieldDef TestResultTestKey
        = ((((((FieldDef (HaskellName (packPTH "testKey")))
                 (DBName (packPTH "test_key")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef TestResultResult
        = ((((((FieldDef (HaskellName (packPTH "result")))
                 (DBName (packPTH "result")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef TestResultPassingDate
        = ((((((FieldDef (HaskellName (packPTH "passingDate")))
                 (DBName (packPTH "passing_date")))
                ((FTTypeCon Nothing) (packPTH "UTCTime")))
               SqlDayTime)
              [])
             True)
            NoReference
      persistIdField = TestResultId
      fieldLens TestResultId
        = (lensPTH entityKey)
            (\ Entity _ value_a2em3 key_a2em4
               -> (Entity key_a2em4) value_a2em3)
      fieldLens TestResultTestKey
        = (lensPTH (testResultTestKey . entityVal))
            (\ Entity key_a2em5 value_a2em6 x_a2em7
               -> (Entity key_a2em5) value_a2em6 {testResultTestKey = x_a2em7})
      fieldLens TestResultResult
        = (lensPTH (testResultResult . entityVal))
            (\ Entity key_a2em5 value_a2em6 x_a2em7
               -> (Entity key_a2em5) value_a2em6 {testResultResult = x_a2em7})
      fieldLens TestResultPassingDate
        = (lensPTH (testResultPassingDate . entityVal))
            (\ Entity key_a2em5 value_a2em6 x_a2em7
               -> (Entity key_a2em5)
                    value_a2em6 {testResultPassingDate = x_a2em7})
    instance ToBackendKey MongoContext TestResult where
      toBackendKey = unTestResultKey
      fromBackendKey = TestResultKey
    data User
      = User {userUsername :: !Text,
              userPassword :: !Text,
              userEmail :: !Text,
              userAvatar :: !Text,
              userFirstName :: !(Maybe Text),
              userSecondName :: !(Maybe Text),
              userBirthDay :: !(Maybe UTCTime),
              userSex :: !(Maybe Int),
              userCreatedTests :: ![ObjectId],
              userPassedTests :: ![TestResult]}
      deriving (Eq, Read, Show, Generic)
    type UserId = Key User
    instance PersistEntity User where
      type PersistEntityBackend User = MongoContext
      data Unique User = Email Text | Username Text
      newtype Key User
        = UserKey {unUserKey :: (BackendKey MongoContext)}
        deriving (Show,
                  Read,
                  Eq,
                  Ord,
                  path-pieces-0.2.1:Web.PathPieces.PathPiece,
                  http-api-data-0.3.7.2:Web.Internal.HttpApiData.ToHttpApiData,
                  http-api-data-0.3.7.2:Web.Internal.HttpApiData.FromHttpApiData,
                  PersistField,
                  persistent-2.8.1:Database.Persist.Sql.Class.PersistFieldSql,
                  Aeson.ToJSON,
                  Aeson.FromJSON)
      data EntityField User typ
        = typ ~ Key User => UserId |
          typ ~ Text => UserUsername |
          typ ~ Text => UserPassword |
          typ ~ Text => UserEmail |
          typ ~ Text => UserAvatar |
          typ ~ Maybe Text => UserFirstName |
          typ ~ Maybe Text => UserSecondName |
          typ ~ Maybe UTCTime => UserBirthDay |
          typ ~ Maybe Int => UserSex |
          typ ~ [ObjectId] => UserCreatedTests |
          typ ~ [TestResult] => UserPassedTests
      keyToValues
        = ((ghc-prim-0.5.1.1:GHC.Types.: [])
             . (toPersistValue . unUserKey))
      keyFromValues
        = ((fmap UserKey)
             . (fromPersistValue . Database.Persist.TH.headNote))
      entityDef _
        = (((((((((EntityDef (HaskellName (packPTH "User")))
                    (DBName (packPTH "user")))
                   (((((((FieldDef (HaskellName (packPTH "Id")))
                           (DBName (packPTH "id")))
                          ((FTTypeCon Nothing) (packPTH "UserId")))
                         SqlInt64)
                        [])
                       True)
                      ((ForeignRef (HaskellName (packPTH "User")))
                         ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                  [])
                 [((((((FieldDef (HaskellName (packPTH "username")))
                         (DBName (packPTH "username")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "password")))
                         (DBName (packPTH "password")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "email")))
                         (DBName (packPTH "email")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "avatar")))
                         (DBName (packPTH "avatar")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "firstName")))
                         (DBName (packPTH "first_name")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [packPTH "Maybe"])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "secondName")))
                         (DBName (packPTH "second_name")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [packPTH "Maybe"])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "birthDay")))
                         (DBName (packPTH "birth_day")))
                        ((FTTypeCon Nothing) (packPTH "UTCTime")))
                       SqlDayTime)
                      [packPTH "Maybe"])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "sex")))
                         (DBName (packPTH "sex")))
                        ((FTTypeCon Nothing) (packPTH "Int")))
                       SqlInt64)
                      [packPTH "Maybe"])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "createdTests")))
                         (DBName (packPTH "created_tests")))
                        (FTList ((FTTypeCon Nothing) (packPTH "ObjectId"))))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "passedTests")))
                         (DBName (packPTH "passed_tests")))
                        (FTList ((FTTypeCon Nothing) (packPTH "TestResult"))))
                       SqlString)
                      [])
                     True)
                    (EmbedRef
                       ((EmbedEntityDef (HaskellName (packPTH "TestResult")))
                          [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing) Nothing,
                           ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                           ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                             Nothing]))])
                [(((UniqueDef (HaskellName (packPTH "Email")))
                     (DBName (packPTH "email")))
                    [(HaskellName (packPTH "email"), DBName (packPTH "email"))])
                   [],
                 (((UniqueDef (HaskellName (packPTH "Username")))
                     (DBName (packPTH "username")))
                    [(HaskellName (packPTH "username"), DBName (packPTH "username"))])
                   []])
               [])
              [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
             (Data.Map.Internal.fromList []))
            False
      toPersistFields
        (User x_a2em8
              x_a2em9
              x_a2ema
              x_a2emb
              x_a2emc
              x_a2emd
              x_a2eme
              x_a2emf
              x_a2emg
              x_a2emh)
        = [SomePersistField x_a2em8, SomePersistField x_a2em9,
           SomePersistField x_a2ema, SomePersistField x_a2emb,
           SomePersistField x_a2emc, SomePersistField x_a2emd,
           SomePersistField x_a2eme, SomePersistField x_a2emf,
           SomePersistField x_a2emg, SomePersistField x_a2emh]
      fromPersistValues
        [x1_a2emj,
         x2_a2emk,
         x3_a2eml,
         x4_a2emm,
         x5_a2emn,
         x6_a2emo,
         x7_a2emp,
         x8_a2emq,
         x9_a2emr,
         x10_a2ems]
        = User
            <$>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "username")))
                 . fromPersistValue)
                x1_a2emj
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "password")))
                 . fromPersistValue)
                x2_a2emk
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "email")))
                 . fromPersistValue)
                x3_a2eml
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "avatar")))
                 . fromPersistValue)
                x4_a2emm
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "firstName")))
                 . fromPersistValue)
                x5_a2emn
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "secondName")))
                 . fromPersistValue)
                x6_a2emo
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "birthDay")))
                 . fromPersistValue)
                x7_a2emp
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "sex")))
                 . fromPersistValue)
                x8_a2emq
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "createdTests")))
                 . fromPersistValue)
                x9_a2emr
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "passedTests")))
                 . fromPersistValue)
                x10_a2ems
      fromPersistValues x_a2emi
        = (Left
             $ ((mappend (packPTH "User: fromPersistValues failed on: "))
                  (pack $ (show x_a2emi))))
      persistUniqueToFieldNames Email {}
        = [(HaskellName (packPTH "email"), DBName (packPTH "email"))]
      persistUniqueToFieldNames Username {}
        = [(HaskellName (packPTH "username"), DBName (packPTH "username"))]
      persistUniqueToValues (Email x_a2emt) = [toPersistValue x_a2emt]
      persistUniqueToValues (Username x_a2emu) = [toPersistValue x_a2emu]
      persistUniqueKeys
        (User _username_a2emv
              _password_a2emw
              _email_a2emx
              _avatar_a2emy
              _firstName_a2emz
              _secondName_a2emA
              _birthDay_a2emB
              _sex_a2emC
              _createdTests_a2emD
              _passedTests_a2emE)
        = [Email _email_a2emx, Username _username_a2emv]
      persistFieldDef UserId
        = ((((((FieldDef (HaskellName (packPTH "Id")))
                 (DBName (packPTH "id")))
                ((FTTypeCon Nothing) (packPTH "UserId")))
               SqlInt64)
              [])
             True)
            ((ForeignRef (HaskellName (packPTH "User")))
               ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))
      persistFieldDef UserUsername
        = ((((((FieldDef (HaskellName (packPTH "username")))
                 (DBName (packPTH "username")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef UserPassword
        = ((((((FieldDef (HaskellName (packPTH "password")))
                 (DBName (packPTH "password")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef UserEmail
        = ((((((FieldDef (HaskellName (packPTH "email")))
                 (DBName (packPTH "email")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef UserAvatar
        = ((((((FieldDef (HaskellName (packPTH "avatar")))
                 (DBName (packPTH "avatar")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef UserFirstName
        = ((((((FieldDef (HaskellName (packPTH "firstName")))
                 (DBName (packPTH "first_name")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [packPTH "Maybe"])
             True)
            NoReference
      persistFieldDef UserSecondName
        = ((((((FieldDef (HaskellName (packPTH "secondName")))
                 (DBName (packPTH "second_name")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [packPTH "Maybe"])
             True)
            NoReference
      persistFieldDef UserBirthDay
        = ((((((FieldDef (HaskellName (packPTH "birthDay")))
                 (DBName (packPTH "birth_day")))
                ((FTTypeCon Nothing) (packPTH "UTCTime")))
               SqlDayTime)
              [packPTH "Maybe"])
             True)
            NoReference
      persistFieldDef UserSex
        = ((((((FieldDef (HaskellName (packPTH "sex")))
                 (DBName (packPTH "sex")))
                ((FTTypeCon Nothing) (packPTH "Int")))
               SqlInt64)
              [packPTH "Maybe"])
             True)
            NoReference
      persistFieldDef UserCreatedTests
        = ((((((FieldDef (HaskellName (packPTH "createdTests")))
                 (DBName (packPTH "created_tests")))
                (FTList ((FTTypeCon Nothing) (packPTH "ObjectId"))))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef UserPassedTests
        = ((((((FieldDef (HaskellName (packPTH "passedTests")))
                 (DBName (packPTH "passed_tests")))
                (FTList ((FTTypeCon Nothing) (packPTH "TestResult"))))
               SqlString)
              [])
             True)
            (EmbedRef
               ((EmbedEntityDef (HaskellName (packPTH "TestResult")))
                  [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing) Nothing,
                   ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                   ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                     Nothing]))
      persistIdField = UserId
      fieldLens UserId
        = (lensPTH entityKey)
            (\ Entity _ value_a2emF key_a2emG
               -> (Entity key_a2emG) value_a2emF)
      fieldLens UserUsername
        = (lensPTH (userUsername . entityVal))
            (\ Entity key_a2emH value_a2emI x_a2emJ
               -> (Entity key_a2emH) value_a2emI {userUsername = x_a2emJ})
      fieldLens UserPassword
        = (lensPTH (userPassword . entityVal))
            (\ Entity key_a2emH value_a2emI x_a2emJ
               -> (Entity key_a2emH) value_a2emI {userPassword = x_a2emJ})
      fieldLens UserEmail
        = (lensPTH (userEmail . entityVal))
            (\ Entity key_a2emH value_a2emI x_a2emJ
               -> (Entity key_a2emH) value_a2emI {userEmail = x_a2emJ})
      fieldLens UserAvatar
        = (lensPTH (userAvatar . entityVal))
            (\ Entity key_a2emH value_a2emI x_a2emJ
               -> (Entity key_a2emH) value_a2emI {userAvatar = x_a2emJ})
      fieldLens UserFirstName
        = (lensPTH (userFirstName . entityVal))
            (\ Entity key_a2emH value_a2emI x_a2emJ
               -> (Entity key_a2emH) value_a2emI {userFirstName = x_a2emJ})
      fieldLens UserSecondName
        = (lensPTH (userSecondName . entityVal))
            (\ Entity key_a2emH value_a2emI x_a2emJ
               -> (Entity key_a2emH) value_a2emI {userSecondName = x_a2emJ})
      fieldLens UserBirthDay
        = (lensPTH (userBirthDay . entityVal))
            (\ Entity key_a2emH value_a2emI x_a2emJ
               -> (Entity key_a2emH) value_a2emI {userBirthDay = x_a2emJ})
      fieldLens UserSex
        = (lensPTH (userSex . entityVal))
            (\ Entity key_a2emH value_a2emI x_a2emJ
               -> (Entity key_a2emH) value_a2emI {userSex = x_a2emJ})
      fieldLens UserCreatedTests
        = (lensPTH (userCreatedTests . entityVal))
            (\ Entity key_a2emH value_a2emI x_a2emJ
               -> (Entity key_a2emH) value_a2emI {userCreatedTests = x_a2emJ})
      fieldLens UserPassedTests
        = (lensPTH (userPassedTests . entityVal))
            (\ Entity key_a2emH value_a2emI x_a2emJ
               -> (Entity key_a2emH) value_a2emI {userPassedTests = x_a2emJ})
    instance ToBackendKey MongoContext User where
      toBackendKey = unUserKey
      fromBackendKey = UserKey
    migrateAll :: persistent-2.8.1:Database.Persist.Sql.Types.Migration
    migrateAll
      = do let defs_a2emK
                 = [(((((((((EntityDef (HaskellName (packPTH "TestResult")))
                              (DBName (packPTH "test_result")))
                             (((((((FieldDef (HaskellName (packPTH "Id")))
                                     (DBName (packPTH "id")))
                                    ((FTTypeCon Nothing) (packPTH "TestResultId")))
                                   SqlInt64)
                                  [])
                                 True)
                                ((ForeignRef (HaskellName (packPTH "TestResult")))
                                   ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                            [])
                           [((((((FieldDef (HaskellName (packPTH "testKey")))
                                   (DBName (packPTH "test_key")))
                                  ((FTTypeCon Nothing) (packPTH "Text")))
                                 SqlString)
                                [])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "result")))
                                   (DBName (packPTH "result")))
                                  ((FTTypeCon Nothing) (packPTH "Text")))
                                 SqlString)
                                [])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "passingDate")))
                                   (DBName (packPTH "passing_date")))
                                  ((FTTypeCon Nothing) (packPTH "UTCTime")))
                                 SqlDayTime)
                                [])
                               True)
                              NoReference])
                          [])
                         [])
                        [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
                       (Data.Map.Internal.fromList []))
                      False,
                    (((((((((EntityDef (HaskellName (packPTH "User")))
                              (DBName (packPTH "user")))
                             (((((((FieldDef (HaskellName (packPTH "Id")))
                                     (DBName (packPTH "id")))
                                    ((FTTypeCon Nothing) (packPTH "UserId")))
                                   SqlInt64)
                                  [])
                                 True)
                                ((ForeignRef (HaskellName (packPTH "User")))
                                   ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                            [])
                           [((((((FieldDef (HaskellName (packPTH "username")))
                                   (DBName (packPTH "username")))
                                  ((FTTypeCon Nothing) (packPTH "Text")))
                                 SqlString)
                                [])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "password")))
                                   (DBName (packPTH "password")))
                                  ((FTTypeCon Nothing) (packPTH "Text")))
                                 SqlString)
                                [])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "email")))
                                   (DBName (packPTH "email")))
                                  ((FTTypeCon Nothing) (packPTH "Text")))
                                 SqlString)
                                [])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "avatar")))
                                   (DBName (packPTH "avatar")))
                                  ((FTTypeCon Nothing) (packPTH "Text")))
                                 SqlString)
                                [])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "firstName")))
                                   (DBName (packPTH "first_name")))
                                  ((FTTypeCon Nothing) (packPTH "Text")))
                                 SqlString)
                                [packPTH "Maybe"])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "secondName")))
                                   (DBName (packPTH "second_name")))
                                  ((FTTypeCon Nothing) (packPTH "Text")))
                                 SqlString)
                                [packPTH "Maybe"])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "birthDay")))
                                   (DBName (packPTH "birth_day")))
                                  ((FTTypeCon Nothing) (packPTH "UTCTime")))
                                 SqlDayTime)
                                [packPTH "Maybe"])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "sex")))
                                   (DBName (packPTH "sex")))
                                  ((FTTypeCon Nothing) (packPTH "Int")))
                                 SqlInt64)
                                [packPTH "Maybe"])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "createdTests")))
                                   (DBName (packPTH "created_tests")))
                                  (FTList ((FTTypeCon Nothing) (packPTH "ObjectId"))))
                                 SqlString)
                                [])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "passedTests")))
                                   (DBName (packPTH "passed_tests")))
                                  (FTList ((FTTypeCon Nothing) (packPTH "TestResult"))))
                                 SqlString)
                                [])
                               True)
                              (EmbedRef
                                 ((EmbedEntityDef (HaskellName (packPTH "TestResult")))
                                    [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing)
                                       Nothing,
                                     ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                                     ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                                       Nothing]))])
                          [(((UniqueDef (HaskellName (packPTH "Email")))
                               (DBName (packPTH "email")))
                              [(HaskellName (packPTH "email"), DBName (packPTH "email"))])
                             [],
                           (((UniqueDef (HaskellName (packPTH "Username")))
                               (DBName (packPTH "username")))
                              [(HaskellName (packPTH "username"), DBName (packPTH "username"))])
                             []])
                         [])
                        [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
                       (Data.Map.Internal.fromList []))
                      False]
           (persistent-2.8.1:Database.Persist.Sql.Migration.migrate
              defs_a2emK)
             ((((((((((EntityDef (HaskellName (packPTH "TestResult")))
                        (DBName (packPTH "test_result")))
                       (((((((FieldDef (HaskellName (packPTH "Id")))
                               (DBName (packPTH "id")))
                              ((FTTypeCon Nothing) (packPTH "TestResultId")))
                             SqlInt64)
                            [])
                           True)
                          ((ForeignRef (HaskellName (packPTH "TestResult")))
                             ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                      [])
                     [((((((FieldDef (HaskellName (packPTH "testKey")))
                             (DBName (packPTH "test_key")))
                            ((FTTypeCon Nothing) (packPTH "Text")))
                           SqlString)
                          [])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "result")))
                             (DBName (packPTH "result")))
                            ((FTTypeCon Nothing) (packPTH "Text")))
                           SqlString)
                          [])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "passingDate")))
                             (DBName (packPTH "passing_date")))
                            ((FTTypeCon Nothing) (packPTH "UTCTime")))
                           SqlDayTime)
                          [])
                         True)
                        NoReference])
                    [])
                   [])
                  [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
                 (Data.Map.Internal.fromList []))
                False)
           (persistent-2.8.1:Database.Persist.Sql.Migration.migrate
              defs_a2emK)
             ((((((((((EntityDef (HaskellName (packPTH "User")))
                        (DBName (packPTH "user")))
                       (((((((FieldDef (HaskellName (packPTH "Id")))
                               (DBName (packPTH "id")))
                              ((FTTypeCon Nothing) (packPTH "UserId")))
                             SqlInt64)
                            [])
                           True)
                          ((ForeignRef (HaskellName (packPTH "User")))
                             ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                      [])
                     [((((((FieldDef (HaskellName (packPTH "username")))
                             (DBName (packPTH "username")))
                            ((FTTypeCon Nothing) (packPTH "Text")))
                           SqlString)
                          [])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "password")))
                             (DBName (packPTH "password")))
                            ((FTTypeCon Nothing) (packPTH "Text")))
                           SqlString)
                          [])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "email")))
                             (DBName (packPTH "email")))
                            ((FTTypeCon Nothing) (packPTH "Text")))
                           SqlString)
                          [])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "avatar")))
                             (DBName (packPTH "avatar")))
                            ((FTTypeCon Nothing) (packPTH "Text")))
                           SqlString)
                          [])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "firstName")))
                             (DBName (packPTH "first_name")))
                            ((FTTypeCon Nothing) (packPTH "Text")))
                           SqlString)
                          [packPTH "Maybe"])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "secondName")))
                             (DBName (packPTH "second_name")))
                            ((FTTypeCon Nothing) (packPTH "Text")))
                           SqlString)
                          [packPTH "Maybe"])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "birthDay")))
                             (DBName (packPTH "birth_day")))
                            ((FTTypeCon Nothing) (packPTH "UTCTime")))
                           SqlDayTime)
                          [packPTH "Maybe"])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "sex")))
                             (DBName (packPTH "sex")))
                            ((FTTypeCon Nothing) (packPTH "Int")))
                           SqlInt64)
                          [packPTH "Maybe"])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "createdTests")))
                             (DBName (packPTH "created_tests")))
                            (FTList ((FTTypeCon Nothing) (packPTH "ObjectId"))))
                           SqlString)
                          [])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "passedTests")))
                             (DBName (packPTH "passed_tests")))
                            (FTList ((FTTypeCon Nothing) (packPTH "TestResult"))))
                           SqlString)
                          [])
                         True)
                        (EmbedRef
                           ((EmbedEntityDef (HaskellName (packPTH "TestResult")))
                              [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing) Nothing,
                               ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                               ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                                 Nothing]))])
                    [(((UniqueDef (HaskellName (packPTH "Email")))
                         (DBName (packPTH "email")))
                        [(HaskellName (packPTH "email"), DBName (packPTH "email"))])
                       [],
                     (((UniqueDef (HaskellName (packPTH "Username")))
                         (DBName (packPTH "username")))
                        [(HaskellName (packPTH "username"), DBName (packPTH "username"))])
                       []])
                   [])
                  [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
                 (Data.Map.Internal.fromList []))
                False)
/home/nikita/Projects/labs/Databases/Course-Project/Server/src/Model/User.hs:(27,103)-(47,2): Splicing expression
    Language.Haskell.TH.Quote.quoteExp
      persistLowerCase
      "\n\
      \TestResult\n\
      \  testKey       Text\n\
      \  result        Text\n\
      \  passingDate   UTCTime\n\
      \  deriving      Eq Read Show Generic\n\
      \User\n\
      \  username      Text\n\
      \  password      Text\n\
      \  email         Text\n\
      \  avatar        Text\n\
      \  firstName     Text Maybe\n\
      \  secondName    Text Maybe\n\
      \  birthDay      UTCTime Maybe\n\
      \  sex           Int Maybe\n\
      \  createdTests  [ObjectId]\n\
      \  passedTests   [TestResult]\n\
      \  Email         email\n\
      \  Username      username\n\
      \  deriving      Eq Read Show Generic\n"
  ======>
    [(((((((((EntityDef (HaskellName (packPTH "TestResult")))
               (DBName (packPTH "test_result")))
              (((((((FieldDef (HaskellName (packPTH "Id")))
                      (DBName (packPTH "id")))
                     ((FTTypeCon Nothing) (packPTH "TestResultId")))
                    SqlInt64)
                   [])
                  True)
                 ((ForeignRef (HaskellName (packPTH "TestResult")))
                    ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
             [])
            [((((((FieldDef (HaskellName (packPTH "testKey")))
                    (DBName (packPTH "test_key")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for testKey")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "result")))
                    (DBName (packPTH "result")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for result")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "passingDate")))
                    (DBName (packPTH "passing_date")))
                   ((FTTypeCon Nothing) (packPTH "UTCTime")))
                  (SqlOther (packPTH "SqlType unset for passingDate")))
                 [])
                True)
               NoReference])
           [])
          [])
         [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
        (Data.Map.Internal.fromList []))
       False
       {entityFields = [((((((FieldDef (HaskellName (packPTH "testKey")))
                               (DBName (packPTH "test_key")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "result")))
                               (DBName (packPTH "result")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "passingDate")))
                               (DBName (packPTH "passing_date")))
                              ((FTTypeCon Nothing) (packPTH "UTCTime")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy UTCTime)))
                            [])
                           True)
                          NoReference],
        entityId = ((((((FieldDef (HaskellName (packPTH "Id")))
                          (DBName (packPTH "id")))
                         ((FTTypeCon Nothing) (packPTH "TestResultId")))
                        (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                           (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                       [])
                      True)
                     ((ForeignRef (HaskellName (packPTH "TestResult")))
                        ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))},
     (((((((((EntityDef (HaskellName (packPTH "User")))
               (DBName (packPTH "user")))
              (((((((FieldDef (HaskellName (packPTH "Id")))
                      (DBName (packPTH "id")))
                     ((FTTypeCon Nothing) (packPTH "UserId")))
                    SqlInt64)
                   [])
                  True)
                 ((ForeignRef (HaskellName (packPTH "User")))
                    ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
             [])
            [((((((FieldDef (HaskellName (packPTH "username")))
                    (DBName (packPTH "username")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for username")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "password")))
                    (DBName (packPTH "password")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for password")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "email")))
                    (DBName (packPTH "email")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for email")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "avatar")))
                    (DBName (packPTH "avatar")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for avatar")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "firstName")))
                    (DBName (packPTH "first_name")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for firstName")))
                 [packPTH "Maybe"])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "secondName")))
                    (DBName (packPTH "second_name")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for secondName")))
                 [packPTH "Maybe"])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "birthDay")))
                    (DBName (packPTH "birth_day")))
                   ((FTTypeCon Nothing) (packPTH "UTCTime")))
                  (SqlOther (packPTH "SqlType unset for birthDay")))
                 [packPTH "Maybe"])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "sex")))
                    (DBName (packPTH "sex")))
                   ((FTTypeCon Nothing) (packPTH "Int")))
                  (SqlOther (packPTH "SqlType unset for sex")))
                 [packPTH "Maybe"])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "createdTests")))
                    (DBName (packPTH "created_tests")))
                   (FTList ((FTTypeCon Nothing) (packPTH "ObjectId"))))
                  (SqlOther (packPTH "SqlType unset for createdTests")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "passedTests")))
                    (DBName (packPTH "passed_tests")))
                   (FTList ((FTTypeCon Nothing) (packPTH "TestResult"))))
                  (SqlOther (packPTH "SqlType unset for passedTests")))
                 [])
                True)
               (EmbedRef
                  ((EmbedEntityDef (HaskellName (packPTH "TestResult")))
                     [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing) Nothing,
                      ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                      ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                        Nothing]))])
           [(((UniqueDef (HaskellName (packPTH "Email")))
                (DBName (packPTH "email")))
               [(HaskellName (packPTH "email"), DBName (packPTH "email"))])
              [],
            (((UniqueDef (HaskellName (packPTH "Username")))
                (DBName (packPTH "username")))
               [(HaskellName (packPTH "username"), DBName (packPTH "username"))])
              []])
          [])
         [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
        (Data.Map.Internal.fromList []))
       False
       {entityFields = [((((((FieldDef (HaskellName (packPTH "username")))
                               (DBName (packPTH "username")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "password")))
                               (DBName (packPTH "password")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "email")))
                               (DBName (packPTH "email")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "avatar")))
                               (DBName (packPTH "avatar")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "firstName")))
                               (DBName (packPTH "first_name")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [packPTH "Maybe"])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "secondName")))
                               (DBName (packPTH "second_name")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [packPTH "Maybe"])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "birthDay")))
                               (DBName (packPTH "birth_day")))
                              ((FTTypeCon Nothing) (packPTH "UTCTime")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy UTCTime)))
                            [packPTH "Maybe"])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "sex")))
                               (DBName (packPTH "sex")))
                              ((FTTypeCon Nothing) (packPTH "Int")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Int)))
                            [packPTH "Maybe"])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "createdTests")))
                               (DBName (packPTH "created_tests")))
                              (FTList ((FTTypeCon Nothing) (packPTH "ObjectId"))))
                             SqlString)
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "passedTests")))
                               (DBName (packPTH "passed_tests")))
                              (FTList ((FTTypeCon Nothing) (packPTH "TestResult"))))
                             SqlString)
                            [])
                           True)
                          (EmbedRef
                             ((EmbedEntityDef (HaskellName (packPTH "TestResult")))
                                [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing) Nothing,
                                 ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                                 ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                                   Nothing]))],
        entityId = ((((((FieldDef (HaskellName (packPTH "Id")))
                          (DBName (packPTH "id")))
                         ((FTTypeCon Nothing) (packPTH "UserId")))
                        (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                           (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                       [])
                      True)
                     ((ForeignRef (HaskellName (packPTH "User")))
                        ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))}]
/home/nikita/Projects/labs/Databases/Course-Project/Server/src/Model/User.hs:(27,1)-(47,2): Splicing declarations
    share
      [mkPersist (mkPersistSettings (ConT ''MongoContext)),
       mkMigrate "migrateAll"]
      ([(((((((((EntityDef (HaskellName (packPTH "TestResult")))
                  (DBName (packPTH "test_result")))
                 (((((((FieldDef (HaskellName (packPTH "Id")))
                         (DBName (packPTH "id")))
                        ((FTTypeCon Nothing) (packPTH "TestResultId")))
                       SqlInt64)
                      [])
                     True)
                    ((ForeignRef (HaskellName (packPTH "TestResult")))
                       ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                [])
               [((((((FieldDef (HaskellName (packPTH "testKey")))
                       (DBName (packPTH "test_key")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for testKey")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "result")))
                       (DBName (packPTH "result")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for result")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "passingDate")))
                       (DBName (packPTH "passing_date")))
                      ((FTTypeCon Nothing) (packPTH "UTCTime")))
                     (SqlOther (packPTH "SqlType unset for passingDate")))
                    [])
                   True)
                  NoReference])
              [])
             [])
            [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
           (Data.Map.Internal.fromList []))
          False
          {entityFields = [((((((FieldDef (HaskellName (packPTH "testKey")))
                                  (DBName (packPTH "test_key")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "result")))
                                  (DBName (packPTH "result")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "passingDate")))
                                  (DBName (packPTH "passing_date")))
                                 ((FTTypeCon Nothing) (packPTH "UTCTime")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy UTCTime)))
                               [])
                              True)
                             NoReference],
           entityId = ((((((FieldDef (HaskellName (packPTH "Id")))
                             (DBName (packPTH "id")))
                            ((FTTypeCon Nothing) (packPTH "TestResultId")))
                           (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                              (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                          [])
                         True)
                        ((ForeignRef (HaskellName (packPTH "TestResult")))
                           ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))},
        (((((((((EntityDef (HaskellName (packPTH "User")))
                  (DBName (packPTH "user")))
                 (((((((FieldDef (HaskellName (packPTH "Id")))
                         (DBName (packPTH "id")))
                        ((FTTypeCon Nothing) (packPTH "UserId")))
                       SqlInt64)
                      [])
                     True)
                    ((ForeignRef (HaskellName (packPTH "User")))
                       ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                [])
               [((((((FieldDef (HaskellName (packPTH "username")))
                       (DBName (packPTH "username")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for username")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "password")))
                       (DBName (packPTH "password")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for password")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "email")))
                       (DBName (packPTH "email")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for email")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "avatar")))
                       (DBName (packPTH "avatar")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for avatar")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "firstName")))
                       (DBName (packPTH "first_name")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for firstName")))
                    [packPTH "Maybe"])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "secondName")))
                       (DBName (packPTH "second_name")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for secondName")))
                    [packPTH "Maybe"])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "birthDay")))
                       (DBName (packPTH "birth_day")))
                      ((FTTypeCon Nothing) (packPTH "UTCTime")))
                     (SqlOther (packPTH "SqlType unset for birthDay")))
                    [packPTH "Maybe"])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "sex")))
                       (DBName (packPTH "sex")))
                      ((FTTypeCon Nothing) (packPTH "Int")))
                     (SqlOther (packPTH "SqlType unset for sex")))
                    [packPTH "Maybe"])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "createdTests")))
                       (DBName (packPTH "created_tests")))
                      (FTList ((FTTypeCon Nothing) (packPTH "ObjectId"))))
                     (SqlOther (packPTH "SqlType unset for createdTests")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "passedTests")))
                       (DBName (packPTH "passed_tests")))
                      (FTList ((FTTypeCon Nothing) (packPTH "TestResult"))))
                     (SqlOther (packPTH "SqlType unset for passedTests")))
                    [])
                   True)
                  (EmbedRef
                     ((EmbedEntityDef (HaskellName (packPTH "TestResult")))
                        [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing) Nothing,
                         ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                         ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                           Nothing]))])
              [(((UniqueDef (HaskellName (packPTH "Email")))
                   (DBName (packPTH "email")))
                  [(HaskellName (packPTH "email"), DBName (packPTH "email"))])
                 [],
               (((UniqueDef (HaskellName (packPTH "Username")))
                   (DBName (packPTH "username")))
                  [(HaskellName (packPTH "username"), DBName (packPTH "username"))])
                 []])
             [])
            [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
           (Data.Map.Internal.fromList []))
          False
          {entityFields = [((((((FieldDef (HaskellName (packPTH "username")))
                                  (DBName (packPTH "username")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "password")))
                                  (DBName (packPTH "password")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "email")))
                                  (DBName (packPTH "email")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "avatar")))
                                  (DBName (packPTH "avatar")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "firstName")))
                                  (DBName (packPTH "first_name")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [packPTH "Maybe"])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "secondName")))
                                  (DBName (packPTH "second_name")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [packPTH "Maybe"])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "birthDay")))
                                  (DBName (packPTH "birth_day")))
                                 ((FTTypeCon Nothing) (packPTH "UTCTime")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy UTCTime)))
                               [packPTH "Maybe"])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "sex")))
                                  (DBName (packPTH "sex")))
                                 ((FTTypeCon Nothing) (packPTH "Int")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Int)))
                               [packPTH "Maybe"])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "createdTests")))
                                  (DBName (packPTH "created_tests")))
                                 (FTList ((FTTypeCon Nothing) (packPTH "ObjectId"))))
                                SqlString)
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "passedTests")))
                                  (DBName (packPTH "passed_tests")))
                                 (FTList ((FTTypeCon Nothing) (packPTH "TestResult"))))
                                SqlString)
                               [])
                              True)
                             (EmbedRef
                                ((EmbedEntityDef (HaskellName (packPTH "TestResult")))
                                   [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing) Nothing,
                                    ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                                    ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                                      Nothing]))],
           entityId = ((((((FieldDef (HaskellName (packPTH "Id")))
                             (DBName (packPTH "id")))
                            ((FTTypeCon Nothing) (packPTH "UserId")))
                           (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                              (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                          [])
                         True)
                        ((ForeignRef (HaskellName (packPTH "User")))
                           ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))}])
  ======>
    instance PersistField TestResult where
      toPersistValue
        = \ ent_a2eEx
            -> (PersistMap
                  $ ((Prelude.zip
                        ((Prelude.map pack) ["testKey", "result", "passingDate"]))
                       ((Prelude.map toPersistValue) $ (toPersistFields ent_a2eEx))))
      fromPersistValue
        = ((\ x_a2eEy
              -> let
                   columns_a2eEz
                     = unordered-containers-0.2.9.0:Data.HashMap.Strict.fromList x_a2eEy
                 in
                   (fromPersistValues
                      $ ((Prelude.map
                            (\ name_a2eEA
                               -> case
                                      (unordered-containers-0.2.9.0:Data.HashMap.Base.lookup
                                         (pack name_a2eEA))
                                        columns_a2eEz
                                  of
                                    Just v_a2eEB -> v_a2eEB
                                    Nothing -> PersistNull))
                           $ ["testKey", "result", "passingDate"])))
             <=< getPersistMap)
    instance persistent-2.8.1:Database.Persist.Sql.Class.PersistFieldSql TestResult where
      persistent-2.8.1:Database.Persist.Sql.Class.sqlType _ = SqlString
    instance PersistField User where
      toPersistValue
        = \ ent_a2eEC
            -> (PersistMap
                  $ ((Prelude.zip
                        ((Prelude.map pack)
                           ["username", "password", "email", "avatar", "firstName",
                            "secondName", "birthDay", "sex", "createdTests", "passedTests"]))
                       ((Prelude.map toPersistValue) $ (toPersistFields ent_a2eEC))))
      fromPersistValue
        = ((\ x_a2eED
              -> let
                   columns_a2eEE
                     = unordered-containers-0.2.9.0:Data.HashMap.Strict.fromList x_a2eED
                 in
                   (fromPersistValues
                      $ ((Prelude.map
                            (\ name_a2eEF
                               -> case
                                      (unordered-containers-0.2.9.0:Data.HashMap.Base.lookup
                                         (pack name_a2eEF))
                                        columns_a2eEE
                                  of
                                    Just v_a2eEG -> v_a2eEG
                                    Nothing -> PersistNull))
                           $ ["username", "password", "email", "avatar", "firstName",
                              "secondName", "birthDay", "sex", "createdTests", "passedTests"])))
             <=< getPersistMap)
    instance persistent-2.8.1:Database.Persist.Sql.Class.PersistFieldSql User where
      persistent-2.8.1:Database.Persist.Sql.Class.sqlType _ = SqlString
    data TestResult
      = TestResult {testResultTestKey :: !Text,
                    testResultResult :: !Text,
                    testResultPassingDate :: !UTCTime}
      deriving (Eq, Read, Show, Generic)
    type TestResultId = Key TestResult
    instance PersistEntity TestResult where
      type PersistEntityBackend TestResult = MongoContext
      data Unique TestResult
      newtype Key TestResult
        = TestResultKey {unTestResultKey :: (BackendKey MongoContext)}
        deriving (Show,
                  Read,
                  Eq,
                  Ord,
                  path-pieces-0.2.1:Web.PathPieces.PathPiece,
                  http-api-data-0.3.7.2:Web.Internal.HttpApiData.ToHttpApiData,
                  http-api-data-0.3.7.2:Web.Internal.HttpApiData.FromHttpApiData,
                  PersistField,
                  persistent-2.8.1:Database.Persist.Sql.Class.PersistFieldSql,
                  Aeson.ToJSON,
                  Aeson.FromJSON)
      data EntityField TestResult typ
        = typ ~ Key TestResult => TestResultId |
          typ ~ Text => TestResultTestKey |
          typ ~ Text => TestResultResult |
          typ ~ UTCTime => TestResultPassingDate
      keyToValues
        = ((ghc-prim-0.5.1.1:GHC.Types.: [])
             . (toPersistValue . unTestResultKey))
      keyFromValues
        = ((fmap TestResultKey)
             . (fromPersistValue . Database.Persist.TH.headNote))
      entityDef _
        = (((((((((EntityDef (HaskellName (packPTH "TestResult")))
                    (DBName (packPTH "test_result")))
                   (((((((FieldDef (HaskellName (packPTH "Id")))
                           (DBName (packPTH "id")))
                          ((FTTypeCon Nothing) (packPTH "TestResultId")))
                         SqlInt64)
                        [])
                       True)
                      ((ForeignRef (HaskellName (packPTH "TestResult")))
                         ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                  [])
                 [((((((FieldDef (HaskellName (packPTH "testKey")))
                         (DBName (packPTH "test_key")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "result")))
                         (DBName (packPTH "result")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "passingDate")))
                         (DBName (packPTH "passing_date")))
                        ((FTTypeCon Nothing) (packPTH "UTCTime")))
                       SqlDayTime)
                      [])
                     True)
                    NoReference])
                [])
               [])
              [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
             (Data.Map.Internal.fromList []))
            False
      toPersistFields (TestResult x_a2eEH x_a2eEI x_a2eEJ)
        = [SomePersistField x_a2eEH, SomePersistField x_a2eEI,
           SomePersistField x_a2eEJ]
      fromPersistValues [x1_a2eEL, x2_a2eEM, x3_a2eEN]
        = TestResult
            <$>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "testKey")))
                 . fromPersistValue)
                x1_a2eEL
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "result")))
                 . fromPersistValue)
                x2_a2eEM
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "passingDate")))
                 . fromPersistValue)
                x3_a2eEN
      fromPersistValues x_a2eEK
        = (Left
             $ ((mappend (packPTH "TestResult: fromPersistValues failed on: "))
                  (pack $ (show x_a2eEK))))
      persistUniqueToFieldNames _
        = error "Degenerate case, should never happen"
      persistUniqueToValues _
        = error "Degenerate case, should never happen"
      persistUniqueKeys
        (TestResult _testKey_a2eEO _result_a2eEP _passingDate_a2eEQ)
        = []
      persistFieldDef TestResultId
        = ((((((FieldDef (HaskellName (packPTH "Id")))
                 (DBName (packPTH "id")))
                ((FTTypeCon Nothing) (packPTH "TestResultId")))
               SqlInt64)
              [])
             True)
            ((ForeignRef (HaskellName (packPTH "TestResult")))
               ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))
      persistFieldDef TestResultTestKey
        = ((((((FieldDef (HaskellName (packPTH "testKey")))
                 (DBName (packPTH "test_key")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef TestResultResult
        = ((((((FieldDef (HaskellName (packPTH "result")))
                 (DBName (packPTH "result")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef TestResultPassingDate
        = ((((((FieldDef (HaskellName (packPTH "passingDate")))
                 (DBName (packPTH "passing_date")))
                ((FTTypeCon Nothing) (packPTH "UTCTime")))
               SqlDayTime)
              [])
             True)
            NoReference
      persistIdField = TestResultId
      fieldLens TestResultId
        = (lensPTH entityKey)
            (\ Entity _ value_a2eER key_a2eES
               -> (Entity key_a2eES) value_a2eER)
      fieldLens TestResultTestKey
        = (lensPTH (testResultTestKey . entityVal))
            (\ Entity key_a2eET value_a2eEU x_a2eEV
               -> (Entity key_a2eET) value_a2eEU {testResultTestKey = x_a2eEV})
      fieldLens TestResultResult
        = (lensPTH (testResultResult . entityVal))
            (\ Entity key_a2eET value_a2eEU x_a2eEV
               -> (Entity key_a2eET) value_a2eEU {testResultResult = x_a2eEV})
      fieldLens TestResultPassingDate
        = (lensPTH (testResultPassingDate . entityVal))
            (\ Entity key_a2eET value_a2eEU x_a2eEV
               -> (Entity key_a2eET)
                    value_a2eEU {testResultPassingDate = x_a2eEV})
    instance ToBackendKey MongoContext TestResult where
      toBackendKey = unTestResultKey
      fromBackendKey = TestResultKey
    data User
      = User {userUsername :: !Text,
              userPassword :: !Text,
              userEmail :: !Text,
              userAvatar :: !Text,
              userFirstName :: !(Maybe Text),
              userSecondName :: !(Maybe Text),
              userBirthDay :: !(Maybe UTCTime),
              userSex :: !(Maybe Int),
              userCreatedTests :: ![ObjectId],
              userPassedTests :: ![TestResult]}
      deriving (Eq, Read, Show, Generic)
    type UserId = Key User
    instance PersistEntity User where
      type PersistEntityBackend User = MongoContext
      data Unique User = Email Text | Username Text
      newtype Key User
        = UserKey {unUserKey :: (BackendKey MongoContext)}
        deriving (Show,
                  Read,
                  Eq,
                  Ord,
                  path-pieces-0.2.1:Web.PathPieces.PathPiece,
                  http-api-data-0.3.7.2:Web.Internal.HttpApiData.ToHttpApiData,
                  http-api-data-0.3.7.2:Web.Internal.HttpApiData.FromHttpApiData,
                  PersistField,
                  persistent-2.8.1:Database.Persist.Sql.Class.PersistFieldSql,
                  Aeson.ToJSON,
                  Aeson.FromJSON)
      data EntityField User typ
        = typ ~ Key User => UserId |
          typ ~ Text => UserUsername |
          typ ~ Text => UserPassword |
          typ ~ Text => UserEmail |
          typ ~ Text => UserAvatar |
          typ ~ Maybe Text => UserFirstName |
          typ ~ Maybe Text => UserSecondName |
          typ ~ Maybe UTCTime => UserBirthDay |
          typ ~ Maybe Int => UserSex |
          typ ~ [ObjectId] => UserCreatedTests |
          typ ~ [TestResult] => UserPassedTests
      keyToValues
        = ((ghc-prim-0.5.1.1:GHC.Types.: [])
             . (toPersistValue . unUserKey))
      keyFromValues
        = ((fmap UserKey)
             . (fromPersistValue . Database.Persist.TH.headNote))
      entityDef _
        = (((((((((EntityDef (HaskellName (packPTH "User")))
                    (DBName (packPTH "user")))
                   (((((((FieldDef (HaskellName (packPTH "Id")))
                           (DBName (packPTH "id")))
                          ((FTTypeCon Nothing) (packPTH "UserId")))
                         SqlInt64)
                        [])
                       True)
                      ((ForeignRef (HaskellName (packPTH "User")))
                         ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                  [])
                 [((((((FieldDef (HaskellName (packPTH "username")))
                         (DBName (packPTH "username")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "password")))
                         (DBName (packPTH "password")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "email")))
                         (DBName (packPTH "email")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "avatar")))
                         (DBName (packPTH "avatar")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "firstName")))
                         (DBName (packPTH "first_name")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [packPTH "Maybe"])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "secondName")))
                         (DBName (packPTH "second_name")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [packPTH "Maybe"])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "birthDay")))
                         (DBName (packPTH "birth_day")))
                        ((FTTypeCon Nothing) (packPTH "UTCTime")))
                       SqlDayTime)
                      [packPTH "Maybe"])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "sex")))
                         (DBName (packPTH "sex")))
                        ((FTTypeCon Nothing) (packPTH "Int")))
                       SqlInt64)
                      [packPTH "Maybe"])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "createdTests")))
                         (DBName (packPTH "created_tests")))
                        (FTList ((FTTypeCon Nothing) (packPTH "ObjectId"))))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "passedTests")))
                         (DBName (packPTH "passed_tests")))
                        (FTList ((FTTypeCon Nothing) (packPTH "TestResult"))))
                       SqlString)
                      [])
                     True)
                    (EmbedRef
                       ((EmbedEntityDef (HaskellName (packPTH "TestResult")))
                          [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing) Nothing,
                           ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                           ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                             Nothing]))])
                [(((UniqueDef (HaskellName (packPTH "Email")))
                     (DBName (packPTH "email")))
                    [(HaskellName (packPTH "email"), DBName (packPTH "email"))])
                   [],
                 (((UniqueDef (HaskellName (packPTH "Username")))
                     (DBName (packPTH "username")))
                    [(HaskellName (packPTH "username"), DBName (packPTH "username"))])
                   []])
               [])
              [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
             (Data.Map.Internal.fromList []))
            False
      toPersistFields
        (User x_a2eEW
              x_a2eEX
              x_a2eEY
              x_a2eEZ
              x_a2eF0
              x_a2eF1
              x_a2eF2
              x_a2eF3
              x_a2eF4
              x_a2eF5)
        = [SomePersistField x_a2eEW, SomePersistField x_a2eEX,
           SomePersistField x_a2eEY, SomePersistField x_a2eEZ,
           SomePersistField x_a2eF0, SomePersistField x_a2eF1,
           SomePersistField x_a2eF2, SomePersistField x_a2eF3,
           SomePersistField x_a2eF4, SomePersistField x_a2eF5]
      fromPersistValues
        [x1_a2eF7,
         x2_a2eF8,
         x3_a2eF9,
         x4_a2eFa,
         x5_a2eFb,
         x6_a2eFc,
         x7_a2eFd,
         x8_a2eFe,
         x9_a2eFf,
         x10_a2eFg]
        = User
            <$>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "username")))
                 . fromPersistValue)
                x1_a2eF7
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "password")))
                 . fromPersistValue)
                x2_a2eF8
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "email")))
                 . fromPersistValue)
                x3_a2eF9
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "avatar")))
                 . fromPersistValue)
                x4_a2eFa
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "firstName")))
                 . fromPersistValue)
                x5_a2eFb
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "secondName")))
                 . fromPersistValue)
                x6_a2eFc
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "birthDay")))
                 . fromPersistValue)
                x7_a2eFd
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "sex")))
                 . fromPersistValue)
                x8_a2eFe
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "createdTests")))
                 . fromPersistValue)
                x9_a2eFf
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "passedTests")))
                 . fromPersistValue)
                x10_a2eFg
      fromPersistValues x_a2eF6
        = (Left
             $ ((mappend (packPTH "User: fromPersistValues failed on: "))
                  (pack $ (show x_a2eF6))))
      persistUniqueToFieldNames Email {}
        = [(HaskellName (packPTH "email"), DBName (packPTH "email"))]
      persistUniqueToFieldNames Username {}
        = [(HaskellName (packPTH "username"), DBName (packPTH "username"))]
      persistUniqueToValues (Email x_a2eFh) = [toPersistValue x_a2eFh]
      persistUniqueToValues (Username x_a2eFi) = [toPersistValue x_a2eFi]
      persistUniqueKeys
        (User _username_a2eFj
              _password_a2eFk
              _email_a2eFl
              _avatar_a2eFm
              _firstName_a2eFn
              _secondName_a2eFo
              _birthDay_a2eFp
              _sex_a2eFq
              _createdTests_a2eFr
              _passedTests_a2eFs)
        = [Email _email_a2eFl, Username _username_a2eFj]
      persistFieldDef UserId
        = ((((((FieldDef (HaskellName (packPTH "Id")))
                 (DBName (packPTH "id")))
                ((FTTypeCon Nothing) (packPTH "UserId")))
               SqlInt64)
              [])
             True)
            ((ForeignRef (HaskellName (packPTH "User")))
               ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))
      persistFieldDef UserUsername
        = ((((((FieldDef (HaskellName (packPTH "username")))
                 (DBName (packPTH "username")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef UserPassword
        = ((((((FieldDef (HaskellName (packPTH "password")))
                 (DBName (packPTH "password")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef UserEmail
        = ((((((FieldDef (HaskellName (packPTH "email")))
                 (DBName (packPTH "email")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef UserAvatar
        = ((((((FieldDef (HaskellName (packPTH "avatar")))
                 (DBName (packPTH "avatar")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef UserFirstName
        = ((((((FieldDef (HaskellName (packPTH "firstName")))
                 (DBName (packPTH "first_name")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [packPTH "Maybe"])
             True)
            NoReference
      persistFieldDef UserSecondName
        = ((((((FieldDef (HaskellName (packPTH "secondName")))
                 (DBName (packPTH "second_name")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [packPTH "Maybe"])
             True)
            NoReference
      persistFieldDef UserBirthDay
        = ((((((FieldDef (HaskellName (packPTH "birthDay")))
                 (DBName (packPTH "birth_day")))
                ((FTTypeCon Nothing) (packPTH "UTCTime")))
               SqlDayTime)
              [packPTH "Maybe"])
             True)
            NoReference
      persistFieldDef UserSex
        = ((((((FieldDef (HaskellName (packPTH "sex")))
                 (DBName (packPTH "sex")))
                ((FTTypeCon Nothing) (packPTH "Int")))
               SqlInt64)
              [packPTH "Maybe"])
             True)
            NoReference
      persistFieldDef UserCreatedTests
        = ((((((FieldDef (HaskellName (packPTH "createdTests")))
                 (DBName (packPTH "created_tests")))
                (FTList ((FTTypeCon Nothing) (packPTH "ObjectId"))))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef UserPassedTests
        = ((((((FieldDef (HaskellName (packPTH "passedTests")))
                 (DBName (packPTH "passed_tests")))
                (FTList ((FTTypeCon Nothing) (packPTH "TestResult"))))
               SqlString)
              [])
             True)
            (EmbedRef
               ((EmbedEntityDef (HaskellName (packPTH "TestResult")))
                  [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing) Nothing,
                   ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                   ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                     Nothing]))
      persistIdField = UserId
      fieldLens UserId
        = (lensPTH entityKey)
            (\ Entity _ value_a2eFt key_a2eFu
               -> (Entity key_a2eFu) value_a2eFt)
      fieldLens UserUsername
        = (lensPTH (userUsername . entityVal))
            (\ Entity key_a2eFv value_a2eFw x_a2eFx
               -> (Entity key_a2eFv) value_a2eFw {userUsername = x_a2eFx})
      fieldLens UserPassword
        = (lensPTH (userPassword . entityVal))
            (\ Entity key_a2eFv value_a2eFw x_a2eFx
               -> (Entity key_a2eFv) value_a2eFw {userPassword = x_a2eFx})
      fieldLens UserEmail
        = (lensPTH (userEmail . entityVal))
            (\ Entity key_a2eFv value_a2eFw x_a2eFx
               -> (Entity key_a2eFv) value_a2eFw {userEmail = x_a2eFx})
      fieldLens UserAvatar
        = (lensPTH (userAvatar . entityVal))
            (\ Entity key_a2eFv value_a2eFw x_a2eFx
               -> (Entity key_a2eFv) value_a2eFw {userAvatar = x_a2eFx})
      fieldLens UserFirstName
        = (lensPTH (userFirstName . entityVal))
            (\ Entity key_a2eFv value_a2eFw x_a2eFx
               -> (Entity key_a2eFv) value_a2eFw {userFirstName = x_a2eFx})
      fieldLens UserSecondName
        = (lensPTH (userSecondName . entityVal))
            (\ Entity key_a2eFv value_a2eFw x_a2eFx
               -> (Entity key_a2eFv) value_a2eFw {userSecondName = x_a2eFx})
      fieldLens UserBirthDay
        = (lensPTH (userBirthDay . entityVal))
            (\ Entity key_a2eFv value_a2eFw x_a2eFx
               -> (Entity key_a2eFv) value_a2eFw {userBirthDay = x_a2eFx})
      fieldLens UserSex
        = (lensPTH (userSex . entityVal))
            (\ Entity key_a2eFv value_a2eFw x_a2eFx
               -> (Entity key_a2eFv) value_a2eFw {userSex = x_a2eFx})
      fieldLens UserCreatedTests
        = (lensPTH (userCreatedTests . entityVal))
            (\ Entity key_a2eFv value_a2eFw x_a2eFx
               -> (Entity key_a2eFv) value_a2eFw {userCreatedTests = x_a2eFx})
      fieldLens UserPassedTests
        = (lensPTH (userPassedTests . entityVal))
            (\ Entity key_a2eFv value_a2eFw x_a2eFx
               -> (Entity key_a2eFv) value_a2eFw {userPassedTests = x_a2eFx})
    instance ToBackendKey MongoContext User where
      toBackendKey = unUserKey
      fromBackendKey = UserKey
    migrateAll :: persistent-2.8.1:Database.Persist.Sql.Types.Migration
    migrateAll
      = do let defs_a2eFy
                 = [(((((((((EntityDef (HaskellName (packPTH "TestResult")))
                              (DBName (packPTH "test_result")))
                             (((((((FieldDef (HaskellName (packPTH "Id")))
                                     (DBName (packPTH "id")))
                                    ((FTTypeCon Nothing) (packPTH "TestResultId")))
                                   SqlInt64)
                                  [])
                                 True)
                                ((ForeignRef (HaskellName (packPTH "TestResult")))
                                   ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                            [])
                           [((((((FieldDef (HaskellName (packPTH "testKey")))
                                   (DBName (packPTH "test_key")))
                                  ((FTTypeCon Nothing) (packPTH "Text")))
                                 SqlString)
                                [])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "result")))
                                   (DBName (packPTH "result")))
                                  ((FTTypeCon Nothing) (packPTH "Text")))
                                 SqlString)
                                [])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "passingDate")))
                                   (DBName (packPTH "passing_date")))
                                  ((FTTypeCon Nothing) (packPTH "UTCTime")))
                                 SqlDayTime)
                                [])
                               True)
                              NoReference])
                          [])
                         [])
                        [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
                       (Data.Map.Internal.fromList []))
                      False,
                    (((((((((EntityDef (HaskellName (packPTH "User")))
                              (DBName (packPTH "user")))
                             (((((((FieldDef (HaskellName (packPTH "Id")))
                                     (DBName (packPTH "id")))
                                    ((FTTypeCon Nothing) (packPTH "UserId")))
                                   SqlInt64)
                                  [])
                                 True)
                                ((ForeignRef (HaskellName (packPTH "User")))
                                   ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                            [])
                           [((((((FieldDef (HaskellName (packPTH "username")))
                                   (DBName (packPTH "username")))
                                  ((FTTypeCon Nothing) (packPTH "Text")))
                                 SqlString)
                                [])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "password")))
                                   (DBName (packPTH "password")))
                                  ((FTTypeCon Nothing) (packPTH "Text")))
                                 SqlString)
                                [])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "email")))
                                   (DBName (packPTH "email")))
                                  ((FTTypeCon Nothing) (packPTH "Text")))
                                 SqlString)
                                [])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "avatar")))
                                   (DBName (packPTH "avatar")))
                                  ((FTTypeCon Nothing) (packPTH "Text")))
                                 SqlString)
                                [])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "firstName")))
                                   (DBName (packPTH "first_name")))
                                  ((FTTypeCon Nothing) (packPTH "Text")))
                                 SqlString)
                                [packPTH "Maybe"])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "secondName")))
                                   (DBName (packPTH "second_name")))
                                  ((FTTypeCon Nothing) (packPTH "Text")))
                                 SqlString)
                                [packPTH "Maybe"])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "birthDay")))
                                   (DBName (packPTH "birth_day")))
                                  ((FTTypeCon Nothing) (packPTH "UTCTime")))
                                 SqlDayTime)
                                [packPTH "Maybe"])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "sex")))
                                   (DBName (packPTH "sex")))
                                  ((FTTypeCon Nothing) (packPTH "Int")))
                                 SqlInt64)
                                [packPTH "Maybe"])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "createdTests")))
                                   (DBName (packPTH "created_tests")))
                                  (FTList ((FTTypeCon Nothing) (packPTH "ObjectId"))))
                                 SqlString)
                                [])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "passedTests")))
                                   (DBName (packPTH "passed_tests")))
                                  (FTList ((FTTypeCon Nothing) (packPTH "TestResult"))))
                                 SqlString)
                                [])
                               True)
                              (EmbedRef
                                 ((EmbedEntityDef (HaskellName (packPTH "TestResult")))
                                    [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing)
                                       Nothing,
                                     ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                                     ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                                       Nothing]))])
                          [(((UniqueDef (HaskellName (packPTH "Email")))
                               (DBName (packPTH "email")))
                              [(HaskellName (packPTH "email"), DBName (packPTH "email"))])
                             [],
                           (((UniqueDef (HaskellName (packPTH "Username")))
                               (DBName (packPTH "username")))
                              [(HaskellName (packPTH "username"), DBName (packPTH "username"))])
                             []])
                         [])
                        [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
                       (Data.Map.Internal.fromList []))
                      False]
           (persistent-2.8.1:Database.Persist.Sql.Migration.migrate
              defs_a2eFy)
             ((((((((((EntityDef (HaskellName (packPTH "TestResult")))
                        (DBName (packPTH "test_result")))
                       (((((((FieldDef (HaskellName (packPTH "Id")))
                               (DBName (packPTH "id")))
                              ((FTTypeCon Nothing) (packPTH "TestResultId")))
                             SqlInt64)
                            [])
                           True)
                          ((ForeignRef (HaskellName (packPTH "TestResult")))
                             ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                      [])
                     [((((((FieldDef (HaskellName (packPTH "testKey")))
                             (DBName (packPTH "test_key")))
                            ((FTTypeCon Nothing) (packPTH "Text")))
                           SqlString)
                          [])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "result")))
                             (DBName (packPTH "result")))
                            ((FTTypeCon Nothing) (packPTH "Text")))
                           SqlString)
                          [])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "passingDate")))
                             (DBName (packPTH "passing_date")))
                            ((FTTypeCon Nothing) (packPTH "UTCTime")))
                           SqlDayTime)
                          [])
                         True)
                        NoReference])
                    [])
                   [])
                  [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
                 (Data.Map.Internal.fromList []))
                False)
           (persistent-2.8.1:Database.Persist.Sql.Migration.migrate
              defs_a2eFy)
             ((((((((((EntityDef (HaskellName (packPTH "User")))
                        (DBName (packPTH "user")))
                       (((((((FieldDef (HaskellName (packPTH "Id")))
                               (DBName (packPTH "id")))
                              ((FTTypeCon Nothing) (packPTH "UserId")))
                             SqlInt64)
                            [])
                           True)
                          ((ForeignRef (HaskellName (packPTH "User")))
                             ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                      [])
                     [((((((FieldDef (HaskellName (packPTH "username")))
                             (DBName (packPTH "username")))
                            ((FTTypeCon Nothing) (packPTH "Text")))
                           SqlString)
                          [])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "password")))
                             (DBName (packPTH "password")))
                            ((FTTypeCon Nothing) (packPTH "Text")))
                           SqlString)
                          [])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "email")))
                             (DBName (packPTH "email")))
                            ((FTTypeCon Nothing) (packPTH "Text")))
                           SqlString)
                          [])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "avatar")))
                             (DBName (packPTH "avatar")))
                            ((FTTypeCon Nothing) (packPTH "Text")))
                           SqlString)
                          [])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "firstName")))
                             (DBName (packPTH "first_name")))
                            ((FTTypeCon Nothing) (packPTH "Text")))
                           SqlString)
                          [packPTH "Maybe"])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "secondName")))
                             (DBName (packPTH "second_name")))
                            ((FTTypeCon Nothing) (packPTH "Text")))
                           SqlString)
                          [packPTH "Maybe"])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "birthDay")))
                             (DBName (packPTH "birth_day")))
                            ((FTTypeCon Nothing) (packPTH "UTCTime")))
                           SqlDayTime)
                          [packPTH "Maybe"])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "sex")))
                             (DBName (packPTH "sex")))
                            ((FTTypeCon Nothing) (packPTH "Int")))
                           SqlInt64)
                          [packPTH "Maybe"])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "createdTests")))
                             (DBName (packPTH "created_tests")))
                            (FTList ((FTTypeCon Nothing) (packPTH "ObjectId"))))
                           SqlString)
                          [])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "passedTests")))
                             (DBName (packPTH "passed_tests")))
                            (FTList ((FTTypeCon Nothing) (packPTH "TestResult"))))
                           SqlString)
                          [])
                         True)
                        (EmbedRef
                           ((EmbedEntityDef (HaskellName (packPTH "TestResult")))
                              [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing) Nothing,
                               ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                               ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                                 Nothing]))])
                    [(((UniqueDef (HaskellName (packPTH "Email")))
                         (DBName (packPTH "email")))
                        [(HaskellName (packPTH "email"), DBName (packPTH "email"))])
                       [],
                     (((UniqueDef (HaskellName (packPTH "Username")))
                         (DBName (packPTH "username")))
                        [(HaskellName (packPTH "username"), DBName (packPTH "username"))])
                       []])
                   [])
                  [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
                 (Data.Map.Internal.fromList []))
                False)
/home/nikita/Projects/labs/Databases/Course-Project/Server/src/Model/User.hs:(27,103)-(47,2): Splicing expression
    Language.Haskell.TH.Quote.quoteExp
      persistLowerCase
      "\n\
      \TestResult\n\
      \  testKey       Text\n\
      \  result        Text\n\
      \  passingDate   UTCTime\n\
      \  deriving      Eq Read Show Generic\n\
      \User\n\
      \  username      Text\n\
      \  password      Text\n\
      \  email         Text\n\
      \  avatar        Text\n\
      \  firstName     Text Maybe\n\
      \  secondName    Text Maybe\n\
      \  birthDay      UTCTime Maybe\n\
      \  sex           Int Maybe\n\
      \  createdTests  [ObjectId]\n\
      \  passedTests   [TestResult]\n\
      \  Email         email\n\
      \  Username      username\n\
      \  deriving      Eq Read Show Generic\n"
  ======>
    [(((((((((EntityDef (HaskellName (packPTH "TestResult")))
               (DBName (packPTH "test_result")))
              (((((((FieldDef (HaskellName (packPTH "Id")))
                      (DBName (packPTH "id")))
                     ((FTTypeCon Nothing) (packPTH "TestResultId")))
                    SqlInt64)
                   [])
                  True)
                 ((ForeignRef (HaskellName (packPTH "TestResult")))
                    ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
             [])
            [((((((FieldDef (HaskellName (packPTH "testKey")))
                    (DBName (packPTH "test_key")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for testKey")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "result")))
                    (DBName (packPTH "result")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for result")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "passingDate")))
                    (DBName (packPTH "passing_date")))
                   ((FTTypeCon Nothing) (packPTH "UTCTime")))
                  (SqlOther (packPTH "SqlType unset for passingDate")))
                 [])
                True)
               NoReference])
           [])
          [])
         [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
        (Data.Map.Internal.fromList []))
       False
       {entityFields = [((((((FieldDef (HaskellName (packPTH "testKey")))
                               (DBName (packPTH "test_key")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "result")))
                               (DBName (packPTH "result")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "passingDate")))
                               (DBName (packPTH "passing_date")))
                              ((FTTypeCon Nothing) (packPTH "UTCTime")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy UTCTime)))
                            [])
                           True)
                          NoReference],
        entityId = ((((((FieldDef (HaskellName (packPTH "Id")))
                          (DBName (packPTH "id")))
                         ((FTTypeCon Nothing) (packPTH "TestResultId")))
                        (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                           (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                       [])
                      True)
                     ((ForeignRef (HaskellName (packPTH "TestResult")))
                        ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))},
     (((((((((EntityDef (HaskellName (packPTH "User")))
               (DBName (packPTH "user")))
              (((((((FieldDef (HaskellName (packPTH "Id")))
                      (DBName (packPTH "id")))
                     ((FTTypeCon Nothing) (packPTH "UserId")))
                    SqlInt64)
                   [])
                  True)
                 ((ForeignRef (HaskellName (packPTH "User")))
                    ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
             [])
            [((((((FieldDef (HaskellName (packPTH "username")))
                    (DBName (packPTH "username")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for username")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "password")))
                    (DBName (packPTH "password")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for password")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "email")))
                    (DBName (packPTH "email")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for email")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "avatar")))
                    (DBName (packPTH "avatar")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for avatar")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "firstName")))
                    (DBName (packPTH "first_name")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for firstName")))
                 [packPTH "Maybe"])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "secondName")))
                    (DBName (packPTH "second_name")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for secondName")))
                 [packPTH "Maybe"])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "birthDay")))
                    (DBName (packPTH "birth_day")))
                   ((FTTypeCon Nothing) (packPTH "UTCTime")))
                  (SqlOther (packPTH "SqlType unset for birthDay")))
                 [packPTH "Maybe"])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "sex")))
                    (DBName (packPTH "sex")))
                   ((FTTypeCon Nothing) (packPTH "Int")))
                  (SqlOther (packPTH "SqlType unset for sex")))
                 [packPTH "Maybe"])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "createdTests")))
                    (DBName (packPTH "created_tests")))
                   (FTList ((FTTypeCon Nothing) (packPTH "ObjectId"))))
                  (SqlOther (packPTH "SqlType unset for createdTests")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "passedTests")))
                    (DBName (packPTH "passed_tests")))
                   (FTList ((FTTypeCon Nothing) (packPTH "TestResult"))))
                  (SqlOther (packPTH "SqlType unset for passedTests")))
                 [])
                True)
               (EmbedRef
                  ((EmbedEntityDef (HaskellName (packPTH "TestResult")))
                     [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing) Nothing,
                      ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                      ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                        Nothing]))])
           [(((UniqueDef (HaskellName (packPTH "Email")))
                (DBName (packPTH "email")))
               [(HaskellName (packPTH "email"), DBName (packPTH "email"))])
              [],
            (((UniqueDef (HaskellName (packPTH "Username")))
                (DBName (packPTH "username")))
               [(HaskellName (packPTH "username"), DBName (packPTH "username"))])
              []])
          [])
         [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
        (Data.Map.Internal.fromList []))
       False
       {entityFields = [((((((FieldDef (HaskellName (packPTH "username")))
                               (DBName (packPTH "username")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "password")))
                               (DBName (packPTH "password")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "email")))
                               (DBName (packPTH "email")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "avatar")))
                               (DBName (packPTH "avatar")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "firstName")))
                               (DBName (packPTH "first_name")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [packPTH "Maybe"])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "secondName")))
                               (DBName (packPTH "second_name")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [packPTH "Maybe"])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "birthDay")))
                               (DBName (packPTH "birth_day")))
                              ((FTTypeCon Nothing) (packPTH "UTCTime")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy UTCTime)))
                            [packPTH "Maybe"])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "sex")))
                               (DBName (packPTH "sex")))
                              ((FTTypeCon Nothing) (packPTH "Int")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Int)))
                            [packPTH "Maybe"])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "createdTests")))
                               (DBName (packPTH "created_tests")))
                              (FTList ((FTTypeCon Nothing) (packPTH "ObjectId"))))
                             SqlString)
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "passedTests")))
                               (DBName (packPTH "passed_tests")))
                              (FTList ((FTTypeCon Nothing) (packPTH "TestResult"))))
                             SqlString)
                            [])
                           True)
                          (EmbedRef
                             ((EmbedEntityDef (HaskellName (packPTH "TestResult")))
                                [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing) Nothing,
                                 ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                                 ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                                   Nothing]))],
        entityId = ((((((FieldDef (HaskellName (packPTH "Id")))
                          (DBName (packPTH "id")))
                         ((FTTypeCon Nothing) (packPTH "UserId")))
                        (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                           (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                       [])
                      True)
                     ((ForeignRef (HaskellName (packPTH "User")))
                        ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))}]
/home/nikita/Projects/labs/Databases/Course-Project/Server/src/Model/User.hs:(27,1)-(47,2): Splicing declarations
    share
      [mkPersist (mkPersistSettings (ConT ''MongoContext)),
       mkMigrate "migrateAll"]
      ([(((((((((EntityDef (HaskellName (packPTH "TestResult")))
                  (DBName (packPTH "test_result")))
                 (((((((FieldDef (HaskellName (packPTH "Id")))
                         (DBName (packPTH "id")))
                        ((FTTypeCon Nothing) (packPTH "TestResultId")))
                       SqlInt64)
                      [])
                     True)
                    ((ForeignRef (HaskellName (packPTH "TestResult")))
                       ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                [])
               [((((((FieldDef (HaskellName (packPTH "testKey")))
                       (DBName (packPTH "test_key")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for testKey")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "result")))
                       (DBName (packPTH "result")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for result")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "passingDate")))
                       (DBName (packPTH "passing_date")))
                      ((FTTypeCon Nothing) (packPTH "UTCTime")))
                     (SqlOther (packPTH "SqlType unset for passingDate")))
                    [])
                   True)
                  NoReference])
              [])
             [])
            [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
           (Data.Map.Internal.fromList []))
          False
          {entityFields = [((((((FieldDef (HaskellName (packPTH "testKey")))
                                  (DBName (packPTH "test_key")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "result")))
                                  (DBName (packPTH "result")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "passingDate")))
                                  (DBName (packPTH "passing_date")))
                                 ((FTTypeCon Nothing) (packPTH "UTCTime")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy UTCTime)))
                               [])
                              True)
                             NoReference],
           entityId = ((((((FieldDef (HaskellName (packPTH "Id")))
                             (DBName (packPTH "id")))
                            ((FTTypeCon Nothing) (packPTH "TestResultId")))
                           (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                              (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                          [])
                         True)
                        ((ForeignRef (HaskellName (packPTH "TestResult")))
                           ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))},
        (((((((((EntityDef (HaskellName (packPTH "User")))
                  (DBName (packPTH "user")))
                 (((((((FieldDef (HaskellName (packPTH "Id")))
                         (DBName (packPTH "id")))
                        ((FTTypeCon Nothing) (packPTH "UserId")))
                       SqlInt64)
                      [])
                     True)
                    ((ForeignRef (HaskellName (packPTH "User")))
                       ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                [])
               [((((((FieldDef (HaskellName (packPTH "username")))
                       (DBName (packPTH "username")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for username")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "password")))
                       (DBName (packPTH "password")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for password")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "email")))
                       (DBName (packPTH "email")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for email")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "avatar")))
                       (DBName (packPTH "avatar")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for avatar")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "firstName")))
                       (DBName (packPTH "first_name")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for firstName")))
                    [packPTH "Maybe"])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "secondName")))
                       (DBName (packPTH "second_name")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for secondName")))
                    [packPTH "Maybe"])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "birthDay")))
                       (DBName (packPTH "birth_day")))
                      ((FTTypeCon Nothing) (packPTH "UTCTime")))
                     (SqlOther (packPTH "SqlType unset for birthDay")))
                    [packPTH "Maybe"])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "sex")))
                       (DBName (packPTH "sex")))
                      ((FTTypeCon Nothing) (packPTH "Int")))
                     (SqlOther (packPTH "SqlType unset for sex")))
                    [packPTH "Maybe"])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "createdTests")))
                       (DBName (packPTH "created_tests")))
                      (FTList ((FTTypeCon Nothing) (packPTH "ObjectId"))))
                     (SqlOther (packPTH "SqlType unset for createdTests")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "passedTests")))
                       (DBName (packPTH "passed_tests")))
                      (FTList ((FTTypeCon Nothing) (packPTH "TestResult"))))
                     (SqlOther (packPTH "SqlType unset for passedTests")))
                    [])
                   True)
                  (EmbedRef
                     ((EmbedEntityDef (HaskellName (packPTH "TestResult")))
                        [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing) Nothing,
                         ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                         ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                           Nothing]))])
              [(((UniqueDef (HaskellName (packPTH "Email")))
                   (DBName (packPTH "email")))
                  [(HaskellName (packPTH "email"), DBName (packPTH "email"))])
                 [],
               (((UniqueDef (HaskellName (packPTH "Username")))
                   (DBName (packPTH "username")))
                  [(HaskellName (packPTH "username"), DBName (packPTH "username"))])
                 []])
             [])
            [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
           (Data.Map.Internal.fromList []))
          False
          {entityFields = [((((((FieldDef (HaskellName (packPTH "username")))
                                  (DBName (packPTH "username")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "password")))
                                  (DBName (packPTH "password")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "email")))
                                  (DBName (packPTH "email")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "avatar")))
                                  (DBName (packPTH "avatar")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "firstName")))
                                  (DBName (packPTH "first_name")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [packPTH "Maybe"])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "secondName")))
                                  (DBName (packPTH "second_name")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [packPTH "Maybe"])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "birthDay")))
                                  (DBName (packPTH "birth_day")))
                                 ((FTTypeCon Nothing) (packPTH "UTCTime")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy UTCTime)))
                               [packPTH "Maybe"])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "sex")))
                                  (DBName (packPTH "sex")))
                                 ((FTTypeCon Nothing) (packPTH "Int")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Int)))
                               [packPTH "Maybe"])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "createdTests")))
                                  (DBName (packPTH "created_tests")))
                                 (FTList ((FTTypeCon Nothing) (packPTH "ObjectId"))))
                                SqlString)
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "passedTests")))
                                  (DBName (packPTH "passed_tests")))
                                 (FTList ((FTTypeCon Nothing) (packPTH "TestResult"))))
                                SqlString)
                               [])
                              True)
                             (EmbedRef
                                ((EmbedEntityDef (HaskellName (packPTH "TestResult")))
                                   [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing) Nothing,
                                    ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                                    ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                                      Nothing]))],
           entityId = ((((((FieldDef (HaskellName (packPTH "Id")))
                             (DBName (packPTH "id")))
                            ((FTTypeCon Nothing) (packPTH "UserId")))
                           (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                              (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                          [])
                         True)
                        ((ForeignRef (HaskellName (packPTH "User")))
                           ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))}])
  ======>
    instance PersistField TestResult where
      toPersistValue
        = \ ent_a2eTX
            -> (PersistMap
                  $ ((Prelude.zip
                        ((Prelude.map pack) ["testKey", "result", "passingDate"]))
                       ((Prelude.map toPersistValue) $ (toPersistFields ent_a2eTX))))
      fromPersistValue
        = ((\ x_a2eTY
              -> let
                   columns_a2eTZ
                     = unordered-containers-0.2.9.0:Data.HashMap.Strict.fromList x_a2eTY
                 in
                   (fromPersistValues
                      $ ((Prelude.map
                            (\ name_a2eU0
                               -> case
                                      (unordered-containers-0.2.9.0:Data.HashMap.Base.lookup
                                         (pack name_a2eU0))
                                        columns_a2eTZ
                                  of
                                    Just v_a2eU1 -> v_a2eU1
                                    Nothing -> PersistNull))
                           $ ["testKey", "result", "passingDate"])))
             <=< getPersistMap)
    instance persistent-2.8.1:Database.Persist.Sql.Class.PersistFieldSql TestResult where
      persistent-2.8.1:Database.Persist.Sql.Class.sqlType _ = SqlString
    instance PersistField User where
      toPersistValue
        = \ ent_a2eU2
            -> (PersistMap
                  $ ((Prelude.zip
                        ((Prelude.map pack)
                           ["username", "password", "email", "avatar", "firstName",
                            "secondName", "birthDay", "sex", "createdTests", "passedTests"]))
                       ((Prelude.map toPersistValue) $ (toPersistFields ent_a2eU2))))
      fromPersistValue
        = ((\ x_a2eU3
              -> let
                   columns_a2eU4
                     = unordered-containers-0.2.9.0:Data.HashMap.Strict.fromList x_a2eU3
                 in
                   (fromPersistValues
                      $ ((Prelude.map
                            (\ name_a2eU5
                               -> case
                                      (unordered-containers-0.2.9.0:Data.HashMap.Base.lookup
                                         (pack name_a2eU5))
                                        columns_a2eU4
                                  of
                                    Just v_a2eU6 -> v_a2eU6
                                    Nothing -> PersistNull))
                           $ ["username", "password", "email", "avatar", "firstName",
                              "secondName", "birthDay", "sex", "createdTests", "passedTests"])))
             <=< getPersistMap)
    instance persistent-2.8.1:Database.Persist.Sql.Class.PersistFieldSql User where
      persistent-2.8.1:Database.Persist.Sql.Class.sqlType _ = SqlString
    data TestResult
      = TestResult {testResultTestKey :: !Text,
                    testResultResult :: !Text,
                    testResultPassingDate :: !UTCTime}
      deriving (Eq, Read, Show, Generic)
    type TestResultId = Key TestResult
    instance PersistEntity TestResult where
      type PersistEntityBackend TestResult = MongoContext
      data Unique TestResult
      newtype Key TestResult
        = TestResultKey {unTestResultKey :: (BackendKey MongoContext)}
        deriving (Show,
                  Read,
                  Eq,
                  Ord,
                  path-pieces-0.2.1:Web.PathPieces.PathPiece,
                  http-api-data-0.3.7.2:Web.Internal.HttpApiData.ToHttpApiData,
                  http-api-data-0.3.7.2:Web.Internal.HttpApiData.FromHttpApiData,
                  PersistField,
                  persistent-2.8.1:Database.Persist.Sql.Class.PersistFieldSql,
                  Aeson.ToJSON,
                  Aeson.FromJSON)
      data EntityField TestResult typ
        = typ ~ Key TestResult => TestResultId |
          typ ~ Text => TestResultTestKey |
          typ ~ Text => TestResultResult |
          typ ~ UTCTime => TestResultPassingDate
      keyToValues
        = ((ghc-prim-0.5.1.1:GHC.Types.: [])
             . (toPersistValue . unTestResultKey))
      keyFromValues
        = ((fmap TestResultKey)
             . (fromPersistValue . Database.Persist.TH.headNote))
      entityDef _
        = (((((((((EntityDef (HaskellName (packPTH "TestResult")))
                    (DBName (packPTH "test_result")))
                   (((((((FieldDef (HaskellName (packPTH "Id")))
                           (DBName (packPTH "id")))
                          ((FTTypeCon Nothing) (packPTH "TestResultId")))
                         SqlInt64)
                        [])
                       True)
                      ((ForeignRef (HaskellName (packPTH "TestResult")))
                         ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                  [])
                 [((((((FieldDef (HaskellName (packPTH "testKey")))
                         (DBName (packPTH "test_key")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "result")))
                         (DBName (packPTH "result")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "passingDate")))
                         (DBName (packPTH "passing_date")))
                        ((FTTypeCon Nothing) (packPTH "UTCTime")))
                       SqlDayTime)
                      [])
                     True)
                    NoReference])
                [])
               [])
              [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
             (Data.Map.Internal.fromList []))
            False
      toPersistFields (TestResult x_a2eU7 x_a2eU8 x_a2eU9)
        = [SomePersistField x_a2eU7, SomePersistField x_a2eU8,
           SomePersistField x_a2eU9]
      fromPersistValues [x1_a2eUb, x2_a2eUc, x3_a2eUd]
        = TestResult
            <$>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "testKey")))
                 . fromPersistValue)
                x1_a2eUb
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "result")))
                 . fromPersistValue)
                x2_a2eUc
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "passingDate")))
                 . fromPersistValue)
                x3_a2eUd
      fromPersistValues x_a2eUa
        = (Left
             $ ((mappend (packPTH "TestResult: fromPersistValues failed on: "))
                  (pack $ (show x_a2eUa))))
      persistUniqueToFieldNames _
        = error "Degenerate case, should never happen"
      persistUniqueToValues _
        = error "Degenerate case, should never happen"
      persistUniqueKeys
        (TestResult _testKey_a2eUe _result_a2eUf _passingDate_a2eUg)
        = []
      persistFieldDef TestResultId
        = ((((((FieldDef (HaskellName (packPTH "Id")))
                 (DBName (packPTH "id")))
                ((FTTypeCon Nothing) (packPTH "TestResultId")))
               SqlInt64)
              [])
             True)
            ((ForeignRef (HaskellName (packPTH "TestResult")))
               ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))
      persistFieldDef TestResultTestKey
        = ((((((FieldDef (HaskellName (packPTH "testKey")))
                 (DBName (packPTH "test_key")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef TestResultResult
        = ((((((FieldDef (HaskellName (packPTH "result")))
                 (DBName (packPTH "result")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef TestResultPassingDate
        = ((((((FieldDef (HaskellName (packPTH "passingDate")))
                 (DBName (packPTH "passing_date")))
                ((FTTypeCon Nothing) (packPTH "UTCTime")))
               SqlDayTime)
              [])
             True)
            NoReference
      persistIdField = TestResultId
      fieldLens TestResultId
        = (lensPTH entityKey)
            (\ Entity _ value_a2eUh key_a2eUi
               -> (Entity key_a2eUi) value_a2eUh)
      fieldLens TestResultTestKey
        = (lensPTH (testResultTestKey . entityVal))
            (\ Entity key_a2eUj value_a2eUk x_a2eUl
               -> (Entity key_a2eUj) value_a2eUk {testResultTestKey = x_a2eUl})
      fieldLens TestResultResult
        = (lensPTH (testResultResult . entityVal))
            (\ Entity key_a2eUj value_a2eUk x_a2eUl
               -> (Entity key_a2eUj) value_a2eUk {testResultResult = x_a2eUl})
      fieldLens TestResultPassingDate
        = (lensPTH (testResultPassingDate . entityVal))
            (\ Entity key_a2eUj value_a2eUk x_a2eUl
               -> (Entity key_a2eUj)
                    value_a2eUk {testResultPassingDate = x_a2eUl})
    instance ToBackendKey MongoContext TestResult where
      toBackendKey = unTestResultKey
      fromBackendKey = TestResultKey
    data User
      = User {userUsername :: !Text,
              userPassword :: !Text,
              userEmail :: !Text,
              userAvatar :: !Text,
              userFirstName :: !(Maybe Text),
              userSecondName :: !(Maybe Text),
              userBirthDay :: !(Maybe UTCTime),
              userSex :: !(Maybe Int),
              userCreatedTests :: ![ObjectId],
              userPassedTests :: ![TestResult]}
      deriving (Eq, Read, Show, Generic)
    type UserId = Key User
    instance PersistEntity User where
      type PersistEntityBackend User = MongoContext
      data Unique User = Email Text | Username Text
      newtype Key User
        = UserKey {unUserKey :: (BackendKey MongoContext)}
        deriving (Show,
                  Read,
                  Eq,
                  Ord,
                  path-pieces-0.2.1:Web.PathPieces.PathPiece,
                  http-api-data-0.3.7.2:Web.Internal.HttpApiData.ToHttpApiData,
                  http-api-data-0.3.7.2:Web.Internal.HttpApiData.FromHttpApiData,
                  PersistField,
                  persistent-2.8.1:Database.Persist.Sql.Class.PersistFieldSql,
                  Aeson.ToJSON,
                  Aeson.FromJSON)
      data EntityField User typ
        = typ ~ Key User => UserId |
          typ ~ Text => UserUsername |
          typ ~ Text => UserPassword |
          typ ~ Text => UserEmail |
          typ ~ Text => UserAvatar |
          typ ~ Maybe Text => UserFirstName |
          typ ~ Maybe Text => UserSecondName |
          typ ~ Maybe UTCTime => UserBirthDay |
          typ ~ Maybe Int => UserSex |
          typ ~ [ObjectId] => UserCreatedTests |
          typ ~ [TestResult] => UserPassedTests
      keyToValues
        = ((ghc-prim-0.5.1.1:GHC.Types.: [])
             . (toPersistValue . unUserKey))
      keyFromValues
        = ((fmap UserKey)
             . (fromPersistValue . Database.Persist.TH.headNote))
      entityDef _
        = (((((((((EntityDef (HaskellName (packPTH "User")))
                    (DBName (packPTH "user")))
                   (((((((FieldDef (HaskellName (packPTH "Id")))
                           (DBName (packPTH "id")))
                          ((FTTypeCon Nothing) (packPTH "UserId")))
                         SqlInt64)
                        [])
                       True)
                      ((ForeignRef (HaskellName (packPTH "User")))
                         ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                  [])
                 [((((((FieldDef (HaskellName (packPTH "username")))
                         (DBName (packPTH "username")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "password")))
                         (DBName (packPTH "password")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "email")))
                         (DBName (packPTH "email")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "avatar")))
                         (DBName (packPTH "avatar")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "firstName")))
                         (DBName (packPTH "first_name")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [packPTH "Maybe"])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "secondName")))
                         (DBName (packPTH "second_name")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [packPTH "Maybe"])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "birthDay")))
                         (DBName (packPTH "birth_day")))
                        ((FTTypeCon Nothing) (packPTH "UTCTime")))
                       SqlDayTime)
                      [packPTH "Maybe"])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "sex")))
                         (DBName (packPTH "sex")))
                        ((FTTypeCon Nothing) (packPTH "Int")))
                       SqlInt64)
                      [packPTH "Maybe"])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "createdTests")))
                         (DBName (packPTH "created_tests")))
                        (FTList ((FTTypeCon Nothing) (packPTH "ObjectId"))))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "passedTests")))
                         (DBName (packPTH "passed_tests")))
                        (FTList ((FTTypeCon Nothing) (packPTH "TestResult"))))
                       SqlString)
                      [])
                     True)
                    (EmbedRef
                       ((EmbedEntityDef (HaskellName (packPTH "TestResult")))
                          [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing) Nothing,
                           ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                           ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                             Nothing]))])
                [(((UniqueDef (HaskellName (packPTH "Email")))
                     (DBName (packPTH "email")))
                    [(HaskellName (packPTH "email"), DBName (packPTH "email"))])
                   [],
                 (((UniqueDef (HaskellName (packPTH "Username")))
                     (DBName (packPTH "username")))
                    [(HaskellName (packPTH "username"), DBName (packPTH "username"))])
                   []])
               [])
              [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
             (Data.Map.Internal.fromList []))
            False
      toPersistFields
        (User x_a2eUm
              x_a2eUn
              x_a2eUo
              x_a2eUp
              x_a2eUq
              x_a2eUr
              x_a2eUs
              x_a2eUt
              x_a2eUu
              x_a2eUv)
        = [SomePersistField x_a2eUm, SomePersistField x_a2eUn,
           SomePersistField x_a2eUo, SomePersistField x_a2eUp,
           SomePersistField x_a2eUq, SomePersistField x_a2eUr,
           SomePersistField x_a2eUs, SomePersistField x_a2eUt,
           SomePersistField x_a2eUu, SomePersistField x_a2eUv]
      fromPersistValues
        [x1_a2eUx,
         x2_a2eUy,
         x3_a2eUz,
         x4_a2eUA,
         x5_a2eUB,
         x6_a2eUC,
         x7_a2eUD,
         x8_a2eUE,
         x9_a2eUF,
         x10_a2eUG]
        = User
            <$>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "username")))
                 . fromPersistValue)
                x1_a2eUx
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "password")))
                 . fromPersistValue)
                x2_a2eUy
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "email")))
                 . fromPersistValue)
                x3_a2eUz
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "avatar")))
                 . fromPersistValue)
                x4_a2eUA
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "firstName")))
                 . fromPersistValue)
                x5_a2eUB
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "secondName")))
                 . fromPersistValue)
                x6_a2eUC
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "birthDay")))
                 . fromPersistValue)
                x7_a2eUD
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "sex")))
                 . fromPersistValue)
                x8_a2eUE
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "createdTests")))
                 . fromPersistValue)
                x9_a2eUF
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "passedTests")))
                 . fromPersistValue)
                x10_a2eUG
      fromPersistValues x_a2eUw
        = (Left
             $ ((mappend (packPTH "User: fromPersistValues failed on: "))
                  (pack $ (show x_a2eUw))))
      persistUniqueToFieldNames Email {}
        = [(HaskellName (packPTH "email"), DBName (packPTH "email"))]
      persistUniqueToFieldNames Username {}
        = [(HaskellName (packPTH "username"), DBName (packPTH "username"))]
      persistUniqueToValues (Email x_a2eUH) = [toPersistValue x_a2eUH]
      persistUniqueToValues (Username x_a2eUI) = [toPersistValue x_a2eUI]
      persistUniqueKeys
        (User _username_a2eUJ
              _password_a2eUK
              _email_a2eUL
              _avatar_a2eUM
              _firstName_a2eUN
              _secondName_a2eUO
              _birthDay_a2eUP
              _sex_a2eUQ
              _createdTests_a2eUR
              _passedTests_a2eUS)
        = [Email _email_a2eUL, Username _username_a2eUJ]
      persistFieldDef UserId
        = ((((((FieldDef (HaskellName (packPTH "Id")))
                 (DBName (packPTH "id")))
                ((FTTypeCon Nothing) (packPTH "UserId")))
               SqlInt64)
              [])
             True)
            ((ForeignRef (HaskellName (packPTH "User")))
               ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))
      persistFieldDef UserUsername
        = ((((((FieldDef (HaskellName (packPTH "username")))
                 (DBName (packPTH "username")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef UserPassword
        = ((((((FieldDef (HaskellName (packPTH "password")))
                 (DBName (packPTH "password")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef UserEmail
        = ((((((FieldDef (HaskellName (packPTH "email")))
                 (DBName (packPTH "email")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef UserAvatar
        = ((((((FieldDef (HaskellName (packPTH "avatar")))
                 (DBName (packPTH "avatar")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef UserFirstName
        = ((((((FieldDef (HaskellName (packPTH "firstName")))
                 (DBName (packPTH "first_name")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [packPTH "Maybe"])
             True)
            NoReference
      persistFieldDef UserSecondName
        = ((((((FieldDef (HaskellName (packPTH "secondName")))
                 (DBName (packPTH "second_name")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [packPTH "Maybe"])
             True)
            NoReference
      persistFieldDef UserBirthDay
        = ((((((FieldDef (HaskellName (packPTH "birthDay")))
                 (DBName (packPTH "birth_day")))
                ((FTTypeCon Nothing) (packPTH "UTCTime")))
               SqlDayTime)
              [packPTH "Maybe"])
             True)
            NoReference
      persistFieldDef UserSex
        = ((((((FieldDef (HaskellName (packPTH "sex")))
                 (DBName (packPTH "sex")))
                ((FTTypeCon Nothing) (packPTH "Int")))
               SqlInt64)
              [packPTH "Maybe"])
             True)
            NoReference
      persistFieldDef UserCreatedTests
        = ((((((FieldDef (HaskellName (packPTH "createdTests")))
                 (DBName (packPTH "created_tests")))
                (FTList ((FTTypeCon Nothing) (packPTH "ObjectId"))))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef UserPassedTests
        = ((((((FieldDef (HaskellName (packPTH "passedTests")))
                 (DBName (packPTH "passed_tests")))
                (FTList ((FTTypeCon Nothing) (packPTH "TestResult"))))
               SqlString)
              [])
             True)
            (EmbedRef
               ((EmbedEntityDef (HaskellName (packPTH "TestResult")))
                  [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing) Nothing,
                   ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                   ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                     Nothing]))
      persistIdField = UserId
      fieldLens UserId
        = (lensPTH entityKey)
            (\ Entity _ value_a2eUT key_a2eUU
               -> (Entity key_a2eUU) value_a2eUT)
      fieldLens UserUsername
        = (lensPTH (userUsername . entityVal))
            (\ Entity key_a2eUV value_a2eUW x_a2eUX
               -> (Entity key_a2eUV) value_a2eUW {userUsername = x_a2eUX})
      fieldLens UserPassword
        = (lensPTH (userPassword . entityVal))
            (\ Entity key_a2eUV value_a2eUW x_a2eUX
               -> (Entity key_a2eUV) value_a2eUW {userPassword = x_a2eUX})
      fieldLens UserEmail
        = (lensPTH (userEmail . entityVal))
            (\ Entity key_a2eUV value_a2eUW x_a2eUX
               -> (Entity key_a2eUV) value_a2eUW {userEmail = x_a2eUX})
      fieldLens UserAvatar
        = (lensPTH (userAvatar . entityVal))
            (\ Entity key_a2eUV value_a2eUW x_a2eUX
               -> (Entity key_a2eUV) value_a2eUW {userAvatar = x_a2eUX})
      fieldLens UserFirstName
        = (lensPTH (userFirstName . entityVal))
            (\ Entity key_a2eUV value_a2eUW x_a2eUX
               -> (Entity key_a2eUV) value_a2eUW {userFirstName = x_a2eUX})
      fieldLens UserSecondName
        = (lensPTH (userSecondName . entityVal))
            (\ Entity key_a2eUV value_a2eUW x_a2eUX
               -> (Entity key_a2eUV) value_a2eUW {userSecondName = x_a2eUX})
      fieldLens UserBirthDay
        = (lensPTH (userBirthDay . entityVal))
            (\ Entity key_a2eUV value_a2eUW x_a2eUX
               -> (Entity key_a2eUV) value_a2eUW {userBirthDay = x_a2eUX})
      fieldLens UserSex
        = (lensPTH (userSex . entityVal))
            (\ Entity key_a2eUV value_a2eUW x_a2eUX
               -> (Entity key_a2eUV) value_a2eUW {userSex = x_a2eUX})
      fieldLens UserCreatedTests
        = (lensPTH (userCreatedTests . entityVal))
            (\ Entity key_a2eUV value_a2eUW x_a2eUX
               -> (Entity key_a2eUV) value_a2eUW {userCreatedTests = x_a2eUX})
      fieldLens UserPassedTests
        = (lensPTH (userPassedTests . entityVal))
            (\ Entity key_a2eUV value_a2eUW x_a2eUX
               -> (Entity key_a2eUV) value_a2eUW {userPassedTests = x_a2eUX})
    instance ToBackendKey MongoContext User where
      toBackendKey = unUserKey
      fromBackendKey = UserKey
    migrateAll :: persistent-2.8.1:Database.Persist.Sql.Types.Migration
    migrateAll
      = do let defs_a2eUY
                 = [(((((((((EntityDef (HaskellName (packPTH "TestResult")))
                              (DBName (packPTH "test_result")))
                             (((((((FieldDef (HaskellName (packPTH "Id")))
                                     (DBName (packPTH "id")))
                                    ((FTTypeCon Nothing) (packPTH "TestResultId")))
                                   SqlInt64)
                                  [])
                                 True)
                                ((ForeignRef (HaskellName (packPTH "TestResult")))
                                   ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                            [])
                           [((((((FieldDef (HaskellName (packPTH "testKey")))
                                   (DBName (packPTH "test_key")))
                                  ((FTTypeCon Nothing) (packPTH "Text")))
                                 SqlString)
                                [])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "result")))
                                   (DBName (packPTH "result")))
                                  ((FTTypeCon Nothing) (packPTH "Text")))
                                 SqlString)
                                [])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "passingDate")))
                                   (DBName (packPTH "passing_date")))
                                  ((FTTypeCon Nothing) (packPTH "UTCTime")))
                                 SqlDayTime)
                                [])
                               True)
                              NoReference])
                          [])
                         [])
                        [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
                       (Data.Map.Internal.fromList []))
                      False,
                    (((((((((EntityDef (HaskellName (packPTH "User")))
                              (DBName (packPTH "user")))
                             (((((((FieldDef (HaskellName (packPTH "Id")))
                                     (DBName (packPTH "id")))
                                    ((FTTypeCon Nothing) (packPTH "UserId")))
                                   SqlInt64)
                                  [])
                                 True)
                                ((ForeignRef (HaskellName (packPTH "User")))
                                   ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                            [])
                           [((((((FieldDef (HaskellName (packPTH "username")))
                                   (DBName (packPTH "username")))
                                  ((FTTypeCon Nothing) (packPTH "Text")))
                                 SqlString)
                                [])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "password")))
                                   (DBName (packPTH "password")))
                                  ((FTTypeCon Nothing) (packPTH "Text")))
                                 SqlString)
                                [])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "email")))
                                   (DBName (packPTH "email")))
                                  ((FTTypeCon Nothing) (packPTH "Text")))
                                 SqlString)
                                [])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "avatar")))
                                   (DBName (packPTH "avatar")))
                                  ((FTTypeCon Nothing) (packPTH "Text")))
                                 SqlString)
                                [])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "firstName")))
                                   (DBName (packPTH "first_name")))
                                  ((FTTypeCon Nothing) (packPTH "Text")))
                                 SqlString)
                                [packPTH "Maybe"])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "secondName")))
                                   (DBName (packPTH "second_name")))
                                  ((FTTypeCon Nothing) (packPTH "Text")))
                                 SqlString)
                                [packPTH "Maybe"])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "birthDay")))
                                   (DBName (packPTH "birth_day")))
                                  ((FTTypeCon Nothing) (packPTH "UTCTime")))
                                 SqlDayTime)
                                [packPTH "Maybe"])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "sex")))
                                   (DBName (packPTH "sex")))
                                  ((FTTypeCon Nothing) (packPTH "Int")))
                                 SqlInt64)
                                [packPTH "Maybe"])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "createdTests")))
                                   (DBName (packPTH "created_tests")))
                                  (FTList ((FTTypeCon Nothing) (packPTH "ObjectId"))))
                                 SqlString)
                                [])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "passedTests")))
                                   (DBName (packPTH "passed_tests")))
                                  (FTList ((FTTypeCon Nothing) (packPTH "TestResult"))))
                                 SqlString)
                                [])
                               True)
                              (EmbedRef
                                 ((EmbedEntityDef (HaskellName (packPTH "TestResult")))
                                    [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing)
                                       Nothing,
                                     ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                                     ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                                       Nothing]))])
                          [(((UniqueDef (HaskellName (packPTH "Email")))
                               (DBName (packPTH "email")))
                              [(HaskellName (packPTH "email"), DBName (packPTH "email"))])
                             [],
                           (((UniqueDef (HaskellName (packPTH "Username")))
                               (DBName (packPTH "username")))
                              [(HaskellName (packPTH "username"), DBName (packPTH "username"))])
                             []])
                         [])
                        [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
                       (Data.Map.Internal.fromList []))
                      False]
           (persistent-2.8.1:Database.Persist.Sql.Migration.migrate
              defs_a2eUY)
             ((((((((((EntityDef (HaskellName (packPTH "TestResult")))
                        (DBName (packPTH "test_result")))
                       (((((((FieldDef (HaskellName (packPTH "Id")))
                               (DBName (packPTH "id")))
                              ((FTTypeCon Nothing) (packPTH "TestResultId")))
                             SqlInt64)
                            [])
                           True)
                          ((ForeignRef (HaskellName (packPTH "TestResult")))
                             ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                      [])
                     [((((((FieldDef (HaskellName (packPTH "testKey")))
                             (DBName (packPTH "test_key")))
                            ((FTTypeCon Nothing) (packPTH "Text")))
                           SqlString)
                          [])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "result")))
                             (DBName (packPTH "result")))
                            ((FTTypeCon Nothing) (packPTH "Text")))
                           SqlString)
                          [])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "passingDate")))
                             (DBName (packPTH "passing_date")))
                            ((FTTypeCon Nothing) (packPTH "UTCTime")))
                           SqlDayTime)
                          [])
                         True)
                        NoReference])
                    [])
                   [])
                  [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
                 (Data.Map.Internal.fromList []))
                False)
           (persistent-2.8.1:Database.Persist.Sql.Migration.migrate
              defs_a2eUY)
             ((((((((((EntityDef (HaskellName (packPTH "User")))
                        (DBName (packPTH "user")))
                       (((((((FieldDef (HaskellName (packPTH "Id")))
                               (DBName (packPTH "id")))
                              ((FTTypeCon Nothing) (packPTH "UserId")))
                             SqlInt64)
                            [])
                           True)
                          ((ForeignRef (HaskellName (packPTH "User")))
                             ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                      [])
                     [((((((FieldDef (HaskellName (packPTH "username")))
                             (DBName (packPTH "username")))
                            ((FTTypeCon Nothing) (packPTH "Text")))
                           SqlString)
                          [])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "password")))
                             (DBName (packPTH "password")))
                            ((FTTypeCon Nothing) (packPTH "Text")))
                           SqlString)
                          [])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "email")))
                             (DBName (packPTH "email")))
                            ((FTTypeCon Nothing) (packPTH "Text")))
                           SqlString)
                          [])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "avatar")))
                             (DBName (packPTH "avatar")))
                            ((FTTypeCon Nothing) (packPTH "Text")))
                           SqlString)
                          [])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "firstName")))
                             (DBName (packPTH "first_name")))
                            ((FTTypeCon Nothing) (packPTH "Text")))
                           SqlString)
                          [packPTH "Maybe"])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "secondName")))
                             (DBName (packPTH "second_name")))
                            ((FTTypeCon Nothing) (packPTH "Text")))
                           SqlString)
                          [packPTH "Maybe"])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "birthDay")))
                             (DBName (packPTH "birth_day")))
                            ((FTTypeCon Nothing) (packPTH "UTCTime")))
                           SqlDayTime)
                          [packPTH "Maybe"])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "sex")))
                             (DBName (packPTH "sex")))
                            ((FTTypeCon Nothing) (packPTH "Int")))
                           SqlInt64)
                          [packPTH "Maybe"])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "createdTests")))
                             (DBName (packPTH "created_tests")))
                            (FTList ((FTTypeCon Nothing) (packPTH "ObjectId"))))
                           SqlString)
                          [])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "passedTests")))
                             (DBName (packPTH "passed_tests")))
                            (FTList ((FTTypeCon Nothing) (packPTH "TestResult"))))
                           SqlString)
                          [])
                         True)
                        (EmbedRef
                           ((EmbedEntityDef (HaskellName (packPTH "TestResult")))
                              [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing) Nothing,
                               ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                               ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                                 Nothing]))])
                    [(((UniqueDef (HaskellName (packPTH "Email")))
                         (DBName (packPTH "email")))
                        [(HaskellName (packPTH "email"), DBName (packPTH "email"))])
                       [],
                     (((UniqueDef (HaskellName (packPTH "Username")))
                         (DBName (packPTH "username")))
                        [(HaskellName (packPTH "username"), DBName (packPTH "username"))])
                       []])
                   [])
                  [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
                 (Data.Map.Internal.fromList []))
                False)
/home/nikita/Projects/labs/Databases/Course-Project/Server/src/Model/User.hs:(27,103)-(47,2): Splicing expression
    Language.Haskell.TH.Quote.quoteExp
      persistLowerCase
      "\n\
      \TestResult\n\
      \  testKey       Text\n\
      \  result        Text\n\
      \  passingDate   UTCTime\n\
      \  deriving      Eq Read Show Generic\n\
      \User\n\
      \  username      Text\n\
      \  password      Text\n\
      \  email         Text\n\
      \  avatar        Text\n\
      \  firstName     Text Maybe\n\
      \  secondName    Text Maybe\n\
      \  birthDay      UTCTime Maybe\n\
      \  sex           Int Maybe\n\
      \  createdTests  [ObjectId]\n\
      \  passedTests   [TestResult]\n\
      \  Email         email\n\
      \  Username      username\n\
      \  deriving      Eq Read Show Generic\n"
  ======>
    [(((((((((EntityDef (HaskellName (packPTH "TestResult")))
               (DBName (packPTH "test_result")))
              (((((((FieldDef (HaskellName (packPTH "Id")))
                      (DBName (packPTH "id")))
                     ((FTTypeCon Nothing) (packPTH "TestResultId")))
                    SqlInt64)
                   [])
                  True)
                 ((ForeignRef (HaskellName (packPTH "TestResult")))
                    ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
             [])
            [((((((FieldDef (HaskellName (packPTH "testKey")))
                    (DBName (packPTH "test_key")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for testKey")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "result")))
                    (DBName (packPTH "result")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for result")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "passingDate")))
                    (DBName (packPTH "passing_date")))
                   ((FTTypeCon Nothing) (packPTH "UTCTime")))
                  (SqlOther (packPTH "SqlType unset for passingDate")))
                 [])
                True)
               NoReference])
           [])
          [])
         [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
        (Data.Map.Internal.fromList []))
       False
       {entityFields = [((((((FieldDef (HaskellName (packPTH "testKey")))
                               (DBName (packPTH "test_key")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "result")))
                               (DBName (packPTH "result")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "passingDate")))
                               (DBName (packPTH "passing_date")))
                              ((FTTypeCon Nothing) (packPTH "UTCTime")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy UTCTime)))
                            [])
                           True)
                          NoReference],
        entityId = ((((((FieldDef (HaskellName (packPTH "Id")))
                          (DBName (packPTH "id")))
                         ((FTTypeCon Nothing) (packPTH "TestResultId")))
                        (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                           (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                       [])
                      True)
                     ((ForeignRef (HaskellName (packPTH "TestResult")))
                        ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))},
     (((((((((EntityDef (HaskellName (packPTH "User")))
               (DBName (packPTH "user")))
              (((((((FieldDef (HaskellName (packPTH "Id")))
                      (DBName (packPTH "id")))
                     ((FTTypeCon Nothing) (packPTH "UserId")))
                    SqlInt64)
                   [])
                  True)
                 ((ForeignRef (HaskellName (packPTH "User")))
                    ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
             [])
            [((((((FieldDef (HaskellName (packPTH "username")))
                    (DBName (packPTH "username")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for username")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "password")))
                    (DBName (packPTH "password")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for password")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "email")))
                    (DBName (packPTH "email")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for email")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "avatar")))
                    (DBName (packPTH "avatar")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for avatar")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "firstName")))
                    (DBName (packPTH "first_name")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for firstName")))
                 [packPTH "Maybe"])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "secondName")))
                    (DBName (packPTH "second_name")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for secondName")))
                 [packPTH "Maybe"])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "birthDay")))
                    (DBName (packPTH "birth_day")))
                   ((FTTypeCon Nothing) (packPTH "UTCTime")))
                  (SqlOther (packPTH "SqlType unset for birthDay")))
                 [packPTH "Maybe"])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "sex")))
                    (DBName (packPTH "sex")))
                   ((FTTypeCon Nothing) (packPTH "Int")))
                  (SqlOther (packPTH "SqlType unset for sex")))
                 [packPTH "Maybe"])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "createdTests")))
                    (DBName (packPTH "created_tests")))
                   (FTList ((FTTypeCon Nothing) (packPTH "ObjectId"))))
                  (SqlOther (packPTH "SqlType unset for createdTests")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "passedTests")))
                    (DBName (packPTH "passed_tests")))
                   (FTList ((FTTypeCon Nothing) (packPTH "TestResult"))))
                  (SqlOther (packPTH "SqlType unset for passedTests")))
                 [])
                True)
               (EmbedRef
                  ((EmbedEntityDef (HaskellName (packPTH "TestResult")))
                     [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing) Nothing,
                      ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                      ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                        Nothing]))])
           [(((UniqueDef (HaskellName (packPTH "Email")))
                (DBName (packPTH "email")))
               [(HaskellName (packPTH "email"), DBName (packPTH "email"))])
              [],
            (((UniqueDef (HaskellName (packPTH "Username")))
                (DBName (packPTH "username")))
               [(HaskellName (packPTH "username"), DBName (packPTH "username"))])
              []])
          [])
         [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
        (Data.Map.Internal.fromList []))
       False
       {entityFields = [((((((FieldDef (HaskellName (packPTH "username")))
                               (DBName (packPTH "username")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "password")))
                               (DBName (packPTH "password")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "email")))
                               (DBName (packPTH "email")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "avatar")))
                               (DBName (packPTH "avatar")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "firstName")))
                               (DBName (packPTH "first_name")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [packPTH "Maybe"])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "secondName")))
                               (DBName (packPTH "second_name")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [packPTH "Maybe"])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "birthDay")))
                               (DBName (packPTH "birth_day")))
                              ((FTTypeCon Nothing) (packPTH "UTCTime")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy UTCTime)))
                            [packPTH "Maybe"])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "sex")))
                               (DBName (packPTH "sex")))
                              ((FTTypeCon Nothing) (packPTH "Int")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Int)))
                            [packPTH "Maybe"])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "createdTests")))
                               (DBName (packPTH "created_tests")))
                              (FTList ((FTTypeCon Nothing) (packPTH "ObjectId"))))
                             SqlString)
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "passedTests")))
                               (DBName (packPTH "passed_tests")))
                              (FTList ((FTTypeCon Nothing) (packPTH "TestResult"))))
                             SqlString)
                            [])
                           True)
                          (EmbedRef
                             ((EmbedEntityDef (HaskellName (packPTH "TestResult")))
                                [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing) Nothing,
                                 ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                                 ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                                   Nothing]))],
        entityId = ((((((FieldDef (HaskellName (packPTH "Id")))
                          (DBName (packPTH "id")))
                         ((FTTypeCon Nothing) (packPTH "UserId")))
                        (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                           (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                       [])
                      True)
                     ((ForeignRef (HaskellName (packPTH "User")))
                        ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))}]
/home/nikita/Projects/labs/Databases/Course-Project/Server/src/Model/User.hs:(27,1)-(47,2): Splicing declarations
    share
      [mkPersist (mkPersistSettings (ConT ''MongoContext)),
       mkMigrate "migrateAll"]
      ([(((((((((EntityDef (HaskellName (packPTH "TestResult")))
                  (DBName (packPTH "test_result")))
                 (((((((FieldDef (HaskellName (packPTH "Id")))
                         (DBName (packPTH "id")))
                        ((FTTypeCon Nothing) (packPTH "TestResultId")))
                       SqlInt64)
                      [])
                     True)
                    ((ForeignRef (HaskellName (packPTH "TestResult")))
                       ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                [])
               [((((((FieldDef (HaskellName (packPTH "testKey")))
                       (DBName (packPTH "test_key")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for testKey")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "result")))
                       (DBName (packPTH "result")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for result")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "passingDate")))
                       (DBName (packPTH "passing_date")))
                      ((FTTypeCon Nothing) (packPTH "UTCTime")))
                     (SqlOther (packPTH "SqlType unset for passingDate")))
                    [])
                   True)
                  NoReference])
              [])
             [])
            [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
           (Data.Map.Internal.fromList []))
          False
          {entityFields = [((((((FieldDef (HaskellName (packPTH "testKey")))
                                  (DBName (packPTH "test_key")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "result")))
                                  (DBName (packPTH "result")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "passingDate")))
                                  (DBName (packPTH "passing_date")))
                                 ((FTTypeCon Nothing) (packPTH "UTCTime")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy UTCTime)))
                               [])
                              True)
                             NoReference],
           entityId = ((((((FieldDef (HaskellName (packPTH "Id")))
                             (DBName (packPTH "id")))
                            ((FTTypeCon Nothing) (packPTH "TestResultId")))
                           (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                              (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                          [])
                         True)
                        ((ForeignRef (HaskellName (packPTH "TestResult")))
                           ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))},
        (((((((((EntityDef (HaskellName (packPTH "User")))
                  (DBName (packPTH "user")))
                 (((((((FieldDef (HaskellName (packPTH "Id")))
                         (DBName (packPTH "id")))
                        ((FTTypeCon Nothing) (packPTH "UserId")))
                       SqlInt64)
                      [])
                     True)
                    ((ForeignRef (HaskellName (packPTH "User")))
                       ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                [])
               [((((((FieldDef (HaskellName (packPTH "username")))
                       (DBName (packPTH "username")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for username")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "password")))
                       (DBName (packPTH "password")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for password")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "email")))
                       (DBName (packPTH "email")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for email")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "avatar")))
                       (DBName (packPTH "avatar")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for avatar")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "firstName")))
                       (DBName (packPTH "first_name")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for firstName")))
                    [packPTH "Maybe"])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "secondName")))
                       (DBName (packPTH "second_name")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for secondName")))
                    [packPTH "Maybe"])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "birthDay")))
                       (DBName (packPTH "birth_day")))
                      ((FTTypeCon Nothing) (packPTH "UTCTime")))
                     (SqlOther (packPTH "SqlType unset for birthDay")))
                    [packPTH "Maybe"])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "sex")))
                       (DBName (packPTH "sex")))
                      ((FTTypeCon Nothing) (packPTH "Int")))
                     (SqlOther (packPTH "SqlType unset for sex")))
                    [packPTH "Maybe"])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "createdTests")))
                       (DBName (packPTH "created_tests")))
                      (FTList ((FTTypeCon Nothing) (packPTH "ObjectId"))))
                     (SqlOther (packPTH "SqlType unset for createdTests")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "passedTests")))
                       (DBName (packPTH "passed_tests")))
                      (FTList ((FTTypeCon Nothing) (packPTH "TestResult"))))
                     (SqlOther (packPTH "SqlType unset for passedTests")))
                    [])
                   True)
                  (EmbedRef
                     ((EmbedEntityDef (HaskellName (packPTH "TestResult")))
                        [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing) Nothing,
                         ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                         ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                           Nothing]))])
              [(((UniqueDef (HaskellName (packPTH "Email")))
                   (DBName (packPTH "email")))
                  [(HaskellName (packPTH "email"), DBName (packPTH "email"))])
                 [],
               (((UniqueDef (HaskellName (packPTH "Username")))
                   (DBName (packPTH "username")))
                  [(HaskellName (packPTH "username"), DBName (packPTH "username"))])
                 []])
             [])
            [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
           (Data.Map.Internal.fromList []))
          False
          {entityFields = [((((((FieldDef (HaskellName (packPTH "username")))
                                  (DBName (packPTH "username")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "password")))
                                  (DBName (packPTH "password")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "email")))
                                  (DBName (packPTH "email")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "avatar")))
                                  (DBName (packPTH "avatar")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "firstName")))
                                  (DBName (packPTH "first_name")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [packPTH "Maybe"])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "secondName")))
                                  (DBName (packPTH "second_name")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [packPTH "Maybe"])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "birthDay")))
                                  (DBName (packPTH "birth_day")))
                                 ((FTTypeCon Nothing) (packPTH "UTCTime")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy UTCTime)))
                               [packPTH "Maybe"])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "sex")))
                                  (DBName (packPTH "sex")))
                                 ((FTTypeCon Nothing) (packPTH "Int")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Int)))
                               [packPTH "Maybe"])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "createdTests")))
                                  (DBName (packPTH "created_tests")))
                                 (FTList ((FTTypeCon Nothing) (packPTH "ObjectId"))))
                                SqlString)
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "passedTests")))
                                  (DBName (packPTH "passed_tests")))
                                 (FTList ((FTTypeCon Nothing) (packPTH "TestResult"))))
                                SqlString)
                               [])
                              True)
                             (EmbedRef
                                ((EmbedEntityDef (HaskellName (packPTH "TestResult")))
                                   [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing) Nothing,
                                    ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                                    ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                                      Nothing]))],
           entityId = ((((((FieldDef (HaskellName (packPTH "Id")))
                             (DBName (packPTH "id")))
                            ((FTTypeCon Nothing) (packPTH "UserId")))
                           (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                              (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                          [])
                         True)
                        ((ForeignRef (HaskellName (packPTH "User")))
                           ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))}])
  ======>
    instance PersistField TestResult where
      toPersistValue
        = \ ent_a2f9n
            -> (PersistMap
                  $ ((Prelude.zip
                        ((Prelude.map pack) ["testKey", "result", "passingDate"]))
                       ((Prelude.map toPersistValue) $ (toPersistFields ent_a2f9n))))
      fromPersistValue
        = ((\ x_a2f9o
              -> let
                   columns_a2f9p
                     = unordered-containers-0.2.9.0:Data.HashMap.Strict.fromList x_a2f9o
                 in
                   (fromPersistValues
                      $ ((Prelude.map
                            (\ name_a2f9q
                               -> case
                                      (unordered-containers-0.2.9.0:Data.HashMap.Base.lookup
                                         (pack name_a2f9q))
                                        columns_a2f9p
                                  of
                                    Just v_a2f9r -> v_a2f9r
                                    Nothing -> PersistNull))
                           $ ["testKey", "result", "passingDate"])))
             <=< getPersistMap)
    instance persistent-2.8.1:Database.Persist.Sql.Class.PersistFieldSql TestResult where
      persistent-2.8.1:Database.Persist.Sql.Class.sqlType _ = SqlString
    instance PersistField User where
      toPersistValue
        = \ ent_a2f9s
            -> (PersistMap
                  $ ((Prelude.zip
                        ((Prelude.map pack)
                           ["username", "password", "email", "avatar", "firstName",
                            "secondName", "birthDay", "sex", "createdTests", "passedTests"]))
                       ((Prelude.map toPersistValue) $ (toPersistFields ent_a2f9s))))
      fromPersistValue
        = ((\ x_a2f9t
              -> let
                   columns_a2f9u
                     = unordered-containers-0.2.9.0:Data.HashMap.Strict.fromList x_a2f9t
                 in
                   (fromPersistValues
                      $ ((Prelude.map
                            (\ name_a2f9v
                               -> case
                                      (unordered-containers-0.2.9.0:Data.HashMap.Base.lookup
                                         (pack name_a2f9v))
                                        columns_a2f9u
                                  of
                                    Just v_a2f9w -> v_a2f9w
                                    Nothing -> PersistNull))
                           $ ["username", "password", "email", "avatar", "firstName",
                              "secondName", "birthDay", "sex", "createdTests", "passedTests"])))
             <=< getPersistMap)
    instance persistent-2.8.1:Database.Persist.Sql.Class.PersistFieldSql User where
      persistent-2.8.1:Database.Persist.Sql.Class.sqlType _ = SqlString
    data TestResult
      = TestResult {testResultTestKey :: !Text,
                    testResultResult :: !Text,
                    testResultPassingDate :: !UTCTime}
      deriving (Eq, Read, Show, Generic)
    type TestResultId = Key TestResult
    instance PersistEntity TestResult where
      type PersistEntityBackend TestResult = MongoContext
      data Unique TestResult
      newtype Key TestResult
        = TestResultKey {unTestResultKey :: (BackendKey MongoContext)}
        deriving (Show,
                  Read,
                  Eq,
                  Ord,
                  path-pieces-0.2.1:Web.PathPieces.PathPiece,
                  http-api-data-0.3.7.2:Web.Internal.HttpApiData.ToHttpApiData,
                  http-api-data-0.3.7.2:Web.Internal.HttpApiData.FromHttpApiData,
                  PersistField,
                  persistent-2.8.1:Database.Persist.Sql.Class.PersistFieldSql,
                  Aeson.ToJSON,
                  Aeson.FromJSON)
      data EntityField TestResult typ
        = typ ~ Key TestResult => TestResultId |
          typ ~ Text => TestResultTestKey |
          typ ~ Text => TestResultResult |
          typ ~ UTCTime => TestResultPassingDate
      keyToValues
        = ((ghc-prim-0.5.1.1:GHC.Types.: [])
             . (toPersistValue . unTestResultKey))
      keyFromValues
        = ((fmap TestResultKey)
             . (fromPersistValue . Database.Persist.TH.headNote))
      entityDef _
        = (((((((((EntityDef (HaskellName (packPTH "TestResult")))
                    (DBName (packPTH "test_result")))
                   (((((((FieldDef (HaskellName (packPTH "Id")))
                           (DBName (packPTH "id")))
                          ((FTTypeCon Nothing) (packPTH "TestResultId")))
                         SqlInt64)
                        [])
                       True)
                      ((ForeignRef (HaskellName (packPTH "TestResult")))
                         ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                  [])
                 [((((((FieldDef (HaskellName (packPTH "testKey")))
                         (DBName (packPTH "test_key")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "result")))
                         (DBName (packPTH "result")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "passingDate")))
                         (DBName (packPTH "passing_date")))
                        ((FTTypeCon Nothing) (packPTH "UTCTime")))
                       SqlDayTime)
                      [])
                     True)
                    NoReference])
                [])
               [])
              [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
             (Data.Map.Internal.fromList []))
            False
      toPersistFields (TestResult x_a2f9x x_a2f9y x_a2f9z)
        = [SomePersistField x_a2f9x, SomePersistField x_a2f9y,
           SomePersistField x_a2f9z]
      fromPersistValues [x1_a2f9B, x2_a2f9C, x3_a2f9D]
        = TestResult
            <$>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "testKey")))
                 . fromPersistValue)
                x1_a2f9B
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "result")))
                 . fromPersistValue)
                x2_a2f9C
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "passingDate")))
                 . fromPersistValue)
                x3_a2f9D
      fromPersistValues x_a2f9A
        = (Left
             $ ((mappend (packPTH "TestResult: fromPersistValues failed on: "))
                  (pack $ (show x_a2f9A))))
      persistUniqueToFieldNames _
        = error "Degenerate case, should never happen"
      persistUniqueToValues _
        = error "Degenerate case, should never happen"
      persistUniqueKeys
        (TestResult _testKey_a2f9E _result_a2f9F _passingDate_a2f9G)
        = []
      persistFieldDef TestResultId
        = ((((((FieldDef (HaskellName (packPTH "Id")))
                 (DBName (packPTH "id")))
                ((FTTypeCon Nothing) (packPTH "TestResultId")))
               SqlInt64)
              [])
             True)
            ((ForeignRef (HaskellName (packPTH "TestResult")))
               ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))
      persistFieldDef TestResultTestKey
        = ((((((FieldDef (HaskellName (packPTH "testKey")))
                 (DBName (packPTH "test_key")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef TestResultResult
        = ((((((FieldDef (HaskellName (packPTH "result")))
                 (DBName (packPTH "result")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef TestResultPassingDate
        = ((((((FieldDef (HaskellName (packPTH "passingDate")))
                 (DBName (packPTH "passing_date")))
                ((FTTypeCon Nothing) (packPTH "UTCTime")))
               SqlDayTime)
              [])
             True)
            NoReference
      persistIdField = TestResultId
      fieldLens TestResultId
        = (lensPTH entityKey)
            (\ Entity _ value_a2f9H key_a2f9I
               -> (Entity key_a2f9I) value_a2f9H)
      fieldLens TestResultTestKey
        = (lensPTH (testResultTestKey . entityVal))
            (\ Entity key_a2f9J value_a2f9K x_a2f9L
               -> (Entity key_a2f9J) value_a2f9K {testResultTestKey = x_a2f9L})
      fieldLens TestResultResult
        = (lensPTH (testResultResult . entityVal))
            (\ Entity key_a2f9J value_a2f9K x_a2f9L
               -> (Entity key_a2f9J) value_a2f9K {testResultResult = x_a2f9L})
      fieldLens TestResultPassingDate
        = (lensPTH (testResultPassingDate . entityVal))
            (\ Entity key_a2f9J value_a2f9K x_a2f9L
               -> (Entity key_a2f9J)
                    value_a2f9K {testResultPassingDate = x_a2f9L})
    instance ToBackendKey MongoContext TestResult where
      toBackendKey = unTestResultKey
      fromBackendKey = TestResultKey
    data User
      = User {userUsername :: !Text,
              userPassword :: !Text,
              userEmail :: !Text,
              userAvatar :: !Text,
              userFirstName :: !(Maybe Text),
              userSecondName :: !(Maybe Text),
              userBirthDay :: !(Maybe UTCTime),
              userSex :: !(Maybe Int),
              userCreatedTests :: ![ObjectId],
              userPassedTests :: ![TestResult]}
      deriving (Eq, Read, Show, Generic)
    type UserId = Key User
    instance PersistEntity User where
      type PersistEntityBackend User = MongoContext
      data Unique User = Email Text | Username Text
      newtype Key User
        = UserKey {unUserKey :: (BackendKey MongoContext)}
        deriving (Show,
                  Read,
                  Eq,
                  Ord,
                  path-pieces-0.2.1:Web.PathPieces.PathPiece,
                  http-api-data-0.3.7.2:Web.Internal.HttpApiData.ToHttpApiData,
                  http-api-data-0.3.7.2:Web.Internal.HttpApiData.FromHttpApiData,
                  PersistField,
                  persistent-2.8.1:Database.Persist.Sql.Class.PersistFieldSql,
                  Aeson.ToJSON,
                  Aeson.FromJSON)
      data EntityField User typ
        = typ ~ Key User => UserId |
          typ ~ Text => UserUsername |
          typ ~ Text => UserPassword |
          typ ~ Text => UserEmail |
          typ ~ Text => UserAvatar |
          typ ~ Maybe Text => UserFirstName |
          typ ~ Maybe Text => UserSecondName |
          typ ~ Maybe UTCTime => UserBirthDay |
          typ ~ Maybe Int => UserSex |
          typ ~ [ObjectId] => UserCreatedTests |
          typ ~ [TestResult] => UserPassedTests
      keyToValues
        = ((ghc-prim-0.5.1.1:GHC.Types.: [])
             . (toPersistValue . unUserKey))
      keyFromValues
        = ((fmap UserKey)
             . (fromPersistValue . Database.Persist.TH.headNote))
      entityDef _
        = (((((((((EntityDef (HaskellName (packPTH "User")))
                    (DBName (packPTH "user")))
                   (((((((FieldDef (HaskellName (packPTH "Id")))
                           (DBName (packPTH "id")))
                          ((FTTypeCon Nothing) (packPTH "UserId")))
                         SqlInt64)
                        [])
                       True)
                      ((ForeignRef (HaskellName (packPTH "User")))
                         ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                  [])
                 [((((((FieldDef (HaskellName (packPTH "username")))
                         (DBName (packPTH "username")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "password")))
                         (DBName (packPTH "password")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "email")))
                         (DBName (packPTH "email")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "avatar")))
                         (DBName (packPTH "avatar")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "firstName")))
                         (DBName (packPTH "first_name")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [packPTH "Maybe"])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "secondName")))
                         (DBName (packPTH "second_name")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [packPTH "Maybe"])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "birthDay")))
                         (DBName (packPTH "birth_day")))
                        ((FTTypeCon Nothing) (packPTH "UTCTime")))
                       SqlDayTime)
                      [packPTH "Maybe"])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "sex")))
                         (DBName (packPTH "sex")))
                        ((FTTypeCon Nothing) (packPTH "Int")))
                       SqlInt64)
                      [packPTH "Maybe"])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "createdTests")))
                         (DBName (packPTH "created_tests")))
                        (FTList ((FTTypeCon Nothing) (packPTH "ObjectId"))))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "passedTests")))
                         (DBName (packPTH "passed_tests")))
                        (FTList ((FTTypeCon Nothing) (packPTH "TestResult"))))
                       SqlString)
                      [])
                     True)
                    (EmbedRef
                       ((EmbedEntityDef (HaskellName (packPTH "TestResult")))
                          [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing) Nothing,
                           ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                           ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                             Nothing]))])
                [(((UniqueDef (HaskellName (packPTH "Email")))
                     (DBName (packPTH "email")))
                    [(HaskellName (packPTH "email"), DBName (packPTH "email"))])
                   [],
                 (((UniqueDef (HaskellName (packPTH "Username")))
                     (DBName (packPTH "username")))
                    [(HaskellName (packPTH "username"), DBName (packPTH "username"))])
                   []])
               [])
              [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
             (Data.Map.Internal.fromList []))
            False
      toPersistFields
        (User x_a2f9M
              x_a2f9N
              x_a2f9O
              x_a2f9P
              x_a2f9Q
              x_a2f9R
              x_a2f9S
              x_a2f9T
              x_a2f9U
              x_a2f9V)
        = [SomePersistField x_a2f9M, SomePersistField x_a2f9N,
           SomePersistField x_a2f9O, SomePersistField x_a2f9P,
           SomePersistField x_a2f9Q, SomePersistField x_a2f9R,
           SomePersistField x_a2f9S, SomePersistField x_a2f9T,
           SomePersistField x_a2f9U, SomePersistField x_a2f9V]
      fromPersistValues
        [x1_a2f9X,
         x2_a2f9Y,
         x3_a2f9Z,
         x4_a2fa0,
         x5_a2fa1,
         x6_a2fa2,
         x7_a2fa3,
         x8_a2fa4,
         x9_a2fa5,
         x10_a2fa6]
        = User
            <$>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "username")))
                 . fromPersistValue)
                x1_a2f9X
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "password")))
                 . fromPersistValue)
                x2_a2f9Y
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "email")))
                 . fromPersistValue)
                x3_a2f9Z
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "avatar")))
                 . fromPersistValue)
                x4_a2fa0
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "firstName")))
                 . fromPersistValue)
                x5_a2fa1
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "secondName")))
                 . fromPersistValue)
                x6_a2fa2
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "birthDay")))
                 . fromPersistValue)
                x7_a2fa3
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "sex")))
                 . fromPersistValue)
                x8_a2fa4
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "createdTests")))
                 . fromPersistValue)
                x9_a2fa5
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "passedTests")))
                 . fromPersistValue)
                x10_a2fa6
      fromPersistValues x_a2f9W
        = (Left
             $ ((mappend (packPTH "User: fromPersistValues failed on: "))
                  (pack $ (show x_a2f9W))))
      persistUniqueToFieldNames Email {}
        = [(HaskellName (packPTH "email"), DBName (packPTH "email"))]
      persistUniqueToFieldNames Username {}
        = [(HaskellName (packPTH "username"), DBName (packPTH "username"))]
      persistUniqueToValues (Email x_a2fa7) = [toPersistValue x_a2fa7]
      persistUniqueToValues (Username x_a2fa8) = [toPersistValue x_a2fa8]
      persistUniqueKeys
        (User _username_a2fa9
              _password_a2faa
              _email_a2fab
              _avatar_a2fac
              _firstName_a2fad
              _secondName_a2fae
              _birthDay_a2faf
              _sex_a2fag
              _createdTests_a2fah
              _passedTests_a2fai)
        = [Email _email_a2fab, Username _username_a2fa9]
      persistFieldDef UserId
        = ((((((FieldDef (HaskellName (packPTH "Id")))
                 (DBName (packPTH "id")))
                ((FTTypeCon Nothing) (packPTH "UserId")))
               SqlInt64)
              [])
             True)
            ((ForeignRef (HaskellName (packPTH "User")))
               ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))
      persistFieldDef UserUsername
        = ((((((FieldDef (HaskellName (packPTH "username")))
                 (DBName (packPTH "username")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef UserPassword
        = ((((((FieldDef (HaskellName (packPTH "password")))
                 (DBName (packPTH "password")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef UserEmail
        = ((((((FieldDef (HaskellName (packPTH "email")))
                 (DBName (packPTH "email")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef UserAvatar
        = ((((((FieldDef (HaskellName (packPTH "avatar")))
                 (DBName (packPTH "avatar")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef UserFirstName
        = ((((((FieldDef (HaskellName (packPTH "firstName")))
                 (DBName (packPTH "first_name")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [packPTH "Maybe"])
             True)
            NoReference
      persistFieldDef UserSecondName
        = ((((((FieldDef (HaskellName (packPTH "secondName")))
                 (DBName (packPTH "second_name")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [packPTH "Maybe"])
             True)
            NoReference
      persistFieldDef UserBirthDay
        = ((((((FieldDef (HaskellName (packPTH "birthDay")))
                 (DBName (packPTH "birth_day")))
                ((FTTypeCon Nothing) (packPTH "UTCTime")))
               SqlDayTime)
              [packPTH "Maybe"])
             True)
            NoReference
      persistFieldDef UserSex
        = ((((((FieldDef (HaskellName (packPTH "sex")))
                 (DBName (packPTH "sex")))
                ((FTTypeCon Nothing) (packPTH "Int")))
               SqlInt64)
              [packPTH "Maybe"])
             True)
            NoReference
      persistFieldDef UserCreatedTests
        = ((((((FieldDef (HaskellName (packPTH "createdTests")))
                 (DBName (packPTH "created_tests")))
                (FTList ((FTTypeCon Nothing) (packPTH "ObjectId"))))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef UserPassedTests
        = ((((((FieldDef (HaskellName (packPTH "passedTests")))
                 (DBName (packPTH "passed_tests")))
                (FTList ((FTTypeCon Nothing) (packPTH "TestResult"))))
               SqlString)
              [])
             True)
            (EmbedRef
               ((EmbedEntityDef (HaskellName (packPTH "TestResult")))
                  [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing) Nothing,
                   ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                   ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                     Nothing]))
      persistIdField = UserId
      fieldLens UserId
        = (lensPTH entityKey)
            (\ Entity _ value_a2faj key_a2fak
               -> (Entity key_a2fak) value_a2faj)
      fieldLens UserUsername
        = (lensPTH (userUsername . entityVal))
            (\ Entity key_a2fal value_a2fam x_a2fan
               -> (Entity key_a2fal) value_a2fam {userUsername = x_a2fan})
      fieldLens UserPassword
        = (lensPTH (userPassword . entityVal))
            (\ Entity key_a2fal value_a2fam x_a2fan
               -> (Entity key_a2fal) value_a2fam {userPassword = x_a2fan})
      fieldLens UserEmail
        = (lensPTH (userEmail . entityVal))
            (\ Entity key_a2fal value_a2fam x_a2fan
               -> (Entity key_a2fal) value_a2fam {userEmail = x_a2fan})
      fieldLens UserAvatar
        = (lensPTH (userAvatar . entityVal))
            (\ Entity key_a2fal value_a2fam x_a2fan
               -> (Entity key_a2fal) value_a2fam {userAvatar = x_a2fan})
      fieldLens UserFirstName
        = (lensPTH (userFirstName . entityVal))
            (\ Entity key_a2fal value_a2fam x_a2fan
               -> (Entity key_a2fal) value_a2fam {userFirstName = x_a2fan})
      fieldLens UserSecondName
        = (lensPTH (userSecondName . entityVal))
            (\ Entity key_a2fal value_a2fam x_a2fan
               -> (Entity key_a2fal) value_a2fam {userSecondName = x_a2fan})
      fieldLens UserBirthDay
        = (lensPTH (userBirthDay . entityVal))
            (\ Entity key_a2fal value_a2fam x_a2fan
               -> (Entity key_a2fal) value_a2fam {userBirthDay = x_a2fan})
      fieldLens UserSex
        = (lensPTH (userSex . entityVal))
            (\ Entity key_a2fal value_a2fam x_a2fan
               -> (Entity key_a2fal) value_a2fam {userSex = x_a2fan})
      fieldLens UserCreatedTests
        = (lensPTH (userCreatedTests . entityVal))
            (\ Entity key_a2fal value_a2fam x_a2fan
               -> (Entity key_a2fal) value_a2fam {userCreatedTests = x_a2fan})
      fieldLens UserPassedTests
        = (lensPTH (userPassedTests . entityVal))
            (\ Entity key_a2fal value_a2fam x_a2fan
               -> (Entity key_a2fal) value_a2fam {userPassedTests = x_a2fan})
    instance ToBackendKey MongoContext User where
      toBackendKey = unUserKey
      fromBackendKey = UserKey
    migrateAll :: persistent-2.8.1:Database.Persist.Sql.Types.Migration
    migrateAll
      = do let defs_a2fao
                 = [(((((((((EntityDef (HaskellName (packPTH "TestResult")))
                              (DBName (packPTH "test_result")))
                             (((((((FieldDef (HaskellName (packPTH "Id")))
                                     (DBName (packPTH "id")))
                                    ((FTTypeCon Nothing) (packPTH "TestResultId")))
                                   SqlInt64)
                                  [])
                                 True)
                                ((ForeignRef (HaskellName (packPTH "TestResult")))
                                   ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                            [])
                           [((((((FieldDef (HaskellName (packPTH "testKey")))
                                   (DBName (packPTH "test_key")))
                                  ((FTTypeCon Nothing) (packPTH "Text")))
                                 SqlString)
                                [])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "result")))
                                   (DBName (packPTH "result")))
                                  ((FTTypeCon Nothing) (packPTH "Text")))
                                 SqlString)
                                [])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "passingDate")))
                                   (DBName (packPTH "passing_date")))
                                  ((FTTypeCon Nothing) (packPTH "UTCTime")))
                                 SqlDayTime)
                                [])
                               True)
                              NoReference])
                          [])
                         [])
                        [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
                       (Data.Map.Internal.fromList []))
                      False,
                    (((((((((EntityDef (HaskellName (packPTH "User")))
                              (DBName (packPTH "user")))
                             (((((((FieldDef (HaskellName (packPTH "Id")))
                                     (DBName (packPTH "id")))
                                    ((FTTypeCon Nothing) (packPTH "UserId")))
                                   SqlInt64)
                                  [])
                                 True)
                                ((ForeignRef (HaskellName (packPTH "User")))
                                   ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                            [])
                           [((((((FieldDef (HaskellName (packPTH "username")))
                                   (DBName (packPTH "username")))
                                  ((FTTypeCon Nothing) (packPTH "Text")))
                                 SqlString)
                                [])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "password")))
                                   (DBName (packPTH "password")))
                                  ((FTTypeCon Nothing) (packPTH "Text")))
                                 SqlString)
                                [])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "email")))
                                   (DBName (packPTH "email")))
                                  ((FTTypeCon Nothing) (packPTH "Text")))
                                 SqlString)
                                [])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "avatar")))
                                   (DBName (packPTH "avatar")))
                                  ((FTTypeCon Nothing) (packPTH "Text")))
                                 SqlString)
                                [])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "firstName")))
                                   (DBName (packPTH "first_name")))
                                  ((FTTypeCon Nothing) (packPTH "Text")))
                                 SqlString)
                                [packPTH "Maybe"])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "secondName")))
                                   (DBName (packPTH "second_name")))
                                  ((FTTypeCon Nothing) (packPTH "Text")))
                                 SqlString)
                                [packPTH "Maybe"])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "birthDay")))
                                   (DBName (packPTH "birth_day")))
                                  ((FTTypeCon Nothing) (packPTH "UTCTime")))
                                 SqlDayTime)
                                [packPTH "Maybe"])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "sex")))
                                   (DBName (packPTH "sex")))
                                  ((FTTypeCon Nothing) (packPTH "Int")))
                                 SqlInt64)
                                [packPTH "Maybe"])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "createdTests")))
                                   (DBName (packPTH "created_tests")))
                                  (FTList ((FTTypeCon Nothing) (packPTH "ObjectId"))))
                                 SqlString)
                                [])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "passedTests")))
                                   (DBName (packPTH "passed_tests")))
                                  (FTList ((FTTypeCon Nothing) (packPTH "TestResult"))))
                                 SqlString)
                                [])
                               True)
                              (EmbedRef
                                 ((EmbedEntityDef (HaskellName (packPTH "TestResult")))
                                    [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing)
                                       Nothing,
                                     ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                                     ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                                       Nothing]))])
                          [(((UniqueDef (HaskellName (packPTH "Email")))
                               (DBName (packPTH "email")))
                              [(HaskellName (packPTH "email"), DBName (packPTH "email"))])
                             [],
                           (((UniqueDef (HaskellName (packPTH "Username")))
                               (DBName (packPTH "username")))
                              [(HaskellName (packPTH "username"), DBName (packPTH "username"))])
                             []])
                         [])
                        [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
                       (Data.Map.Internal.fromList []))
                      False]
           (persistent-2.8.1:Database.Persist.Sql.Migration.migrate
              defs_a2fao)
             ((((((((((EntityDef (HaskellName (packPTH "TestResult")))
                        (DBName (packPTH "test_result")))
                       (((((((FieldDef (HaskellName (packPTH "Id")))
                               (DBName (packPTH "id")))
                              ((FTTypeCon Nothing) (packPTH "TestResultId")))
                             SqlInt64)
                            [])
                           True)
                          ((ForeignRef (HaskellName (packPTH "TestResult")))
                             ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                      [])
                     [((((((FieldDef (HaskellName (packPTH "testKey")))
                             (DBName (packPTH "test_key")))
                            ((FTTypeCon Nothing) (packPTH "Text")))
                           SqlString)
                          [])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "result")))
                             (DBName (packPTH "result")))
                            ((FTTypeCon Nothing) (packPTH "Text")))
                           SqlString)
                          [])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "passingDate")))
                             (DBName (packPTH "passing_date")))
                            ((FTTypeCon Nothing) (packPTH "UTCTime")))
                           SqlDayTime)
                          [])
                         True)
                        NoReference])
                    [])
                   [])
                  [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
                 (Data.Map.Internal.fromList []))
                False)
           (persistent-2.8.1:Database.Persist.Sql.Migration.migrate
              defs_a2fao)
             ((((((((((EntityDef (HaskellName (packPTH "User")))
                        (DBName (packPTH "user")))
                       (((((((FieldDef (HaskellName (packPTH "Id")))
                               (DBName (packPTH "id")))
                              ((FTTypeCon Nothing) (packPTH "UserId")))
                             SqlInt64)
                            [])
                           True)
                          ((ForeignRef (HaskellName (packPTH "User")))
                             ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                      [])
                     [((((((FieldDef (HaskellName (packPTH "username")))
                             (DBName (packPTH "username")))
                            ((FTTypeCon Nothing) (packPTH "Text")))
                           SqlString)
                          [])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "password")))
                             (DBName (packPTH "password")))
                            ((FTTypeCon Nothing) (packPTH "Text")))
                           SqlString)
                          [])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "email")))
                             (DBName (packPTH "email")))
                            ((FTTypeCon Nothing) (packPTH "Text")))
                           SqlString)
                          [])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "avatar")))
                             (DBName (packPTH "avatar")))
                            ((FTTypeCon Nothing) (packPTH "Text")))
                           SqlString)
                          [])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "firstName")))
                             (DBName (packPTH "first_name")))
                            ((FTTypeCon Nothing) (packPTH "Text")))
                           SqlString)
                          [packPTH "Maybe"])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "secondName")))
                             (DBName (packPTH "second_name")))
                            ((FTTypeCon Nothing) (packPTH "Text")))
                           SqlString)
                          [packPTH "Maybe"])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "birthDay")))
                             (DBName (packPTH "birth_day")))
                            ((FTTypeCon Nothing) (packPTH "UTCTime")))
                           SqlDayTime)
                          [packPTH "Maybe"])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "sex")))
                             (DBName (packPTH "sex")))
                            ((FTTypeCon Nothing) (packPTH "Int")))
                           SqlInt64)
                          [packPTH "Maybe"])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "createdTests")))
                             (DBName (packPTH "created_tests")))
                            (FTList ((FTTypeCon Nothing) (packPTH "ObjectId"))))
                           SqlString)
                          [])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "passedTests")))
                             (DBName (packPTH "passed_tests")))
                            (FTList ((FTTypeCon Nothing) (packPTH "TestResult"))))
                           SqlString)
                          [])
                         True)
                        (EmbedRef
                           ((EmbedEntityDef (HaskellName (packPTH "TestResult")))
                              [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing) Nothing,
                               ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                               ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                                 Nothing]))])
                    [(((UniqueDef (HaskellName (packPTH "Email")))
                         (DBName (packPTH "email")))
                        [(HaskellName (packPTH "email"), DBName (packPTH "email"))])
                       [],
                     (((UniqueDef (HaskellName (packPTH "Username")))
                         (DBName (packPTH "username")))
                        [(HaskellName (packPTH "username"), DBName (packPTH "username"))])
                       []])
                   [])
                  [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
                 (Data.Map.Internal.fromList []))
                False)
/home/nikita/Projects/labs/Databases/Course-Project/Server/src/Model/User.hs:(27,103)-(47,2): Splicing expression
    Language.Haskell.TH.Quote.quoteExp
      persistLowerCase
      "\n\
      \TestResult\n\
      \  testKey       Text\n\
      \  result        Text\n\
      \  passingDate   UTCTime\n\
      \  deriving      Eq Read Show Generic\n\
      \User\n\
      \  username      Text\n\
      \  password      Text\n\
      \  email         Text\n\
      \  avatar        Text\n\
      \  firstName     Text Maybe\n\
      \  secondName    Text Maybe\n\
      \  birthDay      UTCTime Maybe\n\
      \  sex           Int Maybe\n\
      \  createdTests  [ObjectId]\n\
      \  passedTests   [TestResult]\n\
      \  Email         email\n\
      \  Username      username\n\
      \  deriving      Eq Read Show Generic\n"
  ======>
    [(((((((((EntityDef (HaskellName (packPTH "TestResult")))
               (DBName (packPTH "test_result")))
              (((((((FieldDef (HaskellName (packPTH "Id")))
                      (DBName (packPTH "id")))
                     ((FTTypeCon Nothing) (packPTH "TestResultId")))
                    SqlInt64)
                   [])
                  True)
                 ((ForeignRef (HaskellName (packPTH "TestResult")))
                    ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
             [])
            [((((((FieldDef (HaskellName (packPTH "testKey")))
                    (DBName (packPTH "test_key")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for testKey")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "result")))
                    (DBName (packPTH "result")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for result")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "passingDate")))
                    (DBName (packPTH "passing_date")))
                   ((FTTypeCon Nothing) (packPTH "UTCTime")))
                  (SqlOther (packPTH "SqlType unset for passingDate")))
                 [])
                True)
               NoReference])
           [])
          [])
         [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
        (Data.Map.Internal.fromList []))
       False
       {entityFields = [((((((FieldDef (HaskellName (packPTH "testKey")))
                               (DBName (packPTH "test_key")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "result")))
                               (DBName (packPTH "result")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "passingDate")))
                               (DBName (packPTH "passing_date")))
                              ((FTTypeCon Nothing) (packPTH "UTCTime")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy UTCTime)))
                            [])
                           True)
                          NoReference],
        entityId = ((((((FieldDef (HaskellName (packPTH "Id")))
                          (DBName (packPTH "id")))
                         ((FTTypeCon Nothing) (packPTH "TestResultId")))
                        (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                           (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                       [])
                      True)
                     ((ForeignRef (HaskellName (packPTH "TestResult")))
                        ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))},
     (((((((((EntityDef (HaskellName (packPTH "User")))
               (DBName (packPTH "user")))
              (((((((FieldDef (HaskellName (packPTH "Id")))
                      (DBName (packPTH "id")))
                     ((FTTypeCon Nothing) (packPTH "UserId")))
                    SqlInt64)
                   [])
                  True)
                 ((ForeignRef (HaskellName (packPTH "User")))
                    ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
             [])
            [((((((FieldDef (HaskellName (packPTH "username")))
                    (DBName (packPTH "username")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for username")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "password")))
                    (DBName (packPTH "password")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for password")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "email")))
                    (DBName (packPTH "email")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for email")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "avatar")))
                    (DBName (packPTH "avatar")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for avatar")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "firstName")))
                    (DBName (packPTH "first_name")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for firstName")))
                 [packPTH "Maybe"])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "secondName")))
                    (DBName (packPTH "second_name")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for secondName")))
                 [packPTH "Maybe"])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "birthDay")))
                    (DBName (packPTH "birth_day")))
                   ((FTTypeCon Nothing) (packPTH "UTCTime")))
                  (SqlOther (packPTH "SqlType unset for birthDay")))
                 [packPTH "Maybe"])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "sex")))
                    (DBName (packPTH "sex")))
                   ((FTTypeCon Nothing) (packPTH "Int")))
                  (SqlOther (packPTH "SqlType unset for sex")))
                 [packPTH "Maybe"])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "createdTests")))
                    (DBName (packPTH "created_tests")))
                   (FTList ((FTTypeCon Nothing) (packPTH "ObjectId"))))
                  (SqlOther (packPTH "SqlType unset for createdTests")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "passedTests")))
                    (DBName (packPTH "passed_tests")))
                   (FTList ((FTTypeCon Nothing) (packPTH "TestResult"))))
                  (SqlOther (packPTH "SqlType unset for passedTests")))
                 [])
                True)
               (EmbedRef
                  ((EmbedEntityDef (HaskellName (packPTH "TestResult")))
                     [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing) Nothing,
                      ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                      ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                        Nothing]))])
           [(((UniqueDef (HaskellName (packPTH "Email")))
                (DBName (packPTH "email")))
               [(HaskellName (packPTH "email"), DBName (packPTH "email"))])
              [],
            (((UniqueDef (HaskellName (packPTH "Username")))
                (DBName (packPTH "username")))
               [(HaskellName (packPTH "username"), DBName (packPTH "username"))])
              []])
          [])
         [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
        (Data.Map.Internal.fromList []))
       False
       {entityFields = [((((((FieldDef (HaskellName (packPTH "username")))
                               (DBName (packPTH "username")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "password")))
                               (DBName (packPTH "password")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "email")))
                               (DBName (packPTH "email")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "avatar")))
                               (DBName (packPTH "avatar")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "firstName")))
                               (DBName (packPTH "first_name")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [packPTH "Maybe"])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "secondName")))
                               (DBName (packPTH "second_name")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [packPTH "Maybe"])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "birthDay")))
                               (DBName (packPTH "birth_day")))
                              ((FTTypeCon Nothing) (packPTH "UTCTime")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy UTCTime)))
                            [packPTH "Maybe"])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "sex")))
                               (DBName (packPTH "sex")))
                              ((FTTypeCon Nothing) (packPTH "Int")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Int)))
                            [packPTH "Maybe"])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "createdTests")))
                               (DBName (packPTH "created_tests")))
                              (FTList ((FTTypeCon Nothing) (packPTH "ObjectId"))))
                             SqlString)
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "passedTests")))
                               (DBName (packPTH "passed_tests")))
                              (FTList ((FTTypeCon Nothing) (packPTH "TestResult"))))
                             SqlString)
                            [])
                           True)
                          (EmbedRef
                             ((EmbedEntityDef (HaskellName (packPTH "TestResult")))
                                [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing) Nothing,
                                 ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                                 ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                                   Nothing]))],
        entityId = ((((((FieldDef (HaskellName (packPTH "Id")))
                          (DBName (packPTH "id")))
                         ((FTTypeCon Nothing) (packPTH "UserId")))
                        (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                           (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                       [])
                      True)
                     ((ForeignRef (HaskellName (packPTH "User")))
                        ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))}]
/home/nikita/Projects/labs/Databases/Course-Project/Server/src/Model/User.hs:(27,1)-(47,2): Splicing declarations
    share
      [mkPersist (mkPersistSettings (ConT ''MongoContext)),
       mkMigrate "migrateAll"]
      ([(((((((((EntityDef (HaskellName (packPTH "TestResult")))
                  (DBName (packPTH "test_result")))
                 (((((((FieldDef (HaskellName (packPTH "Id")))
                         (DBName (packPTH "id")))
                        ((FTTypeCon Nothing) (packPTH "TestResultId")))
                       SqlInt64)
                      [])
                     True)
                    ((ForeignRef (HaskellName (packPTH "TestResult")))
                       ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                [])
               [((((((FieldDef (HaskellName (packPTH "testKey")))
                       (DBName (packPTH "test_key")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for testKey")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "result")))
                       (DBName (packPTH "result")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for result")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "passingDate")))
                       (DBName (packPTH "passing_date")))
                      ((FTTypeCon Nothing) (packPTH "UTCTime")))
                     (SqlOther (packPTH "SqlType unset for passingDate")))
                    [])
                   True)
                  NoReference])
              [])
             [])
            [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
           (Data.Map.Internal.fromList []))
          False
          {entityFields = [((((((FieldDef (HaskellName (packPTH "testKey")))
                                  (DBName (packPTH "test_key")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "result")))
                                  (DBName (packPTH "result")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "passingDate")))
                                  (DBName (packPTH "passing_date")))
                                 ((FTTypeCon Nothing) (packPTH "UTCTime")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy UTCTime)))
                               [])
                              True)
                             NoReference],
           entityId = ((((((FieldDef (HaskellName (packPTH "Id")))
                             (DBName (packPTH "id")))
                            ((FTTypeCon Nothing) (packPTH "TestResultId")))
                           (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                              (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                          [])
                         True)
                        ((ForeignRef (HaskellName (packPTH "TestResult")))
                           ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))},
        (((((((((EntityDef (HaskellName (packPTH "User")))
                  (DBName (packPTH "user")))
                 (((((((FieldDef (HaskellName (packPTH "Id")))
                         (DBName (packPTH "id")))
                        ((FTTypeCon Nothing) (packPTH "UserId")))
                       SqlInt64)
                      [])
                     True)
                    ((ForeignRef (HaskellName (packPTH "User")))
                       ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                [])
               [((((((FieldDef (HaskellName (packPTH "username")))
                       (DBName (packPTH "username")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for username")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "password")))
                       (DBName (packPTH "password")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for password")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "email")))
                       (DBName (packPTH "email")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for email")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "avatar")))
                       (DBName (packPTH "avatar")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for avatar")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "firstName")))
                       (DBName (packPTH "first_name")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for firstName")))
                    [packPTH "Maybe"])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "secondName")))
                       (DBName (packPTH "second_name")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for secondName")))
                    [packPTH "Maybe"])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "birthDay")))
                       (DBName (packPTH "birth_day")))
                      ((FTTypeCon Nothing) (packPTH "UTCTime")))
                     (SqlOther (packPTH "SqlType unset for birthDay")))
                    [packPTH "Maybe"])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "sex")))
                       (DBName (packPTH "sex")))
                      ((FTTypeCon Nothing) (packPTH "Int")))
                     (SqlOther (packPTH "SqlType unset for sex")))
                    [packPTH "Maybe"])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "createdTests")))
                       (DBName (packPTH "created_tests")))
                      (FTList ((FTTypeCon Nothing) (packPTH "ObjectId"))))
                     (SqlOther (packPTH "SqlType unset for createdTests")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "passedTests")))
                       (DBName (packPTH "passed_tests")))
                      (FTList ((FTTypeCon Nothing) (packPTH "TestResult"))))
                     (SqlOther (packPTH "SqlType unset for passedTests")))
                    [])
                   True)
                  (EmbedRef
                     ((EmbedEntityDef (HaskellName (packPTH "TestResult")))
                        [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing) Nothing,
                         ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                         ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                           Nothing]))])
              [(((UniqueDef (HaskellName (packPTH "Email")))
                   (DBName (packPTH "email")))
                  [(HaskellName (packPTH "email"), DBName (packPTH "email"))])
                 [],
               (((UniqueDef (HaskellName (packPTH "Username")))
                   (DBName (packPTH "username")))
                  [(HaskellName (packPTH "username"), DBName (packPTH "username"))])
                 []])
             [])
            [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
           (Data.Map.Internal.fromList []))
          False
          {entityFields = [((((((FieldDef (HaskellName (packPTH "username")))
                                  (DBName (packPTH "username")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "password")))
                                  (DBName (packPTH "password")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "email")))
                                  (DBName (packPTH "email")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "avatar")))
                                  (DBName (packPTH "avatar")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "firstName")))
                                  (DBName (packPTH "first_name")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [packPTH "Maybe"])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "secondName")))
                                  (DBName (packPTH "second_name")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [packPTH "Maybe"])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "birthDay")))
                                  (DBName (packPTH "birth_day")))
                                 ((FTTypeCon Nothing) (packPTH "UTCTime")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy UTCTime)))
                               [packPTH "Maybe"])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "sex")))
                                  (DBName (packPTH "sex")))
                                 ((FTTypeCon Nothing) (packPTH "Int")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Int)))
                               [packPTH "Maybe"])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "createdTests")))
                                  (DBName (packPTH "created_tests")))
                                 (FTList ((FTTypeCon Nothing) (packPTH "ObjectId"))))
                                SqlString)
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "passedTests")))
                                  (DBName (packPTH "passed_tests")))
                                 (FTList ((FTTypeCon Nothing) (packPTH "TestResult"))))
                                SqlString)
                               [])
                              True)
                             (EmbedRef
                                ((EmbedEntityDef (HaskellName (packPTH "TestResult")))
                                   [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing) Nothing,
                                    ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                                    ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                                      Nothing]))],
           entityId = ((((((FieldDef (HaskellName (packPTH "Id")))
                             (DBName (packPTH "id")))
                            ((FTTypeCon Nothing) (packPTH "UserId")))
                           (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                              (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                          [])
                         True)
                        ((ForeignRef (HaskellName (packPTH "User")))
                           ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))}])
  ======>
    instance PersistField TestResult where
      toPersistValue
        = \ ent_a2gQJ
            -> (PersistMap
                  $ ((Prelude.zip
                        ((Prelude.map pack) ["testKey", "result", "passingDate"]))
                       ((Prelude.map toPersistValue) $ (toPersistFields ent_a2gQJ))))
      fromPersistValue
        = ((\ x_a2gQK
              -> let
                   columns_a2gQL
                     = unordered-containers-0.2.9.0:Data.HashMap.Strict.fromList x_a2gQK
                 in
                   (fromPersistValues
                      $ ((Prelude.map
                            (\ name_a2gQM
                               -> case
                                      (unordered-containers-0.2.9.0:Data.HashMap.Base.lookup
                                         (pack name_a2gQM))
                                        columns_a2gQL
                                  of
                                    Just v_a2gQN -> v_a2gQN
                                    Nothing -> PersistNull))
                           $ ["testKey", "result", "passingDate"])))
             <=< getPersistMap)
    instance persistent-2.8.1:Database.Persist.Sql.Class.PersistFieldSql TestResult where
      persistent-2.8.1:Database.Persist.Sql.Class.sqlType _ = SqlString
    instance PersistField User where
      toPersistValue
        = \ ent_a2gQO
            -> (PersistMap
                  $ ((Prelude.zip
                        ((Prelude.map pack)
                           ["username", "password", "email", "avatar", "firstName",
                            "secondName", "birthDay", "sex", "createdTests", "passedTests"]))
                       ((Prelude.map toPersistValue) $ (toPersistFields ent_a2gQO))))
      fromPersistValue
        = ((\ x_a2gQP
              -> let
                   columns_a2gQQ
                     = unordered-containers-0.2.9.0:Data.HashMap.Strict.fromList x_a2gQP
                 in
                   (fromPersistValues
                      $ ((Prelude.map
                            (\ name_a2gQR
                               -> case
                                      (unordered-containers-0.2.9.0:Data.HashMap.Base.lookup
                                         (pack name_a2gQR))
                                        columns_a2gQQ
                                  of
                                    Just v_a2gQS -> v_a2gQS
                                    Nothing -> PersistNull))
                           $ ["username", "password", "email", "avatar", "firstName",
                              "secondName", "birthDay", "sex", "createdTests", "passedTests"])))
             <=< getPersistMap)
    instance persistent-2.8.1:Database.Persist.Sql.Class.PersistFieldSql User where
      persistent-2.8.1:Database.Persist.Sql.Class.sqlType _ = SqlString
    data TestResult
      = TestResult {testResultTestKey :: !Text,
                    testResultResult :: !Text,
                    testResultPassingDate :: !UTCTime}
      deriving (Eq, Read, Show, Generic)
    type TestResultId = Key TestResult
    instance PersistEntity TestResult where
      type PersistEntityBackend TestResult = MongoContext
      data Unique TestResult
      newtype Key TestResult
        = TestResultKey {unTestResultKey :: (BackendKey MongoContext)}
        deriving (Show,
                  Read,
                  Eq,
                  Ord,
                  path-pieces-0.2.1:Web.PathPieces.PathPiece,
                  http-api-data-0.3.7.2:Web.Internal.HttpApiData.ToHttpApiData,
                  http-api-data-0.3.7.2:Web.Internal.HttpApiData.FromHttpApiData,
                  PersistField,
                  persistent-2.8.1:Database.Persist.Sql.Class.PersistFieldSql,
                  Aeson.ToJSON,
                  Aeson.FromJSON)
      data EntityField TestResult typ
        = typ ~ Key TestResult => TestResultId |
          typ ~ Text => TestResultTestKey |
          typ ~ Text => TestResultResult |
          typ ~ UTCTime => TestResultPassingDate
      keyToValues
        = ((ghc-prim-0.5.1.1:GHC.Types.: [])
             . (toPersistValue . unTestResultKey))
      keyFromValues
        = ((fmap TestResultKey)
             . (fromPersistValue . Database.Persist.TH.headNote))
      entityDef _
        = (((((((((EntityDef (HaskellName (packPTH "TestResult")))
                    (DBName (packPTH "test_result")))
                   (((((((FieldDef (HaskellName (packPTH "Id")))
                           (DBName (packPTH "id")))
                          ((FTTypeCon Nothing) (packPTH "TestResultId")))
                         SqlInt64)
                        [])
                       True)
                      ((ForeignRef (HaskellName (packPTH "TestResult")))
                         ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                  [])
                 [((((((FieldDef (HaskellName (packPTH "testKey")))
                         (DBName (packPTH "test_key")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "result")))
                         (DBName (packPTH "result")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "passingDate")))
                         (DBName (packPTH "passing_date")))
                        ((FTTypeCon Nothing) (packPTH "UTCTime")))
                       SqlDayTime)
                      [])
                     True)
                    NoReference])
                [])
               [])
              [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
             (Data.Map.Internal.fromList []))
            False
      toPersistFields (TestResult x_a2gQT x_a2gQU x_a2gQV)
        = [SomePersistField x_a2gQT, SomePersistField x_a2gQU,
           SomePersistField x_a2gQV]
      fromPersistValues [x1_a2gQX, x2_a2gQY, x3_a2gQZ]
        = TestResult
            <$>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "testKey")))
                 . fromPersistValue)
                x1_a2gQX
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "result")))
                 . fromPersistValue)
                x2_a2gQY
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "passingDate")))
                 . fromPersistValue)
                x3_a2gQZ
      fromPersistValues x_a2gQW
        = (Left
             $ ((mappend (packPTH "TestResult: fromPersistValues failed on: "))
                  (pack $ (show x_a2gQW))))
      persistUniqueToFieldNames _
        = error "Degenerate case, should never happen"
      persistUniqueToValues _
        = error "Degenerate case, should never happen"
      persistUniqueKeys
        (TestResult _testKey_a2gR0 _result_a2gR1 _passingDate_a2gR2)
        = []
      persistFieldDef TestResultId
        = ((((((FieldDef (HaskellName (packPTH "Id")))
                 (DBName (packPTH "id")))
                ((FTTypeCon Nothing) (packPTH "TestResultId")))
               SqlInt64)
              [])
             True)
            ((ForeignRef (HaskellName (packPTH "TestResult")))
               ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))
      persistFieldDef TestResultTestKey
        = ((((((FieldDef (HaskellName (packPTH "testKey")))
                 (DBName (packPTH "test_key")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef TestResultResult
        = ((((((FieldDef (HaskellName (packPTH "result")))
                 (DBName (packPTH "result")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef TestResultPassingDate
        = ((((((FieldDef (HaskellName (packPTH "passingDate")))
                 (DBName (packPTH "passing_date")))
                ((FTTypeCon Nothing) (packPTH "UTCTime")))
               SqlDayTime)
              [])
             True)
            NoReference
      persistIdField = TestResultId
      fieldLens TestResultId
        = (lensPTH entityKey)
            (\ Entity _ value_a2gR3 key_a2gR4
               -> (Entity key_a2gR4) value_a2gR3)
      fieldLens TestResultTestKey
        = (lensPTH (testResultTestKey . entityVal))
            (\ Entity key_a2gR5 value_a2gR6 x_a2gR7
               -> (Entity key_a2gR5) value_a2gR6 {testResultTestKey = x_a2gR7})
      fieldLens TestResultResult
        = (lensPTH (testResultResult . entityVal))
            (\ Entity key_a2gR5 value_a2gR6 x_a2gR7
               -> (Entity key_a2gR5) value_a2gR6 {testResultResult = x_a2gR7})
      fieldLens TestResultPassingDate
        = (lensPTH (testResultPassingDate . entityVal))
            (\ Entity key_a2gR5 value_a2gR6 x_a2gR7
               -> (Entity key_a2gR5)
                    value_a2gR6 {testResultPassingDate = x_a2gR7})
    instance ToBackendKey MongoContext TestResult where
      toBackendKey = unTestResultKey
      fromBackendKey = TestResultKey
    data User
      = User {userUsername :: !Text,
              userPassword :: !Text,
              userEmail :: !Text,
              userAvatar :: !Text,
              userFirstName :: !(Maybe Text),
              userSecondName :: !(Maybe Text),
              userBirthDay :: !(Maybe UTCTime),
              userSex :: !(Maybe Int),
              userCreatedTests :: ![ObjectId],
              userPassedTests :: ![TestResult]}
      deriving (Eq, Read, Show, Generic)
    type UserId = Key User
    instance PersistEntity User where
      type PersistEntityBackend User = MongoContext
      data Unique User = Email Text | Username Text
      newtype Key User
        = UserKey {unUserKey :: (BackendKey MongoContext)}
        deriving (Show,
                  Read,
                  Eq,
                  Ord,
                  path-pieces-0.2.1:Web.PathPieces.PathPiece,
                  http-api-data-0.3.7.2:Web.Internal.HttpApiData.ToHttpApiData,
                  http-api-data-0.3.7.2:Web.Internal.HttpApiData.FromHttpApiData,
                  PersistField,
                  persistent-2.8.1:Database.Persist.Sql.Class.PersistFieldSql,
                  Aeson.ToJSON,
                  Aeson.FromJSON)
      data EntityField User typ
        = typ ~ Key User => UserId |
          typ ~ Text => UserUsername |
          typ ~ Text => UserPassword |
          typ ~ Text => UserEmail |
          typ ~ Text => UserAvatar |
          typ ~ Maybe Text => UserFirstName |
          typ ~ Maybe Text => UserSecondName |
          typ ~ Maybe UTCTime => UserBirthDay |
          typ ~ Maybe Int => UserSex |
          typ ~ [ObjectId] => UserCreatedTests |
          typ ~ [TestResult] => UserPassedTests
      keyToValues
        = ((ghc-prim-0.5.1.1:GHC.Types.: [])
             . (toPersistValue . unUserKey))
      keyFromValues
        = ((fmap UserKey)
             . (fromPersistValue . Database.Persist.TH.headNote))
      entityDef _
        = (((((((((EntityDef (HaskellName (packPTH "User")))
                    (DBName (packPTH "user")))
                   (((((((FieldDef (HaskellName (packPTH "Id")))
                           (DBName (packPTH "id")))
                          ((FTTypeCon Nothing) (packPTH "UserId")))
                         SqlInt64)
                        [])
                       True)
                      ((ForeignRef (HaskellName (packPTH "User")))
                         ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                  [])
                 [((((((FieldDef (HaskellName (packPTH "username")))
                         (DBName (packPTH "username")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "password")))
                         (DBName (packPTH "password")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "email")))
                         (DBName (packPTH "email")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "avatar")))
                         (DBName (packPTH "avatar")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "firstName")))
                         (DBName (packPTH "first_name")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [packPTH "Maybe"])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "secondName")))
                         (DBName (packPTH "second_name")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [packPTH "Maybe"])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "birthDay")))
                         (DBName (packPTH "birth_day")))
                        ((FTTypeCon Nothing) (packPTH "UTCTime")))
                       SqlDayTime)
                      [packPTH "Maybe"])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "sex")))
                         (DBName (packPTH "sex")))
                        ((FTTypeCon Nothing) (packPTH "Int")))
                       SqlInt64)
                      [packPTH "Maybe"])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "createdTests")))
                         (DBName (packPTH "created_tests")))
                        (FTList ((FTTypeCon Nothing) (packPTH "ObjectId"))))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "passedTests")))
                         (DBName (packPTH "passed_tests")))
                        (FTList ((FTTypeCon Nothing) (packPTH "TestResult"))))
                       SqlString)
                      [])
                     True)
                    (EmbedRef
                       ((EmbedEntityDef (HaskellName (packPTH "TestResult")))
                          [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing) Nothing,
                           ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                           ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                             Nothing]))])
                [(((UniqueDef (HaskellName (packPTH "Email")))
                     (DBName (packPTH "email")))
                    [(HaskellName (packPTH "email"), DBName (packPTH "email"))])
                   [],
                 (((UniqueDef (HaskellName (packPTH "Username")))
                     (DBName (packPTH "username")))
                    [(HaskellName (packPTH "username"), DBName (packPTH "username"))])
                   []])
               [])
              [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
             (Data.Map.Internal.fromList []))
            False
      toPersistFields
        (User x_a2gR8
              x_a2gR9
              x_a2gRa
              x_a2gRb
              x_a2gRc
              x_a2gRd
              x_a2gRe
              x_a2gRf
              x_a2gRg
              x_a2gRh)
        = [SomePersistField x_a2gR8, SomePersistField x_a2gR9,
           SomePersistField x_a2gRa, SomePersistField x_a2gRb,
           SomePersistField x_a2gRc, SomePersistField x_a2gRd,
           SomePersistField x_a2gRe, SomePersistField x_a2gRf,
           SomePersistField x_a2gRg, SomePersistField x_a2gRh]
      fromPersistValues
        [x1_a2gRj,
         x2_a2gRk,
         x3_a2gRl,
         x4_a2gRm,
         x5_a2gRn,
         x6_a2gRo,
         x7_a2gRp,
         x8_a2gRq,
         x9_a2gRr,
         x10_a2gRs]
        = User
            <$>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "username")))
                 . fromPersistValue)
                x1_a2gRj
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "password")))
                 . fromPersistValue)
                x2_a2gRk
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "email")))
                 . fromPersistValue)
                x3_a2gRl
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "avatar")))
                 . fromPersistValue)
                x4_a2gRm
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "firstName")))
                 . fromPersistValue)
                x5_a2gRn
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "secondName")))
                 . fromPersistValue)
                x6_a2gRo
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "birthDay")))
                 . fromPersistValue)
                x7_a2gRp
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "sex")))
                 . fromPersistValue)
                x8_a2gRq
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "createdTests")))
                 . fromPersistValue)
                x9_a2gRr
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "passedTests")))
                 . fromPersistValue)
                x10_a2gRs
      fromPersistValues x_a2gRi
        = (Left
             $ ((mappend (packPTH "User: fromPersistValues failed on: "))
                  (pack $ (show x_a2gRi))))
      persistUniqueToFieldNames Email {}
        = [(HaskellName (packPTH "email"), DBName (packPTH "email"))]
      persistUniqueToFieldNames Username {}
        = [(HaskellName (packPTH "username"), DBName (packPTH "username"))]
      persistUniqueToValues (Email x_a2gRt) = [toPersistValue x_a2gRt]
      persistUniqueToValues (Username x_a2gRu) = [toPersistValue x_a2gRu]
      persistUniqueKeys
        (User _username_a2gRv
              _password_a2gRw
              _email_a2gRx
              _avatar_a2gRy
              _firstName_a2gRz
              _secondName_a2gRA
              _birthDay_a2gRB
              _sex_a2gRC
              _createdTests_a2gRD
              _passedTests_a2gRE)
        = [Email _email_a2gRx, Username _username_a2gRv]
      persistFieldDef UserId
        = ((((((FieldDef (HaskellName (packPTH "Id")))
                 (DBName (packPTH "id")))
                ((FTTypeCon Nothing) (packPTH "UserId")))
               SqlInt64)
              [])
             True)
            ((ForeignRef (HaskellName (packPTH "User")))
               ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))
      persistFieldDef UserUsername
        = ((((((FieldDef (HaskellName (packPTH "username")))
                 (DBName (packPTH "username")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef UserPassword
        = ((((((FieldDef (HaskellName (packPTH "password")))
                 (DBName (packPTH "password")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef UserEmail
        = ((((((FieldDef (HaskellName (packPTH "email")))
                 (DBName (packPTH "email")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef UserAvatar
        = ((((((FieldDef (HaskellName (packPTH "avatar")))
                 (DBName (packPTH "avatar")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef UserFirstName
        = ((((((FieldDef (HaskellName (packPTH "firstName")))
                 (DBName (packPTH "first_name")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [packPTH "Maybe"])
             True)
            NoReference
      persistFieldDef UserSecondName
        = ((((((FieldDef (HaskellName (packPTH "secondName")))
                 (DBName (packPTH "second_name")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [packPTH "Maybe"])
             True)
            NoReference
      persistFieldDef UserBirthDay
        = ((((((FieldDef (HaskellName (packPTH "birthDay")))
                 (DBName (packPTH "birth_day")))
                ((FTTypeCon Nothing) (packPTH "UTCTime")))
               SqlDayTime)
              [packPTH "Maybe"])
             True)
            NoReference
      persistFieldDef UserSex
        = ((((((FieldDef (HaskellName (packPTH "sex")))
                 (DBName (packPTH "sex")))
                ((FTTypeCon Nothing) (packPTH "Int")))
               SqlInt64)
              [packPTH "Maybe"])
             True)
            NoReference
      persistFieldDef UserCreatedTests
        = ((((((FieldDef (HaskellName (packPTH "createdTests")))
                 (DBName (packPTH "created_tests")))
                (FTList ((FTTypeCon Nothing) (packPTH "ObjectId"))))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef UserPassedTests
        = ((((((FieldDef (HaskellName (packPTH "passedTests")))
                 (DBName (packPTH "passed_tests")))
                (FTList ((FTTypeCon Nothing) (packPTH "TestResult"))))
               SqlString)
              [])
             True)
            (EmbedRef
               ((EmbedEntityDef (HaskellName (packPTH "TestResult")))
                  [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing) Nothing,
                   ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                   ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                     Nothing]))
      persistIdField = UserId
      fieldLens UserId
        = (lensPTH entityKey)
            (\ Entity _ value_a2gRF key_a2gRG
               -> (Entity key_a2gRG) value_a2gRF)
      fieldLens UserUsername
        = (lensPTH (userUsername . entityVal))
            (\ Entity key_a2gRH value_a2gRI x_a2gRJ
               -> (Entity key_a2gRH) value_a2gRI {userUsername = x_a2gRJ})
      fieldLens UserPassword
        = (lensPTH (userPassword . entityVal))
            (\ Entity key_a2gRH value_a2gRI x_a2gRJ
               -> (Entity key_a2gRH) value_a2gRI {userPassword = x_a2gRJ})
      fieldLens UserEmail
        = (lensPTH (userEmail . entityVal))
            (\ Entity key_a2gRH value_a2gRI x_a2gRJ
               -> (Entity key_a2gRH) value_a2gRI {userEmail = x_a2gRJ})
      fieldLens UserAvatar
        = (lensPTH (userAvatar . entityVal))
            (\ Entity key_a2gRH value_a2gRI x_a2gRJ
               -> (Entity key_a2gRH) value_a2gRI {userAvatar = x_a2gRJ})
      fieldLens UserFirstName
        = (lensPTH (userFirstName . entityVal))
            (\ Entity key_a2gRH value_a2gRI x_a2gRJ
               -> (Entity key_a2gRH) value_a2gRI {userFirstName = x_a2gRJ})
      fieldLens UserSecondName
        = (lensPTH (userSecondName . entityVal))
            (\ Entity key_a2gRH value_a2gRI x_a2gRJ
               -> (Entity key_a2gRH) value_a2gRI {userSecondName = x_a2gRJ})
      fieldLens UserBirthDay
        = (lensPTH (userBirthDay . entityVal))
            (\ Entity key_a2gRH value_a2gRI x_a2gRJ
               -> (Entity key_a2gRH) value_a2gRI {userBirthDay = x_a2gRJ})
      fieldLens UserSex
        = (lensPTH (userSex . entityVal))
            (\ Entity key_a2gRH value_a2gRI x_a2gRJ
               -> (Entity key_a2gRH) value_a2gRI {userSex = x_a2gRJ})
      fieldLens UserCreatedTests
        = (lensPTH (userCreatedTests . entityVal))
            (\ Entity key_a2gRH value_a2gRI x_a2gRJ
               -> (Entity key_a2gRH) value_a2gRI {userCreatedTests = x_a2gRJ})
      fieldLens UserPassedTests
        = (lensPTH (userPassedTests . entityVal))
            (\ Entity key_a2gRH value_a2gRI x_a2gRJ
               -> (Entity key_a2gRH) value_a2gRI {userPassedTests = x_a2gRJ})
    instance ToBackendKey MongoContext User where
      toBackendKey = unUserKey
      fromBackendKey = UserKey
    migrateAll :: persistent-2.8.1:Database.Persist.Sql.Types.Migration
    migrateAll
      = do let defs_a2gRK
                 = [(((((((((EntityDef (HaskellName (packPTH "TestResult")))
                              (DBName (packPTH "test_result")))
                             (((((((FieldDef (HaskellName (packPTH "Id")))
                                     (DBName (packPTH "id")))
                                    ((FTTypeCon Nothing) (packPTH "TestResultId")))
                                   SqlInt64)
                                  [])
                                 True)
                                ((ForeignRef (HaskellName (packPTH "TestResult")))
                                   ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                            [])
                           [((((((FieldDef (HaskellName (packPTH "testKey")))
                                   (DBName (packPTH "test_key")))
                                  ((FTTypeCon Nothing) (packPTH "Text")))
                                 SqlString)
                                [])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "result")))
                                   (DBName (packPTH "result")))
                                  ((FTTypeCon Nothing) (packPTH "Text")))
                                 SqlString)
                                [])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "passingDate")))
                                   (DBName (packPTH "passing_date")))
                                  ((FTTypeCon Nothing) (packPTH "UTCTime")))
                                 SqlDayTime)
                                [])
                               True)
                              NoReference])
                          [])
                         [])
                        [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
                       (Data.Map.Internal.fromList []))
                      False,
                    (((((((((EntityDef (HaskellName (packPTH "User")))
                              (DBName (packPTH "user")))
                             (((((((FieldDef (HaskellName (packPTH "Id")))
                                     (DBName (packPTH "id")))
                                    ((FTTypeCon Nothing) (packPTH "UserId")))
                                   SqlInt64)
                                  [])
                                 True)
                                ((ForeignRef (HaskellName (packPTH "User")))
                                   ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                            [])
                           [((((((FieldDef (HaskellName (packPTH "username")))
                                   (DBName (packPTH "username")))
                                  ((FTTypeCon Nothing) (packPTH "Text")))
                                 SqlString)
                                [])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "password")))
                                   (DBName (packPTH "password")))
                                  ((FTTypeCon Nothing) (packPTH "Text")))
                                 SqlString)
                                [])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "email")))
                                   (DBName (packPTH "email")))
                                  ((FTTypeCon Nothing) (packPTH "Text")))
                                 SqlString)
                                [])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "avatar")))
                                   (DBName (packPTH "avatar")))
                                  ((FTTypeCon Nothing) (packPTH "Text")))
                                 SqlString)
                                [])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "firstName")))
                                   (DBName (packPTH "first_name")))
                                  ((FTTypeCon Nothing) (packPTH "Text")))
                                 SqlString)
                                [packPTH "Maybe"])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "secondName")))
                                   (DBName (packPTH "second_name")))
                                  ((FTTypeCon Nothing) (packPTH "Text")))
                                 SqlString)
                                [packPTH "Maybe"])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "birthDay")))
                                   (DBName (packPTH "birth_day")))
                                  ((FTTypeCon Nothing) (packPTH "UTCTime")))
                                 SqlDayTime)
                                [packPTH "Maybe"])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "sex")))
                                   (DBName (packPTH "sex")))
                                  ((FTTypeCon Nothing) (packPTH "Int")))
                                 SqlInt64)
                                [packPTH "Maybe"])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "createdTests")))
                                   (DBName (packPTH "created_tests")))
                                  (FTList ((FTTypeCon Nothing) (packPTH "ObjectId"))))
                                 SqlString)
                                [])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "passedTests")))
                                   (DBName (packPTH "passed_tests")))
                                  (FTList ((FTTypeCon Nothing) (packPTH "TestResult"))))
                                 SqlString)
                                [])
                               True)
                              (EmbedRef
                                 ((EmbedEntityDef (HaskellName (packPTH "TestResult")))
                                    [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing)
                                       Nothing,
                                     ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                                     ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                                       Nothing]))])
                          [(((UniqueDef (HaskellName (packPTH "Email")))
                               (DBName (packPTH "email")))
                              [(HaskellName (packPTH "email"), DBName (packPTH "email"))])
                             [],
                           (((UniqueDef (HaskellName (packPTH "Username")))
                               (DBName (packPTH "username")))
                              [(HaskellName (packPTH "username"), DBName (packPTH "username"))])
                             []])
                         [])
                        [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
                       (Data.Map.Internal.fromList []))
                      False]
           (persistent-2.8.1:Database.Persist.Sql.Migration.migrate
              defs_a2gRK)
             ((((((((((EntityDef (HaskellName (packPTH "TestResult")))
                        (DBName (packPTH "test_result")))
                       (((((((FieldDef (HaskellName (packPTH "Id")))
                               (DBName (packPTH "id")))
                              ((FTTypeCon Nothing) (packPTH "TestResultId")))
                             SqlInt64)
                            [])
                           True)
                          ((ForeignRef (HaskellName (packPTH "TestResult")))
                             ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                      [])
                     [((((((FieldDef (HaskellName (packPTH "testKey")))
                             (DBName (packPTH "test_key")))
                            ((FTTypeCon Nothing) (packPTH "Text")))
                           SqlString)
                          [])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "result")))
                             (DBName (packPTH "result")))
                            ((FTTypeCon Nothing) (packPTH "Text")))
                           SqlString)
                          [])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "passingDate")))
                             (DBName (packPTH "passing_date")))
                            ((FTTypeCon Nothing) (packPTH "UTCTime")))
                           SqlDayTime)
                          [])
                         True)
                        NoReference])
                    [])
                   [])
                  [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
                 (Data.Map.Internal.fromList []))
                False)
           (persistent-2.8.1:Database.Persist.Sql.Migration.migrate
              defs_a2gRK)
             ((((((((((EntityDef (HaskellName (packPTH "User")))
                        (DBName (packPTH "user")))
                       (((((((FieldDef (HaskellName (packPTH "Id")))
                               (DBName (packPTH "id")))
                              ((FTTypeCon Nothing) (packPTH "UserId")))
                             SqlInt64)
                            [])
                           True)
                          ((ForeignRef (HaskellName (packPTH "User")))
                             ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                      [])
                     [((((((FieldDef (HaskellName (packPTH "username")))
                             (DBName (packPTH "username")))
                            ((FTTypeCon Nothing) (packPTH "Text")))
                           SqlString)
                          [])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "password")))
                             (DBName (packPTH "password")))
                            ((FTTypeCon Nothing) (packPTH "Text")))
                           SqlString)
                          [])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "email")))
                             (DBName (packPTH "email")))
                            ((FTTypeCon Nothing) (packPTH "Text")))
                           SqlString)
                          [])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "avatar")))
                             (DBName (packPTH "avatar")))
                            ((FTTypeCon Nothing) (packPTH "Text")))
                           SqlString)
                          [])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "firstName")))
                             (DBName (packPTH "first_name")))
                            ((FTTypeCon Nothing) (packPTH "Text")))
                           SqlString)
                          [packPTH "Maybe"])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "secondName")))
                             (DBName (packPTH "second_name")))
                            ((FTTypeCon Nothing) (packPTH "Text")))
                           SqlString)
                          [packPTH "Maybe"])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "birthDay")))
                             (DBName (packPTH "birth_day")))
                            ((FTTypeCon Nothing) (packPTH "UTCTime")))
                           SqlDayTime)
                          [packPTH "Maybe"])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "sex")))
                             (DBName (packPTH "sex")))
                            ((FTTypeCon Nothing) (packPTH "Int")))
                           SqlInt64)
                          [packPTH "Maybe"])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "createdTests")))
                             (DBName (packPTH "created_tests")))
                            (FTList ((FTTypeCon Nothing) (packPTH "ObjectId"))))
                           SqlString)
                          [])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "passedTests")))
                             (DBName (packPTH "passed_tests")))
                            (FTList ((FTTypeCon Nothing) (packPTH "TestResult"))))
                           SqlString)
                          [])
                         True)
                        (EmbedRef
                           ((EmbedEntityDef (HaskellName (packPTH "TestResult")))
                              [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing) Nothing,
                               ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                               ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                                 Nothing]))])
                    [(((UniqueDef (HaskellName (packPTH "Email")))
                         (DBName (packPTH "email")))
                        [(HaskellName (packPTH "email"), DBName (packPTH "email"))])
                       [],
                     (((UniqueDef (HaskellName (packPTH "Username")))
                         (DBName (packPTH "username")))
                        [(HaskellName (packPTH "username"), DBName (packPTH "username"))])
                       []])
                   [])
                  [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
                 (Data.Map.Internal.fromList []))
                False)
/home/nikita/Projects/labs/Databases/Course-Project/Server/src/Model/User.hs:(27,103)-(47,2): Splicing expression
    Language.Haskell.TH.Quote.quoteExp
      persistLowerCase
      "\n\
      \TestResult\n\
      \  testKey       Text\n\
      \  result        Text\n\
      \  passingDate   UTCTime\n\
      \  deriving      Eq Read Show Generic\n\
      \User\n\
      \  username      Text\n\
      \  password      Text\n\
      \  email         Text\n\
      \  avatar        Text\n\
      \  firstName     Text Maybe\n\
      \  secondName    Text Maybe\n\
      \  birthDay      UTCTime Maybe\n\
      \  sex           Int Maybe\n\
      \  createdTests  [ObjectId]\n\
      \  passedTests   [TestResult]\n\
      \  Email         email\n\
      \  Username      username\n\
      \  deriving      Eq Read Show Generic\n"
  ======>
    [(((((((((EntityDef (HaskellName (packPTH "TestResult")))
               (DBName (packPTH "test_result")))
              (((((((FieldDef (HaskellName (packPTH "Id")))
                      (DBName (packPTH "id")))
                     ((FTTypeCon Nothing) (packPTH "TestResultId")))
                    SqlInt64)
                   [])
                  True)
                 ((ForeignRef (HaskellName (packPTH "TestResult")))
                    ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
             [])
            [((((((FieldDef (HaskellName (packPTH "testKey")))
                    (DBName (packPTH "test_key")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for testKey")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "result")))
                    (DBName (packPTH "result")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for result")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "passingDate")))
                    (DBName (packPTH "passing_date")))
                   ((FTTypeCon Nothing) (packPTH "UTCTime")))
                  (SqlOther (packPTH "SqlType unset for passingDate")))
                 [])
                True)
               NoReference])
           [])
          [])
         [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
        (Data.Map.Internal.fromList []))
       False
       {entityFields = [((((((FieldDef (HaskellName (packPTH "testKey")))
                               (DBName (packPTH "test_key")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "result")))
                               (DBName (packPTH "result")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "passingDate")))
                               (DBName (packPTH "passing_date")))
                              ((FTTypeCon Nothing) (packPTH "UTCTime")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy UTCTime)))
                            [])
                           True)
                          NoReference],
        entityId = ((((((FieldDef (HaskellName (packPTH "Id")))
                          (DBName (packPTH "id")))
                         ((FTTypeCon Nothing) (packPTH "TestResultId")))
                        (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                           (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                       [])
                      True)
                     ((ForeignRef (HaskellName (packPTH "TestResult")))
                        ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))},
     (((((((((EntityDef (HaskellName (packPTH "User")))
               (DBName (packPTH "user")))
              (((((((FieldDef (HaskellName (packPTH "Id")))
                      (DBName (packPTH "id")))
                     ((FTTypeCon Nothing) (packPTH "UserId")))
                    SqlInt64)
                   [])
                  True)
                 ((ForeignRef (HaskellName (packPTH "User")))
                    ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
             [])
            [((((((FieldDef (HaskellName (packPTH "username")))
                    (DBName (packPTH "username")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for username")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "password")))
                    (DBName (packPTH "password")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for password")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "email")))
                    (DBName (packPTH "email")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for email")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "avatar")))
                    (DBName (packPTH "avatar")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for avatar")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "firstName")))
                    (DBName (packPTH "first_name")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for firstName")))
                 [packPTH "Maybe"])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "secondName")))
                    (DBName (packPTH "second_name")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for secondName")))
                 [packPTH "Maybe"])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "birthDay")))
                    (DBName (packPTH "birth_day")))
                   ((FTTypeCon Nothing) (packPTH "UTCTime")))
                  (SqlOther (packPTH "SqlType unset for birthDay")))
                 [packPTH "Maybe"])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "sex")))
                    (DBName (packPTH "sex")))
                   ((FTTypeCon Nothing) (packPTH "Int")))
                  (SqlOther (packPTH "SqlType unset for sex")))
                 [packPTH "Maybe"])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "createdTests")))
                    (DBName (packPTH "created_tests")))
                   (FTList ((FTTypeCon Nothing) (packPTH "ObjectId"))))
                  (SqlOther (packPTH "SqlType unset for createdTests")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "passedTests")))
                    (DBName (packPTH "passed_tests")))
                   (FTList ((FTTypeCon Nothing) (packPTH "TestResult"))))
                  (SqlOther (packPTH "SqlType unset for passedTests")))
                 [])
                True)
               (EmbedRef
                  ((EmbedEntityDef (HaskellName (packPTH "TestResult")))
                     [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing) Nothing,
                      ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                      ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                        Nothing]))])
           [(((UniqueDef (HaskellName (packPTH "Email")))
                (DBName (packPTH "email")))
               [(HaskellName (packPTH "email"), DBName (packPTH "email"))])
              [],
            (((UniqueDef (HaskellName (packPTH "Username")))
                (DBName (packPTH "username")))
               [(HaskellName (packPTH "username"), DBName (packPTH "username"))])
              []])
          [])
         [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
        (Data.Map.Internal.fromList []))
       False
       {entityFields = [((((((FieldDef (HaskellName (packPTH "username")))
                               (DBName (packPTH "username")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "password")))
                               (DBName (packPTH "password")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "email")))
                               (DBName (packPTH "email")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "avatar")))
                               (DBName (packPTH "avatar")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "firstName")))
                               (DBName (packPTH "first_name")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [packPTH "Maybe"])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "secondName")))
                               (DBName (packPTH "second_name")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [packPTH "Maybe"])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "birthDay")))
                               (DBName (packPTH "birth_day")))
                              ((FTTypeCon Nothing) (packPTH "UTCTime")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy UTCTime)))
                            [packPTH "Maybe"])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "sex")))
                               (DBName (packPTH "sex")))
                              ((FTTypeCon Nothing) (packPTH "Int")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Int)))
                            [packPTH "Maybe"])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "createdTests")))
                               (DBName (packPTH "created_tests")))
                              (FTList ((FTTypeCon Nothing) (packPTH "ObjectId"))))
                             SqlString)
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "passedTests")))
                               (DBName (packPTH "passed_tests")))
                              (FTList ((FTTypeCon Nothing) (packPTH "TestResult"))))
                             SqlString)
                            [])
                           True)
                          (EmbedRef
                             ((EmbedEntityDef (HaskellName (packPTH "TestResult")))
                                [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing) Nothing,
                                 ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                                 ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                                   Nothing]))],
        entityId = ((((((FieldDef (HaskellName (packPTH "Id")))
                          (DBName (packPTH "id")))
                         ((FTTypeCon Nothing) (packPTH "UserId")))
                        (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                           (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                       [])
                      True)
                     ((ForeignRef (HaskellName (packPTH "User")))
                        ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))}]
/home/nikita/Projects/labs/Databases/Course-Project/Server/src/Model/User.hs:(27,1)-(47,2): Splicing declarations
    share
      [mkPersist (mkPersistSettings (ConT ''MongoContext)),
       mkMigrate "migrateAll"]
      ([(((((((((EntityDef (HaskellName (packPTH "TestResult")))
                  (DBName (packPTH "test_result")))
                 (((((((FieldDef (HaskellName (packPTH "Id")))
                         (DBName (packPTH "id")))
                        ((FTTypeCon Nothing) (packPTH "TestResultId")))
                       SqlInt64)
                      [])
                     True)
                    ((ForeignRef (HaskellName (packPTH "TestResult")))
                       ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                [])
               [((((((FieldDef (HaskellName (packPTH "testKey")))
                       (DBName (packPTH "test_key")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for testKey")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "result")))
                       (DBName (packPTH "result")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for result")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "passingDate")))
                       (DBName (packPTH "passing_date")))
                      ((FTTypeCon Nothing) (packPTH "UTCTime")))
                     (SqlOther (packPTH "SqlType unset for passingDate")))
                    [])
                   True)
                  NoReference])
              [])
             [])
            [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
           (Data.Map.Internal.fromList []))
          False
          {entityFields = [((((((FieldDef (HaskellName (packPTH "testKey")))
                                  (DBName (packPTH "test_key")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "result")))
                                  (DBName (packPTH "result")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "passingDate")))
                                  (DBName (packPTH "passing_date")))
                                 ((FTTypeCon Nothing) (packPTH "UTCTime")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy UTCTime)))
                               [])
                              True)
                             NoReference],
           entityId = ((((((FieldDef (HaskellName (packPTH "Id")))
                             (DBName (packPTH "id")))
                            ((FTTypeCon Nothing) (packPTH "TestResultId")))
                           (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                              (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                          [])
                         True)
                        ((ForeignRef (HaskellName (packPTH "TestResult")))
                           ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))},
        (((((((((EntityDef (HaskellName (packPTH "User")))
                  (DBName (packPTH "user")))
                 (((((((FieldDef (HaskellName (packPTH "Id")))
                         (DBName (packPTH "id")))
                        ((FTTypeCon Nothing) (packPTH "UserId")))
                       SqlInt64)
                      [])
                     True)
                    ((ForeignRef (HaskellName (packPTH "User")))
                       ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                [])
               [((((((FieldDef (HaskellName (packPTH "username")))
                       (DBName (packPTH "username")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for username")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "password")))
                       (DBName (packPTH "password")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for password")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "email")))
                       (DBName (packPTH "email")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for email")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "avatar")))
                       (DBName (packPTH "avatar")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for avatar")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "firstName")))
                       (DBName (packPTH "first_name")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for firstName")))
                    [packPTH "Maybe"])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "secondName")))
                       (DBName (packPTH "second_name")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for secondName")))
                    [packPTH "Maybe"])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "birthDay")))
                       (DBName (packPTH "birth_day")))
                      ((FTTypeCon Nothing) (packPTH "UTCTime")))
                     (SqlOther (packPTH "SqlType unset for birthDay")))
                    [packPTH "Maybe"])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "sex")))
                       (DBName (packPTH "sex")))
                      ((FTTypeCon Nothing) (packPTH "Int")))
                     (SqlOther (packPTH "SqlType unset for sex")))
                    [packPTH "Maybe"])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "createdTests")))
                       (DBName (packPTH "created_tests")))
                      (FTList ((FTTypeCon Nothing) (packPTH "ObjectId"))))
                     (SqlOther (packPTH "SqlType unset for createdTests")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "passedTests")))
                       (DBName (packPTH "passed_tests")))
                      (FTList ((FTTypeCon Nothing) (packPTH "TestResult"))))
                     (SqlOther (packPTH "SqlType unset for passedTests")))
                    [])
                   True)
                  (EmbedRef
                     ((EmbedEntityDef (HaskellName (packPTH "TestResult")))
                        [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing) Nothing,
                         ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                         ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                           Nothing]))])
              [(((UniqueDef (HaskellName (packPTH "Email")))
                   (DBName (packPTH "email")))
                  [(HaskellName (packPTH "email"), DBName (packPTH "email"))])
                 [],
               (((UniqueDef (HaskellName (packPTH "Username")))
                   (DBName (packPTH "username")))
                  [(HaskellName (packPTH "username"), DBName (packPTH "username"))])
                 []])
             [])
            [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
           (Data.Map.Internal.fromList []))
          False
          {entityFields = [((((((FieldDef (HaskellName (packPTH "username")))
                                  (DBName (packPTH "username")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "password")))
                                  (DBName (packPTH "password")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "email")))
                                  (DBName (packPTH "email")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "avatar")))
                                  (DBName (packPTH "avatar")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "firstName")))
                                  (DBName (packPTH "first_name")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [packPTH "Maybe"])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "secondName")))
                                  (DBName (packPTH "second_name")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [packPTH "Maybe"])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "birthDay")))
                                  (DBName (packPTH "birth_day")))
                                 ((FTTypeCon Nothing) (packPTH "UTCTime")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy UTCTime)))
                               [packPTH "Maybe"])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "sex")))
                                  (DBName (packPTH "sex")))
                                 ((FTTypeCon Nothing) (packPTH "Int")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Int)))
                               [packPTH "Maybe"])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "createdTests")))
                                  (DBName (packPTH "created_tests")))
                                 (FTList ((FTTypeCon Nothing) (packPTH "ObjectId"))))
                                SqlString)
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "passedTests")))
                                  (DBName (packPTH "passed_tests")))
                                 (FTList ((FTTypeCon Nothing) (packPTH "TestResult"))))
                                SqlString)
                               [])
                              True)
                             (EmbedRef
                                ((EmbedEntityDef (HaskellName (packPTH "TestResult")))
                                   [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing) Nothing,
                                    ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                                    ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                                      Nothing]))],
           entityId = ((((((FieldDef (HaskellName (packPTH "Id")))
                             (DBName (packPTH "id")))
                            ((FTTypeCon Nothing) (packPTH "UserId")))
                           (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                              (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                          [])
                         True)
                        ((ForeignRef (HaskellName (packPTH "User")))
                           ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))}])
  ======>
    instance PersistField TestResult where
      toPersistValue
        = \ ent_a2ixZ
            -> (PersistMap
                  $ ((Prelude.zip
                        ((Prelude.map pack) ["testKey", "result", "passingDate"]))
                       ((Prelude.map toPersistValue) $ (toPersistFields ent_a2ixZ))))
      fromPersistValue
        = ((\ x_a2iy0
              -> let
                   columns_a2iy1
                     = unordered-containers-0.2.9.0:Data.HashMap.Strict.fromList x_a2iy0
                 in
                   (fromPersistValues
                      $ ((Prelude.map
                            (\ name_a2iy2
                               -> case
                                      (unordered-containers-0.2.9.0:Data.HashMap.Base.lookup
                                         (pack name_a2iy2))
                                        columns_a2iy1
                                  of
                                    Just v_a2iy3 -> v_a2iy3
                                    Nothing -> PersistNull))
                           $ ["testKey", "result", "passingDate"])))
             <=< getPersistMap)
    instance persistent-2.8.1:Database.Persist.Sql.Class.PersistFieldSql TestResult where
      persistent-2.8.1:Database.Persist.Sql.Class.sqlType _ = SqlString
    instance PersistField User where
      toPersistValue
        = \ ent_a2iy4
            -> (PersistMap
                  $ ((Prelude.zip
                        ((Prelude.map pack)
                           ["username", "password", "email", "avatar", "firstName",
                            "secondName", "birthDay", "sex", "createdTests", "passedTests"]))
                       ((Prelude.map toPersistValue) $ (toPersistFields ent_a2iy4))))
      fromPersistValue
        = ((\ x_a2iy5
              -> let
                   columns_a2iy6
                     = unordered-containers-0.2.9.0:Data.HashMap.Strict.fromList x_a2iy5
                 in
                   (fromPersistValues
                      $ ((Prelude.map
                            (\ name_a2iy7
                               -> case
                                      (unordered-containers-0.2.9.0:Data.HashMap.Base.lookup
                                         (pack name_a2iy7))
                                        columns_a2iy6
                                  of
                                    Just v_a2iy8 -> v_a2iy8
                                    Nothing -> PersistNull))
                           $ ["username", "password", "email", "avatar", "firstName",
                              "secondName", "birthDay", "sex", "createdTests", "passedTests"])))
             <=< getPersistMap)
    instance persistent-2.8.1:Database.Persist.Sql.Class.PersistFieldSql User where
      persistent-2.8.1:Database.Persist.Sql.Class.sqlType _ = SqlString
    data TestResult
      = TestResult {testResultTestKey :: !Text,
                    testResultResult :: !Text,
                    testResultPassingDate :: !UTCTime}
      deriving (Eq, Read, Show, Generic)
    type TestResultId = Key TestResult
    instance PersistEntity TestResult where
      type PersistEntityBackend TestResult = MongoContext
      data Unique TestResult
      newtype Key TestResult
        = TestResultKey {unTestResultKey :: (BackendKey MongoContext)}
        deriving (Show,
                  Read,
                  Eq,
                  Ord,
                  path-pieces-0.2.1:Web.PathPieces.PathPiece,
                  http-api-data-0.3.7.2:Web.Internal.HttpApiData.ToHttpApiData,
                  http-api-data-0.3.7.2:Web.Internal.HttpApiData.FromHttpApiData,
                  PersistField,
                  persistent-2.8.1:Database.Persist.Sql.Class.PersistFieldSql,
                  Aeson.ToJSON,
                  Aeson.FromJSON)
      data EntityField TestResult typ
        = typ ~ Key TestResult => TestResultId |
          typ ~ Text => TestResultTestKey |
          typ ~ Text => TestResultResult |
          typ ~ UTCTime => TestResultPassingDate
      keyToValues
        = ((ghc-prim-0.5.1.1:GHC.Types.: [])
             . (toPersistValue . unTestResultKey))
      keyFromValues
        = ((fmap TestResultKey)
             . (fromPersistValue . Database.Persist.TH.headNote))
      entityDef _
        = (((((((((EntityDef (HaskellName (packPTH "TestResult")))
                    (DBName (packPTH "test_result")))
                   (((((((FieldDef (HaskellName (packPTH "Id")))
                           (DBName (packPTH "id")))
                          ((FTTypeCon Nothing) (packPTH "TestResultId")))
                         SqlInt64)
                        [])
                       True)
                      ((ForeignRef (HaskellName (packPTH "TestResult")))
                         ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                  [])
                 [((((((FieldDef (HaskellName (packPTH "testKey")))
                         (DBName (packPTH "test_key")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "result")))
                         (DBName (packPTH "result")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "passingDate")))
                         (DBName (packPTH "passing_date")))
                        ((FTTypeCon Nothing) (packPTH "UTCTime")))
                       SqlDayTime)
                      [])
                     True)
                    NoReference])
                [])
               [])
              [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
             (Data.Map.Internal.fromList []))
            False
      toPersistFields (TestResult x_a2iy9 x_a2iya x_a2iyb)
        = [SomePersistField x_a2iy9, SomePersistField x_a2iya,
           SomePersistField x_a2iyb]
      fromPersistValues [x1_a2iyd, x2_a2iye, x3_a2iyf]
        = TestResult
            <$>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "testKey")))
                 . fromPersistValue)
                x1_a2iyd
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "result")))
                 . fromPersistValue)
                x2_a2iye
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "passingDate")))
                 . fromPersistValue)
                x3_a2iyf
      fromPersistValues x_a2iyc
        = (Left
             $ ((mappend (packPTH "TestResult: fromPersistValues failed on: "))
                  (pack $ (show x_a2iyc))))
      persistUniqueToFieldNames _
        = error "Degenerate case, should never happen"
      persistUniqueToValues _
        = error "Degenerate case, should never happen"
      persistUniqueKeys
        (TestResult _testKey_a2iyg _result_a2iyh _passingDate_a2iyi)
        = []
      persistFieldDef TestResultId
        = ((((((FieldDef (HaskellName (packPTH "Id")))
                 (DBName (packPTH "id")))
                ((FTTypeCon Nothing) (packPTH "TestResultId")))
               SqlInt64)
              [])
             True)
            ((ForeignRef (HaskellName (packPTH "TestResult")))
               ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))
      persistFieldDef TestResultTestKey
        = ((((((FieldDef (HaskellName (packPTH "testKey")))
                 (DBName (packPTH "test_key")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef TestResultResult
        = ((((((FieldDef (HaskellName (packPTH "result")))
                 (DBName (packPTH "result")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef TestResultPassingDate
        = ((((((FieldDef (HaskellName (packPTH "passingDate")))
                 (DBName (packPTH "passing_date")))
                ((FTTypeCon Nothing) (packPTH "UTCTime")))
               SqlDayTime)
              [])
             True)
            NoReference
      persistIdField = TestResultId
      fieldLens TestResultId
        = (lensPTH entityKey)
            (\ Entity _ value_a2iyj key_a2iyk
               -> (Entity key_a2iyk) value_a2iyj)
      fieldLens TestResultTestKey
        = (lensPTH (testResultTestKey . entityVal))
            (\ Entity key_a2iyl value_a2iym x_a2iyn
               -> (Entity key_a2iyl) value_a2iym {testResultTestKey = x_a2iyn})
      fieldLens TestResultResult
        = (lensPTH (testResultResult . entityVal))
            (\ Entity key_a2iyl value_a2iym x_a2iyn
               -> (Entity key_a2iyl) value_a2iym {testResultResult = x_a2iyn})
      fieldLens TestResultPassingDate
        = (lensPTH (testResultPassingDate . entityVal))
            (\ Entity key_a2iyl value_a2iym x_a2iyn
               -> (Entity key_a2iyl)
                    value_a2iym {testResultPassingDate = x_a2iyn})
    instance ToBackendKey MongoContext TestResult where
      toBackendKey = unTestResultKey
      fromBackendKey = TestResultKey
    data User
      = User {userUsername :: !Text,
              userPassword :: !Text,
              userEmail :: !Text,
              userAvatar :: !Text,
              userFirstName :: !(Maybe Text),
              userSecondName :: !(Maybe Text),
              userBirthDay :: !(Maybe UTCTime),
              userSex :: !(Maybe Int),
              userCreatedTests :: ![ObjectId],
              userPassedTests :: ![TestResult]}
      deriving (Eq, Read, Show, Generic)
    type UserId = Key User
    instance PersistEntity User where
      type PersistEntityBackend User = MongoContext
      data Unique User = Email Text | Username Text
      newtype Key User
        = UserKey {unUserKey :: (BackendKey MongoContext)}
        deriving (Show,
                  Read,
                  Eq,
                  Ord,
                  path-pieces-0.2.1:Web.PathPieces.PathPiece,
                  http-api-data-0.3.7.2:Web.Internal.HttpApiData.ToHttpApiData,
                  http-api-data-0.3.7.2:Web.Internal.HttpApiData.FromHttpApiData,
                  PersistField,
                  persistent-2.8.1:Database.Persist.Sql.Class.PersistFieldSql,
                  Aeson.ToJSON,
                  Aeson.FromJSON)
      data EntityField User typ
        = typ ~ Key User => UserId |
          typ ~ Text => UserUsername |
          typ ~ Text => UserPassword |
          typ ~ Text => UserEmail |
          typ ~ Text => UserAvatar |
          typ ~ Maybe Text => UserFirstName |
          typ ~ Maybe Text => UserSecondName |
          typ ~ Maybe UTCTime => UserBirthDay |
          typ ~ Maybe Int => UserSex |
          typ ~ [ObjectId] => UserCreatedTests |
          typ ~ [TestResult] => UserPassedTests
      keyToValues
        = ((ghc-prim-0.5.1.1:GHC.Types.: [])
             . (toPersistValue . unUserKey))
      keyFromValues
        = ((fmap UserKey)
             . (fromPersistValue . Database.Persist.TH.headNote))
      entityDef _
        = (((((((((EntityDef (HaskellName (packPTH "User")))
                    (DBName (packPTH "user")))
                   (((((((FieldDef (HaskellName (packPTH "Id")))
                           (DBName (packPTH "id")))
                          ((FTTypeCon Nothing) (packPTH "UserId")))
                         SqlInt64)
                        [])
                       True)
                      ((ForeignRef (HaskellName (packPTH "User")))
                         ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                  [])
                 [((((((FieldDef (HaskellName (packPTH "username")))
                         (DBName (packPTH "username")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "password")))
                         (DBName (packPTH "password")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "email")))
                         (DBName (packPTH "email")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "avatar")))
                         (DBName (packPTH "avatar")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "firstName")))
                         (DBName (packPTH "first_name")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [packPTH "Maybe"])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "secondName")))
                         (DBName (packPTH "second_name")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [packPTH "Maybe"])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "birthDay")))
                         (DBName (packPTH "birth_day")))
                        ((FTTypeCon Nothing) (packPTH "UTCTime")))
                       SqlDayTime)
                      [packPTH "Maybe"])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "sex")))
                         (DBName (packPTH "sex")))
                        ((FTTypeCon Nothing) (packPTH "Int")))
                       SqlInt64)
                      [packPTH "Maybe"])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "createdTests")))
                         (DBName (packPTH "created_tests")))
                        (FTList ((FTTypeCon Nothing) (packPTH "ObjectId"))))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "passedTests")))
                         (DBName (packPTH "passed_tests")))
                        (FTList ((FTTypeCon Nothing) (packPTH "TestResult"))))
                       SqlString)
                      [])
                     True)
                    (EmbedRef
                       ((EmbedEntityDef (HaskellName (packPTH "TestResult")))
                          [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing) Nothing,
                           ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                           ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                             Nothing]))])
                [(((UniqueDef (HaskellName (packPTH "Email")))
                     (DBName (packPTH "email")))
                    [(HaskellName (packPTH "email"), DBName (packPTH "email"))])
                   [],
                 (((UniqueDef (HaskellName (packPTH "Username")))
                     (DBName (packPTH "username")))
                    [(HaskellName (packPTH "username"), DBName (packPTH "username"))])
                   []])
               [])
              [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
             (Data.Map.Internal.fromList []))
            False
      toPersistFields
        (User x_a2iyo
              x_a2iyp
              x_a2iyq
              x_a2iyr
              x_a2iys
              x_a2iyt
              x_a2iyu
              x_a2iyv
              x_a2iyw
              x_a2iyx)
        = [SomePersistField x_a2iyo, SomePersistField x_a2iyp,
           SomePersistField x_a2iyq, SomePersistField x_a2iyr,
           SomePersistField x_a2iys, SomePersistField x_a2iyt,
           SomePersistField x_a2iyu, SomePersistField x_a2iyv,
           SomePersistField x_a2iyw, SomePersistField x_a2iyx]
      fromPersistValues
        [x1_a2iyz,
         x2_a2iyA,
         x3_a2iyB,
         x4_a2iyC,
         x5_a2iyD,
         x6_a2iyE,
         x7_a2iyF,
         x8_a2iyG,
         x9_a2iyH,
         x10_a2iyI]
        = User
            <$>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "username")))
                 . fromPersistValue)
                x1_a2iyz
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "password")))
                 . fromPersistValue)
                x2_a2iyA
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "email")))
                 . fromPersistValue)
                x3_a2iyB
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "avatar")))
                 . fromPersistValue)
                x4_a2iyC
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "firstName")))
                 . fromPersistValue)
                x5_a2iyD
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "secondName")))
                 . fromPersistValue)
                x6_a2iyE
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "birthDay")))
                 . fromPersistValue)
                x7_a2iyF
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "sex")))
                 . fromPersistValue)
                x8_a2iyG
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "createdTests")))
                 . fromPersistValue)
                x9_a2iyH
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "passedTests")))
                 . fromPersistValue)
                x10_a2iyI
      fromPersistValues x_a2iyy
        = (Left
             $ ((mappend (packPTH "User: fromPersistValues failed on: "))
                  (pack $ (show x_a2iyy))))
      persistUniqueToFieldNames Email {}
        = [(HaskellName (packPTH "email"), DBName (packPTH "email"))]
      persistUniqueToFieldNames Username {}
        = [(HaskellName (packPTH "username"), DBName (packPTH "username"))]
      persistUniqueToValues (Email x_a2iyJ) = [toPersistValue x_a2iyJ]
      persistUniqueToValues (Username x_a2iyK) = [toPersistValue x_a2iyK]
      persistUniqueKeys
        (User _username_a2iyL
              _password_a2iyM
              _email_a2iyN
              _avatar_a2iyO
              _firstName_a2iyP
              _secondName_a2iyQ
              _birthDay_a2iyR
              _sex_a2iyS
              _createdTests_a2iyT
              _passedTests_a2iyU)
        = [Email _email_a2iyN, Username _username_a2iyL]
      persistFieldDef UserId
        = ((((((FieldDef (HaskellName (packPTH "Id")))
                 (DBName (packPTH "id")))
                ((FTTypeCon Nothing) (packPTH "UserId")))
               SqlInt64)
              [])
             True)
            ((ForeignRef (HaskellName (packPTH "User")))
               ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))
      persistFieldDef UserUsername
        = ((((((FieldDef (HaskellName (packPTH "username")))
                 (DBName (packPTH "username")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef UserPassword
        = ((((((FieldDef (HaskellName (packPTH "password")))
                 (DBName (packPTH "password")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef UserEmail
        = ((((((FieldDef (HaskellName (packPTH "email")))
                 (DBName (packPTH "email")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef UserAvatar
        = ((((((FieldDef (HaskellName (packPTH "avatar")))
                 (DBName (packPTH "avatar")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef UserFirstName
        = ((((((FieldDef (HaskellName (packPTH "firstName")))
                 (DBName (packPTH "first_name")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [packPTH "Maybe"])
             True)
            NoReference
      persistFieldDef UserSecondName
        = ((((((FieldDef (HaskellName (packPTH "secondName")))
                 (DBName (packPTH "second_name")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [packPTH "Maybe"])
             True)
            NoReference
      persistFieldDef UserBirthDay
        = ((((((FieldDef (HaskellName (packPTH "birthDay")))
                 (DBName (packPTH "birth_day")))
                ((FTTypeCon Nothing) (packPTH "UTCTime")))
               SqlDayTime)
              [packPTH "Maybe"])
             True)
            NoReference
      persistFieldDef UserSex
        = ((((((FieldDef (HaskellName (packPTH "sex")))
                 (DBName (packPTH "sex")))
                ((FTTypeCon Nothing) (packPTH "Int")))
               SqlInt64)
              [packPTH "Maybe"])
             True)
            NoReference
      persistFieldDef UserCreatedTests
        = ((((((FieldDef (HaskellName (packPTH "createdTests")))
                 (DBName (packPTH "created_tests")))
                (FTList ((FTTypeCon Nothing) (packPTH "ObjectId"))))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef UserPassedTests
        = ((((((FieldDef (HaskellName (packPTH "passedTests")))
                 (DBName (packPTH "passed_tests")))
                (FTList ((FTTypeCon Nothing) (packPTH "TestResult"))))
               SqlString)
              [])
             True)
            (EmbedRef
               ((EmbedEntityDef (HaskellName (packPTH "TestResult")))
                  [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing) Nothing,
                   ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                   ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                     Nothing]))
      persistIdField = UserId
      fieldLens UserId
        = (lensPTH entityKey)
            (\ Entity _ value_a2iyV key_a2iyW
               -> (Entity key_a2iyW) value_a2iyV)
      fieldLens UserUsername
        = (lensPTH (userUsername . entityVal))
            (\ Entity key_a2iyX value_a2iyY x_a2iyZ
               -> (Entity key_a2iyX) value_a2iyY {userUsername = x_a2iyZ})
      fieldLens UserPassword
        = (lensPTH (userPassword . entityVal))
            (\ Entity key_a2iyX value_a2iyY x_a2iyZ
               -> (Entity key_a2iyX) value_a2iyY {userPassword = x_a2iyZ})
      fieldLens UserEmail
        = (lensPTH (userEmail . entityVal))
            (\ Entity key_a2iyX value_a2iyY x_a2iyZ
               -> (Entity key_a2iyX) value_a2iyY {userEmail = x_a2iyZ})
      fieldLens UserAvatar
        = (lensPTH (userAvatar . entityVal))
            (\ Entity key_a2iyX value_a2iyY x_a2iyZ
               -> (Entity key_a2iyX) value_a2iyY {userAvatar = x_a2iyZ})
      fieldLens UserFirstName
        = (lensPTH (userFirstName . entityVal))
            (\ Entity key_a2iyX value_a2iyY x_a2iyZ
               -> (Entity key_a2iyX) value_a2iyY {userFirstName = x_a2iyZ})
      fieldLens UserSecondName
        = (lensPTH (userSecondName . entityVal))
            (\ Entity key_a2iyX value_a2iyY x_a2iyZ
               -> (Entity key_a2iyX) value_a2iyY {userSecondName = x_a2iyZ})
      fieldLens UserBirthDay
        = (lensPTH (userBirthDay . entityVal))
            (\ Entity key_a2iyX value_a2iyY x_a2iyZ
               -> (Entity key_a2iyX) value_a2iyY {userBirthDay = x_a2iyZ})
      fieldLens UserSex
        = (lensPTH (userSex . entityVal))
            (\ Entity key_a2iyX value_a2iyY x_a2iyZ
               -> (Entity key_a2iyX) value_a2iyY {userSex = x_a2iyZ})
      fieldLens UserCreatedTests
        = (lensPTH (userCreatedTests . entityVal))
            (\ Entity key_a2iyX value_a2iyY x_a2iyZ
               -> (Entity key_a2iyX) value_a2iyY {userCreatedTests = x_a2iyZ})
      fieldLens UserPassedTests
        = (lensPTH (userPassedTests . entityVal))
            (\ Entity key_a2iyX value_a2iyY x_a2iyZ
               -> (Entity key_a2iyX) value_a2iyY {userPassedTests = x_a2iyZ})
    instance ToBackendKey MongoContext User where
      toBackendKey = unUserKey
      fromBackendKey = UserKey
    migrateAll :: persistent-2.8.1:Database.Persist.Sql.Types.Migration
    migrateAll
      = do let defs_a2iz0
                 = [(((((((((EntityDef (HaskellName (packPTH "TestResult")))
                              (DBName (packPTH "test_result")))
                             (((((((FieldDef (HaskellName (packPTH "Id")))
                                     (DBName (packPTH "id")))
                                    ((FTTypeCon Nothing) (packPTH "TestResultId")))
                                   SqlInt64)
                                  [])
                                 True)
                                ((ForeignRef (HaskellName (packPTH "TestResult")))
                                   ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                            [])
                           [((((((FieldDef (HaskellName (packPTH "testKey")))
                                   (DBName (packPTH "test_key")))
                                  ((FTTypeCon Nothing) (packPTH "Text")))
                                 SqlString)
                                [])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "result")))
                                   (DBName (packPTH "result")))
                                  ((FTTypeCon Nothing) (packPTH "Text")))
                                 SqlString)
                                [])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "passingDate")))
                                   (DBName (packPTH "passing_date")))
                                  ((FTTypeCon Nothing) (packPTH "UTCTime")))
                                 SqlDayTime)
                                [])
                               True)
                              NoReference])
                          [])
                         [])
                        [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
                       (Data.Map.Internal.fromList []))
                      False,
                    (((((((((EntityDef (HaskellName (packPTH "User")))
                              (DBName (packPTH "user")))
                             (((((((FieldDef (HaskellName (packPTH "Id")))
                                     (DBName (packPTH "id")))
                                    ((FTTypeCon Nothing) (packPTH "UserId")))
                                   SqlInt64)
                                  [])
                                 True)
                                ((ForeignRef (HaskellName (packPTH "User")))
                                   ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                            [])
                           [((((((FieldDef (HaskellName (packPTH "username")))
                                   (DBName (packPTH "username")))
                                  ((FTTypeCon Nothing) (packPTH "Text")))
                                 SqlString)
                                [])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "password")))
                                   (DBName (packPTH "password")))
                                  ((FTTypeCon Nothing) (packPTH "Text")))
                                 SqlString)
                                [])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "email")))
                                   (DBName (packPTH "email")))
                                  ((FTTypeCon Nothing) (packPTH "Text")))
                                 SqlString)
                                [])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "avatar")))
                                   (DBName (packPTH "avatar")))
                                  ((FTTypeCon Nothing) (packPTH "Text")))
                                 SqlString)
                                [])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "firstName")))
                                   (DBName (packPTH "first_name")))
                                  ((FTTypeCon Nothing) (packPTH "Text")))
                                 SqlString)
                                [packPTH "Maybe"])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "secondName")))
                                   (DBName (packPTH "second_name")))
                                  ((FTTypeCon Nothing) (packPTH "Text")))
                                 SqlString)
                                [packPTH "Maybe"])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "birthDay")))
                                   (DBName (packPTH "birth_day")))
                                  ((FTTypeCon Nothing) (packPTH "UTCTime")))
                                 SqlDayTime)
                                [packPTH "Maybe"])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "sex")))
                                   (DBName (packPTH "sex")))
                                  ((FTTypeCon Nothing) (packPTH "Int")))
                                 SqlInt64)
                                [packPTH "Maybe"])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "createdTests")))
                                   (DBName (packPTH "created_tests")))
                                  (FTList ((FTTypeCon Nothing) (packPTH "ObjectId"))))
                                 SqlString)
                                [])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "passedTests")))
                                   (DBName (packPTH "passed_tests")))
                                  (FTList ((FTTypeCon Nothing) (packPTH "TestResult"))))
                                 SqlString)
                                [])
                               True)
                              (EmbedRef
                                 ((EmbedEntityDef (HaskellName (packPTH "TestResult")))
                                    [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing)
                                       Nothing,
                                     ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                                     ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                                       Nothing]))])
                          [(((UniqueDef (HaskellName (packPTH "Email")))
                               (DBName (packPTH "email")))
                              [(HaskellName (packPTH "email"), DBName (packPTH "email"))])
                             [],
                           (((UniqueDef (HaskellName (packPTH "Username")))
                               (DBName (packPTH "username")))
                              [(HaskellName (packPTH "username"), DBName (packPTH "username"))])
                             []])
                         [])
                        [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
                       (Data.Map.Internal.fromList []))
                      False]
           (persistent-2.8.1:Database.Persist.Sql.Migration.migrate
              defs_a2iz0)
             ((((((((((EntityDef (HaskellName (packPTH "TestResult")))
                        (DBName (packPTH "test_result")))
                       (((((((FieldDef (HaskellName (packPTH "Id")))
                               (DBName (packPTH "id")))
                              ((FTTypeCon Nothing) (packPTH "TestResultId")))
                             SqlInt64)
                            [])
                           True)
                          ((ForeignRef (HaskellName (packPTH "TestResult")))
                             ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                      [])
                     [((((((FieldDef (HaskellName (packPTH "testKey")))
                             (DBName (packPTH "test_key")))
                            ((FTTypeCon Nothing) (packPTH "Text")))
                           SqlString)
                          [])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "result")))
                             (DBName (packPTH "result")))
                            ((FTTypeCon Nothing) (packPTH "Text")))
                           SqlString)
                          [])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "passingDate")))
                             (DBName (packPTH "passing_date")))
                            ((FTTypeCon Nothing) (packPTH "UTCTime")))
                           SqlDayTime)
                          [])
                         True)
                        NoReference])
                    [])
                   [])
                  [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
                 (Data.Map.Internal.fromList []))
                False)
           (persistent-2.8.1:Database.Persist.Sql.Migration.migrate
              defs_a2iz0)
             ((((((((((EntityDef (HaskellName (packPTH "User")))
                        (DBName (packPTH "user")))
                       (((((((FieldDef (HaskellName (packPTH "Id")))
                               (DBName (packPTH "id")))
                              ((FTTypeCon Nothing) (packPTH "UserId")))
                             SqlInt64)
                            [])
                           True)
                          ((ForeignRef (HaskellName (packPTH "User")))
                             ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                      [])
                     [((((((FieldDef (HaskellName (packPTH "username")))
                             (DBName (packPTH "username")))
                            ((FTTypeCon Nothing) (packPTH "Text")))
                           SqlString)
                          [])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "password")))
                             (DBName (packPTH "password")))
                            ((FTTypeCon Nothing) (packPTH "Text")))
                           SqlString)
                          [])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "email")))
                             (DBName (packPTH "email")))
                            ((FTTypeCon Nothing) (packPTH "Text")))
                           SqlString)
                          [])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "avatar")))
                             (DBName (packPTH "avatar")))
                            ((FTTypeCon Nothing) (packPTH "Text")))
                           SqlString)
                          [])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "firstName")))
                             (DBName (packPTH "first_name")))
                            ((FTTypeCon Nothing) (packPTH "Text")))
                           SqlString)
                          [packPTH "Maybe"])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "secondName")))
                             (DBName (packPTH "second_name")))
                            ((FTTypeCon Nothing) (packPTH "Text")))
                           SqlString)
                          [packPTH "Maybe"])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "birthDay")))
                             (DBName (packPTH "birth_day")))
                            ((FTTypeCon Nothing) (packPTH "UTCTime")))
                           SqlDayTime)
                          [packPTH "Maybe"])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "sex")))
                             (DBName (packPTH "sex")))
                            ((FTTypeCon Nothing) (packPTH "Int")))
                           SqlInt64)
                          [packPTH "Maybe"])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "createdTests")))
                             (DBName (packPTH "created_tests")))
                            (FTList ((FTTypeCon Nothing) (packPTH "ObjectId"))))
                           SqlString)
                          [])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "passedTests")))
                             (DBName (packPTH "passed_tests")))
                            (FTList ((FTTypeCon Nothing) (packPTH "TestResult"))))
                           SqlString)
                          [])
                         True)
                        (EmbedRef
                           ((EmbedEntityDef (HaskellName (packPTH "TestResult")))
                              [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing) Nothing,
                               ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                               ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                                 Nothing]))])
                    [(((UniqueDef (HaskellName (packPTH "Email")))
                         (DBName (packPTH "email")))
                        [(HaskellName (packPTH "email"), DBName (packPTH "email"))])
                       [],
                     (((UniqueDef (HaskellName (packPTH "Username")))
                         (DBName (packPTH "username")))
                        [(HaskellName (packPTH "username"), DBName (packPTH "username"))])
                       []])
                   [])
                  [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
                 (Data.Map.Internal.fromList []))
                False)
/home/nikita/Projects/labs/Databases/Course-Project/Server/src/Model/User.hs:(27,103)-(47,2): Splicing expression
    Language.Haskell.TH.Quote.quoteExp
      persistLowerCase
      "\n\
      \TestResult\n\
      \  testKey       Text\n\
      \  result        Text\n\
      \  passingDate   UTCTime\n\
      \  deriving      Eq Read Show Generic\n\
      \User\n\
      \  username      Text\n\
      \  password      Text\n\
      \  email         Text\n\
      \  avatar        Text\n\
      \  firstName     Text Maybe\n\
      \  secondName    Text Maybe\n\
      \  birthDay      UTCTime Maybe\n\
      \  sex           Int Maybe\n\
      \  createdTests  [ObjectId]\n\
      \  passedTests   [TestResult]\n\
      \  Email         email\n\
      \  Username      username\n\
      \  deriving      Eq Read Show Generic\n"
  ======>
    [(((((((((EntityDef (HaskellName (packPTH "TestResult")))
               (DBName (packPTH "test_result")))
              (((((((FieldDef (HaskellName (packPTH "Id")))
                      (DBName (packPTH "id")))
                     ((FTTypeCon Nothing) (packPTH "TestResultId")))
                    SqlInt64)
                   [])
                  True)
                 ((ForeignRef (HaskellName (packPTH "TestResult")))
                    ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
             [])
            [((((((FieldDef (HaskellName (packPTH "testKey")))
                    (DBName (packPTH "test_key")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for testKey")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "result")))
                    (DBName (packPTH "result")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for result")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "passingDate")))
                    (DBName (packPTH "passing_date")))
                   ((FTTypeCon Nothing) (packPTH "UTCTime")))
                  (SqlOther (packPTH "SqlType unset for passingDate")))
                 [])
                True)
               NoReference])
           [])
          [])
         [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
        (Data.Map.Internal.fromList []))
       False
       {entityFields = [((((((FieldDef (HaskellName (packPTH "testKey")))
                               (DBName (packPTH "test_key")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "result")))
                               (DBName (packPTH "result")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "passingDate")))
                               (DBName (packPTH "passing_date")))
                              ((FTTypeCon Nothing) (packPTH "UTCTime")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy UTCTime)))
                            [])
                           True)
                          NoReference],
        entityId = ((((((FieldDef (HaskellName (packPTH "Id")))
                          (DBName (packPTH "id")))
                         ((FTTypeCon Nothing) (packPTH "TestResultId")))
                        (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                           (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                       [])
                      True)
                     ((ForeignRef (HaskellName (packPTH "TestResult")))
                        ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))},
     (((((((((EntityDef (HaskellName (packPTH "User")))
               (DBName (packPTH "user")))
              (((((((FieldDef (HaskellName (packPTH "Id")))
                      (DBName (packPTH "id")))
                     ((FTTypeCon Nothing) (packPTH "UserId")))
                    SqlInt64)
                   [])
                  True)
                 ((ForeignRef (HaskellName (packPTH "User")))
                    ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
             [])
            [((((((FieldDef (HaskellName (packPTH "username")))
                    (DBName (packPTH "username")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for username")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "password")))
                    (DBName (packPTH "password")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for password")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "email")))
                    (DBName (packPTH "email")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for email")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "avatar")))
                    (DBName (packPTH "avatar")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for avatar")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "firstName")))
                    (DBName (packPTH "first_name")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for firstName")))
                 [packPTH "Maybe"])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "secondName")))
                    (DBName (packPTH "second_name")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for secondName")))
                 [packPTH "Maybe"])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "birthDay")))
                    (DBName (packPTH "birth_day")))
                   ((FTTypeCon Nothing) (packPTH "UTCTime")))
                  (SqlOther (packPTH "SqlType unset for birthDay")))
                 [packPTH "Maybe"])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "sex")))
                    (DBName (packPTH "sex")))
                   ((FTTypeCon Nothing) (packPTH "Int")))
                  (SqlOther (packPTH "SqlType unset for sex")))
                 [packPTH "Maybe"])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "createdTests")))
                    (DBName (packPTH "created_tests")))
                   (FTList ((FTTypeCon Nothing) (packPTH "ObjectId"))))
                  (SqlOther (packPTH "SqlType unset for createdTests")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "passedTests")))
                    (DBName (packPTH "passed_tests")))
                   (FTList ((FTTypeCon Nothing) (packPTH "TestResult"))))
                  (SqlOther (packPTH "SqlType unset for passedTests")))
                 [])
                True)
               (EmbedRef
                  ((EmbedEntityDef (HaskellName (packPTH "TestResult")))
                     [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing) Nothing,
                      ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                      ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                        Nothing]))])
           [(((UniqueDef (HaskellName (packPTH "Email")))
                (DBName (packPTH "email")))
               [(HaskellName (packPTH "email"), DBName (packPTH "email"))])
              [],
            (((UniqueDef (HaskellName (packPTH "Username")))
                (DBName (packPTH "username")))
               [(HaskellName (packPTH "username"), DBName (packPTH "username"))])
              []])
          [])
         [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
        (Data.Map.Internal.fromList []))
       False
       {entityFields = [((((((FieldDef (HaskellName (packPTH "username")))
                               (DBName (packPTH "username")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "password")))
                               (DBName (packPTH "password")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "email")))
                               (DBName (packPTH "email")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "avatar")))
                               (DBName (packPTH "avatar")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "firstName")))
                               (DBName (packPTH "first_name")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [packPTH "Maybe"])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "secondName")))
                               (DBName (packPTH "second_name")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [packPTH "Maybe"])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "birthDay")))
                               (DBName (packPTH "birth_day")))
                              ((FTTypeCon Nothing) (packPTH "UTCTime")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy UTCTime)))
                            [packPTH "Maybe"])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "sex")))
                               (DBName (packPTH "sex")))
                              ((FTTypeCon Nothing) (packPTH "Int")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Int)))
                            [packPTH "Maybe"])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "createdTests")))
                               (DBName (packPTH "created_tests")))
                              (FTList ((FTTypeCon Nothing) (packPTH "ObjectId"))))
                             SqlString)
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "passedTests")))
                               (DBName (packPTH "passed_tests")))
                              (FTList ((FTTypeCon Nothing) (packPTH "TestResult"))))
                             SqlString)
                            [])
                           True)
                          (EmbedRef
                             ((EmbedEntityDef (HaskellName (packPTH "TestResult")))
                                [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing) Nothing,
                                 ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                                 ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                                   Nothing]))],
        entityId = ((((((FieldDef (HaskellName (packPTH "Id")))
                          (DBName (packPTH "id")))
                         ((FTTypeCon Nothing) (packPTH "UserId")))
                        (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                           (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                       [])
                      True)
                     ((ForeignRef (HaskellName (packPTH "User")))
                        ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))}]
/home/nikita/Projects/labs/Databases/Course-Project/Server/src/Model/User.hs:(27,1)-(47,2): Splicing declarations
    share
      [mkPersist (mkPersistSettings (ConT ''MongoContext)),
       mkMigrate "migrateAll"]
      ([(((((((((EntityDef (HaskellName (packPTH "TestResult")))
                  (DBName (packPTH "test_result")))
                 (((((((FieldDef (HaskellName (packPTH "Id")))
                         (DBName (packPTH "id")))
                        ((FTTypeCon Nothing) (packPTH "TestResultId")))
                       SqlInt64)
                      [])
                     True)
                    ((ForeignRef (HaskellName (packPTH "TestResult")))
                       ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                [])
               [((((((FieldDef (HaskellName (packPTH "testKey")))
                       (DBName (packPTH "test_key")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for testKey")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "result")))
                       (DBName (packPTH "result")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for result")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "passingDate")))
                       (DBName (packPTH "passing_date")))
                      ((FTTypeCon Nothing) (packPTH "UTCTime")))
                     (SqlOther (packPTH "SqlType unset for passingDate")))
                    [])
                   True)
                  NoReference])
              [])
             [])
            [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
           (Data.Map.Internal.fromList []))
          False
          {entityFields = [((((((FieldDef (HaskellName (packPTH "testKey")))
                                  (DBName (packPTH "test_key")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "result")))
                                  (DBName (packPTH "result")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "passingDate")))
                                  (DBName (packPTH "passing_date")))
                                 ((FTTypeCon Nothing) (packPTH "UTCTime")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy UTCTime)))
                               [])
                              True)
                             NoReference],
           entityId = ((((((FieldDef (HaskellName (packPTH "Id")))
                             (DBName (packPTH "id")))
                            ((FTTypeCon Nothing) (packPTH "TestResultId")))
                           (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                              (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                          [])
                         True)
                        ((ForeignRef (HaskellName (packPTH "TestResult")))
                           ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))},
        (((((((((EntityDef (HaskellName (packPTH "User")))
                  (DBName (packPTH "user")))
                 (((((((FieldDef (HaskellName (packPTH "Id")))
                         (DBName (packPTH "id")))
                        ((FTTypeCon Nothing) (packPTH "UserId")))
                       SqlInt64)
                      [])
                     True)
                    ((ForeignRef (HaskellName (packPTH "User")))
                       ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                [])
               [((((((FieldDef (HaskellName (packPTH "username")))
                       (DBName (packPTH "username")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for username")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "password")))
                       (DBName (packPTH "password")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for password")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "email")))
                       (DBName (packPTH "email")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for email")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "avatar")))
                       (DBName (packPTH "avatar")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for avatar")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "firstName")))
                       (DBName (packPTH "first_name")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for firstName")))
                    [packPTH "Maybe"])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "secondName")))
                       (DBName (packPTH "second_name")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for secondName")))
                    [packPTH "Maybe"])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "birthDay")))
                       (DBName (packPTH "birth_day")))
                      ((FTTypeCon Nothing) (packPTH "UTCTime")))
                     (SqlOther (packPTH "SqlType unset for birthDay")))
                    [packPTH "Maybe"])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "sex")))
                       (DBName (packPTH "sex")))
                      ((FTTypeCon Nothing) (packPTH "Int")))
                     (SqlOther (packPTH "SqlType unset for sex")))
                    [packPTH "Maybe"])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "createdTests")))
                       (DBName (packPTH "created_tests")))
                      (FTList ((FTTypeCon Nothing) (packPTH "ObjectId"))))
                     (SqlOther (packPTH "SqlType unset for createdTests")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "passedTests")))
                       (DBName (packPTH "passed_tests")))
                      (FTList ((FTTypeCon Nothing) (packPTH "TestResult"))))
                     (SqlOther (packPTH "SqlType unset for passedTests")))
                    [])
                   True)
                  (EmbedRef
                     ((EmbedEntityDef (HaskellName (packPTH "TestResult")))
                        [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing) Nothing,
                         ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                         ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                           Nothing]))])
              [(((UniqueDef (HaskellName (packPTH "Email")))
                   (DBName (packPTH "email")))
                  [(HaskellName (packPTH "email"), DBName (packPTH "email"))])
                 [],
               (((UniqueDef (HaskellName (packPTH "Username")))
                   (DBName (packPTH "username")))
                  [(HaskellName (packPTH "username"), DBName (packPTH "username"))])
                 []])
             [])
            [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
           (Data.Map.Internal.fromList []))
          False
          {entityFields = [((((((FieldDef (HaskellName (packPTH "username")))
                                  (DBName (packPTH "username")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "password")))
                                  (DBName (packPTH "password")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "email")))
                                  (DBName (packPTH "email")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "avatar")))
                                  (DBName (packPTH "avatar")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "firstName")))
                                  (DBName (packPTH "first_name")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [packPTH "Maybe"])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "secondName")))
                                  (DBName (packPTH "second_name")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [packPTH "Maybe"])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "birthDay")))
                                  (DBName (packPTH "birth_day")))
                                 ((FTTypeCon Nothing) (packPTH "UTCTime")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy UTCTime)))
                               [packPTH "Maybe"])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "sex")))
                                  (DBName (packPTH "sex")))
                                 ((FTTypeCon Nothing) (packPTH "Int")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Int)))
                               [packPTH "Maybe"])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "createdTests")))
                                  (DBName (packPTH "created_tests")))
                                 (FTList ((FTTypeCon Nothing) (packPTH "ObjectId"))))
                                SqlString)
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "passedTests")))
                                  (DBName (packPTH "passed_tests")))
                                 (FTList ((FTTypeCon Nothing) (packPTH "TestResult"))))
                                SqlString)
                               [])
                              True)
                             (EmbedRef
                                ((EmbedEntityDef (HaskellName (packPTH "TestResult")))
                                   [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing) Nothing,
                                    ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                                    ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                                      Nothing]))],
           entityId = ((((((FieldDef (HaskellName (packPTH "Id")))
                             (DBName (packPTH "id")))
                            ((FTTypeCon Nothing) (packPTH "UserId")))
                           (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                              (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                          [])
                         True)
                        ((ForeignRef (HaskellName (packPTH "User")))
                           ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))}])
  ======>
    instance PersistField TestResult where
      toPersistValue
        = \ ent_a2kff
            -> (PersistMap
                  $ ((Prelude.zip
                        ((Prelude.map pack) ["testKey", "result", "passingDate"]))
                       ((Prelude.map toPersistValue) $ (toPersistFields ent_a2kff))))
      fromPersistValue
        = ((\ x_a2kfg
              -> let
                   columns_a2kfh
                     = unordered-containers-0.2.9.0:Data.HashMap.Strict.fromList x_a2kfg
                 in
                   (fromPersistValues
                      $ ((Prelude.map
                            (\ name_a2kfi
                               -> case
                                      (unordered-containers-0.2.9.0:Data.HashMap.Base.lookup
                                         (pack name_a2kfi))
                                        columns_a2kfh
                                  of
                                    Just v_a2kfj -> v_a2kfj
                                    Nothing -> PersistNull))
                           $ ["testKey", "result", "passingDate"])))
             <=< getPersistMap)
    instance persistent-2.8.1:Database.Persist.Sql.Class.PersistFieldSql TestResult where
      persistent-2.8.1:Database.Persist.Sql.Class.sqlType _ = SqlString
    instance PersistField User where
      toPersistValue
        = \ ent_a2kfk
            -> (PersistMap
                  $ ((Prelude.zip
                        ((Prelude.map pack)
                           ["username", "password", "email", "avatar", "firstName",
                            "secondName", "birthDay", "sex", "createdTests", "passedTests"]))
                       ((Prelude.map toPersistValue) $ (toPersistFields ent_a2kfk))))
      fromPersistValue
        = ((\ x_a2kfl
              -> let
                   columns_a2kfm
                     = unordered-containers-0.2.9.0:Data.HashMap.Strict.fromList x_a2kfl
                 in
                   (fromPersistValues
                      $ ((Prelude.map
                            (\ name_a2kfn
                               -> case
                                      (unordered-containers-0.2.9.0:Data.HashMap.Base.lookup
                                         (pack name_a2kfn))
                                        columns_a2kfm
                                  of
                                    Just v_a2kfo -> v_a2kfo
                                    Nothing -> PersistNull))
                           $ ["username", "password", "email", "avatar", "firstName",
                              "secondName", "birthDay", "sex", "createdTests", "passedTests"])))
             <=< getPersistMap)
    instance persistent-2.8.1:Database.Persist.Sql.Class.PersistFieldSql User where
      persistent-2.8.1:Database.Persist.Sql.Class.sqlType _ = SqlString
    data TestResult
      = TestResult {testResultTestKey :: !Text,
                    testResultResult :: !Text,
                    testResultPassingDate :: !UTCTime}
      deriving (Eq, Read, Show, Generic)
    type TestResultId = Key TestResult
    instance PersistEntity TestResult where
      type PersistEntityBackend TestResult = MongoContext
      data Unique TestResult
      newtype Key TestResult
        = TestResultKey {unTestResultKey :: (BackendKey MongoContext)}
        deriving (Show,
                  Read,
                  Eq,
                  Ord,
                  path-pieces-0.2.1:Web.PathPieces.PathPiece,
                  http-api-data-0.3.7.2:Web.Internal.HttpApiData.ToHttpApiData,
                  http-api-data-0.3.7.2:Web.Internal.HttpApiData.FromHttpApiData,
                  PersistField,
                  persistent-2.8.1:Database.Persist.Sql.Class.PersistFieldSql,
                  Aeson.ToJSON,
                  Aeson.FromJSON)
      data EntityField TestResult typ
        = typ ~ Key TestResult => TestResultId |
          typ ~ Text => TestResultTestKey |
          typ ~ Text => TestResultResult |
          typ ~ UTCTime => TestResultPassingDate
      keyToValues
        = ((ghc-prim-0.5.1.1:GHC.Types.: [])
             . (toPersistValue . unTestResultKey))
      keyFromValues
        = ((fmap TestResultKey)
             . (fromPersistValue . Database.Persist.TH.headNote))
      entityDef _
        = (((((((((EntityDef (HaskellName (packPTH "TestResult")))
                    (DBName (packPTH "test_result")))
                   (((((((FieldDef (HaskellName (packPTH "Id")))
                           (DBName (packPTH "id")))
                          ((FTTypeCon Nothing) (packPTH "TestResultId")))
                         SqlInt64)
                        [])
                       True)
                      ((ForeignRef (HaskellName (packPTH "TestResult")))
                         ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                  [])
                 [((((((FieldDef (HaskellName (packPTH "testKey")))
                         (DBName (packPTH "test_key")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "result")))
                         (DBName (packPTH "result")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "passingDate")))
                         (DBName (packPTH "passing_date")))
                        ((FTTypeCon Nothing) (packPTH "UTCTime")))
                       SqlDayTime)
                      [])
                     True)
                    NoReference])
                [])
               [])
              [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
             (Data.Map.Internal.fromList []))
            False
      toPersistFields (TestResult x_a2kfp x_a2kfq x_a2kfr)
        = [SomePersistField x_a2kfp, SomePersistField x_a2kfq,
           SomePersistField x_a2kfr]
      fromPersistValues [x1_a2kft, x2_a2kfu, x3_a2kfv]
        = TestResult
            <$>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "testKey")))
                 . fromPersistValue)
                x1_a2kft
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "result")))
                 . fromPersistValue)
                x2_a2kfu
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "passingDate")))
                 . fromPersistValue)
                x3_a2kfv
      fromPersistValues x_a2kfs
        = (Left
             $ ((mappend (packPTH "TestResult: fromPersistValues failed on: "))
                  (pack $ (show x_a2kfs))))
      persistUniqueToFieldNames _
        = error "Degenerate case, should never happen"
      persistUniqueToValues _
        = error "Degenerate case, should never happen"
      persistUniqueKeys
        (TestResult _testKey_a2kfw _result_a2kfx _passingDate_a2kfy)
        = []
      persistFieldDef TestResultId
        = ((((((FieldDef (HaskellName (packPTH "Id")))
                 (DBName (packPTH "id")))
                ((FTTypeCon Nothing) (packPTH "TestResultId")))
               SqlInt64)
              [])
             True)
            ((ForeignRef (HaskellName (packPTH "TestResult")))
               ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))
      persistFieldDef TestResultTestKey
        = ((((((FieldDef (HaskellName (packPTH "testKey")))
                 (DBName (packPTH "test_key")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef TestResultResult
        = ((((((FieldDef (HaskellName (packPTH "result")))
                 (DBName (packPTH "result")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef TestResultPassingDate
        = ((((((FieldDef (HaskellName (packPTH "passingDate")))
                 (DBName (packPTH "passing_date")))
                ((FTTypeCon Nothing) (packPTH "UTCTime")))
               SqlDayTime)
              [])
             True)
            NoReference
      persistIdField = TestResultId
      fieldLens TestResultId
        = (lensPTH entityKey)
            (\ Entity _ value_a2kfz key_a2kfA
               -> (Entity key_a2kfA) value_a2kfz)
      fieldLens TestResultTestKey
        = (lensPTH (testResultTestKey . entityVal))
            (\ Entity key_a2kfB value_a2kfC x_a2kfD
               -> (Entity key_a2kfB) value_a2kfC {testResultTestKey = x_a2kfD})
      fieldLens TestResultResult
        = (lensPTH (testResultResult . entityVal))
            (\ Entity key_a2kfB value_a2kfC x_a2kfD
               -> (Entity key_a2kfB) value_a2kfC {testResultResult = x_a2kfD})
      fieldLens TestResultPassingDate
        = (lensPTH (testResultPassingDate . entityVal))
            (\ Entity key_a2kfB value_a2kfC x_a2kfD
               -> (Entity key_a2kfB)
                    value_a2kfC {testResultPassingDate = x_a2kfD})
    instance ToBackendKey MongoContext TestResult where
      toBackendKey = unTestResultKey
      fromBackendKey = TestResultKey
    data User
      = User {userUsername :: !Text,
              userPassword :: !Text,
              userEmail :: !Text,
              userAvatar :: !Text,
              userFirstName :: !(Maybe Text),
              userSecondName :: !(Maybe Text),
              userBirthDay :: !(Maybe UTCTime),
              userSex :: !(Maybe Int),
              userCreatedTests :: ![ObjectId],
              userPassedTests :: ![TestResult]}
      deriving (Eq, Read, Show, Generic)
    type UserId = Key User
    instance PersistEntity User where
      type PersistEntityBackend User = MongoContext
      data Unique User = Email Text | Username Text
      newtype Key User
        = UserKey {unUserKey :: (BackendKey MongoContext)}
        deriving (Show,
                  Read,
                  Eq,
                  Ord,
                  path-pieces-0.2.1:Web.PathPieces.PathPiece,
                  http-api-data-0.3.7.2:Web.Internal.HttpApiData.ToHttpApiData,
                  http-api-data-0.3.7.2:Web.Internal.HttpApiData.FromHttpApiData,
                  PersistField,
                  persistent-2.8.1:Database.Persist.Sql.Class.PersistFieldSql,
                  Aeson.ToJSON,
                  Aeson.FromJSON)
      data EntityField User typ
        = typ ~ Key User => UserId |
          typ ~ Text => UserUsername |
          typ ~ Text => UserPassword |
          typ ~ Text => UserEmail |
          typ ~ Text => UserAvatar |
          typ ~ Maybe Text => UserFirstName |
          typ ~ Maybe Text => UserSecondName |
          typ ~ Maybe UTCTime => UserBirthDay |
          typ ~ Maybe Int => UserSex |
          typ ~ [ObjectId] => UserCreatedTests |
          typ ~ [TestResult] => UserPassedTests
      keyToValues
        = ((ghc-prim-0.5.1.1:GHC.Types.: [])
             . (toPersistValue . unUserKey))
      keyFromValues
        = ((fmap UserKey)
             . (fromPersistValue . Database.Persist.TH.headNote))
      entityDef _
        = (((((((((EntityDef (HaskellName (packPTH "User")))
                    (DBName (packPTH "user")))
                   (((((((FieldDef (HaskellName (packPTH "Id")))
                           (DBName (packPTH "id")))
                          ((FTTypeCon Nothing) (packPTH "UserId")))
                         SqlInt64)
                        [])
                       True)
                      ((ForeignRef (HaskellName (packPTH "User")))
                         ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                  [])
                 [((((((FieldDef (HaskellName (packPTH "username")))
                         (DBName (packPTH "username")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "password")))
                         (DBName (packPTH "password")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "email")))
                         (DBName (packPTH "email")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "avatar")))
                         (DBName (packPTH "avatar")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "firstName")))
                         (DBName (packPTH "first_name")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [packPTH "Maybe"])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "secondName")))
                         (DBName (packPTH "second_name")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [packPTH "Maybe"])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "birthDay")))
                         (DBName (packPTH "birth_day")))
                        ((FTTypeCon Nothing) (packPTH "UTCTime")))
                       SqlDayTime)
                      [packPTH "Maybe"])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "sex")))
                         (DBName (packPTH "sex")))
                        ((FTTypeCon Nothing) (packPTH "Int")))
                       SqlInt64)
                      [packPTH "Maybe"])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "createdTests")))
                         (DBName (packPTH "created_tests")))
                        (FTList ((FTTypeCon Nothing) (packPTH "ObjectId"))))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "passedTests")))
                         (DBName (packPTH "passed_tests")))
                        (FTList ((FTTypeCon Nothing) (packPTH "TestResult"))))
                       SqlString)
                      [])
                     True)
                    (EmbedRef
                       ((EmbedEntityDef (HaskellName (packPTH "TestResult")))
                          [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing) Nothing,
                           ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                           ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                             Nothing]))])
                [(((UniqueDef (HaskellName (packPTH "Email")))
                     (DBName (packPTH "email")))
                    [(HaskellName (packPTH "email"), DBName (packPTH "email"))])
                   [],
                 (((UniqueDef (HaskellName (packPTH "Username")))
                     (DBName (packPTH "username")))
                    [(HaskellName (packPTH "username"), DBName (packPTH "username"))])
                   []])
               [])
              [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
             (Data.Map.Internal.fromList []))
            False
      toPersistFields
        (User x_a2kfE
              x_a2kfF
              x_a2kfG
              x_a2kfH
              x_a2kfI
              x_a2kfJ
              x_a2kfK
              x_a2kfL
              x_a2kfM
              x_a2kfN)
        = [SomePersistField x_a2kfE, SomePersistField x_a2kfF,
           SomePersistField x_a2kfG, SomePersistField x_a2kfH,
           SomePersistField x_a2kfI, SomePersistField x_a2kfJ,
           SomePersistField x_a2kfK, SomePersistField x_a2kfL,
           SomePersistField x_a2kfM, SomePersistField x_a2kfN]
      fromPersistValues
        [x1_a2kfP,
         x2_a2kfQ,
         x3_a2kfR,
         x4_a2kfS,
         x5_a2kfT,
         x6_a2kfU,
         x7_a2kfV,
         x8_a2kfW,
         x9_a2kfX,
         x10_a2kfY]
        = User
            <$>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "username")))
                 . fromPersistValue)
                x1_a2kfP
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "password")))
                 . fromPersistValue)
                x2_a2kfQ
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "email")))
                 . fromPersistValue)
                x3_a2kfR
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "avatar")))
                 . fromPersistValue)
                x4_a2kfS
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "firstName")))
                 . fromPersistValue)
                x5_a2kfT
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "secondName")))
                 . fromPersistValue)
                x6_a2kfU
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "birthDay")))
                 . fromPersistValue)
                x7_a2kfV
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "sex")))
                 . fromPersistValue)
                x8_a2kfW
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "createdTests")))
                 . fromPersistValue)
                x9_a2kfX
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "passedTests")))
                 . fromPersistValue)
                x10_a2kfY
      fromPersistValues x_a2kfO
        = (Left
             $ ((mappend (packPTH "User: fromPersistValues failed on: "))
                  (pack $ (show x_a2kfO))))
      persistUniqueToFieldNames Email {}
        = [(HaskellName (packPTH "email"), DBName (packPTH "email"))]
      persistUniqueToFieldNames Username {}
        = [(HaskellName (packPTH "username"), DBName (packPTH "username"))]
      persistUniqueToValues (Email x_a2kfZ) = [toPersistValue x_a2kfZ]
      persistUniqueToValues (Username x_a2kg0) = [toPersistValue x_a2kg0]
      persistUniqueKeys
        (User _username_a2kg1
              _password_a2kg2
              _email_a2kg3
              _avatar_a2kg4
              _firstName_a2kg5
              _secondName_a2kg6
              _birthDay_a2kg7
              _sex_a2kg8
              _createdTests_a2kg9
              _passedTests_a2kga)
        = [Email _email_a2kg3, Username _username_a2kg1]
      persistFieldDef UserId
        = ((((((FieldDef (HaskellName (packPTH "Id")))
                 (DBName (packPTH "id")))
                ((FTTypeCon Nothing) (packPTH "UserId")))
               SqlInt64)
              [])
             True)
            ((ForeignRef (HaskellName (packPTH "User")))
               ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))
      persistFieldDef UserUsername
        = ((((((FieldDef (HaskellName (packPTH "username")))
                 (DBName (packPTH "username")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef UserPassword
        = ((((((FieldDef (HaskellName (packPTH "password")))
                 (DBName (packPTH "password")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef UserEmail
        = ((((((FieldDef (HaskellName (packPTH "email")))
                 (DBName (packPTH "email")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef UserAvatar
        = ((((((FieldDef (HaskellName (packPTH "avatar")))
                 (DBName (packPTH "avatar")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef UserFirstName
        = ((((((FieldDef (HaskellName (packPTH "firstName")))
                 (DBName (packPTH "first_name")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [packPTH "Maybe"])
             True)
            NoReference
      persistFieldDef UserSecondName
        = ((((((FieldDef (HaskellName (packPTH "secondName")))
                 (DBName (packPTH "second_name")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [packPTH "Maybe"])
             True)
            NoReference
      persistFieldDef UserBirthDay
        = ((((((FieldDef (HaskellName (packPTH "birthDay")))
                 (DBName (packPTH "birth_day")))
                ((FTTypeCon Nothing) (packPTH "UTCTime")))
               SqlDayTime)
              [packPTH "Maybe"])
             True)
            NoReference
      persistFieldDef UserSex
        = ((((((FieldDef (HaskellName (packPTH "sex")))
                 (DBName (packPTH "sex")))
                ((FTTypeCon Nothing) (packPTH "Int")))
               SqlInt64)
              [packPTH "Maybe"])
             True)
            NoReference
      persistFieldDef UserCreatedTests
        = ((((((FieldDef (HaskellName (packPTH "createdTests")))
                 (DBName (packPTH "created_tests")))
                (FTList ((FTTypeCon Nothing) (packPTH "ObjectId"))))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef UserPassedTests
        = ((((((FieldDef (HaskellName (packPTH "passedTests")))
                 (DBName (packPTH "passed_tests")))
                (FTList ((FTTypeCon Nothing) (packPTH "TestResult"))))
               SqlString)
              [])
             True)
            (EmbedRef
               ((EmbedEntityDef (HaskellName (packPTH "TestResult")))
                  [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing) Nothing,
                   ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                   ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                     Nothing]))
      persistIdField = UserId
      fieldLens UserId
        = (lensPTH entityKey)
            (\ Entity _ value_a2kgb key_a2kgc
               -> (Entity key_a2kgc) value_a2kgb)
      fieldLens UserUsername
        = (lensPTH (userUsername . entityVal))
            (\ Entity key_a2kgd value_a2kge x_a2kgf
               -> (Entity key_a2kgd) value_a2kge {userUsername = x_a2kgf})
      fieldLens UserPassword
        = (lensPTH (userPassword . entityVal))
            (\ Entity key_a2kgd value_a2kge x_a2kgf
               -> (Entity key_a2kgd) value_a2kge {userPassword = x_a2kgf})
      fieldLens UserEmail
        = (lensPTH (userEmail . entityVal))
            (\ Entity key_a2kgd value_a2kge x_a2kgf
               -> (Entity key_a2kgd) value_a2kge {userEmail = x_a2kgf})
      fieldLens UserAvatar
        = (lensPTH (userAvatar . entityVal))
            (\ Entity key_a2kgd value_a2kge x_a2kgf
               -> (Entity key_a2kgd) value_a2kge {userAvatar = x_a2kgf})
      fieldLens UserFirstName
        = (lensPTH (userFirstName . entityVal))
            (\ Entity key_a2kgd value_a2kge x_a2kgf
               -> (Entity key_a2kgd) value_a2kge {userFirstName = x_a2kgf})
      fieldLens UserSecondName
        = (lensPTH (userSecondName . entityVal))
            (\ Entity key_a2kgd value_a2kge x_a2kgf
               -> (Entity key_a2kgd) value_a2kge {userSecondName = x_a2kgf})
      fieldLens UserBirthDay
        = (lensPTH (userBirthDay . entityVal))
            (\ Entity key_a2kgd value_a2kge x_a2kgf
               -> (Entity key_a2kgd) value_a2kge {userBirthDay = x_a2kgf})
      fieldLens UserSex
        = (lensPTH (userSex . entityVal))
            (\ Entity key_a2kgd value_a2kge x_a2kgf
               -> (Entity key_a2kgd) value_a2kge {userSex = x_a2kgf})
      fieldLens UserCreatedTests
        = (lensPTH (userCreatedTests . entityVal))
            (\ Entity key_a2kgd value_a2kge x_a2kgf
               -> (Entity key_a2kgd) value_a2kge {userCreatedTests = x_a2kgf})
      fieldLens UserPassedTests
        = (lensPTH (userPassedTests . entityVal))
            (\ Entity key_a2kgd value_a2kge x_a2kgf
               -> (Entity key_a2kgd) value_a2kge {userPassedTests = x_a2kgf})
    instance ToBackendKey MongoContext User where
      toBackendKey = unUserKey
      fromBackendKey = UserKey
    migrateAll :: persistent-2.8.1:Database.Persist.Sql.Types.Migration
    migrateAll
      = do let defs_a2kgg
                 = [(((((((((EntityDef (HaskellName (packPTH "TestResult")))
                              (DBName (packPTH "test_result")))
                             (((((((FieldDef (HaskellName (packPTH "Id")))
                                     (DBName (packPTH "id")))
                                    ((FTTypeCon Nothing) (packPTH "TestResultId")))
                                   SqlInt64)
                                  [])
                                 True)
                                ((ForeignRef (HaskellName (packPTH "TestResult")))
                                   ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                            [])
                           [((((((FieldDef (HaskellName (packPTH "testKey")))
                                   (DBName (packPTH "test_key")))
                                  ((FTTypeCon Nothing) (packPTH "Text")))
                                 SqlString)
                                [])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "result")))
                                   (DBName (packPTH "result")))
                                  ((FTTypeCon Nothing) (packPTH "Text")))
                                 SqlString)
                                [])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "passingDate")))
                                   (DBName (packPTH "passing_date")))
                                  ((FTTypeCon Nothing) (packPTH "UTCTime")))
                                 SqlDayTime)
                                [])
                               True)
                              NoReference])
                          [])
                         [])
                        [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
                       (Data.Map.Internal.fromList []))
                      False,
                    (((((((((EntityDef (HaskellName (packPTH "User")))
                              (DBName (packPTH "user")))
                             (((((((FieldDef (HaskellName (packPTH "Id")))
                                     (DBName (packPTH "id")))
                                    ((FTTypeCon Nothing) (packPTH "UserId")))
                                   SqlInt64)
                                  [])
                                 True)
                                ((ForeignRef (HaskellName (packPTH "User")))
                                   ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                            [])
                           [((((((FieldDef (HaskellName (packPTH "username")))
                                   (DBName (packPTH "username")))
                                  ((FTTypeCon Nothing) (packPTH "Text")))
                                 SqlString)
                                [])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "password")))
                                   (DBName (packPTH "password")))
                                  ((FTTypeCon Nothing) (packPTH "Text")))
                                 SqlString)
                                [])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "email")))
                                   (DBName (packPTH "email")))
                                  ((FTTypeCon Nothing) (packPTH "Text")))
                                 SqlString)
                                [])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "avatar")))
                                   (DBName (packPTH "avatar")))
                                  ((FTTypeCon Nothing) (packPTH "Text")))
                                 SqlString)
                                [])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "firstName")))
                                   (DBName (packPTH "first_name")))
                                  ((FTTypeCon Nothing) (packPTH "Text")))
                                 SqlString)
                                [packPTH "Maybe"])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "secondName")))
                                   (DBName (packPTH "second_name")))
                                  ((FTTypeCon Nothing) (packPTH "Text")))
                                 SqlString)
                                [packPTH "Maybe"])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "birthDay")))
                                   (DBName (packPTH "birth_day")))
                                  ((FTTypeCon Nothing) (packPTH "UTCTime")))
                                 SqlDayTime)
                                [packPTH "Maybe"])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "sex")))
                                   (DBName (packPTH "sex")))
                                  ((FTTypeCon Nothing) (packPTH "Int")))
                                 SqlInt64)
                                [packPTH "Maybe"])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "createdTests")))
                                   (DBName (packPTH "created_tests")))
                                  (FTList ((FTTypeCon Nothing) (packPTH "ObjectId"))))
                                 SqlString)
                                [])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "passedTests")))
                                   (DBName (packPTH "passed_tests")))
                                  (FTList ((FTTypeCon Nothing) (packPTH "TestResult"))))
                                 SqlString)
                                [])
                               True)
                              (EmbedRef
                                 ((EmbedEntityDef (HaskellName (packPTH "TestResult")))
                                    [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing)
                                       Nothing,
                                     ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                                     ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                                       Nothing]))])
                          [(((UniqueDef (HaskellName (packPTH "Email")))
                               (DBName (packPTH "email")))
                              [(HaskellName (packPTH "email"), DBName (packPTH "email"))])
                             [],
                           (((UniqueDef (HaskellName (packPTH "Username")))
                               (DBName (packPTH "username")))
                              [(HaskellName (packPTH "username"), DBName (packPTH "username"))])
                             []])
                         [])
                        [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
                       (Data.Map.Internal.fromList []))
                      False]
           (persistent-2.8.1:Database.Persist.Sql.Migration.migrate
              defs_a2kgg)
             ((((((((((EntityDef (HaskellName (packPTH "TestResult")))
                        (DBName (packPTH "test_result")))
                       (((((((FieldDef (HaskellName (packPTH "Id")))
                               (DBName (packPTH "id")))
                              ((FTTypeCon Nothing) (packPTH "TestResultId")))
                             SqlInt64)
                            [])
                           True)
                          ((ForeignRef (HaskellName (packPTH "TestResult")))
                             ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                      [])
                     [((((((FieldDef (HaskellName (packPTH "testKey")))
                             (DBName (packPTH "test_key")))
                            ((FTTypeCon Nothing) (packPTH "Text")))
                           SqlString)
                          [])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "result")))
                             (DBName (packPTH "result")))
                            ((FTTypeCon Nothing) (packPTH "Text")))
                           SqlString)
                          [])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "passingDate")))
                             (DBName (packPTH "passing_date")))
                            ((FTTypeCon Nothing) (packPTH "UTCTime")))
                           SqlDayTime)
                          [])
                         True)
                        NoReference])
                    [])
                   [])
                  [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
                 (Data.Map.Internal.fromList []))
                False)
           (persistent-2.8.1:Database.Persist.Sql.Migration.migrate
              defs_a2kgg)
             ((((((((((EntityDef (HaskellName (packPTH "User")))
                        (DBName (packPTH "user")))
                       (((((((FieldDef (HaskellName (packPTH "Id")))
                               (DBName (packPTH "id")))
                              ((FTTypeCon Nothing) (packPTH "UserId")))
                             SqlInt64)
                            [])
                           True)
                          ((ForeignRef (HaskellName (packPTH "User")))
                             ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                      [])
                     [((((((FieldDef (HaskellName (packPTH "username")))
                             (DBName (packPTH "username")))
                            ((FTTypeCon Nothing) (packPTH "Text")))
                           SqlString)
                          [])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "password")))
                             (DBName (packPTH "password")))
                            ((FTTypeCon Nothing) (packPTH "Text")))
                           SqlString)
                          [])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "email")))
                             (DBName (packPTH "email")))
                            ((FTTypeCon Nothing) (packPTH "Text")))
                           SqlString)
                          [])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "avatar")))
                             (DBName (packPTH "avatar")))
                            ((FTTypeCon Nothing) (packPTH "Text")))
                           SqlString)
                          [])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "firstName")))
                             (DBName (packPTH "first_name")))
                            ((FTTypeCon Nothing) (packPTH "Text")))
                           SqlString)
                          [packPTH "Maybe"])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "secondName")))
                             (DBName (packPTH "second_name")))
                            ((FTTypeCon Nothing) (packPTH "Text")))
                           SqlString)
                          [packPTH "Maybe"])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "birthDay")))
                             (DBName (packPTH "birth_day")))
                            ((FTTypeCon Nothing) (packPTH "UTCTime")))
                           SqlDayTime)
                          [packPTH "Maybe"])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "sex")))
                             (DBName (packPTH "sex")))
                            ((FTTypeCon Nothing) (packPTH "Int")))
                           SqlInt64)
                          [packPTH "Maybe"])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "createdTests")))
                             (DBName (packPTH "created_tests")))
                            (FTList ((FTTypeCon Nothing) (packPTH "ObjectId"))))
                           SqlString)
                          [])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "passedTests")))
                             (DBName (packPTH "passed_tests")))
                            (FTList ((FTTypeCon Nothing) (packPTH "TestResult"))))
                           SqlString)
                          [])
                         True)
                        (EmbedRef
                           ((EmbedEntityDef (HaskellName (packPTH "TestResult")))
                              [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing) Nothing,
                               ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                               ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                                 Nothing]))])
                    [(((UniqueDef (HaskellName (packPTH "Email")))
                         (DBName (packPTH "email")))
                        [(HaskellName (packPTH "email"), DBName (packPTH "email"))])
                       [],
                     (((UniqueDef (HaskellName (packPTH "Username")))
                         (DBName (packPTH "username")))
                        [(HaskellName (packPTH "username"), DBName (packPTH "username"))])
                       []])
                   [])
                  [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
                 (Data.Map.Internal.fromList []))
                False)
/home/nikita/Projects/labs/Databases/Course-Project/Server/src/Model/User.hs:(27,103)-(47,2): Splicing expression
    Language.Haskell.TH.Quote.quoteExp
      persistLowerCase
      "\n\
      \TestResult\n\
      \  testKey       Text\n\
      \  result        Text\n\
      \  passingDate   UTCTime\n\
      \  deriving      Eq Read Show Generic\n\
      \User\n\
      \  username      Text\n\
      \  password      Text\n\
      \  email         Text\n\
      \  avatar        Text\n\
      \  firstName     Text Maybe\n\
      \  secondName    Text Maybe\n\
      \  birthDay      UTCTime Maybe\n\
      \  sex           Int Maybe\n\
      \  createdTests  [ObjectId]\n\
      \  passedTests   [TestResult]\n\
      \  Email         email\n\
      \  Username      username\n\
      \  deriving      Eq Read Show Generic\n"
  ======>
    [(((((((((EntityDef (HaskellName (packPTH "TestResult")))
               (DBName (packPTH "test_result")))
              (((((((FieldDef (HaskellName (packPTH "Id")))
                      (DBName (packPTH "id")))
                     ((FTTypeCon Nothing) (packPTH "TestResultId")))
                    SqlInt64)
                   [])
                  True)
                 ((ForeignRef (HaskellName (packPTH "TestResult")))
                    ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
             [])
            [((((((FieldDef (HaskellName (packPTH "testKey")))
                    (DBName (packPTH "test_key")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for testKey")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "result")))
                    (DBName (packPTH "result")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for result")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "passingDate")))
                    (DBName (packPTH "passing_date")))
                   ((FTTypeCon Nothing) (packPTH "UTCTime")))
                  (SqlOther (packPTH "SqlType unset for passingDate")))
                 [])
                True)
               NoReference])
           [])
          [])
         [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
        (Data.Map.Internal.fromList []))
       False
       {entityFields = [((((((FieldDef (HaskellName (packPTH "testKey")))
                               (DBName (packPTH "test_key")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "result")))
                               (DBName (packPTH "result")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "passingDate")))
                               (DBName (packPTH "passing_date")))
                              ((FTTypeCon Nothing) (packPTH "UTCTime")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy UTCTime)))
                            [])
                           True)
                          NoReference],
        entityId = ((((((FieldDef (HaskellName (packPTH "Id")))
                          (DBName (packPTH "id")))
                         ((FTTypeCon Nothing) (packPTH "TestResultId")))
                        (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                           (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                       [])
                      True)
                     ((ForeignRef (HaskellName (packPTH "TestResult")))
                        ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))},
     (((((((((EntityDef (HaskellName (packPTH "User")))
               (DBName (packPTH "user")))
              (((((((FieldDef (HaskellName (packPTH "Id")))
                      (DBName (packPTH "id")))
                     ((FTTypeCon Nothing) (packPTH "UserId")))
                    SqlInt64)
                   [])
                  True)
                 ((ForeignRef (HaskellName (packPTH "User")))
                    ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
             [])
            [((((((FieldDef (HaskellName (packPTH "username")))
                    (DBName (packPTH "username")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for username")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "password")))
                    (DBName (packPTH "password")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for password")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "email")))
                    (DBName (packPTH "email")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for email")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "avatar")))
                    (DBName (packPTH "avatar")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for avatar")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "firstName")))
                    (DBName (packPTH "first_name")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for firstName")))
                 [packPTH "Maybe"])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "secondName")))
                    (DBName (packPTH "second_name")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for secondName")))
                 [packPTH "Maybe"])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "birthDay")))
                    (DBName (packPTH "birth_day")))
                   ((FTTypeCon Nothing) (packPTH "UTCTime")))
                  (SqlOther (packPTH "SqlType unset for birthDay")))
                 [packPTH "Maybe"])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "sex")))
                    (DBName (packPTH "sex")))
                   ((FTTypeCon Nothing) (packPTH "Int")))
                  (SqlOther (packPTH "SqlType unset for sex")))
                 [packPTH "Maybe"])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "createdTests")))
                    (DBName (packPTH "created_tests")))
                   (FTList ((FTTypeCon Nothing) (packPTH "ObjectId"))))
                  (SqlOther (packPTH "SqlType unset for createdTests")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "passedTests")))
                    (DBName (packPTH "passed_tests")))
                   (FTList ((FTTypeCon Nothing) (packPTH "TestResult"))))
                  (SqlOther (packPTH "SqlType unset for passedTests")))
                 [])
                True)
               (EmbedRef
                  ((EmbedEntityDef (HaskellName (packPTH "TestResult")))
                     [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing) Nothing,
                      ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                      ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                        Nothing]))])
           [(((UniqueDef (HaskellName (packPTH "Email")))
                (DBName (packPTH "email")))
               [(HaskellName (packPTH "email"), DBName (packPTH "email"))])
              [],
            (((UniqueDef (HaskellName (packPTH "Username")))
                (DBName (packPTH "username")))
               [(HaskellName (packPTH "username"), DBName (packPTH "username"))])
              []])
          [])
         [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
        (Data.Map.Internal.fromList []))
       False
       {entityFields = [((((((FieldDef (HaskellName (packPTH "username")))
                               (DBName (packPTH "username")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "password")))
                               (DBName (packPTH "password")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "email")))
                               (DBName (packPTH "email")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "avatar")))
                               (DBName (packPTH "avatar")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "firstName")))
                               (DBName (packPTH "first_name")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [packPTH "Maybe"])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "secondName")))
                               (DBName (packPTH "second_name")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [packPTH "Maybe"])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "birthDay")))
                               (DBName (packPTH "birth_day")))
                              ((FTTypeCon Nothing) (packPTH "UTCTime")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy UTCTime)))
                            [packPTH "Maybe"])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "sex")))
                               (DBName (packPTH "sex")))
                              ((FTTypeCon Nothing) (packPTH "Int")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Int)))
                            [packPTH "Maybe"])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "createdTests")))
                               (DBName (packPTH "created_tests")))
                              (FTList ((FTTypeCon Nothing) (packPTH "ObjectId"))))
                             SqlString)
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "passedTests")))
                               (DBName (packPTH "passed_tests")))
                              (FTList ((FTTypeCon Nothing) (packPTH "TestResult"))))
                             SqlString)
                            [])
                           True)
                          (EmbedRef
                             ((EmbedEntityDef (HaskellName (packPTH "TestResult")))
                                [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing) Nothing,
                                 ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                                 ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                                   Nothing]))],
        entityId = ((((((FieldDef (HaskellName (packPTH "Id")))
                          (DBName (packPTH "id")))
                         ((FTTypeCon Nothing) (packPTH "UserId")))
                        (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                           (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                       [])
                      True)
                     ((ForeignRef (HaskellName (packPTH "User")))
                        ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))}]
/home/nikita/Projects/labs/Databases/Course-Project/Server/src/Model/User.hs:(27,1)-(47,2): Splicing declarations
    share
      [mkPersist (mkPersistSettings (ConT ''MongoContext)),
       mkMigrate "migrateAll"]
      ([(((((((((EntityDef (HaskellName (packPTH "TestResult")))
                  (DBName (packPTH "test_result")))
                 (((((((FieldDef (HaskellName (packPTH "Id")))
                         (DBName (packPTH "id")))
                        ((FTTypeCon Nothing) (packPTH "TestResultId")))
                       SqlInt64)
                      [])
                     True)
                    ((ForeignRef (HaskellName (packPTH "TestResult")))
                       ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                [])
               [((((((FieldDef (HaskellName (packPTH "testKey")))
                       (DBName (packPTH "test_key")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for testKey")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "result")))
                       (DBName (packPTH "result")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for result")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "passingDate")))
                       (DBName (packPTH "passing_date")))
                      ((FTTypeCon Nothing) (packPTH "UTCTime")))
                     (SqlOther (packPTH "SqlType unset for passingDate")))
                    [])
                   True)
                  NoReference])
              [])
             [])
            [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
           (Data.Map.Internal.fromList []))
          False
          {entityFields = [((((((FieldDef (HaskellName (packPTH "testKey")))
                                  (DBName (packPTH "test_key")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "result")))
                                  (DBName (packPTH "result")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "passingDate")))
                                  (DBName (packPTH "passing_date")))
                                 ((FTTypeCon Nothing) (packPTH "UTCTime")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy UTCTime)))
                               [])
                              True)
                             NoReference],
           entityId = ((((((FieldDef (HaskellName (packPTH "Id")))
                             (DBName (packPTH "id")))
                            ((FTTypeCon Nothing) (packPTH "TestResultId")))
                           (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                              (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                          [])
                         True)
                        ((ForeignRef (HaskellName (packPTH "TestResult")))
                           ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))},
        (((((((((EntityDef (HaskellName (packPTH "User")))
                  (DBName (packPTH "user")))
                 (((((((FieldDef (HaskellName (packPTH "Id")))
                         (DBName (packPTH "id")))
                        ((FTTypeCon Nothing) (packPTH "UserId")))
                       SqlInt64)
                      [])
                     True)
                    ((ForeignRef (HaskellName (packPTH "User")))
                       ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                [])
               [((((((FieldDef (HaskellName (packPTH "username")))
                       (DBName (packPTH "username")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for username")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "password")))
                       (DBName (packPTH "password")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for password")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "email")))
                       (DBName (packPTH "email")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for email")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "avatar")))
                       (DBName (packPTH "avatar")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for avatar")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "firstName")))
                       (DBName (packPTH "first_name")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for firstName")))
                    [packPTH "Maybe"])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "secondName")))
                       (DBName (packPTH "second_name")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for secondName")))
                    [packPTH "Maybe"])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "birthDay")))
                       (DBName (packPTH "birth_day")))
                      ((FTTypeCon Nothing) (packPTH "UTCTime")))
                     (SqlOther (packPTH "SqlType unset for birthDay")))
                    [packPTH "Maybe"])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "sex")))
                       (DBName (packPTH "sex")))
                      ((FTTypeCon Nothing) (packPTH "Int")))
                     (SqlOther (packPTH "SqlType unset for sex")))
                    [packPTH "Maybe"])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "createdTests")))
                       (DBName (packPTH "created_tests")))
                      (FTList ((FTTypeCon Nothing) (packPTH "ObjectId"))))
                     (SqlOther (packPTH "SqlType unset for createdTests")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "passedTests")))
                       (DBName (packPTH "passed_tests")))
                      (FTList ((FTTypeCon Nothing) (packPTH "TestResult"))))
                     (SqlOther (packPTH "SqlType unset for passedTests")))
                    [])
                   True)
                  (EmbedRef
                     ((EmbedEntityDef (HaskellName (packPTH "TestResult")))
                        [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing) Nothing,
                         ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                         ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                           Nothing]))])
              [(((UniqueDef (HaskellName (packPTH "Email")))
                   (DBName (packPTH "email")))
                  [(HaskellName (packPTH "email"), DBName (packPTH "email"))])
                 [],
               (((UniqueDef (HaskellName (packPTH "Username")))
                   (DBName (packPTH "username")))
                  [(HaskellName (packPTH "username"), DBName (packPTH "username"))])
                 []])
             [])
            [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
           (Data.Map.Internal.fromList []))
          False
          {entityFields = [((((((FieldDef (HaskellName (packPTH "username")))
                                  (DBName (packPTH "username")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "password")))
                                  (DBName (packPTH "password")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "email")))
                                  (DBName (packPTH "email")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "avatar")))
                                  (DBName (packPTH "avatar")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "firstName")))
                                  (DBName (packPTH "first_name")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [packPTH "Maybe"])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "secondName")))
                                  (DBName (packPTH "second_name")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [packPTH "Maybe"])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "birthDay")))
                                  (DBName (packPTH "birth_day")))
                                 ((FTTypeCon Nothing) (packPTH "UTCTime")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy UTCTime)))
                               [packPTH "Maybe"])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "sex")))
                                  (DBName (packPTH "sex")))
                                 ((FTTypeCon Nothing) (packPTH "Int")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Int)))
                               [packPTH "Maybe"])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "createdTests")))
                                  (DBName (packPTH "created_tests")))
                                 (FTList ((FTTypeCon Nothing) (packPTH "ObjectId"))))
                                SqlString)
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "passedTests")))
                                  (DBName (packPTH "passed_tests")))
                                 (FTList ((FTTypeCon Nothing) (packPTH "TestResult"))))
                                SqlString)
                               [])
                              True)
                             (EmbedRef
                                ((EmbedEntityDef (HaskellName (packPTH "TestResult")))
                                   [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing) Nothing,
                                    ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                                    ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                                      Nothing]))],
           entityId = ((((((FieldDef (HaskellName (packPTH "Id")))
                             (DBName (packPTH "id")))
                            ((FTTypeCon Nothing) (packPTH "UserId")))
                           (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                              (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                          [])
                         True)
                        ((ForeignRef (HaskellName (packPTH "User")))
                           ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))}])
  ======>
    instance PersistField TestResult where
      toPersistValue
        = \ ent_a2lYB
            -> (PersistMap
                  $ ((Prelude.zip
                        ((Prelude.map pack) ["testKey", "result", "passingDate"]))
                       ((Prelude.map toPersistValue) $ (toPersistFields ent_a2lYB))))
      fromPersistValue
        = ((\ x_a2lYC
              -> let
                   columns_a2lYD
                     = unordered-containers-0.2.9.0:Data.HashMap.Strict.fromList x_a2lYC
                 in
                   (fromPersistValues
                      $ ((Prelude.map
                            (\ name_a2lYE
                               -> case
                                      (unordered-containers-0.2.9.0:Data.HashMap.Base.lookup
                                         (pack name_a2lYE))
                                        columns_a2lYD
                                  of
                                    Just v_a2lYF -> v_a2lYF
                                    Nothing -> PersistNull))
                           $ ["testKey", "result", "passingDate"])))
             <=< getPersistMap)
    instance persistent-2.8.1:Database.Persist.Sql.Class.PersistFieldSql TestResult where
      persistent-2.8.1:Database.Persist.Sql.Class.sqlType _ = SqlString
    instance PersistField User where
      toPersistValue
        = \ ent_a2lYG
            -> (PersistMap
                  $ ((Prelude.zip
                        ((Prelude.map pack)
                           ["username", "password", "email", "avatar", "firstName",
                            "secondName", "birthDay", "sex", "createdTests", "passedTests"]))
                       ((Prelude.map toPersistValue) $ (toPersistFields ent_a2lYG))))
      fromPersistValue
        = ((\ x_a2lYH
              -> let
                   columns_a2lYI
                     = unordered-containers-0.2.9.0:Data.HashMap.Strict.fromList x_a2lYH
                 in
                   (fromPersistValues
                      $ ((Prelude.map
                            (\ name_a2lYJ
                               -> case
                                      (unordered-containers-0.2.9.0:Data.HashMap.Base.lookup
                                         (pack name_a2lYJ))
                                        columns_a2lYI
                                  of
                                    Just v_a2lYK -> v_a2lYK
                                    Nothing -> PersistNull))
                           $ ["username", "password", "email", "avatar", "firstName",
                              "secondName", "birthDay", "sex", "createdTests", "passedTests"])))
             <=< getPersistMap)
    instance persistent-2.8.1:Database.Persist.Sql.Class.PersistFieldSql User where
      persistent-2.8.1:Database.Persist.Sql.Class.sqlType _ = SqlString
    data TestResult
      = TestResult {testResultTestKey :: !Text,
                    testResultResult :: !Text,
                    testResultPassingDate :: !UTCTime}
      deriving (Eq, Read, Show, Generic)
    type TestResultId = Key TestResult
    instance PersistEntity TestResult where
      type PersistEntityBackend TestResult = MongoContext
      data Unique TestResult
      newtype Key TestResult
        = TestResultKey {unTestResultKey :: (BackendKey MongoContext)}
        deriving (Show,
                  Read,
                  Eq,
                  Ord,
                  path-pieces-0.2.1:Web.PathPieces.PathPiece,
                  http-api-data-0.3.7.2:Web.Internal.HttpApiData.ToHttpApiData,
                  http-api-data-0.3.7.2:Web.Internal.HttpApiData.FromHttpApiData,
                  PersistField,
                  persistent-2.8.1:Database.Persist.Sql.Class.PersistFieldSql,
                  Aeson.ToJSON,
                  Aeson.FromJSON)
      data EntityField TestResult typ
        = typ ~ Key TestResult => TestResultId |
          typ ~ Text => TestResultTestKey |
          typ ~ Text => TestResultResult |
          typ ~ UTCTime => TestResultPassingDate
      keyToValues
        = ((ghc-prim-0.5.1.1:GHC.Types.: [])
             . (toPersistValue . unTestResultKey))
      keyFromValues
        = ((fmap TestResultKey)
             . (fromPersistValue . Database.Persist.TH.headNote))
      entityDef _
        = (((((((((EntityDef (HaskellName (packPTH "TestResult")))
                    (DBName (packPTH "test_result")))
                   (((((((FieldDef (HaskellName (packPTH "Id")))
                           (DBName (packPTH "id")))
                          ((FTTypeCon Nothing) (packPTH "TestResultId")))
                         SqlInt64)
                        [])
                       True)
                      ((ForeignRef (HaskellName (packPTH "TestResult")))
                         ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                  [])
                 [((((((FieldDef (HaskellName (packPTH "testKey")))
                         (DBName (packPTH "test_key")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "result")))
                         (DBName (packPTH "result")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "passingDate")))
                         (DBName (packPTH "passing_date")))
                        ((FTTypeCon Nothing) (packPTH "UTCTime")))
                       SqlDayTime)
                      [])
                     True)
                    NoReference])
                [])
               [])
              [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
             (Data.Map.Internal.fromList []))
            False
      toPersistFields (TestResult x_a2lYL x_a2lYM x_a2lYN)
        = [SomePersistField x_a2lYL, SomePersistField x_a2lYM,
           SomePersistField x_a2lYN]
      fromPersistValues [x1_a2lYP, x2_a2lYQ, x3_a2lYR]
        = TestResult
            <$>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "testKey")))
                 . fromPersistValue)
                x1_a2lYP
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "result")))
                 . fromPersistValue)
                x2_a2lYQ
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "passingDate")))
                 . fromPersistValue)
                x3_a2lYR
      fromPersistValues x_a2lYO
        = (Left
             $ ((mappend (packPTH "TestResult: fromPersistValues failed on: "))
                  (pack $ (show x_a2lYO))))
      persistUniqueToFieldNames _
        = error "Degenerate case, should never happen"
      persistUniqueToValues _
        = error "Degenerate case, should never happen"
      persistUniqueKeys
        (TestResult _testKey_a2lYS _result_a2lYT _passingDate_a2lYU)
        = []
      persistFieldDef TestResultId
        = ((((((FieldDef (HaskellName (packPTH "Id")))
                 (DBName (packPTH "id")))
                ((FTTypeCon Nothing) (packPTH "TestResultId")))
               SqlInt64)
              [])
             True)
            ((ForeignRef (HaskellName (packPTH "TestResult")))
               ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))
      persistFieldDef TestResultTestKey
        = ((((((FieldDef (HaskellName (packPTH "testKey")))
                 (DBName (packPTH "test_key")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef TestResultResult
        = ((((((FieldDef (HaskellName (packPTH "result")))
                 (DBName (packPTH "result")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef TestResultPassingDate
        = ((((((FieldDef (HaskellName (packPTH "passingDate")))
                 (DBName (packPTH "passing_date")))
                ((FTTypeCon Nothing) (packPTH "UTCTime")))
               SqlDayTime)
              [])
             True)
            NoReference
      persistIdField = TestResultId
      fieldLens TestResultId
        = (lensPTH entityKey)
            (\ Entity _ value_a2lYV key_a2lYW
               -> (Entity key_a2lYW) value_a2lYV)
      fieldLens TestResultTestKey
        = (lensPTH (testResultTestKey . entityVal))
            (\ Entity key_a2lYX value_a2lYY x_a2lYZ
               -> (Entity key_a2lYX) value_a2lYY {testResultTestKey = x_a2lYZ})
      fieldLens TestResultResult
        = (lensPTH (testResultResult . entityVal))
            (\ Entity key_a2lYX value_a2lYY x_a2lYZ
               -> (Entity key_a2lYX) value_a2lYY {testResultResult = x_a2lYZ})
      fieldLens TestResultPassingDate
        = (lensPTH (testResultPassingDate . entityVal))
            (\ Entity key_a2lYX value_a2lYY x_a2lYZ
               -> (Entity key_a2lYX)
                    value_a2lYY {testResultPassingDate = x_a2lYZ})
    instance ToBackendKey MongoContext TestResult where
      toBackendKey = unTestResultKey
      fromBackendKey = TestResultKey
    data User
      = User {userUsername :: !Text,
              userPassword :: !Text,
              userEmail :: !Text,
              userAvatar :: !Text,
              userFirstName :: !(Maybe Text),
              userSecondName :: !(Maybe Text),
              userBirthDay :: !(Maybe UTCTime),
              userSex :: !(Maybe Int),
              userCreatedTests :: ![ObjectId],
              userPassedTests :: ![TestResult]}
      deriving (Eq, Read, Show, Generic)
    type UserId = Key User
    instance PersistEntity User where
      type PersistEntityBackend User = MongoContext
      data Unique User = Email Text | Username Text
      newtype Key User
        = UserKey {unUserKey :: (BackendKey MongoContext)}
        deriving (Show,
                  Read,
                  Eq,
                  Ord,
                  path-pieces-0.2.1:Web.PathPieces.PathPiece,
                  http-api-data-0.3.7.2:Web.Internal.HttpApiData.ToHttpApiData,
                  http-api-data-0.3.7.2:Web.Internal.HttpApiData.FromHttpApiData,
                  PersistField,
                  persistent-2.8.1:Database.Persist.Sql.Class.PersistFieldSql,
                  Aeson.ToJSON,
                  Aeson.FromJSON)
      data EntityField User typ
        = typ ~ Key User => UserId |
          typ ~ Text => UserUsername |
          typ ~ Text => UserPassword |
          typ ~ Text => UserEmail |
          typ ~ Text => UserAvatar |
          typ ~ Maybe Text => UserFirstName |
          typ ~ Maybe Text => UserSecondName |
          typ ~ Maybe UTCTime => UserBirthDay |
          typ ~ Maybe Int => UserSex |
          typ ~ [ObjectId] => UserCreatedTests |
          typ ~ [TestResult] => UserPassedTests
      keyToValues
        = ((ghc-prim-0.5.1.1:GHC.Types.: [])
             . (toPersistValue . unUserKey))
      keyFromValues
        = ((fmap UserKey)
             . (fromPersistValue . Database.Persist.TH.headNote))
      entityDef _
        = (((((((((EntityDef (HaskellName (packPTH "User")))
                    (DBName (packPTH "user")))
                   (((((((FieldDef (HaskellName (packPTH "Id")))
                           (DBName (packPTH "id")))
                          ((FTTypeCon Nothing) (packPTH "UserId")))
                         SqlInt64)
                        [])
                       True)
                      ((ForeignRef (HaskellName (packPTH "User")))
                         ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                  [])
                 [((((((FieldDef (HaskellName (packPTH "username")))
                         (DBName (packPTH "username")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "password")))
                         (DBName (packPTH "password")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "email")))
                         (DBName (packPTH "email")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "avatar")))
                         (DBName (packPTH "avatar")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "firstName")))
                         (DBName (packPTH "first_name")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [packPTH "Maybe"])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "secondName")))
                         (DBName (packPTH "second_name")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [packPTH "Maybe"])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "birthDay")))
                         (DBName (packPTH "birth_day")))
                        ((FTTypeCon Nothing) (packPTH "UTCTime")))
                       SqlDayTime)
                      [packPTH "Maybe"])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "sex")))
                         (DBName (packPTH "sex")))
                        ((FTTypeCon Nothing) (packPTH "Int")))
                       SqlInt64)
                      [packPTH "Maybe"])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "createdTests")))
                         (DBName (packPTH "created_tests")))
                        (FTList ((FTTypeCon Nothing) (packPTH "ObjectId"))))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "passedTests")))
                         (DBName (packPTH "passed_tests")))
                        (FTList ((FTTypeCon Nothing) (packPTH "TestResult"))))
                       SqlString)
                      [])
                     True)
                    (EmbedRef
                       ((EmbedEntityDef (HaskellName (packPTH "TestResult")))
                          [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing) Nothing,
                           ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                           ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                             Nothing]))])
                [(((UniqueDef (HaskellName (packPTH "Email")))
                     (DBName (packPTH "email")))
                    [(HaskellName (packPTH "email"), DBName (packPTH "email"))])
                   [],
                 (((UniqueDef (HaskellName (packPTH "Username")))
                     (DBName (packPTH "username")))
                    [(HaskellName (packPTH "username"), DBName (packPTH "username"))])
                   []])
               [])
              [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
             (Data.Map.Internal.fromList []))
            False
      toPersistFields
        (User x_a2lZ0
              x_a2lZ1
              x_a2lZ2
              x_a2lZ3
              x_a2lZ4
              x_a2lZ5
              x_a2lZ6
              x_a2lZ7
              x_a2lZ8
              x_a2lZ9)
        = [SomePersistField x_a2lZ0, SomePersistField x_a2lZ1,
           SomePersistField x_a2lZ2, SomePersistField x_a2lZ3,
           SomePersistField x_a2lZ4, SomePersistField x_a2lZ5,
           SomePersistField x_a2lZ6, SomePersistField x_a2lZ7,
           SomePersistField x_a2lZ8, SomePersistField x_a2lZ9]
      fromPersistValues
        [x1_a2lZb,
         x2_a2lZc,
         x3_a2lZd,
         x4_a2lZe,
         x5_a2lZf,
         x6_a2lZg,
         x7_a2lZh,
         x8_a2lZi,
         x9_a2lZj,
         x10_a2lZk]
        = User
            <$>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "username")))
                 . fromPersistValue)
                x1_a2lZb
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "password")))
                 . fromPersistValue)
                x2_a2lZc
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "email")))
                 . fromPersistValue)
                x3_a2lZd
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "avatar")))
                 . fromPersistValue)
                x4_a2lZe
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "firstName")))
                 . fromPersistValue)
                x5_a2lZf
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "secondName")))
                 . fromPersistValue)
                x6_a2lZg
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "birthDay")))
                 . fromPersistValue)
                x7_a2lZh
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "sex")))
                 . fromPersistValue)
                x8_a2lZi
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "createdTests")))
                 . fromPersistValue)
                x9_a2lZj
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "passedTests")))
                 . fromPersistValue)
                x10_a2lZk
      fromPersistValues x_a2lZa
        = (Left
             $ ((mappend (packPTH "User: fromPersistValues failed on: "))
                  (pack $ (show x_a2lZa))))
      persistUniqueToFieldNames Email {}
        = [(HaskellName (packPTH "email"), DBName (packPTH "email"))]
      persistUniqueToFieldNames Username {}
        = [(HaskellName (packPTH "username"), DBName (packPTH "username"))]
      persistUniqueToValues (Email x_a2lZl) = [toPersistValue x_a2lZl]
      persistUniqueToValues (Username x_a2lZm) = [toPersistValue x_a2lZm]
      persistUniqueKeys
        (User _username_a2lZn
              _password_a2lZo
              _email_a2lZp
              _avatar_a2lZq
              _firstName_a2lZr
              _secondName_a2lZs
              _birthDay_a2lZt
              _sex_a2lZu
              _createdTests_a2lZv
              _passedTests_a2lZw)
        = [Email _email_a2lZp, Username _username_a2lZn]
      persistFieldDef UserId
        = ((((((FieldDef (HaskellName (packPTH "Id")))
                 (DBName (packPTH "id")))
                ((FTTypeCon Nothing) (packPTH "UserId")))
               SqlInt64)
              [])
             True)
            ((ForeignRef (HaskellName (packPTH "User")))
               ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))
      persistFieldDef UserUsername
        = ((((((FieldDef (HaskellName (packPTH "username")))
                 (DBName (packPTH "username")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef UserPassword
        = ((((((FieldDef (HaskellName (packPTH "password")))
                 (DBName (packPTH "password")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef UserEmail
        = ((((((FieldDef (HaskellName (packPTH "email")))
                 (DBName (packPTH "email")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef UserAvatar
        = ((((((FieldDef (HaskellName (packPTH "avatar")))
                 (DBName (packPTH "avatar")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef UserFirstName
        = ((((((FieldDef (HaskellName (packPTH "firstName")))
                 (DBName (packPTH "first_name")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [packPTH "Maybe"])
             True)
            NoReference
      persistFieldDef UserSecondName
        = ((((((FieldDef (HaskellName (packPTH "secondName")))
                 (DBName (packPTH "second_name")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [packPTH "Maybe"])
             True)
            NoReference
      persistFieldDef UserBirthDay
        = ((((((FieldDef (HaskellName (packPTH "birthDay")))
                 (DBName (packPTH "birth_day")))
                ((FTTypeCon Nothing) (packPTH "UTCTime")))
               SqlDayTime)
              [packPTH "Maybe"])
             True)
            NoReference
      persistFieldDef UserSex
        = ((((((FieldDef (HaskellName (packPTH "sex")))
                 (DBName (packPTH "sex")))
                ((FTTypeCon Nothing) (packPTH "Int")))
               SqlInt64)
              [packPTH "Maybe"])
             True)
            NoReference
      persistFieldDef UserCreatedTests
        = ((((((FieldDef (HaskellName (packPTH "createdTests")))
                 (DBName (packPTH "created_tests")))
                (FTList ((FTTypeCon Nothing) (packPTH "ObjectId"))))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef UserPassedTests
        = ((((((FieldDef (HaskellName (packPTH "passedTests")))
                 (DBName (packPTH "passed_tests")))
                (FTList ((FTTypeCon Nothing) (packPTH "TestResult"))))
               SqlString)
              [])
             True)
            (EmbedRef
               ((EmbedEntityDef (HaskellName (packPTH "TestResult")))
                  [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing) Nothing,
                   ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                   ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                     Nothing]))
      persistIdField = UserId
      fieldLens UserId
        = (lensPTH entityKey)
            (\ Entity _ value_a2lZx key_a2lZy
               -> (Entity key_a2lZy) value_a2lZx)
      fieldLens UserUsername
        = (lensPTH (userUsername . entityVal))
            (\ Entity key_a2lZz value_a2lZA x_a2lZB
               -> (Entity key_a2lZz) value_a2lZA {userUsername = x_a2lZB})
      fieldLens UserPassword
        = (lensPTH (userPassword . entityVal))
            (\ Entity key_a2lZz value_a2lZA x_a2lZB
               -> (Entity key_a2lZz) value_a2lZA {userPassword = x_a2lZB})
      fieldLens UserEmail
        = (lensPTH (userEmail . entityVal))
            (\ Entity key_a2lZz value_a2lZA x_a2lZB
               -> (Entity key_a2lZz) value_a2lZA {userEmail = x_a2lZB})
      fieldLens UserAvatar
        = (lensPTH (userAvatar . entityVal))
            (\ Entity key_a2lZz value_a2lZA x_a2lZB
               -> (Entity key_a2lZz) value_a2lZA {userAvatar = x_a2lZB})
      fieldLens UserFirstName
        = (lensPTH (userFirstName . entityVal))
            (\ Entity key_a2lZz value_a2lZA x_a2lZB
               -> (Entity key_a2lZz) value_a2lZA {userFirstName = x_a2lZB})
      fieldLens UserSecondName
        = (lensPTH (userSecondName . entityVal))
            (\ Entity key_a2lZz value_a2lZA x_a2lZB
               -> (Entity key_a2lZz) value_a2lZA {userSecondName = x_a2lZB})
      fieldLens UserBirthDay
        = (lensPTH (userBirthDay . entityVal))
            (\ Entity key_a2lZz value_a2lZA x_a2lZB
               -> (Entity key_a2lZz) value_a2lZA {userBirthDay = x_a2lZB})
      fieldLens UserSex
        = (lensPTH (userSex . entityVal))
            (\ Entity key_a2lZz value_a2lZA x_a2lZB
               -> (Entity key_a2lZz) value_a2lZA {userSex = x_a2lZB})
      fieldLens UserCreatedTests
        = (lensPTH (userCreatedTests . entityVal))
            (\ Entity key_a2lZz value_a2lZA x_a2lZB
               -> (Entity key_a2lZz) value_a2lZA {userCreatedTests = x_a2lZB})
      fieldLens UserPassedTests
        = (lensPTH (userPassedTests . entityVal))
            (\ Entity key_a2lZz value_a2lZA x_a2lZB
               -> (Entity key_a2lZz) value_a2lZA {userPassedTests = x_a2lZB})
    instance ToBackendKey MongoContext User where
      toBackendKey = unUserKey
      fromBackendKey = UserKey
    migrateAll :: persistent-2.8.1:Database.Persist.Sql.Types.Migration
    migrateAll
      = do let defs_a2lZC
                 = [(((((((((EntityDef (HaskellName (packPTH "TestResult")))
                              (DBName (packPTH "test_result")))
                             (((((((FieldDef (HaskellName (packPTH "Id")))
                                     (DBName (packPTH "id")))
                                    ((FTTypeCon Nothing) (packPTH "TestResultId")))
                                   SqlInt64)
                                  [])
                                 True)
                                ((ForeignRef (HaskellName (packPTH "TestResult")))
                                   ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                            [])
                           [((((((FieldDef (HaskellName (packPTH "testKey")))
                                   (DBName (packPTH "test_key")))
                                  ((FTTypeCon Nothing) (packPTH "Text")))
                                 SqlString)
                                [])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "result")))
                                   (DBName (packPTH "result")))
                                  ((FTTypeCon Nothing) (packPTH "Text")))
                                 SqlString)
                                [])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "passingDate")))
                                   (DBName (packPTH "passing_date")))
                                  ((FTTypeCon Nothing) (packPTH "UTCTime")))
                                 SqlDayTime)
                                [])
                               True)
                              NoReference])
                          [])
                         [])
                        [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
                       (Data.Map.Internal.fromList []))
                      False,
                    (((((((((EntityDef (HaskellName (packPTH "User")))
                              (DBName (packPTH "user")))
                             (((((((FieldDef (HaskellName (packPTH "Id")))
                                     (DBName (packPTH "id")))
                                    ((FTTypeCon Nothing) (packPTH "UserId")))
                                   SqlInt64)
                                  [])
                                 True)
                                ((ForeignRef (HaskellName (packPTH "User")))
                                   ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                            [])
                           [((((((FieldDef (HaskellName (packPTH "username")))
                                   (DBName (packPTH "username")))
                                  ((FTTypeCon Nothing) (packPTH "Text")))
                                 SqlString)
                                [])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "password")))
                                   (DBName (packPTH "password")))
                                  ((FTTypeCon Nothing) (packPTH "Text")))
                                 SqlString)
                                [])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "email")))
                                   (DBName (packPTH "email")))
                                  ((FTTypeCon Nothing) (packPTH "Text")))
                                 SqlString)
                                [])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "avatar")))
                                   (DBName (packPTH "avatar")))
                                  ((FTTypeCon Nothing) (packPTH "Text")))
                                 SqlString)
                                [])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "firstName")))
                                   (DBName (packPTH "first_name")))
                                  ((FTTypeCon Nothing) (packPTH "Text")))
                                 SqlString)
                                [packPTH "Maybe"])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "secondName")))
                                   (DBName (packPTH "second_name")))
                                  ((FTTypeCon Nothing) (packPTH "Text")))
                                 SqlString)
                                [packPTH "Maybe"])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "birthDay")))
                                   (DBName (packPTH "birth_day")))
                                  ((FTTypeCon Nothing) (packPTH "UTCTime")))
                                 SqlDayTime)
                                [packPTH "Maybe"])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "sex")))
                                   (DBName (packPTH "sex")))
                                  ((FTTypeCon Nothing) (packPTH "Int")))
                                 SqlInt64)
                                [packPTH "Maybe"])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "createdTests")))
                                   (DBName (packPTH "created_tests")))
                                  (FTList ((FTTypeCon Nothing) (packPTH "ObjectId"))))
                                 SqlString)
                                [])
                               True)
                              NoReference,
                            ((((((FieldDef (HaskellName (packPTH "passedTests")))
                                   (DBName (packPTH "passed_tests")))
                                  (FTList ((FTTypeCon Nothing) (packPTH "TestResult"))))
                                 SqlString)
                                [])
                               True)
                              (EmbedRef
                                 ((EmbedEntityDef (HaskellName (packPTH "TestResult")))
                                    [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing)
                                       Nothing,
                                     ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                                     ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                                       Nothing]))])
                          [(((UniqueDef (HaskellName (packPTH "Email")))
                               (DBName (packPTH "email")))
                              [(HaskellName (packPTH "email"), DBName (packPTH "email"))])
                             [],
                           (((UniqueDef (HaskellName (packPTH "Username")))
                               (DBName (packPTH "username")))
                              [(HaskellName (packPTH "username"), DBName (packPTH "username"))])
                             []])
                         [])
                        [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
                       (Data.Map.Internal.fromList []))
                      False]
           (persistent-2.8.1:Database.Persist.Sql.Migration.migrate
              defs_a2lZC)
             ((((((((((EntityDef (HaskellName (packPTH "TestResult")))
                        (DBName (packPTH "test_result")))
                       (((((((FieldDef (HaskellName (packPTH "Id")))
                               (DBName (packPTH "id")))
                              ((FTTypeCon Nothing) (packPTH "TestResultId")))
                             SqlInt64)
                            [])
                           True)
                          ((ForeignRef (HaskellName (packPTH "TestResult")))
                             ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                      [])
                     [((((((FieldDef (HaskellName (packPTH "testKey")))
                             (DBName (packPTH "test_key")))
                            ((FTTypeCon Nothing) (packPTH "Text")))
                           SqlString)
                          [])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "result")))
                             (DBName (packPTH "result")))
                            ((FTTypeCon Nothing) (packPTH "Text")))
                           SqlString)
                          [])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "passingDate")))
                             (DBName (packPTH "passing_date")))
                            ((FTTypeCon Nothing) (packPTH "UTCTime")))
                           SqlDayTime)
                          [])
                         True)
                        NoReference])
                    [])
                   [])
                  [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
                 (Data.Map.Internal.fromList []))
                False)
           (persistent-2.8.1:Database.Persist.Sql.Migration.migrate
              defs_a2lZC)
             ((((((((((EntityDef (HaskellName (packPTH "User")))
                        (DBName (packPTH "user")))
                       (((((((FieldDef (HaskellName (packPTH "Id")))
                               (DBName (packPTH "id")))
                              ((FTTypeCon Nothing) (packPTH "UserId")))
                             SqlInt64)
                            [])
                           True)
                          ((ForeignRef (HaskellName (packPTH "User")))
                             ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                      [])
                     [((((((FieldDef (HaskellName (packPTH "username")))
                             (DBName (packPTH "username")))
                            ((FTTypeCon Nothing) (packPTH "Text")))
                           SqlString)
                          [])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "password")))
                             (DBName (packPTH "password")))
                            ((FTTypeCon Nothing) (packPTH "Text")))
                           SqlString)
                          [])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "email")))
                             (DBName (packPTH "email")))
                            ((FTTypeCon Nothing) (packPTH "Text")))
                           SqlString)
                          [])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "avatar")))
                             (DBName (packPTH "avatar")))
                            ((FTTypeCon Nothing) (packPTH "Text")))
                           SqlString)
                          [])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "firstName")))
                             (DBName (packPTH "first_name")))
                            ((FTTypeCon Nothing) (packPTH "Text")))
                           SqlString)
                          [packPTH "Maybe"])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "secondName")))
                             (DBName (packPTH "second_name")))
                            ((FTTypeCon Nothing) (packPTH "Text")))
                           SqlString)
                          [packPTH "Maybe"])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "birthDay")))
                             (DBName (packPTH "birth_day")))
                            ((FTTypeCon Nothing) (packPTH "UTCTime")))
                           SqlDayTime)
                          [packPTH "Maybe"])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "sex")))
                             (DBName (packPTH "sex")))
                            ((FTTypeCon Nothing) (packPTH "Int")))
                           SqlInt64)
                          [packPTH "Maybe"])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "createdTests")))
                             (DBName (packPTH "created_tests")))
                            (FTList ((FTTypeCon Nothing) (packPTH "ObjectId"))))
                           SqlString)
                          [])
                         True)
                        NoReference,
                      ((((((FieldDef (HaskellName (packPTH "passedTests")))
                             (DBName (packPTH "passed_tests")))
                            (FTList ((FTTypeCon Nothing) (packPTH "TestResult"))))
                           SqlString)
                          [])
                         True)
                        (EmbedRef
                           ((EmbedEntityDef (HaskellName (packPTH "TestResult")))
                              [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing) Nothing,
                               ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                               ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                                 Nothing]))])
                    [(((UniqueDef (HaskellName (packPTH "Email")))
                         (DBName (packPTH "email")))
                        [(HaskellName (packPTH "email"), DBName (packPTH "email"))])
                       [],
                     (((UniqueDef (HaskellName (packPTH "Username")))
                         (DBName (packPTH "username")))
                        [(HaskellName (packPTH "username"), DBName (packPTH "username"))])
                       []])
                   [])
                  [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
                 (Data.Map.Internal.fromList []))
                False)
/home/nikita/Projects/labs/Databases/Course-Project/Server/src/Model/User.hs:(27,79)-(47,2): Splicing expression
    Language.Haskell.TH.Quote.quoteExp
      persistLowerCase
      "\n\
      \TestResult\n\
      \  testKey       Text\n\
      \  result        Text\n\
      \  passingDate   UTCTime\n\
      \  deriving      Eq Read Show Generic\n\
      \User\n\
      \  username      Text\n\
      \  password      Text\n\
      \  email         Text\n\
      \  avatar        Text\n\
      \  firstName     Text Maybe\n\
      \  secondName    Text Maybe\n\
      \  birthDay      UTCTime Maybe\n\
      \  sex           Int Maybe\n\
      \  createdTests  [ObjectId]\n\
      \  passedTests   [TestResult]\n\
      \  Email         email\n\
      \  Username      username\n\
      \  deriving      Eq Read Show Generic\n"
  ======>
    [(((((((((EntityDef (HaskellName (packPTH "TestResult")))
               (DBName (packPTH "test_result")))
              (((((((FieldDef (HaskellName (packPTH "Id")))
                      (DBName (packPTH "id")))
                     ((FTTypeCon Nothing) (packPTH "TestResultId")))
                    SqlInt64)
                   [])
                  True)
                 ((ForeignRef (HaskellName (packPTH "TestResult")))
                    ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
             [])
            [((((((FieldDef (HaskellName (packPTH "testKey")))
                    (DBName (packPTH "test_key")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for testKey")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "result")))
                    (DBName (packPTH "result")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for result")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "passingDate")))
                    (DBName (packPTH "passing_date")))
                   ((FTTypeCon Nothing) (packPTH "UTCTime")))
                  (SqlOther (packPTH "SqlType unset for passingDate")))
                 [])
                True)
               NoReference])
           [])
          [])
         [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
        (Data.Map.Internal.fromList []))
       False
       {entityFields = [((((((FieldDef (HaskellName (packPTH "testKey")))
                               (DBName (packPTH "test_key")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "result")))
                               (DBName (packPTH "result")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "passingDate")))
                               (DBName (packPTH "passing_date")))
                              ((FTTypeCon Nothing) (packPTH "UTCTime")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy UTCTime)))
                            [])
                           True)
                          NoReference],
        entityId = ((((((FieldDef (HaskellName (packPTH "Id")))
                          (DBName (packPTH "id")))
                         ((FTTypeCon Nothing) (packPTH "TestResultId")))
                        (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                           (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                       [])
                      True)
                     ((ForeignRef (HaskellName (packPTH "TestResult")))
                        ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))},
     (((((((((EntityDef (HaskellName (packPTH "User")))
               (DBName (packPTH "user")))
              (((((((FieldDef (HaskellName (packPTH "Id")))
                      (DBName (packPTH "id")))
                     ((FTTypeCon Nothing) (packPTH "UserId")))
                    SqlInt64)
                   [])
                  True)
                 ((ForeignRef (HaskellName (packPTH "User")))
                    ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
             [])
            [((((((FieldDef (HaskellName (packPTH "username")))
                    (DBName (packPTH "username")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for username")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "password")))
                    (DBName (packPTH "password")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for password")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "email")))
                    (DBName (packPTH "email")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for email")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "avatar")))
                    (DBName (packPTH "avatar")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for avatar")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "firstName")))
                    (DBName (packPTH "first_name")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for firstName")))
                 [packPTH "Maybe"])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "secondName")))
                    (DBName (packPTH "second_name")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for secondName")))
                 [packPTH "Maybe"])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "birthDay")))
                    (DBName (packPTH "birth_day")))
                   ((FTTypeCon Nothing) (packPTH "UTCTime")))
                  (SqlOther (packPTH "SqlType unset for birthDay")))
                 [packPTH "Maybe"])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "sex")))
                    (DBName (packPTH "sex")))
                   ((FTTypeCon Nothing) (packPTH "Int")))
                  (SqlOther (packPTH "SqlType unset for sex")))
                 [packPTH "Maybe"])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "createdTests")))
                    (DBName (packPTH "created_tests")))
                   (FTList ((FTTypeCon Nothing) (packPTH "ObjectId"))))
                  (SqlOther (packPTH "SqlType unset for createdTests")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "passedTests")))
                    (DBName (packPTH "passed_tests")))
                   (FTList ((FTTypeCon Nothing) (packPTH "TestResult"))))
                  (SqlOther (packPTH "SqlType unset for passedTests")))
                 [])
                True)
               (EmbedRef
                  ((EmbedEntityDef (HaskellName (packPTH "TestResult")))
                     [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing) Nothing,
                      ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                      ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                        Nothing]))])
           [(((UniqueDef (HaskellName (packPTH "Email")))
                (DBName (packPTH "email")))
               [(HaskellName (packPTH "email"), DBName (packPTH "email"))])
              [],
            (((UniqueDef (HaskellName (packPTH "Username")))
                (DBName (packPTH "username")))
               [(HaskellName (packPTH "username"), DBName (packPTH "username"))])
              []])
          [])
         [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
        (Data.Map.Internal.fromList []))
       False
       {entityFields = [((((((FieldDef (HaskellName (packPTH "username")))
                               (DBName (packPTH "username")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "password")))
                               (DBName (packPTH "password")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "email")))
                               (DBName (packPTH "email")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "avatar")))
                               (DBName (packPTH "avatar")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "firstName")))
                               (DBName (packPTH "first_name")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [packPTH "Maybe"])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "secondName")))
                               (DBName (packPTH "second_name")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [packPTH "Maybe"])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "birthDay")))
                               (DBName (packPTH "birth_day")))
                              ((FTTypeCon Nothing) (packPTH "UTCTime")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy UTCTime)))
                            [packPTH "Maybe"])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "sex")))
                               (DBName (packPTH "sex")))
                              ((FTTypeCon Nothing) (packPTH "Int")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Int)))
                            [packPTH "Maybe"])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "createdTests")))
                               (DBName (packPTH "created_tests")))
                              (FTList ((FTTypeCon Nothing) (packPTH "ObjectId"))))
                             SqlString)
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "passedTests")))
                               (DBName (packPTH "passed_tests")))
                              (FTList ((FTTypeCon Nothing) (packPTH "TestResult"))))
                             SqlString)
                            [])
                           True)
                          (EmbedRef
                             ((EmbedEntityDef (HaskellName (packPTH "TestResult")))
                                [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing) Nothing,
                                 ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                                 ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                                   Nothing]))],
        entityId = ((((((FieldDef (HaskellName (packPTH "Id")))
                          (DBName (packPTH "id")))
                         ((FTTypeCon Nothing) (packPTH "UserId")))
                        (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                           (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                       [])
                      True)
                     ((ForeignRef (HaskellName (packPTH "User")))
                        ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))}]
/home/nikita/Projects/labs/Databases/Course-Project/Server/src/Model/User.hs:(27,1)-(47,2): Splicing declarations
    share
      [mkPersist (mkPersistSettings (ConT ''MongoContext))]
      ([(((((((((EntityDef (HaskellName (packPTH "TestResult")))
                  (DBName (packPTH "test_result")))
                 (((((((FieldDef (HaskellName (packPTH "Id")))
                         (DBName (packPTH "id")))
                        ((FTTypeCon Nothing) (packPTH "TestResultId")))
                       SqlInt64)
                      [])
                     True)
                    ((ForeignRef (HaskellName (packPTH "TestResult")))
                       ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                [])
               [((((((FieldDef (HaskellName (packPTH "testKey")))
                       (DBName (packPTH "test_key")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for testKey")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "result")))
                       (DBName (packPTH "result")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for result")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "passingDate")))
                       (DBName (packPTH "passing_date")))
                      ((FTTypeCon Nothing) (packPTH "UTCTime")))
                     (SqlOther (packPTH "SqlType unset for passingDate")))
                    [])
                   True)
                  NoReference])
              [])
             [])
            [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
           (Data.Map.Internal.fromList []))
          False
          {entityFields = [((((((FieldDef (HaskellName (packPTH "testKey")))
                                  (DBName (packPTH "test_key")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "result")))
                                  (DBName (packPTH "result")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "passingDate")))
                                  (DBName (packPTH "passing_date")))
                                 ((FTTypeCon Nothing) (packPTH "UTCTime")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy UTCTime)))
                               [])
                              True)
                             NoReference],
           entityId = ((((((FieldDef (HaskellName (packPTH "Id")))
                             (DBName (packPTH "id")))
                            ((FTTypeCon Nothing) (packPTH "TestResultId")))
                           (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                              (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                          [])
                         True)
                        ((ForeignRef (HaskellName (packPTH "TestResult")))
                           ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))},
        (((((((((EntityDef (HaskellName (packPTH "User")))
                  (DBName (packPTH "user")))
                 (((((((FieldDef (HaskellName (packPTH "Id")))
                         (DBName (packPTH "id")))
                        ((FTTypeCon Nothing) (packPTH "UserId")))
                       SqlInt64)
                      [])
                     True)
                    ((ForeignRef (HaskellName (packPTH "User")))
                       ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                [])
               [((((((FieldDef (HaskellName (packPTH "username")))
                       (DBName (packPTH "username")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for username")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "password")))
                       (DBName (packPTH "password")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for password")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "email")))
                       (DBName (packPTH "email")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for email")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "avatar")))
                       (DBName (packPTH "avatar")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for avatar")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "firstName")))
                       (DBName (packPTH "first_name")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for firstName")))
                    [packPTH "Maybe"])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "secondName")))
                       (DBName (packPTH "second_name")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for secondName")))
                    [packPTH "Maybe"])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "birthDay")))
                       (DBName (packPTH "birth_day")))
                      ((FTTypeCon Nothing) (packPTH "UTCTime")))
                     (SqlOther (packPTH "SqlType unset for birthDay")))
                    [packPTH "Maybe"])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "sex")))
                       (DBName (packPTH "sex")))
                      ((FTTypeCon Nothing) (packPTH "Int")))
                     (SqlOther (packPTH "SqlType unset for sex")))
                    [packPTH "Maybe"])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "createdTests")))
                       (DBName (packPTH "created_tests")))
                      (FTList ((FTTypeCon Nothing) (packPTH "ObjectId"))))
                     (SqlOther (packPTH "SqlType unset for createdTests")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "passedTests")))
                       (DBName (packPTH "passed_tests")))
                      (FTList ((FTTypeCon Nothing) (packPTH "TestResult"))))
                     (SqlOther (packPTH "SqlType unset for passedTests")))
                    [])
                   True)
                  (EmbedRef
                     ((EmbedEntityDef (HaskellName (packPTH "TestResult")))
                        [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing) Nothing,
                         ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                         ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                           Nothing]))])
              [(((UniqueDef (HaskellName (packPTH "Email")))
                   (DBName (packPTH "email")))
                  [(HaskellName (packPTH "email"), DBName (packPTH "email"))])
                 [],
               (((UniqueDef (HaskellName (packPTH "Username")))
                   (DBName (packPTH "username")))
                  [(HaskellName (packPTH "username"), DBName (packPTH "username"))])
                 []])
             [])
            [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
           (Data.Map.Internal.fromList []))
          False
          {entityFields = [((((((FieldDef (HaskellName (packPTH "username")))
                                  (DBName (packPTH "username")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "password")))
                                  (DBName (packPTH "password")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "email")))
                                  (DBName (packPTH "email")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "avatar")))
                                  (DBName (packPTH "avatar")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "firstName")))
                                  (DBName (packPTH "first_name")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [packPTH "Maybe"])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "secondName")))
                                  (DBName (packPTH "second_name")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [packPTH "Maybe"])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "birthDay")))
                                  (DBName (packPTH "birth_day")))
                                 ((FTTypeCon Nothing) (packPTH "UTCTime")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy UTCTime)))
                               [packPTH "Maybe"])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "sex")))
                                  (DBName (packPTH "sex")))
                                 ((FTTypeCon Nothing) (packPTH "Int")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Int)))
                               [packPTH "Maybe"])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "createdTests")))
                                  (DBName (packPTH "created_tests")))
                                 (FTList ((FTTypeCon Nothing) (packPTH "ObjectId"))))
                                SqlString)
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "passedTests")))
                                  (DBName (packPTH "passed_tests")))
                                 (FTList ((FTTypeCon Nothing) (packPTH "TestResult"))))
                                SqlString)
                               [])
                              True)
                             (EmbedRef
                                ((EmbedEntityDef (HaskellName (packPTH "TestResult")))
                                   [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing) Nothing,
                                    ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                                    ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                                      Nothing]))],
           entityId = ((((((FieldDef (HaskellName (packPTH "Id")))
                             (DBName (packPTH "id")))
                            ((FTTypeCon Nothing) (packPTH "UserId")))
                           (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                              (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                          [])
                         True)
                        ((ForeignRef (HaskellName (packPTH "User")))
                           ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))}])
  ======>
    instance PersistField TestResult where
      toPersistValue
        = \ ent_a2nFO
            -> (PersistMap
                  $ ((Prelude.zip
                        ((Prelude.map pack) ["testKey", "result", "passingDate"]))
                       ((Prelude.map toPersistValue) $ (toPersistFields ent_a2nFO))))
      fromPersistValue
        = ((\ x_a2nFP
              -> let
                   columns_a2nFQ
                     = unordered-containers-0.2.9.0:Data.HashMap.Strict.fromList x_a2nFP
                 in
                   (fromPersistValues
                      $ ((Prelude.map
                            (\ name_a2nFR
                               -> case
                                      (unordered-containers-0.2.9.0:Data.HashMap.Base.lookup
                                         (pack name_a2nFR))
                                        columns_a2nFQ
                                  of
                                    Just v_a2nFS -> v_a2nFS
                                    Nothing -> PersistNull))
                           $ ["testKey", "result", "passingDate"])))
             <=< getPersistMap)
    instance persistent-2.8.1:Database.Persist.Sql.Class.PersistFieldSql TestResult where
      persistent-2.8.1:Database.Persist.Sql.Class.sqlType _ = SqlString
    instance PersistField User where
      toPersistValue
        = \ ent_a2nFT
            -> (PersistMap
                  $ ((Prelude.zip
                        ((Prelude.map pack)
                           ["username", "password", "email", "avatar", "firstName",
                            "secondName", "birthDay", "sex", "createdTests", "passedTests"]))
                       ((Prelude.map toPersistValue) $ (toPersistFields ent_a2nFT))))
      fromPersistValue
        = ((\ x_a2nFU
              -> let
                   columns_a2nFV
                     = unordered-containers-0.2.9.0:Data.HashMap.Strict.fromList x_a2nFU
                 in
                   (fromPersistValues
                      $ ((Prelude.map
                            (\ name_a2nFW
                               -> case
                                      (unordered-containers-0.2.9.0:Data.HashMap.Base.lookup
                                         (pack name_a2nFW))
                                        columns_a2nFV
                                  of
                                    Just v_a2nFX -> v_a2nFX
                                    Nothing -> PersistNull))
                           $ ["username", "password", "email", "avatar", "firstName",
                              "secondName", "birthDay", "sex", "createdTests", "passedTests"])))
             <=< getPersistMap)
    instance persistent-2.8.1:Database.Persist.Sql.Class.PersistFieldSql User where
      persistent-2.8.1:Database.Persist.Sql.Class.sqlType _ = SqlString
    data TestResult
      = TestResult {testResultTestKey :: !Text,
                    testResultResult :: !Text,
                    testResultPassingDate :: !UTCTime}
      deriving (Eq, Read, Show, Generic)
    type TestResultId = Key TestResult
    instance PersistEntity TestResult where
      type PersistEntityBackend TestResult = MongoContext
      data Unique TestResult
      newtype Key TestResult
        = TestResultKey {unTestResultKey :: (BackendKey MongoContext)}
        deriving (Show,
                  Read,
                  Eq,
                  Ord,
                  path-pieces-0.2.1:Web.PathPieces.PathPiece,
                  http-api-data-0.3.7.2:Web.Internal.HttpApiData.ToHttpApiData,
                  http-api-data-0.3.7.2:Web.Internal.HttpApiData.FromHttpApiData,
                  PersistField,
                  persistent-2.8.1:Database.Persist.Sql.Class.PersistFieldSql,
                  Aeson.ToJSON,
                  Aeson.FromJSON)
      data EntityField TestResult typ
        = typ ~ Key TestResult => TestResultId |
          typ ~ Text => TestResultTestKey |
          typ ~ Text => TestResultResult |
          typ ~ UTCTime => TestResultPassingDate
      keyToValues
        = ((ghc-prim-0.5.1.1:GHC.Types.: [])
             . (toPersistValue . unTestResultKey))
      keyFromValues
        = ((fmap TestResultKey)
             . (fromPersistValue . Database.Persist.TH.headNote))
      entityDef _
        = (((((((((EntityDef (HaskellName (packPTH "TestResult")))
                    (DBName (packPTH "test_result")))
                   (((((((FieldDef (HaskellName (packPTH "Id")))
                           (DBName (packPTH "id")))
                          ((FTTypeCon Nothing) (packPTH "TestResultId")))
                         SqlInt64)
                        [])
                       True)
                      ((ForeignRef (HaskellName (packPTH "TestResult")))
                         ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                  [])
                 [((((((FieldDef (HaskellName (packPTH "testKey")))
                         (DBName (packPTH "test_key")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "result")))
                         (DBName (packPTH "result")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "passingDate")))
                         (DBName (packPTH "passing_date")))
                        ((FTTypeCon Nothing) (packPTH "UTCTime")))
                       SqlDayTime)
                      [])
                     True)
                    NoReference])
                [])
               [])
              [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
             (Data.Map.Internal.fromList []))
            False
      toPersistFields (TestResult x_a2nFY x_a2nFZ x_a2nG0)
        = [SomePersistField x_a2nFY, SomePersistField x_a2nFZ,
           SomePersistField x_a2nG0]
      fromPersistValues [x1_a2nG2, x2_a2nG3, x3_a2nG4]
        = TestResult
            <$>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "testKey")))
                 . fromPersistValue)
                x1_a2nG2
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "result")))
                 . fromPersistValue)
                x2_a2nG3
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "passingDate")))
                 . fromPersistValue)
                x3_a2nG4
      fromPersistValues x_a2nG1
        = (Left
             $ ((mappend (packPTH "TestResult: fromPersistValues failed on: "))
                  (pack $ (show x_a2nG1))))
      persistUniqueToFieldNames _
        = error "Degenerate case, should never happen"
      persistUniqueToValues _
        = error "Degenerate case, should never happen"
      persistUniqueKeys
        (TestResult _testKey_a2nG5 _result_a2nG6 _passingDate_a2nG7)
        = []
      persistFieldDef TestResultId
        = ((((((FieldDef (HaskellName (packPTH "Id")))
                 (DBName (packPTH "id")))
                ((FTTypeCon Nothing) (packPTH "TestResultId")))
               SqlInt64)
              [])
             True)
            ((ForeignRef (HaskellName (packPTH "TestResult")))
               ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))
      persistFieldDef TestResultTestKey
        = ((((((FieldDef (HaskellName (packPTH "testKey")))
                 (DBName (packPTH "test_key")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef TestResultResult
        = ((((((FieldDef (HaskellName (packPTH "result")))
                 (DBName (packPTH "result")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef TestResultPassingDate
        = ((((((FieldDef (HaskellName (packPTH "passingDate")))
                 (DBName (packPTH "passing_date")))
                ((FTTypeCon Nothing) (packPTH "UTCTime")))
               SqlDayTime)
              [])
             True)
            NoReference
      persistIdField = TestResultId
      fieldLens TestResultId
        = (lensPTH entityKey)
            (\ Entity _ value_a2nG8 key_a2nG9
               -> (Entity key_a2nG9) value_a2nG8)
      fieldLens TestResultTestKey
        = (lensPTH (testResultTestKey . entityVal))
            (\ Entity key_a2nGa value_a2nGb x_a2nGc
               -> (Entity key_a2nGa) value_a2nGb {testResultTestKey = x_a2nGc})
      fieldLens TestResultResult
        = (lensPTH (testResultResult . entityVal))
            (\ Entity key_a2nGa value_a2nGb x_a2nGc
               -> (Entity key_a2nGa) value_a2nGb {testResultResult = x_a2nGc})
      fieldLens TestResultPassingDate
        = (lensPTH (testResultPassingDate . entityVal))
            (\ Entity key_a2nGa value_a2nGb x_a2nGc
               -> (Entity key_a2nGa)
                    value_a2nGb {testResultPassingDate = x_a2nGc})
    instance ToBackendKey MongoContext TestResult where
      toBackendKey = unTestResultKey
      fromBackendKey = TestResultKey
    data User
      = User {userUsername :: !Text,
              userPassword :: !Text,
              userEmail :: !Text,
              userAvatar :: !Text,
              userFirstName :: !(Maybe Text),
              userSecondName :: !(Maybe Text),
              userBirthDay :: !(Maybe UTCTime),
              userSex :: !(Maybe Int),
              userCreatedTests :: ![ObjectId],
              userPassedTests :: ![TestResult]}
      deriving (Eq, Read, Show, Generic)
    type UserId = Key User
    instance PersistEntity User where
      type PersistEntityBackend User = MongoContext
      data Unique User = Email Text | Username Text
      newtype Key User
        = UserKey {unUserKey :: (BackendKey MongoContext)}
        deriving (Show,
                  Read,
                  Eq,
                  Ord,
                  path-pieces-0.2.1:Web.PathPieces.PathPiece,
                  http-api-data-0.3.7.2:Web.Internal.HttpApiData.ToHttpApiData,
                  http-api-data-0.3.7.2:Web.Internal.HttpApiData.FromHttpApiData,
                  PersistField,
                  persistent-2.8.1:Database.Persist.Sql.Class.PersistFieldSql,
                  Aeson.ToJSON,
                  Aeson.FromJSON)
      data EntityField User typ
        = typ ~ Key User => UserId |
          typ ~ Text => UserUsername |
          typ ~ Text => UserPassword |
          typ ~ Text => UserEmail |
          typ ~ Text => UserAvatar |
          typ ~ Maybe Text => UserFirstName |
          typ ~ Maybe Text => UserSecondName |
          typ ~ Maybe UTCTime => UserBirthDay |
          typ ~ Maybe Int => UserSex |
          typ ~ [ObjectId] => UserCreatedTests |
          typ ~ [TestResult] => UserPassedTests
      keyToValues
        = ((ghc-prim-0.5.1.1:GHC.Types.: [])
             . (toPersistValue . unUserKey))
      keyFromValues
        = ((fmap UserKey)
             . (fromPersistValue . Database.Persist.TH.headNote))
      entityDef _
        = (((((((((EntityDef (HaskellName (packPTH "User")))
                    (DBName (packPTH "user")))
                   (((((((FieldDef (HaskellName (packPTH "Id")))
                           (DBName (packPTH "id")))
                          ((FTTypeCon Nothing) (packPTH "UserId")))
                         SqlInt64)
                        [])
                       True)
                      ((ForeignRef (HaskellName (packPTH "User")))
                         ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                  [])
                 [((((((FieldDef (HaskellName (packPTH "username")))
                         (DBName (packPTH "username")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "password")))
                         (DBName (packPTH "password")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "email")))
                         (DBName (packPTH "email")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "avatar")))
                         (DBName (packPTH "avatar")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "firstName")))
                         (DBName (packPTH "first_name")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [packPTH "Maybe"])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "secondName")))
                         (DBName (packPTH "second_name")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [packPTH "Maybe"])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "birthDay")))
                         (DBName (packPTH "birth_day")))
                        ((FTTypeCon Nothing) (packPTH "UTCTime")))
                       SqlDayTime)
                      [packPTH "Maybe"])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "sex")))
                         (DBName (packPTH "sex")))
                        ((FTTypeCon Nothing) (packPTH "Int")))
                       SqlInt64)
                      [packPTH "Maybe"])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "createdTests")))
                         (DBName (packPTH "created_tests")))
                        (FTList ((FTTypeCon Nothing) (packPTH "ObjectId"))))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "passedTests")))
                         (DBName (packPTH "passed_tests")))
                        (FTList ((FTTypeCon Nothing) (packPTH "TestResult"))))
                       SqlString)
                      [])
                     True)
                    (EmbedRef
                       ((EmbedEntityDef (HaskellName (packPTH "TestResult")))
                          [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing) Nothing,
                           ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                           ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                             Nothing]))])
                [(((UniqueDef (HaskellName (packPTH "Email")))
                     (DBName (packPTH "email")))
                    [(HaskellName (packPTH "email"), DBName (packPTH "email"))])
                   [],
                 (((UniqueDef (HaskellName (packPTH "Username")))
                     (DBName (packPTH "username")))
                    [(HaskellName (packPTH "username"), DBName (packPTH "username"))])
                   []])
               [])
              [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
             (Data.Map.Internal.fromList []))
            False
      toPersistFields
        (User x_a2nGd
              x_a2nGe
              x_a2nGf
              x_a2nGg
              x_a2nGh
              x_a2nGi
              x_a2nGj
              x_a2nGk
              x_a2nGl
              x_a2nGm)
        = [SomePersistField x_a2nGd, SomePersistField x_a2nGe,
           SomePersistField x_a2nGf, SomePersistField x_a2nGg,
           SomePersistField x_a2nGh, SomePersistField x_a2nGi,
           SomePersistField x_a2nGj, SomePersistField x_a2nGk,
           SomePersistField x_a2nGl, SomePersistField x_a2nGm]
      fromPersistValues
        [x1_a2nGo,
         x2_a2nGp,
         x3_a2nGq,
         x4_a2nGr,
         x5_a2nGs,
         x6_a2nGt,
         x7_a2nGu,
         x8_a2nGv,
         x9_a2nGw,
         x10_a2nGx]
        = User
            <$>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "username")))
                 . fromPersistValue)
                x1_a2nGo
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "password")))
                 . fromPersistValue)
                x2_a2nGp
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "email")))
                 . fromPersistValue)
                x3_a2nGq
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "avatar")))
                 . fromPersistValue)
                x4_a2nGr
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "firstName")))
                 . fromPersistValue)
                x5_a2nGs
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "secondName")))
                 . fromPersistValue)
                x6_a2nGt
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "birthDay")))
                 . fromPersistValue)
                x7_a2nGu
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "sex")))
                 . fromPersistValue)
                x8_a2nGv
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "createdTests")))
                 . fromPersistValue)
                x9_a2nGw
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "passedTests")))
                 . fromPersistValue)
                x10_a2nGx
      fromPersistValues x_a2nGn
        = (Left
             $ ((mappend (packPTH "User: fromPersistValues failed on: "))
                  (pack $ (show x_a2nGn))))
      persistUniqueToFieldNames Email {}
        = [(HaskellName (packPTH "email"), DBName (packPTH "email"))]
      persistUniqueToFieldNames Username {}
        = [(HaskellName (packPTH "username"), DBName (packPTH "username"))]
      persistUniqueToValues (Email x_a2nGy) = [toPersistValue x_a2nGy]
      persistUniqueToValues (Username x_a2nGz) = [toPersistValue x_a2nGz]
      persistUniqueKeys
        (User _username_a2nGA
              _password_a2nGB
              _email_a2nGC
              _avatar_a2nGD
              _firstName_a2nGE
              _secondName_a2nGF
              _birthDay_a2nGG
              _sex_a2nGH
              _createdTests_a2nGI
              _passedTests_a2nGJ)
        = [Email _email_a2nGC, Username _username_a2nGA]
      persistFieldDef UserId
        = ((((((FieldDef (HaskellName (packPTH "Id")))
                 (DBName (packPTH "id")))
                ((FTTypeCon Nothing) (packPTH "UserId")))
               SqlInt64)
              [])
             True)
            ((ForeignRef (HaskellName (packPTH "User")))
               ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))
      persistFieldDef UserUsername
        = ((((((FieldDef (HaskellName (packPTH "username")))
                 (DBName (packPTH "username")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef UserPassword
        = ((((((FieldDef (HaskellName (packPTH "password")))
                 (DBName (packPTH "password")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef UserEmail
        = ((((((FieldDef (HaskellName (packPTH "email")))
                 (DBName (packPTH "email")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef UserAvatar
        = ((((((FieldDef (HaskellName (packPTH "avatar")))
                 (DBName (packPTH "avatar")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef UserFirstName
        = ((((((FieldDef (HaskellName (packPTH "firstName")))
                 (DBName (packPTH "first_name")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [packPTH "Maybe"])
             True)
            NoReference
      persistFieldDef UserSecondName
        = ((((((FieldDef (HaskellName (packPTH "secondName")))
                 (DBName (packPTH "second_name")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [packPTH "Maybe"])
             True)
            NoReference
      persistFieldDef UserBirthDay
        = ((((((FieldDef (HaskellName (packPTH "birthDay")))
                 (DBName (packPTH "birth_day")))
                ((FTTypeCon Nothing) (packPTH "UTCTime")))
               SqlDayTime)
              [packPTH "Maybe"])
             True)
            NoReference
      persistFieldDef UserSex
        = ((((((FieldDef (HaskellName (packPTH "sex")))
                 (DBName (packPTH "sex")))
                ((FTTypeCon Nothing) (packPTH "Int")))
               SqlInt64)
              [packPTH "Maybe"])
             True)
            NoReference
      persistFieldDef UserCreatedTests
        = ((((((FieldDef (HaskellName (packPTH "createdTests")))
                 (DBName (packPTH "created_tests")))
                (FTList ((FTTypeCon Nothing) (packPTH "ObjectId"))))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef UserPassedTests
        = ((((((FieldDef (HaskellName (packPTH "passedTests")))
                 (DBName (packPTH "passed_tests")))
                (FTList ((FTTypeCon Nothing) (packPTH "TestResult"))))
               SqlString)
              [])
             True)
            (EmbedRef
               ((EmbedEntityDef (HaskellName (packPTH "TestResult")))
                  [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing) Nothing,
                   ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                   ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                     Nothing]))
      persistIdField = UserId
      fieldLens UserId
        = (lensPTH entityKey)
            (\ Entity _ value_a2nGK key_a2nGL
               -> (Entity key_a2nGL) value_a2nGK)
      fieldLens UserUsername
        = (lensPTH (userUsername . entityVal))
            (\ Entity key_a2nGM value_a2nGN x_a2nGO
               -> (Entity key_a2nGM) value_a2nGN {userUsername = x_a2nGO})
      fieldLens UserPassword
        = (lensPTH (userPassword . entityVal))
            (\ Entity key_a2nGM value_a2nGN x_a2nGO
               -> (Entity key_a2nGM) value_a2nGN {userPassword = x_a2nGO})
      fieldLens UserEmail
        = (lensPTH (userEmail . entityVal))
            (\ Entity key_a2nGM value_a2nGN x_a2nGO
               -> (Entity key_a2nGM) value_a2nGN {userEmail = x_a2nGO})
      fieldLens UserAvatar
        = (lensPTH (userAvatar . entityVal))
            (\ Entity key_a2nGM value_a2nGN x_a2nGO
               -> (Entity key_a2nGM) value_a2nGN {userAvatar = x_a2nGO})
      fieldLens UserFirstName
        = (lensPTH (userFirstName . entityVal))
            (\ Entity key_a2nGM value_a2nGN x_a2nGO
               -> (Entity key_a2nGM) value_a2nGN {userFirstName = x_a2nGO})
      fieldLens UserSecondName
        = (lensPTH (userSecondName . entityVal))
            (\ Entity key_a2nGM value_a2nGN x_a2nGO
               -> (Entity key_a2nGM) value_a2nGN {userSecondName = x_a2nGO})
      fieldLens UserBirthDay
        = (lensPTH (userBirthDay . entityVal))
            (\ Entity key_a2nGM value_a2nGN x_a2nGO
               -> (Entity key_a2nGM) value_a2nGN {userBirthDay = x_a2nGO})
      fieldLens UserSex
        = (lensPTH (userSex . entityVal))
            (\ Entity key_a2nGM value_a2nGN x_a2nGO
               -> (Entity key_a2nGM) value_a2nGN {userSex = x_a2nGO})
      fieldLens UserCreatedTests
        = (lensPTH (userCreatedTests . entityVal))
            (\ Entity key_a2nGM value_a2nGN x_a2nGO
               -> (Entity key_a2nGM) value_a2nGN {userCreatedTests = x_a2nGO})
      fieldLens UserPassedTests
        = (lensPTH (userPassedTests . entityVal))
            (\ Entity key_a2nGM value_a2nGN x_a2nGO
               -> (Entity key_a2nGM) value_a2nGN {userPassedTests = x_a2nGO})
    instance ToBackendKey MongoContext User where
      toBackendKey = unUserKey
      fromBackendKey = UserKey
/home/nikita/Projects/labs/Databases/Course-Project/Server/src/Model/User.hs:(27,79)-(47,2): Splicing expression
    Language.Haskell.TH.Quote.quoteExp
      persistLowerCase
      "\n\
      \TestResult\n\
      \  testKey       Text\n\
      \  result        Text\n\
      \  passingDate   UTCTime\n\
      \  deriving      Eq Read Show Generic\n\
      \User\n\
      \  username      Text\n\
      \  password      Text\n\
      \  email         Text\n\
      \  avatar        Text\n\
      \  firstName     Text Maybe\n\
      \  secondName    Text Maybe\n\
      \  birthDay      UTCTime Maybe\n\
      \  sex           Int Maybe\n\
      \  createdTests  [ObjectId]\n\
      \  passedTests   [TestResult]\n\
      \  Email         email\n\
      \  Username      username\n\
      \  deriving      Eq Read Show Generic\n"
  ======>
    [(((((((((EntityDef (HaskellName (packPTH "TestResult")))
               (DBName (packPTH "test_result")))
              (((((((FieldDef (HaskellName (packPTH "Id")))
                      (DBName (packPTH "id")))
                     ((FTTypeCon Nothing) (packPTH "TestResultId")))
                    SqlInt64)
                   [])
                  True)
                 ((ForeignRef (HaskellName (packPTH "TestResult")))
                    ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
             [])
            [((((((FieldDef (HaskellName (packPTH "testKey")))
                    (DBName (packPTH "test_key")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for testKey")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "result")))
                    (DBName (packPTH "result")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for result")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "passingDate")))
                    (DBName (packPTH "passing_date")))
                   ((FTTypeCon Nothing) (packPTH "UTCTime")))
                  (SqlOther (packPTH "SqlType unset for passingDate")))
                 [])
                True)
               NoReference])
           [])
          [])
         [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
        (Data.Map.Internal.fromList []))
       False
       {entityFields = [((((((FieldDef (HaskellName (packPTH "testKey")))
                               (DBName (packPTH "test_key")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "result")))
                               (DBName (packPTH "result")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "passingDate")))
                               (DBName (packPTH "passing_date")))
                              ((FTTypeCon Nothing) (packPTH "UTCTime")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy UTCTime)))
                            [])
                           True)
                          NoReference],
        entityId = ((((((FieldDef (HaskellName (packPTH "Id")))
                          (DBName (packPTH "id")))
                         ((FTTypeCon Nothing) (packPTH "TestResultId")))
                        (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                           (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                       [])
                      True)
                     ((ForeignRef (HaskellName (packPTH "TestResult")))
                        ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))},
     (((((((((EntityDef (HaskellName (packPTH "User")))
               (DBName (packPTH "user")))
              (((((((FieldDef (HaskellName (packPTH "Id")))
                      (DBName (packPTH "id")))
                     ((FTTypeCon Nothing) (packPTH "UserId")))
                    SqlInt64)
                   [])
                  True)
                 ((ForeignRef (HaskellName (packPTH "User")))
                    ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
             [])
            [((((((FieldDef (HaskellName (packPTH "username")))
                    (DBName (packPTH "username")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for username")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "password")))
                    (DBName (packPTH "password")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for password")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "email")))
                    (DBName (packPTH "email")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for email")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "avatar")))
                    (DBName (packPTH "avatar")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for avatar")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "firstName")))
                    (DBName (packPTH "first_name")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for firstName")))
                 [packPTH "Maybe"])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "secondName")))
                    (DBName (packPTH "second_name")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for secondName")))
                 [packPTH "Maybe"])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "birthDay")))
                    (DBName (packPTH "birth_day")))
                   ((FTTypeCon Nothing) (packPTH "UTCTime")))
                  (SqlOther (packPTH "SqlType unset for birthDay")))
                 [packPTH "Maybe"])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "sex")))
                    (DBName (packPTH "sex")))
                   ((FTTypeCon Nothing) (packPTH "Int")))
                  (SqlOther (packPTH "SqlType unset for sex")))
                 [packPTH "Maybe"])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "createdTests")))
                    (DBName (packPTH "created_tests")))
                   (FTList ((FTTypeCon Nothing) (packPTH "ObjectId"))))
                  (SqlOther (packPTH "SqlType unset for createdTests")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "passedTests")))
                    (DBName (packPTH "passed_tests")))
                   (FTList ((FTTypeCon Nothing) (packPTH "TestResult"))))
                  (SqlOther (packPTH "SqlType unset for passedTests")))
                 [])
                True)
               (EmbedRef
                  ((EmbedEntityDef (HaskellName (packPTH "TestResult")))
                     [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing) Nothing,
                      ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                      ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                        Nothing]))])
           [(((UniqueDef (HaskellName (packPTH "Email")))
                (DBName (packPTH "email")))
               [(HaskellName (packPTH "email"), DBName (packPTH "email"))])
              [],
            (((UniqueDef (HaskellName (packPTH "Username")))
                (DBName (packPTH "username")))
               [(HaskellName (packPTH "username"), DBName (packPTH "username"))])
              []])
          [])
         [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
        (Data.Map.Internal.fromList []))
       False
       {entityFields = [((((((FieldDef (HaskellName (packPTH "username")))
                               (DBName (packPTH "username")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "password")))
                               (DBName (packPTH "password")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "email")))
                               (DBName (packPTH "email")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "avatar")))
                               (DBName (packPTH "avatar")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "firstName")))
                               (DBName (packPTH "first_name")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [packPTH "Maybe"])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "secondName")))
                               (DBName (packPTH "second_name")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [packPTH "Maybe"])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "birthDay")))
                               (DBName (packPTH "birth_day")))
                              ((FTTypeCon Nothing) (packPTH "UTCTime")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy UTCTime)))
                            [packPTH "Maybe"])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "sex")))
                               (DBName (packPTH "sex")))
                              ((FTTypeCon Nothing) (packPTH "Int")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Int)))
                            [packPTH "Maybe"])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "createdTests")))
                               (DBName (packPTH "created_tests")))
                              (FTList ((FTTypeCon Nothing) (packPTH "ObjectId"))))
                             SqlString)
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "passedTests")))
                               (DBName (packPTH "passed_tests")))
                              (FTList ((FTTypeCon Nothing) (packPTH "TestResult"))))
                             SqlString)
                            [])
                           True)
                          (EmbedRef
                             ((EmbedEntityDef (HaskellName (packPTH "TestResult")))
                                [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing) Nothing,
                                 ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                                 ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                                   Nothing]))],
        entityId = ((((((FieldDef (HaskellName (packPTH "Id")))
                          (DBName (packPTH "id")))
                         ((FTTypeCon Nothing) (packPTH "UserId")))
                        (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                           (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                       [])
                      True)
                     ((ForeignRef (HaskellName (packPTH "User")))
                        ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))}]
/home/nikita/Projects/labs/Databases/Course-Project/Server/src/Model/User.hs:(27,1)-(47,2): Splicing declarations
    share
      [mkPersist (mkPersistSettings (ConT ''MongoContext))]
      ([(((((((((EntityDef (HaskellName (packPTH "TestResult")))
                  (DBName (packPTH "test_result")))
                 (((((((FieldDef (HaskellName (packPTH "Id")))
                         (DBName (packPTH "id")))
                        ((FTTypeCon Nothing) (packPTH "TestResultId")))
                       SqlInt64)
                      [])
                     True)
                    ((ForeignRef (HaskellName (packPTH "TestResult")))
                       ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                [])
               [((((((FieldDef (HaskellName (packPTH "testKey")))
                       (DBName (packPTH "test_key")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for testKey")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "result")))
                       (DBName (packPTH "result")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for result")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "passingDate")))
                       (DBName (packPTH "passing_date")))
                      ((FTTypeCon Nothing) (packPTH "UTCTime")))
                     (SqlOther (packPTH "SqlType unset for passingDate")))
                    [])
                   True)
                  NoReference])
              [])
             [])
            [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
           (Data.Map.Internal.fromList []))
          False
          {entityFields = [((((((FieldDef (HaskellName (packPTH "testKey")))
                                  (DBName (packPTH "test_key")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "result")))
                                  (DBName (packPTH "result")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "passingDate")))
                                  (DBName (packPTH "passing_date")))
                                 ((FTTypeCon Nothing) (packPTH "UTCTime")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy UTCTime)))
                               [])
                              True)
                             NoReference],
           entityId = ((((((FieldDef (HaskellName (packPTH "Id")))
                             (DBName (packPTH "id")))
                            ((FTTypeCon Nothing) (packPTH "TestResultId")))
                           (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                              (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                          [])
                         True)
                        ((ForeignRef (HaskellName (packPTH "TestResult")))
                           ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))},
        (((((((((EntityDef (HaskellName (packPTH "User")))
                  (DBName (packPTH "user")))
                 (((((((FieldDef (HaskellName (packPTH "Id")))
                         (DBName (packPTH "id")))
                        ((FTTypeCon Nothing) (packPTH "UserId")))
                       SqlInt64)
                      [])
                     True)
                    ((ForeignRef (HaskellName (packPTH "User")))
                       ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                [])
               [((((((FieldDef (HaskellName (packPTH "username")))
                       (DBName (packPTH "username")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for username")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "password")))
                       (DBName (packPTH "password")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for password")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "email")))
                       (DBName (packPTH "email")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for email")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "avatar")))
                       (DBName (packPTH "avatar")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for avatar")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "firstName")))
                       (DBName (packPTH "first_name")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for firstName")))
                    [packPTH "Maybe"])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "secondName")))
                       (DBName (packPTH "second_name")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for secondName")))
                    [packPTH "Maybe"])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "birthDay")))
                       (DBName (packPTH "birth_day")))
                      ((FTTypeCon Nothing) (packPTH "UTCTime")))
                     (SqlOther (packPTH "SqlType unset for birthDay")))
                    [packPTH "Maybe"])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "sex")))
                       (DBName (packPTH "sex")))
                      ((FTTypeCon Nothing) (packPTH "Int")))
                     (SqlOther (packPTH "SqlType unset for sex")))
                    [packPTH "Maybe"])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "createdTests")))
                       (DBName (packPTH "created_tests")))
                      (FTList ((FTTypeCon Nothing) (packPTH "ObjectId"))))
                     (SqlOther (packPTH "SqlType unset for createdTests")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "passedTests")))
                       (DBName (packPTH "passed_tests")))
                      (FTList ((FTTypeCon Nothing) (packPTH "TestResult"))))
                     (SqlOther (packPTH "SqlType unset for passedTests")))
                    [])
                   True)
                  (EmbedRef
                     ((EmbedEntityDef (HaskellName (packPTH "TestResult")))
                        [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing) Nothing,
                         ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                         ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                           Nothing]))])
              [(((UniqueDef (HaskellName (packPTH "Email")))
                   (DBName (packPTH "email")))
                  [(HaskellName (packPTH "email"), DBName (packPTH "email"))])
                 [],
               (((UniqueDef (HaskellName (packPTH "Username")))
                   (DBName (packPTH "username")))
                  [(HaskellName (packPTH "username"), DBName (packPTH "username"))])
                 []])
             [])
            [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
           (Data.Map.Internal.fromList []))
          False
          {entityFields = [((((((FieldDef (HaskellName (packPTH "username")))
                                  (DBName (packPTH "username")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "password")))
                                  (DBName (packPTH "password")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "email")))
                                  (DBName (packPTH "email")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "avatar")))
                                  (DBName (packPTH "avatar")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "firstName")))
                                  (DBName (packPTH "first_name")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [packPTH "Maybe"])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "secondName")))
                                  (DBName (packPTH "second_name")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [packPTH "Maybe"])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "birthDay")))
                                  (DBName (packPTH "birth_day")))
                                 ((FTTypeCon Nothing) (packPTH "UTCTime")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy UTCTime)))
                               [packPTH "Maybe"])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "sex")))
                                  (DBName (packPTH "sex")))
                                 ((FTTypeCon Nothing) (packPTH "Int")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Int)))
                               [packPTH "Maybe"])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "createdTests")))
                                  (DBName (packPTH "created_tests")))
                                 (FTList ((FTTypeCon Nothing) (packPTH "ObjectId"))))
                                SqlString)
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "passedTests")))
                                  (DBName (packPTH "passed_tests")))
                                 (FTList ((FTTypeCon Nothing) (packPTH "TestResult"))))
                                SqlString)
                               [])
                              True)
                             (EmbedRef
                                ((EmbedEntityDef (HaskellName (packPTH "TestResult")))
                                   [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing) Nothing,
                                    ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                                    ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                                      Nothing]))],
           entityId = ((((((FieldDef (HaskellName (packPTH "Id")))
                             (DBName (packPTH "id")))
                            ((FTTypeCon Nothing) (packPTH "UserId")))
                           (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                              (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                          [])
                         True)
                        ((ForeignRef (HaskellName (packPTH "User")))
                           ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))}])
  ======>
    instance PersistField TestResult where
      toPersistValue
        = \ ent_a2plE
            -> (PersistMap
                  $ ((Prelude.zip
                        ((Prelude.map pack) ["testKey", "result", "passingDate"]))
                       ((Prelude.map toPersistValue) $ (toPersistFields ent_a2plE))))
      fromPersistValue
        = ((\ x_a2plF
              -> let
                   columns_a2plG
                     = unordered-containers-0.2.9.0:Data.HashMap.Strict.fromList x_a2plF
                 in
                   (fromPersistValues
                      $ ((Prelude.map
                            (\ name_a2plH
                               -> case
                                      (unordered-containers-0.2.9.0:Data.HashMap.Base.lookup
                                         (pack name_a2plH))
                                        columns_a2plG
                                  of
                                    Just v_a2plI -> v_a2plI
                                    Nothing -> PersistNull))
                           $ ["testKey", "result", "passingDate"])))
             <=< getPersistMap)
    instance persistent-2.8.1:Database.Persist.Sql.Class.PersistFieldSql TestResult where
      persistent-2.8.1:Database.Persist.Sql.Class.sqlType _ = SqlString
    instance PersistField User where
      toPersistValue
        = \ ent_a2plJ
            -> (PersistMap
                  $ ((Prelude.zip
                        ((Prelude.map pack)
                           ["username", "password", "email", "avatar", "firstName",
                            "secondName", "birthDay", "sex", "createdTests", "passedTests"]))
                       ((Prelude.map toPersistValue) $ (toPersistFields ent_a2plJ))))
      fromPersistValue
        = ((\ x_a2plK
              -> let
                   columns_a2plL
                     = unordered-containers-0.2.9.0:Data.HashMap.Strict.fromList x_a2plK
                 in
                   (fromPersistValues
                      $ ((Prelude.map
                            (\ name_a2plM
                               -> case
                                      (unordered-containers-0.2.9.0:Data.HashMap.Base.lookup
                                         (pack name_a2plM))
                                        columns_a2plL
                                  of
                                    Just v_a2plN -> v_a2plN
                                    Nothing -> PersistNull))
                           $ ["username", "password", "email", "avatar", "firstName",
                              "secondName", "birthDay", "sex", "createdTests", "passedTests"])))
             <=< getPersistMap)
    instance persistent-2.8.1:Database.Persist.Sql.Class.PersistFieldSql User where
      persistent-2.8.1:Database.Persist.Sql.Class.sqlType _ = SqlString
    data TestResult
      = TestResult {testResultTestKey :: !Text,
                    testResultResult :: !Text,
                    testResultPassingDate :: !UTCTime}
      deriving (Eq, Read, Show, Generic)
    type TestResultId = Key TestResult
    instance PersistEntity TestResult where
      type PersistEntityBackend TestResult = MongoContext
      data Unique TestResult
      newtype Key TestResult
        = TestResultKey {unTestResultKey :: (BackendKey MongoContext)}
        deriving (Show,
                  Read,
                  Eq,
                  Ord,
                  path-pieces-0.2.1:Web.PathPieces.PathPiece,
                  http-api-data-0.3.7.2:Web.Internal.HttpApiData.ToHttpApiData,
                  http-api-data-0.3.7.2:Web.Internal.HttpApiData.FromHttpApiData,
                  PersistField,
                  persistent-2.8.1:Database.Persist.Sql.Class.PersistFieldSql,
                  Aeson.ToJSON,
                  Aeson.FromJSON)
      data EntityField TestResult typ
        = typ ~ Key TestResult => TestResultId |
          typ ~ Text => TestResultTestKey |
          typ ~ Text => TestResultResult |
          typ ~ UTCTime => TestResultPassingDate
      keyToValues
        = ((ghc-prim-0.5.1.1:GHC.Types.: [])
             . (toPersistValue . unTestResultKey))
      keyFromValues
        = ((fmap TestResultKey)
             . (fromPersistValue . Database.Persist.TH.headNote))
      entityDef _
        = (((((((((EntityDef (HaskellName (packPTH "TestResult")))
                    (DBName (packPTH "test_result")))
                   (((((((FieldDef (HaskellName (packPTH "Id")))
                           (DBName (packPTH "id")))
                          ((FTTypeCon Nothing) (packPTH "TestResultId")))
                         SqlInt64)
                        [])
                       True)
                      ((ForeignRef (HaskellName (packPTH "TestResult")))
                         ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                  [])
                 [((((((FieldDef (HaskellName (packPTH "testKey")))
                         (DBName (packPTH "test_key")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "result")))
                         (DBName (packPTH "result")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "passingDate")))
                         (DBName (packPTH "passing_date")))
                        ((FTTypeCon Nothing) (packPTH "UTCTime")))
                       SqlDayTime)
                      [])
                     True)
                    NoReference])
                [])
               [])
              [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
             (Data.Map.Internal.fromList []))
            False
      toPersistFields (TestResult x_a2plO x_a2plP x_a2plQ)
        = [SomePersistField x_a2plO, SomePersistField x_a2plP,
           SomePersistField x_a2plQ]
      fromPersistValues [x1_a2plS, x2_a2plT, x3_a2plU]
        = TestResult
            <$>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "testKey")))
                 . fromPersistValue)
                x1_a2plS
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "result")))
                 . fromPersistValue)
                x2_a2plT
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "passingDate")))
                 . fromPersistValue)
                x3_a2plU
      fromPersistValues x_a2plR
        = (Left
             $ ((mappend (packPTH "TestResult: fromPersistValues failed on: "))
                  (pack $ (show x_a2plR))))
      persistUniqueToFieldNames _
        = error "Degenerate case, should never happen"
      persistUniqueToValues _
        = error "Degenerate case, should never happen"
      persistUniqueKeys
        (TestResult _testKey_a2plV _result_a2plW _passingDate_a2plX)
        = []
      persistFieldDef TestResultId
        = ((((((FieldDef (HaskellName (packPTH "Id")))
                 (DBName (packPTH "id")))
                ((FTTypeCon Nothing) (packPTH "TestResultId")))
               SqlInt64)
              [])
             True)
            ((ForeignRef (HaskellName (packPTH "TestResult")))
               ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))
      persistFieldDef TestResultTestKey
        = ((((((FieldDef (HaskellName (packPTH "testKey")))
                 (DBName (packPTH "test_key")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef TestResultResult
        = ((((((FieldDef (HaskellName (packPTH "result")))
                 (DBName (packPTH "result")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef TestResultPassingDate
        = ((((((FieldDef (HaskellName (packPTH "passingDate")))
                 (DBName (packPTH "passing_date")))
                ((FTTypeCon Nothing) (packPTH "UTCTime")))
               SqlDayTime)
              [])
             True)
            NoReference
      persistIdField = TestResultId
      fieldLens TestResultId
        = (lensPTH entityKey)
            (\ Entity _ value_a2plY key_a2plZ
               -> (Entity key_a2plZ) value_a2plY)
      fieldLens TestResultTestKey
        = (lensPTH (testResultTestKey . entityVal))
            (\ Entity key_a2pm0 value_a2pm1 x_a2pm2
               -> (Entity key_a2pm0) value_a2pm1 {testResultTestKey = x_a2pm2})
      fieldLens TestResultResult
        = (lensPTH (testResultResult . entityVal))
            (\ Entity key_a2pm0 value_a2pm1 x_a2pm2
               -> (Entity key_a2pm0) value_a2pm1 {testResultResult = x_a2pm2})
      fieldLens TestResultPassingDate
        = (lensPTH (testResultPassingDate . entityVal))
            (\ Entity key_a2pm0 value_a2pm1 x_a2pm2
               -> (Entity key_a2pm0)
                    value_a2pm1 {testResultPassingDate = x_a2pm2})
    instance ToBackendKey MongoContext TestResult where
      toBackendKey = unTestResultKey
      fromBackendKey = TestResultKey
    data User
      = User {userUsername :: !Text,
              userPassword :: !Text,
              userEmail :: !Text,
              userAvatar :: !Text,
              userFirstName :: !(Maybe Text),
              userSecondName :: !(Maybe Text),
              userBirthDay :: !(Maybe UTCTime),
              userSex :: !(Maybe Int),
              userCreatedTests :: ![ObjectId],
              userPassedTests :: ![TestResult]}
      deriving (Eq, Read, Show, Generic)
    type UserId = Key User
    instance PersistEntity User where
      type PersistEntityBackend User = MongoContext
      data Unique User = Email Text | Username Text
      newtype Key User
        = UserKey {unUserKey :: (BackendKey MongoContext)}
        deriving (Show,
                  Read,
                  Eq,
                  Ord,
                  path-pieces-0.2.1:Web.PathPieces.PathPiece,
                  http-api-data-0.3.7.2:Web.Internal.HttpApiData.ToHttpApiData,
                  http-api-data-0.3.7.2:Web.Internal.HttpApiData.FromHttpApiData,
                  PersistField,
                  persistent-2.8.1:Database.Persist.Sql.Class.PersistFieldSql,
                  Aeson.ToJSON,
                  Aeson.FromJSON)
      data EntityField User typ
        = typ ~ Key User => UserId |
          typ ~ Text => UserUsername |
          typ ~ Text => UserPassword |
          typ ~ Text => UserEmail |
          typ ~ Text => UserAvatar |
          typ ~ Maybe Text => UserFirstName |
          typ ~ Maybe Text => UserSecondName |
          typ ~ Maybe UTCTime => UserBirthDay |
          typ ~ Maybe Int => UserSex |
          typ ~ [ObjectId] => UserCreatedTests |
          typ ~ [TestResult] => UserPassedTests
      keyToValues
        = ((ghc-prim-0.5.1.1:GHC.Types.: [])
             . (toPersistValue . unUserKey))
      keyFromValues
        = ((fmap UserKey)
             . (fromPersistValue . Database.Persist.TH.headNote))
      entityDef _
        = (((((((((EntityDef (HaskellName (packPTH "User")))
                    (DBName (packPTH "user")))
                   (((((((FieldDef (HaskellName (packPTH "Id")))
                           (DBName (packPTH "id")))
                          ((FTTypeCon Nothing) (packPTH "UserId")))
                         SqlInt64)
                        [])
                       True)
                      ((ForeignRef (HaskellName (packPTH "User")))
                         ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                  [])
                 [((((((FieldDef (HaskellName (packPTH "username")))
                         (DBName (packPTH "username")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "password")))
                         (DBName (packPTH "password")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "email")))
                         (DBName (packPTH "email")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "avatar")))
                         (DBName (packPTH "avatar")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "firstName")))
                         (DBName (packPTH "first_name")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [packPTH "Maybe"])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "secondName")))
                         (DBName (packPTH "second_name")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [packPTH "Maybe"])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "birthDay")))
                         (DBName (packPTH "birth_day")))
                        ((FTTypeCon Nothing) (packPTH "UTCTime")))
                       SqlDayTime)
                      [packPTH "Maybe"])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "sex")))
                         (DBName (packPTH "sex")))
                        ((FTTypeCon Nothing) (packPTH "Int")))
                       SqlInt64)
                      [packPTH "Maybe"])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "createdTests")))
                         (DBName (packPTH "created_tests")))
                        (FTList ((FTTypeCon Nothing) (packPTH "ObjectId"))))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "passedTests")))
                         (DBName (packPTH "passed_tests")))
                        (FTList ((FTTypeCon Nothing) (packPTH "TestResult"))))
                       SqlString)
                      [])
                     True)
                    (EmbedRef
                       ((EmbedEntityDef (HaskellName (packPTH "TestResult")))
                          [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing) Nothing,
                           ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                           ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                             Nothing]))])
                [(((UniqueDef (HaskellName (packPTH "Email")))
                     (DBName (packPTH "email")))
                    [(HaskellName (packPTH "email"), DBName (packPTH "email"))])
                   [],
                 (((UniqueDef (HaskellName (packPTH "Username")))
                     (DBName (packPTH "username")))
                    [(HaskellName (packPTH "username"), DBName (packPTH "username"))])
                   []])
               [])
              [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
             (Data.Map.Internal.fromList []))
            False
      toPersistFields
        (User x_a2pm3
              x_a2pm4
              x_a2pm5
              x_a2pm6
              x_a2pm7
              x_a2pm8
              x_a2pm9
              x_a2pma
              x_a2pmb
              x_a2pmc)
        = [SomePersistField x_a2pm3, SomePersistField x_a2pm4,
           SomePersistField x_a2pm5, SomePersistField x_a2pm6,
           SomePersistField x_a2pm7, SomePersistField x_a2pm8,
           SomePersistField x_a2pm9, SomePersistField x_a2pma,
           SomePersistField x_a2pmb, SomePersistField x_a2pmc]
      fromPersistValues
        [x1_a2pme,
         x2_a2pmf,
         x3_a2pmg,
         x4_a2pmh,
         x5_a2pmi,
         x6_a2pmj,
         x7_a2pmk,
         x8_a2pml,
         x9_a2pmm,
         x10_a2pmn]
        = User
            <$>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "username")))
                 . fromPersistValue)
                x1_a2pme
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "password")))
                 . fromPersistValue)
                x2_a2pmf
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "email")))
                 . fromPersistValue)
                x3_a2pmg
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "avatar")))
                 . fromPersistValue)
                x4_a2pmh
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "firstName")))
                 . fromPersistValue)
                x5_a2pmi
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "secondName")))
                 . fromPersistValue)
                x6_a2pmj
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "birthDay")))
                 . fromPersistValue)
                x7_a2pmk
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "sex")))
                 . fromPersistValue)
                x8_a2pml
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "createdTests")))
                 . fromPersistValue)
                x9_a2pmm
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "passedTests")))
                 . fromPersistValue)
                x10_a2pmn
      fromPersistValues x_a2pmd
        = (Left
             $ ((mappend (packPTH "User: fromPersistValues failed on: "))
                  (pack $ (show x_a2pmd))))
      persistUniqueToFieldNames Email {}
        = [(HaskellName (packPTH "email"), DBName (packPTH "email"))]
      persistUniqueToFieldNames Username {}
        = [(HaskellName (packPTH "username"), DBName (packPTH "username"))]
      persistUniqueToValues (Email x_a2pmo) = [toPersistValue x_a2pmo]
      persistUniqueToValues (Username x_a2pmp) = [toPersistValue x_a2pmp]
      persistUniqueKeys
        (User _username_a2pmq
              _password_a2pmr
              _email_a2pms
              _avatar_a2pmt
              _firstName_a2pmu
              _secondName_a2pmv
              _birthDay_a2pmw
              _sex_a2pmx
              _createdTests_a2pmy
              _passedTests_a2pmz)
        = [Email _email_a2pms, Username _username_a2pmq]
      persistFieldDef UserId
        = ((((((FieldDef (HaskellName (packPTH "Id")))
                 (DBName (packPTH "id")))
                ((FTTypeCon Nothing) (packPTH "UserId")))
               SqlInt64)
              [])
             True)
            ((ForeignRef (HaskellName (packPTH "User")))
               ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))
      persistFieldDef UserUsername
        = ((((((FieldDef (HaskellName (packPTH "username")))
                 (DBName (packPTH "username")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef UserPassword
        = ((((((FieldDef (HaskellName (packPTH "password")))
                 (DBName (packPTH "password")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef UserEmail
        = ((((((FieldDef (HaskellName (packPTH "email")))
                 (DBName (packPTH "email")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef UserAvatar
        = ((((((FieldDef (HaskellName (packPTH "avatar")))
                 (DBName (packPTH "avatar")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef UserFirstName
        = ((((((FieldDef (HaskellName (packPTH "firstName")))
                 (DBName (packPTH "first_name")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [packPTH "Maybe"])
             True)
            NoReference
      persistFieldDef UserSecondName
        = ((((((FieldDef (HaskellName (packPTH "secondName")))
                 (DBName (packPTH "second_name")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [packPTH "Maybe"])
             True)
            NoReference
      persistFieldDef UserBirthDay
        = ((((((FieldDef (HaskellName (packPTH "birthDay")))
                 (DBName (packPTH "birth_day")))
                ((FTTypeCon Nothing) (packPTH "UTCTime")))
               SqlDayTime)
              [packPTH "Maybe"])
             True)
            NoReference
      persistFieldDef UserSex
        = ((((((FieldDef (HaskellName (packPTH "sex")))
                 (DBName (packPTH "sex")))
                ((FTTypeCon Nothing) (packPTH "Int")))
               SqlInt64)
              [packPTH "Maybe"])
             True)
            NoReference
      persistFieldDef UserCreatedTests
        = ((((((FieldDef (HaskellName (packPTH "createdTests")))
                 (DBName (packPTH "created_tests")))
                (FTList ((FTTypeCon Nothing) (packPTH "ObjectId"))))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef UserPassedTests
        = ((((((FieldDef (HaskellName (packPTH "passedTests")))
                 (DBName (packPTH "passed_tests")))
                (FTList ((FTTypeCon Nothing) (packPTH "TestResult"))))
               SqlString)
              [])
             True)
            (EmbedRef
               ((EmbedEntityDef (HaskellName (packPTH "TestResult")))
                  [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing) Nothing,
                   ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                   ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                     Nothing]))
      persistIdField = UserId
      fieldLens UserId
        = (lensPTH entityKey)
            (\ Entity _ value_a2pmA key_a2pmB
               -> (Entity key_a2pmB) value_a2pmA)
      fieldLens UserUsername
        = (lensPTH (userUsername . entityVal))
            (\ Entity key_a2pmC value_a2pmD x_a2pmE
               -> (Entity key_a2pmC) value_a2pmD {userUsername = x_a2pmE})
      fieldLens UserPassword
        = (lensPTH (userPassword . entityVal))
            (\ Entity key_a2pmC value_a2pmD x_a2pmE
               -> (Entity key_a2pmC) value_a2pmD {userPassword = x_a2pmE})
      fieldLens UserEmail
        = (lensPTH (userEmail . entityVal))
            (\ Entity key_a2pmC value_a2pmD x_a2pmE
               -> (Entity key_a2pmC) value_a2pmD {userEmail = x_a2pmE})
      fieldLens UserAvatar
        = (lensPTH (userAvatar . entityVal))
            (\ Entity key_a2pmC value_a2pmD x_a2pmE
               -> (Entity key_a2pmC) value_a2pmD {userAvatar = x_a2pmE})
      fieldLens UserFirstName
        = (lensPTH (userFirstName . entityVal))
            (\ Entity key_a2pmC value_a2pmD x_a2pmE
               -> (Entity key_a2pmC) value_a2pmD {userFirstName = x_a2pmE})
      fieldLens UserSecondName
        = (lensPTH (userSecondName . entityVal))
            (\ Entity key_a2pmC value_a2pmD x_a2pmE
               -> (Entity key_a2pmC) value_a2pmD {userSecondName = x_a2pmE})
      fieldLens UserBirthDay
        = (lensPTH (userBirthDay . entityVal))
            (\ Entity key_a2pmC value_a2pmD x_a2pmE
               -> (Entity key_a2pmC) value_a2pmD {userBirthDay = x_a2pmE})
      fieldLens UserSex
        = (lensPTH (userSex . entityVal))
            (\ Entity key_a2pmC value_a2pmD x_a2pmE
               -> (Entity key_a2pmC) value_a2pmD {userSex = x_a2pmE})
      fieldLens UserCreatedTests
        = (lensPTH (userCreatedTests . entityVal))
            (\ Entity key_a2pmC value_a2pmD x_a2pmE
               -> (Entity key_a2pmC) value_a2pmD {userCreatedTests = x_a2pmE})
      fieldLens UserPassedTests
        = (lensPTH (userPassedTests . entityVal))
            (\ Entity key_a2pmC value_a2pmD x_a2pmE
               -> (Entity key_a2pmC) value_a2pmD {userPassedTests = x_a2pmE})
    instance ToBackendKey MongoContext User where
      toBackendKey = unUserKey
      fromBackendKey = UserKey
/home/nikita/Projects/labs/Databases/Course-Project/Server/src/Model/User.hs:(27,79)-(47,2): Splicing expression
    Language.Haskell.TH.Quote.quoteExp
      persistLowerCase
      "\n\
      \TestResult\n\
      \  testKey       Text\n\
      \  result        Text\n\
      \  passingDate   UTCTime\n\
      \  deriving      Eq Read Show Generic\n\
      \User\n\
      \  username      Text\n\
      \  password      Text\n\
      \  email         Text\n\
      \  avatar        Text\n\
      \  firstName     Text Maybe\n\
      \  secondName    Text Maybe\n\
      \  birthDay      UTCTime Maybe\n\
      \  sex           Int Maybe\n\
      \  createdTests  [ObjectId]\n\
      \  passedTests   [TestResult]\n\
      \  Email         email\n\
      \  Username      username\n\
      \  deriving      Eq Read Show Generic\n"
  ======>
    [(((((((((EntityDef (HaskellName (packPTH "TestResult")))
               (DBName (packPTH "test_result")))
              (((((((FieldDef (HaskellName (packPTH "Id")))
                      (DBName (packPTH "id")))
                     ((FTTypeCon Nothing) (packPTH "TestResultId")))
                    SqlInt64)
                   [])
                  True)
                 ((ForeignRef (HaskellName (packPTH "TestResult")))
                    ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
             [])
            [((((((FieldDef (HaskellName (packPTH "testKey")))
                    (DBName (packPTH "test_key")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for testKey")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "result")))
                    (DBName (packPTH "result")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for result")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "passingDate")))
                    (DBName (packPTH "passing_date")))
                   ((FTTypeCon Nothing) (packPTH "UTCTime")))
                  (SqlOther (packPTH "SqlType unset for passingDate")))
                 [])
                True)
               NoReference])
           [])
          [])
         [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
        (Data.Map.Internal.fromList []))
       False
       {entityFields = [((((((FieldDef (HaskellName (packPTH "testKey")))
                               (DBName (packPTH "test_key")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "result")))
                               (DBName (packPTH "result")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "passingDate")))
                               (DBName (packPTH "passing_date")))
                              ((FTTypeCon Nothing) (packPTH "UTCTime")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy UTCTime)))
                            [])
                           True)
                          NoReference],
        entityId = ((((((FieldDef (HaskellName (packPTH "Id")))
                          (DBName (packPTH "id")))
                         ((FTTypeCon Nothing) (packPTH "TestResultId")))
                        (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                           (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                       [])
                      True)
                     ((ForeignRef (HaskellName (packPTH "TestResult")))
                        ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))},
     (((((((((EntityDef (HaskellName (packPTH "User")))
               (DBName (packPTH "user")))
              (((((((FieldDef (HaskellName (packPTH "Id")))
                      (DBName (packPTH "id")))
                     ((FTTypeCon Nothing) (packPTH "UserId")))
                    SqlInt64)
                   [])
                  True)
                 ((ForeignRef (HaskellName (packPTH "User")))
                    ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
             [])
            [((((((FieldDef (HaskellName (packPTH "username")))
                    (DBName (packPTH "username")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for username")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "password")))
                    (DBName (packPTH "password")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for password")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "email")))
                    (DBName (packPTH "email")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for email")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "avatar")))
                    (DBName (packPTH "avatar")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for avatar")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "firstName")))
                    (DBName (packPTH "first_name")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for firstName")))
                 [packPTH "Maybe"])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "secondName")))
                    (DBName (packPTH "second_name")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for secondName")))
                 [packPTH "Maybe"])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "birthDay")))
                    (DBName (packPTH "birth_day")))
                   ((FTTypeCon Nothing) (packPTH "UTCTime")))
                  (SqlOther (packPTH "SqlType unset for birthDay")))
                 [packPTH "Maybe"])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "sex")))
                    (DBName (packPTH "sex")))
                   ((FTTypeCon Nothing) (packPTH "Int")))
                  (SqlOther (packPTH "SqlType unset for sex")))
                 [packPTH "Maybe"])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "createdTests")))
                    (DBName (packPTH "created_tests")))
                   (FTList ((FTTypeCon Nothing) (packPTH "ObjectId"))))
                  (SqlOther (packPTH "SqlType unset for createdTests")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "passedTests")))
                    (DBName (packPTH "passed_tests")))
                   (FTList ((FTTypeCon Nothing) (packPTH "TestResult"))))
                  (SqlOther (packPTH "SqlType unset for passedTests")))
                 [])
                True)
               (EmbedRef
                  ((EmbedEntityDef (HaskellName (packPTH "TestResult")))
                     [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing) Nothing,
                      ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                      ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                        Nothing]))])
           [(((UniqueDef (HaskellName (packPTH "Email")))
                (DBName (packPTH "email")))
               [(HaskellName (packPTH "email"), DBName (packPTH "email"))])
              [],
            (((UniqueDef (HaskellName (packPTH "Username")))
                (DBName (packPTH "username")))
               [(HaskellName (packPTH "username"), DBName (packPTH "username"))])
              []])
          [])
         [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
        (Data.Map.Internal.fromList []))
       False
       {entityFields = [((((((FieldDef (HaskellName (packPTH "username")))
                               (DBName (packPTH "username")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "password")))
                               (DBName (packPTH "password")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "email")))
                               (DBName (packPTH "email")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "avatar")))
                               (DBName (packPTH "avatar")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "firstName")))
                               (DBName (packPTH "first_name")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [packPTH "Maybe"])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "secondName")))
                               (DBName (packPTH "second_name")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [packPTH "Maybe"])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "birthDay")))
                               (DBName (packPTH "birth_day")))
                              ((FTTypeCon Nothing) (packPTH "UTCTime")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy UTCTime)))
                            [packPTH "Maybe"])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "sex")))
                               (DBName (packPTH "sex")))
                              ((FTTypeCon Nothing) (packPTH "Int")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Int)))
                            [packPTH "Maybe"])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "createdTests")))
                               (DBName (packPTH "created_tests")))
                              (FTList ((FTTypeCon Nothing) (packPTH "ObjectId"))))
                             SqlString)
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "passedTests")))
                               (DBName (packPTH "passed_tests")))
                              (FTList ((FTTypeCon Nothing) (packPTH "TestResult"))))
                             SqlString)
                            [])
                           True)
                          (EmbedRef
                             ((EmbedEntityDef (HaskellName (packPTH "TestResult")))
                                [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing) Nothing,
                                 ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                                 ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                                   Nothing]))],
        entityId = ((((((FieldDef (HaskellName (packPTH "Id")))
                          (DBName (packPTH "id")))
                         ((FTTypeCon Nothing) (packPTH "UserId")))
                        (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                           (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                       [])
                      True)
                     ((ForeignRef (HaskellName (packPTH "User")))
                        ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))}]
/home/nikita/Projects/labs/Databases/Course-Project/Server/src/Model/User.hs:(27,1)-(47,2): Splicing declarations
    share
      [mkPersist (mkPersistSettings (ConT ''MongoContext))]
      ([(((((((((EntityDef (HaskellName (packPTH "TestResult")))
                  (DBName (packPTH "test_result")))
                 (((((((FieldDef (HaskellName (packPTH "Id")))
                         (DBName (packPTH "id")))
                        ((FTTypeCon Nothing) (packPTH "TestResultId")))
                       SqlInt64)
                      [])
                     True)
                    ((ForeignRef (HaskellName (packPTH "TestResult")))
                       ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                [])
               [((((((FieldDef (HaskellName (packPTH "testKey")))
                       (DBName (packPTH "test_key")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for testKey")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "result")))
                       (DBName (packPTH "result")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for result")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "passingDate")))
                       (DBName (packPTH "passing_date")))
                      ((FTTypeCon Nothing) (packPTH "UTCTime")))
                     (SqlOther (packPTH "SqlType unset for passingDate")))
                    [])
                   True)
                  NoReference])
              [])
             [])
            [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
           (Data.Map.Internal.fromList []))
          False
          {entityFields = [((((((FieldDef (HaskellName (packPTH "testKey")))
                                  (DBName (packPTH "test_key")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "result")))
                                  (DBName (packPTH "result")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "passingDate")))
                                  (DBName (packPTH "passing_date")))
                                 ((FTTypeCon Nothing) (packPTH "UTCTime")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy UTCTime)))
                               [])
                              True)
                             NoReference],
           entityId = ((((((FieldDef (HaskellName (packPTH "Id")))
                             (DBName (packPTH "id")))
                            ((FTTypeCon Nothing) (packPTH "TestResultId")))
                           (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                              (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                          [])
                         True)
                        ((ForeignRef (HaskellName (packPTH "TestResult")))
                           ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))},
        (((((((((EntityDef (HaskellName (packPTH "User")))
                  (DBName (packPTH "user")))
                 (((((((FieldDef (HaskellName (packPTH "Id")))
                         (DBName (packPTH "id")))
                        ((FTTypeCon Nothing) (packPTH "UserId")))
                       SqlInt64)
                      [])
                     True)
                    ((ForeignRef (HaskellName (packPTH "User")))
                       ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                [])
               [((((((FieldDef (HaskellName (packPTH "username")))
                       (DBName (packPTH "username")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for username")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "password")))
                       (DBName (packPTH "password")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for password")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "email")))
                       (DBName (packPTH "email")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for email")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "avatar")))
                       (DBName (packPTH "avatar")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for avatar")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "firstName")))
                       (DBName (packPTH "first_name")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for firstName")))
                    [packPTH "Maybe"])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "secondName")))
                       (DBName (packPTH "second_name")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for secondName")))
                    [packPTH "Maybe"])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "birthDay")))
                       (DBName (packPTH "birth_day")))
                      ((FTTypeCon Nothing) (packPTH "UTCTime")))
                     (SqlOther (packPTH "SqlType unset for birthDay")))
                    [packPTH "Maybe"])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "sex")))
                       (DBName (packPTH "sex")))
                      ((FTTypeCon Nothing) (packPTH "Int")))
                     (SqlOther (packPTH "SqlType unset for sex")))
                    [packPTH "Maybe"])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "createdTests")))
                       (DBName (packPTH "created_tests")))
                      (FTList ((FTTypeCon Nothing) (packPTH "ObjectId"))))
                     (SqlOther (packPTH "SqlType unset for createdTests")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "passedTests")))
                       (DBName (packPTH "passed_tests")))
                      (FTList ((FTTypeCon Nothing) (packPTH "TestResult"))))
                     (SqlOther (packPTH "SqlType unset for passedTests")))
                    [])
                   True)
                  (EmbedRef
                     ((EmbedEntityDef (HaskellName (packPTH "TestResult")))
                        [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing) Nothing,
                         ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                         ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                           Nothing]))])
              [(((UniqueDef (HaskellName (packPTH "Email")))
                   (DBName (packPTH "email")))
                  [(HaskellName (packPTH "email"), DBName (packPTH "email"))])
                 [],
               (((UniqueDef (HaskellName (packPTH "Username")))
                   (DBName (packPTH "username")))
                  [(HaskellName (packPTH "username"), DBName (packPTH "username"))])
                 []])
             [])
            [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
           (Data.Map.Internal.fromList []))
          False
          {entityFields = [((((((FieldDef (HaskellName (packPTH "username")))
                                  (DBName (packPTH "username")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "password")))
                                  (DBName (packPTH "password")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "email")))
                                  (DBName (packPTH "email")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "avatar")))
                                  (DBName (packPTH "avatar")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "firstName")))
                                  (DBName (packPTH "first_name")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [packPTH "Maybe"])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "secondName")))
                                  (DBName (packPTH "second_name")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [packPTH "Maybe"])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "birthDay")))
                                  (DBName (packPTH "birth_day")))
                                 ((FTTypeCon Nothing) (packPTH "UTCTime")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy UTCTime)))
                               [packPTH "Maybe"])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "sex")))
                                  (DBName (packPTH "sex")))
                                 ((FTTypeCon Nothing) (packPTH "Int")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Int)))
                               [packPTH "Maybe"])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "createdTests")))
                                  (DBName (packPTH "created_tests")))
                                 (FTList ((FTTypeCon Nothing) (packPTH "ObjectId"))))
                                SqlString)
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "passedTests")))
                                  (DBName (packPTH "passed_tests")))
                                 (FTList ((FTTypeCon Nothing) (packPTH "TestResult"))))
                                SqlString)
                               [])
                              True)
                             (EmbedRef
                                ((EmbedEntityDef (HaskellName (packPTH "TestResult")))
                                   [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing) Nothing,
                                    ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                                    ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                                      Nothing]))],
           entityId = ((((((FieldDef (HaskellName (packPTH "Id")))
                             (DBName (packPTH "id")))
                            ((FTTypeCon Nothing) (packPTH "UserId")))
                           (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                              (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                          [])
                         True)
                        ((ForeignRef (HaskellName (packPTH "User")))
                           ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))}])
  ======>
    instance PersistField TestResult where
      toPersistValue
        = \ ent_a2soW
            -> (PersistMap
                  $ ((Prelude.zip
                        ((Prelude.map pack) ["testKey", "result", "passingDate"]))
                       ((Prelude.map toPersistValue) $ (toPersistFields ent_a2soW))))
      fromPersistValue
        = ((\ x_a2soX
              -> let
                   columns_a2soY
                     = unordered-containers-0.2.9.0:Data.HashMap.Strict.fromList x_a2soX
                 in
                   (fromPersistValues
                      $ ((Prelude.map
                            (\ name_a2soZ
                               -> case
                                      (unordered-containers-0.2.9.0:Data.HashMap.Base.lookup
                                         (pack name_a2soZ))
                                        columns_a2soY
                                  of
                                    Just v_a2sp0 -> v_a2sp0
                                    Nothing -> PersistNull))
                           $ ["testKey", "result", "passingDate"])))
             <=< getPersistMap)
    instance persistent-2.8.1:Database.Persist.Sql.Class.PersistFieldSql TestResult where
      persistent-2.8.1:Database.Persist.Sql.Class.sqlType _ = SqlString
    instance PersistField User where
      toPersistValue
        = \ ent_a2sp1
            -> (PersistMap
                  $ ((Prelude.zip
                        ((Prelude.map pack)
                           ["username", "password", "email", "avatar", "firstName",
                            "secondName", "birthDay", "sex", "createdTests", "passedTests"]))
                       ((Prelude.map toPersistValue) $ (toPersistFields ent_a2sp1))))
      fromPersistValue
        = ((\ x_a2sp2
              -> let
                   columns_a2sp3
                     = unordered-containers-0.2.9.0:Data.HashMap.Strict.fromList x_a2sp2
                 in
                   (fromPersistValues
                      $ ((Prelude.map
                            (\ name_a2sp4
                               -> case
                                      (unordered-containers-0.2.9.0:Data.HashMap.Base.lookup
                                         (pack name_a2sp4))
                                        columns_a2sp3
                                  of
                                    Just v_a2sp5 -> v_a2sp5
                                    Nothing -> PersistNull))
                           $ ["username", "password", "email", "avatar", "firstName",
                              "secondName", "birthDay", "sex", "createdTests", "passedTests"])))
             <=< getPersistMap)
    instance persistent-2.8.1:Database.Persist.Sql.Class.PersistFieldSql User where
      persistent-2.8.1:Database.Persist.Sql.Class.sqlType _ = SqlString
    data TestResult
      = TestResult {testResultTestKey :: !Text,
                    testResultResult :: !Text,
                    testResultPassingDate :: !UTCTime}
      deriving (Eq, Read, Show, Generic)
    type TestResultId = Key TestResult
    instance PersistEntity TestResult where
      type PersistEntityBackend TestResult = MongoContext
      data Unique TestResult
      newtype Key TestResult
        = TestResultKey {unTestResultKey :: (BackendKey MongoContext)}
        deriving (Show,
                  Read,
                  Eq,
                  Ord,
                  path-pieces-0.2.1:Web.PathPieces.PathPiece,
                  http-api-data-0.3.7.2:Web.Internal.HttpApiData.ToHttpApiData,
                  http-api-data-0.3.7.2:Web.Internal.HttpApiData.FromHttpApiData,
                  PersistField,
                  persistent-2.8.1:Database.Persist.Sql.Class.PersistFieldSql,
                  Aeson.ToJSON,
                  Aeson.FromJSON)
      data EntityField TestResult typ
        = typ ~ Key TestResult => TestResultId |
          typ ~ Text => TestResultTestKey |
          typ ~ Text => TestResultResult |
          typ ~ UTCTime => TestResultPassingDate
      keyToValues
        = ((ghc-prim-0.5.1.1:GHC.Types.: [])
             . (toPersistValue . unTestResultKey))
      keyFromValues
        = ((fmap TestResultKey)
             . (fromPersistValue . Database.Persist.TH.headNote))
      entityDef _
        = (((((((((EntityDef (HaskellName (packPTH "TestResult")))
                    (DBName (packPTH "test_result")))
                   (((((((FieldDef (HaskellName (packPTH "Id")))
                           (DBName (packPTH "id")))
                          ((FTTypeCon Nothing) (packPTH "TestResultId")))
                         SqlInt64)
                        [])
                       True)
                      ((ForeignRef (HaskellName (packPTH "TestResult")))
                         ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                  [])
                 [((((((FieldDef (HaskellName (packPTH "testKey")))
                         (DBName (packPTH "test_key")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "result")))
                         (DBName (packPTH "result")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "passingDate")))
                         (DBName (packPTH "passing_date")))
                        ((FTTypeCon Nothing) (packPTH "UTCTime")))
                       SqlDayTime)
                      [])
                     True)
                    NoReference])
                [])
               [])
              [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
             (Data.Map.Internal.fromList []))
            False
      toPersistFields (TestResult x_a2sp6 x_a2sp7 x_a2sp8)
        = [SomePersistField x_a2sp6, SomePersistField x_a2sp7,
           SomePersistField x_a2sp8]
      fromPersistValues [x1_a2spa, x2_a2spb, x3_a2spc]
        = TestResult
            <$>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "testKey")))
                 . fromPersistValue)
                x1_a2spa
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "result")))
                 . fromPersistValue)
                x2_a2spb
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "passingDate")))
                 . fromPersistValue)
                x3_a2spc
      fromPersistValues x_a2sp9
        = (Left
             $ ((mappend (packPTH "TestResult: fromPersistValues failed on: "))
                  (pack $ (show x_a2sp9))))
      persistUniqueToFieldNames _
        = error "Degenerate case, should never happen"
      persistUniqueToValues _
        = error "Degenerate case, should never happen"
      persistUniqueKeys
        (TestResult _testKey_a2spd _result_a2spe _passingDate_a2spf)
        = []
      persistFieldDef TestResultId
        = ((((((FieldDef (HaskellName (packPTH "Id")))
                 (DBName (packPTH "id")))
                ((FTTypeCon Nothing) (packPTH "TestResultId")))
               SqlInt64)
              [])
             True)
            ((ForeignRef (HaskellName (packPTH "TestResult")))
               ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))
      persistFieldDef TestResultTestKey
        = ((((((FieldDef (HaskellName (packPTH "testKey")))
                 (DBName (packPTH "test_key")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef TestResultResult
        = ((((((FieldDef (HaskellName (packPTH "result")))
                 (DBName (packPTH "result")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef TestResultPassingDate
        = ((((((FieldDef (HaskellName (packPTH "passingDate")))
                 (DBName (packPTH "passing_date")))
                ((FTTypeCon Nothing) (packPTH "UTCTime")))
               SqlDayTime)
              [])
             True)
            NoReference
      persistIdField = TestResultId
      fieldLens TestResultId
        = (lensPTH entityKey)
            (\ Entity _ value_a2spg key_a2sph
               -> (Entity key_a2sph) value_a2spg)
      fieldLens TestResultTestKey
        = (lensPTH (testResultTestKey . entityVal))
            (\ Entity key_a2spi value_a2spj x_a2spk
               -> (Entity key_a2spi) value_a2spj {testResultTestKey = x_a2spk})
      fieldLens TestResultResult
        = (lensPTH (testResultResult . entityVal))
            (\ Entity key_a2spi value_a2spj x_a2spk
               -> (Entity key_a2spi) value_a2spj {testResultResult = x_a2spk})
      fieldLens TestResultPassingDate
        = (lensPTH (testResultPassingDate . entityVal))
            (\ Entity key_a2spi value_a2spj x_a2spk
               -> (Entity key_a2spi)
                    value_a2spj {testResultPassingDate = x_a2spk})
    instance ToBackendKey MongoContext TestResult where
      toBackendKey = unTestResultKey
      fromBackendKey = TestResultKey
    data User
      = User {userUsername :: !Text,
              userPassword :: !Text,
              userEmail :: !Text,
              userAvatar :: !Text,
              userFirstName :: !(Maybe Text),
              userSecondName :: !(Maybe Text),
              userBirthDay :: !(Maybe UTCTime),
              userSex :: !(Maybe Int),
              userCreatedTests :: ![ObjectId],
              userPassedTests :: ![TestResult]}
      deriving (Eq, Read, Show, Generic)
    type UserId = Key User
    instance PersistEntity User where
      type PersistEntityBackend User = MongoContext
      data Unique User = Email Text | Username Text
      newtype Key User
        = UserKey {unUserKey :: (BackendKey MongoContext)}
        deriving (Show,
                  Read,
                  Eq,
                  Ord,
                  path-pieces-0.2.1:Web.PathPieces.PathPiece,
                  http-api-data-0.3.7.2:Web.Internal.HttpApiData.ToHttpApiData,
                  http-api-data-0.3.7.2:Web.Internal.HttpApiData.FromHttpApiData,
                  PersistField,
                  persistent-2.8.1:Database.Persist.Sql.Class.PersistFieldSql,
                  Aeson.ToJSON,
                  Aeson.FromJSON)
      data EntityField User typ
        = typ ~ Key User => UserId |
          typ ~ Text => UserUsername |
          typ ~ Text => UserPassword |
          typ ~ Text => UserEmail |
          typ ~ Text => UserAvatar |
          typ ~ Maybe Text => UserFirstName |
          typ ~ Maybe Text => UserSecondName |
          typ ~ Maybe UTCTime => UserBirthDay |
          typ ~ Maybe Int => UserSex |
          typ ~ [ObjectId] => UserCreatedTests |
          typ ~ [TestResult] => UserPassedTests
      keyToValues
        = ((ghc-prim-0.5.1.1:GHC.Types.: [])
             . (toPersistValue . unUserKey))
      keyFromValues
        = ((fmap UserKey)
             . (fromPersistValue . Database.Persist.TH.headNote))
      entityDef _
        = (((((((((EntityDef (HaskellName (packPTH "User")))
                    (DBName (packPTH "user")))
                   (((((((FieldDef (HaskellName (packPTH "Id")))
                           (DBName (packPTH "id")))
                          ((FTTypeCon Nothing) (packPTH "UserId")))
                         SqlInt64)
                        [])
                       True)
                      ((ForeignRef (HaskellName (packPTH "User")))
                         ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                  [])
                 [((((((FieldDef (HaskellName (packPTH "username")))
                         (DBName (packPTH "username")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "password")))
                         (DBName (packPTH "password")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "email")))
                         (DBName (packPTH "email")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "avatar")))
                         (DBName (packPTH "avatar")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "firstName")))
                         (DBName (packPTH "first_name")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [packPTH "Maybe"])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "secondName")))
                         (DBName (packPTH "second_name")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [packPTH "Maybe"])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "birthDay")))
                         (DBName (packPTH "birth_day")))
                        ((FTTypeCon Nothing) (packPTH "UTCTime")))
                       SqlDayTime)
                      [packPTH "Maybe"])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "sex")))
                         (DBName (packPTH "sex")))
                        ((FTTypeCon Nothing) (packPTH "Int")))
                       SqlInt64)
                      [packPTH "Maybe"])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "createdTests")))
                         (DBName (packPTH "created_tests")))
                        (FTList ((FTTypeCon Nothing) (packPTH "ObjectId"))))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "passedTests")))
                         (DBName (packPTH "passed_tests")))
                        (FTList ((FTTypeCon Nothing) (packPTH "TestResult"))))
                       SqlString)
                      [])
                     True)
                    (EmbedRef
                       ((EmbedEntityDef (HaskellName (packPTH "TestResult")))
                          [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing) Nothing,
                           ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                           ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                             Nothing]))])
                [(((UniqueDef (HaskellName (packPTH "Email")))
                     (DBName (packPTH "email")))
                    [(HaskellName (packPTH "email"), DBName (packPTH "email"))])
                   [],
                 (((UniqueDef (HaskellName (packPTH "Username")))
                     (DBName (packPTH "username")))
                    [(HaskellName (packPTH "username"), DBName (packPTH "username"))])
                   []])
               [])
              [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
             (Data.Map.Internal.fromList []))
            False
      toPersistFields
        (User x_a2spl
              x_a2spm
              x_a2spn
              x_a2spo
              x_a2spp
              x_a2spq
              x_a2spr
              x_a2sps
              x_a2spt
              x_a2spu)
        = [SomePersistField x_a2spl, SomePersistField x_a2spm,
           SomePersistField x_a2spn, SomePersistField x_a2spo,
           SomePersistField x_a2spp, SomePersistField x_a2spq,
           SomePersistField x_a2spr, SomePersistField x_a2sps,
           SomePersistField x_a2spt, SomePersistField x_a2spu]
      fromPersistValues
        [x1_a2spw,
         x2_a2spx,
         x3_a2spy,
         x4_a2spz,
         x5_a2spA,
         x6_a2spB,
         x7_a2spC,
         x8_a2spD,
         x9_a2spE,
         x10_a2spF]
        = User
            <$>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "username")))
                 . fromPersistValue)
                x1_a2spw
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "password")))
                 . fromPersistValue)
                x2_a2spx
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "email")))
                 . fromPersistValue)
                x3_a2spy
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "avatar")))
                 . fromPersistValue)
                x4_a2spz
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "firstName")))
                 . fromPersistValue)
                x5_a2spA
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "secondName")))
                 . fromPersistValue)
                x6_a2spB
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "birthDay")))
                 . fromPersistValue)
                x7_a2spC
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "sex")))
                 . fromPersistValue)
                x8_a2spD
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "createdTests")))
                 . fromPersistValue)
                x9_a2spE
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "passedTests")))
                 . fromPersistValue)
                x10_a2spF
      fromPersistValues x_a2spv
        = (Left
             $ ((mappend (packPTH "User: fromPersistValues failed on: "))
                  (pack $ (show x_a2spv))))
      persistUniqueToFieldNames Email {}
        = [(HaskellName (packPTH "email"), DBName (packPTH "email"))]
      persistUniqueToFieldNames Username {}
        = [(HaskellName (packPTH "username"), DBName (packPTH "username"))]
      persistUniqueToValues (Email x_a2spG) = [toPersistValue x_a2spG]
      persistUniqueToValues (Username x_a2spH) = [toPersistValue x_a2spH]
      persistUniqueKeys
        (User _username_a2spI
              _password_a2spJ
              _email_a2spK
              _avatar_a2spL
              _firstName_a2spM
              _secondName_a2spN
              _birthDay_a2spO
              _sex_a2spP
              _createdTests_a2spQ
              _passedTests_a2spR)
        = [Email _email_a2spK, Username _username_a2spI]
      persistFieldDef UserId
        = ((((((FieldDef (HaskellName (packPTH "Id")))
                 (DBName (packPTH "id")))
                ((FTTypeCon Nothing) (packPTH "UserId")))
               SqlInt64)
              [])
             True)
            ((ForeignRef (HaskellName (packPTH "User")))
               ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))
      persistFieldDef UserUsername
        = ((((((FieldDef (HaskellName (packPTH "username")))
                 (DBName (packPTH "username")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef UserPassword
        = ((((((FieldDef (HaskellName (packPTH "password")))
                 (DBName (packPTH "password")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef UserEmail
        = ((((((FieldDef (HaskellName (packPTH "email")))
                 (DBName (packPTH "email")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef UserAvatar
        = ((((((FieldDef (HaskellName (packPTH "avatar")))
                 (DBName (packPTH "avatar")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef UserFirstName
        = ((((((FieldDef (HaskellName (packPTH "firstName")))
                 (DBName (packPTH "first_name")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [packPTH "Maybe"])
             True)
            NoReference
      persistFieldDef UserSecondName
        = ((((((FieldDef (HaskellName (packPTH "secondName")))
                 (DBName (packPTH "second_name")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [packPTH "Maybe"])
             True)
            NoReference
      persistFieldDef UserBirthDay
        = ((((((FieldDef (HaskellName (packPTH "birthDay")))
                 (DBName (packPTH "birth_day")))
                ((FTTypeCon Nothing) (packPTH "UTCTime")))
               SqlDayTime)
              [packPTH "Maybe"])
             True)
            NoReference
      persistFieldDef UserSex
        = ((((((FieldDef (HaskellName (packPTH "sex")))
                 (DBName (packPTH "sex")))
                ((FTTypeCon Nothing) (packPTH "Int")))
               SqlInt64)
              [packPTH "Maybe"])
             True)
            NoReference
      persistFieldDef UserCreatedTests
        = ((((((FieldDef (HaskellName (packPTH "createdTests")))
                 (DBName (packPTH "created_tests")))
                (FTList ((FTTypeCon Nothing) (packPTH "ObjectId"))))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef UserPassedTests
        = ((((((FieldDef (HaskellName (packPTH "passedTests")))
                 (DBName (packPTH "passed_tests")))
                (FTList ((FTTypeCon Nothing) (packPTH "TestResult"))))
               SqlString)
              [])
             True)
            (EmbedRef
               ((EmbedEntityDef (HaskellName (packPTH "TestResult")))
                  [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing) Nothing,
                   ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                   ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                     Nothing]))
      persistIdField = UserId
      fieldLens UserId
        = (lensPTH entityKey)
            (\ Entity _ value_a2spS key_a2spT
               -> (Entity key_a2spT) value_a2spS)
      fieldLens UserUsername
        = (lensPTH (userUsername . entityVal))
            (\ Entity key_a2spU value_a2spV x_a2spW
               -> (Entity key_a2spU) value_a2spV {userUsername = x_a2spW})
      fieldLens UserPassword
        = (lensPTH (userPassword . entityVal))
            (\ Entity key_a2spU value_a2spV x_a2spW
               -> (Entity key_a2spU) value_a2spV {userPassword = x_a2spW})
      fieldLens UserEmail
        = (lensPTH (userEmail . entityVal))
            (\ Entity key_a2spU value_a2spV x_a2spW
               -> (Entity key_a2spU) value_a2spV {userEmail = x_a2spW})
      fieldLens UserAvatar
        = (lensPTH (userAvatar . entityVal))
            (\ Entity key_a2spU value_a2spV x_a2spW
               -> (Entity key_a2spU) value_a2spV {userAvatar = x_a2spW})
      fieldLens UserFirstName
        = (lensPTH (userFirstName . entityVal))
            (\ Entity key_a2spU value_a2spV x_a2spW
               -> (Entity key_a2spU) value_a2spV {userFirstName = x_a2spW})
      fieldLens UserSecondName
        = (lensPTH (userSecondName . entityVal))
            (\ Entity key_a2spU value_a2spV x_a2spW
               -> (Entity key_a2spU) value_a2spV {userSecondName = x_a2spW})
      fieldLens UserBirthDay
        = (lensPTH (userBirthDay . entityVal))
            (\ Entity key_a2spU value_a2spV x_a2spW
               -> (Entity key_a2spU) value_a2spV {userBirthDay = x_a2spW})
      fieldLens UserSex
        = (lensPTH (userSex . entityVal))
            (\ Entity key_a2spU value_a2spV x_a2spW
               -> (Entity key_a2spU) value_a2spV {userSex = x_a2spW})
      fieldLens UserCreatedTests
        = (lensPTH (userCreatedTests . entityVal))
            (\ Entity key_a2spU value_a2spV x_a2spW
               -> (Entity key_a2spU) value_a2spV {userCreatedTests = x_a2spW})
      fieldLens UserPassedTests
        = (lensPTH (userPassedTests . entityVal))
            (\ Entity key_a2spU value_a2spV x_a2spW
               -> (Entity key_a2spU) value_a2spV {userPassedTests = x_a2spW})
    instance ToBackendKey MongoContext User where
      toBackendKey = unUserKey
      fromBackendKey = UserKey
/home/nikita/Projects/labs/Databases/Course-Project/Server/src/Model/User.hs:(27,79)-(47,2): Splicing expression
    Language.Haskell.TH.Quote.quoteExp
      persistLowerCase
      "\n\
      \TestResult\n\
      \  testKey       Text\n\
      \  result        Text\n\
      \  passingDate   UTCTime\n\
      \  deriving      Eq Read Show Generic\n\
      \User\n\
      \  username      Text\n\
      \  password      Text\n\
      \  email         Text\n\
      \  avatar        Text\n\
      \  firstName     Text Maybe\n\
      \  secondName    Text Maybe\n\
      \  birthDay      UTCTime Maybe\n\
      \  sex           Int Maybe\n\
      \  createdTests  [ObjectId]\n\
      \  passedTests   [TestResult]\n\
      \  Email         email\n\
      \  Username      username\n\
      \  deriving      Eq Read Show Generic\n"
  ======>
    [(((((((((EntityDef (HaskellName (packPTH "TestResult")))
               (DBName (packPTH "test_result")))
              (((((((FieldDef (HaskellName (packPTH "Id")))
                      (DBName (packPTH "id")))
                     ((FTTypeCon Nothing) (packPTH "TestResultId")))
                    SqlInt64)
                   [])
                  True)
                 ((ForeignRef (HaskellName (packPTH "TestResult")))
                    ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
             [])
            [((((((FieldDef (HaskellName (packPTH "testKey")))
                    (DBName (packPTH "test_key")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for testKey")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "result")))
                    (DBName (packPTH "result")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for result")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "passingDate")))
                    (DBName (packPTH "passing_date")))
                   ((FTTypeCon Nothing) (packPTH "UTCTime")))
                  (SqlOther (packPTH "SqlType unset for passingDate")))
                 [])
                True)
               NoReference])
           [])
          [])
         [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
        (Data.Map.Internal.fromList []))
       False
       {entityFields = [((((((FieldDef (HaskellName (packPTH "testKey")))
                               (DBName (packPTH "test_key")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "result")))
                               (DBName (packPTH "result")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "passingDate")))
                               (DBName (packPTH "passing_date")))
                              ((FTTypeCon Nothing) (packPTH "UTCTime")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy UTCTime)))
                            [])
                           True)
                          NoReference],
        entityId = ((((((FieldDef (HaskellName (packPTH "Id")))
                          (DBName (packPTH "id")))
                         ((FTTypeCon Nothing) (packPTH "TestResultId")))
                        (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                           (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                       [])
                      True)
                     ((ForeignRef (HaskellName (packPTH "TestResult")))
                        ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))},
     (((((((((EntityDef (HaskellName (packPTH "User")))
               (DBName (packPTH "user")))
              (((((((FieldDef (HaskellName (packPTH "Id")))
                      (DBName (packPTH "id")))
                     ((FTTypeCon Nothing) (packPTH "UserId")))
                    SqlInt64)
                   [])
                  True)
                 ((ForeignRef (HaskellName (packPTH "User")))
                    ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
             [])
            [((((((FieldDef (HaskellName (packPTH "username")))
                    (DBName (packPTH "username")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for username")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "password")))
                    (DBName (packPTH "password")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for password")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "email")))
                    (DBName (packPTH "email")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for email")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "avatar")))
                    (DBName (packPTH "avatar")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for avatar")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "firstName")))
                    (DBName (packPTH "first_name")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for firstName")))
                 [packPTH "Maybe"])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "secondName")))
                    (DBName (packPTH "second_name")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for secondName")))
                 [packPTH "Maybe"])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "birthDay")))
                    (DBName (packPTH "birth_day")))
                   ((FTTypeCon Nothing) (packPTH "UTCTime")))
                  (SqlOther (packPTH "SqlType unset for birthDay")))
                 [packPTH "Maybe"])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "sex")))
                    (DBName (packPTH "sex")))
                   ((FTTypeCon Nothing) (packPTH "Int")))
                  (SqlOther (packPTH "SqlType unset for sex")))
                 [packPTH "Maybe"])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "createdTests")))
                    (DBName (packPTH "created_tests")))
                   (FTList ((FTTypeCon Nothing) (packPTH "ObjectId"))))
                  (SqlOther (packPTH "SqlType unset for createdTests")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "passedTests")))
                    (DBName (packPTH "passed_tests")))
                   (FTList ((FTTypeCon Nothing) (packPTH "TestResult"))))
                  (SqlOther (packPTH "SqlType unset for passedTests")))
                 [])
                True)
               (EmbedRef
                  ((EmbedEntityDef (HaskellName (packPTH "TestResult")))
                     [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing) Nothing,
                      ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                      ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                        Nothing]))])
           [(((UniqueDef (HaskellName (packPTH "Email")))
                (DBName (packPTH "email")))
               [(HaskellName (packPTH "email"), DBName (packPTH "email"))])
              [],
            (((UniqueDef (HaskellName (packPTH "Username")))
                (DBName (packPTH "username")))
               [(HaskellName (packPTH "username"), DBName (packPTH "username"))])
              []])
          [])
         [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
        (Data.Map.Internal.fromList []))
       False
       {entityFields = [((((((FieldDef (HaskellName (packPTH "username")))
                               (DBName (packPTH "username")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "password")))
                               (DBName (packPTH "password")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "email")))
                               (DBName (packPTH "email")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "avatar")))
                               (DBName (packPTH "avatar")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "firstName")))
                               (DBName (packPTH "first_name")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [packPTH "Maybe"])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "secondName")))
                               (DBName (packPTH "second_name")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [packPTH "Maybe"])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "birthDay")))
                               (DBName (packPTH "birth_day")))
                              ((FTTypeCon Nothing) (packPTH "UTCTime")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy UTCTime)))
                            [packPTH "Maybe"])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "sex")))
                               (DBName (packPTH "sex")))
                              ((FTTypeCon Nothing) (packPTH "Int")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Int)))
                            [packPTH "Maybe"])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "createdTests")))
                               (DBName (packPTH "created_tests")))
                              (FTList ((FTTypeCon Nothing) (packPTH "ObjectId"))))
                             SqlString)
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "passedTests")))
                               (DBName (packPTH "passed_tests")))
                              (FTList ((FTTypeCon Nothing) (packPTH "TestResult"))))
                             SqlString)
                            [])
                           True)
                          (EmbedRef
                             ((EmbedEntityDef (HaskellName (packPTH "TestResult")))
                                [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing) Nothing,
                                 ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                                 ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                                   Nothing]))],
        entityId = ((((((FieldDef (HaskellName (packPTH "Id")))
                          (DBName (packPTH "id")))
                         ((FTTypeCon Nothing) (packPTH "UserId")))
                        (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                           (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                       [])
                      True)
                     ((ForeignRef (HaskellName (packPTH "User")))
                        ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))}]
/home/nikita/Projects/labs/Databases/Course-Project/Server/src/Model/User.hs:(27,1)-(47,2): Splicing declarations
    share
      [mkPersist (mkPersistSettings (ConT ''MongoContext))]
      ([(((((((((EntityDef (HaskellName (packPTH "TestResult")))
                  (DBName (packPTH "test_result")))
                 (((((((FieldDef (HaskellName (packPTH "Id")))
                         (DBName (packPTH "id")))
                        ((FTTypeCon Nothing) (packPTH "TestResultId")))
                       SqlInt64)
                      [])
                     True)
                    ((ForeignRef (HaskellName (packPTH "TestResult")))
                       ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                [])
               [((((((FieldDef (HaskellName (packPTH "testKey")))
                       (DBName (packPTH "test_key")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for testKey")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "result")))
                       (DBName (packPTH "result")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for result")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "passingDate")))
                       (DBName (packPTH "passing_date")))
                      ((FTTypeCon Nothing) (packPTH "UTCTime")))
                     (SqlOther (packPTH "SqlType unset for passingDate")))
                    [])
                   True)
                  NoReference])
              [])
             [])
            [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
           (Data.Map.Internal.fromList []))
          False
          {entityFields = [((((((FieldDef (HaskellName (packPTH "testKey")))
                                  (DBName (packPTH "test_key")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "result")))
                                  (DBName (packPTH "result")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "passingDate")))
                                  (DBName (packPTH "passing_date")))
                                 ((FTTypeCon Nothing) (packPTH "UTCTime")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy UTCTime)))
                               [])
                              True)
                             NoReference],
           entityId = ((((((FieldDef (HaskellName (packPTH "Id")))
                             (DBName (packPTH "id")))
                            ((FTTypeCon Nothing) (packPTH "TestResultId")))
                           (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                              (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                          [])
                         True)
                        ((ForeignRef (HaskellName (packPTH "TestResult")))
                           ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))},
        (((((((((EntityDef (HaskellName (packPTH "User")))
                  (DBName (packPTH "user")))
                 (((((((FieldDef (HaskellName (packPTH "Id")))
                         (DBName (packPTH "id")))
                        ((FTTypeCon Nothing) (packPTH "UserId")))
                       SqlInt64)
                      [])
                     True)
                    ((ForeignRef (HaskellName (packPTH "User")))
                       ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                [])
               [((((((FieldDef (HaskellName (packPTH "username")))
                       (DBName (packPTH "username")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for username")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "password")))
                       (DBName (packPTH "password")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for password")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "email")))
                       (DBName (packPTH "email")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for email")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "avatar")))
                       (DBName (packPTH "avatar")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for avatar")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "firstName")))
                       (DBName (packPTH "first_name")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for firstName")))
                    [packPTH "Maybe"])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "secondName")))
                       (DBName (packPTH "second_name")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for secondName")))
                    [packPTH "Maybe"])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "birthDay")))
                       (DBName (packPTH "birth_day")))
                      ((FTTypeCon Nothing) (packPTH "UTCTime")))
                     (SqlOther (packPTH "SqlType unset for birthDay")))
                    [packPTH "Maybe"])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "sex")))
                       (DBName (packPTH "sex")))
                      ((FTTypeCon Nothing) (packPTH "Int")))
                     (SqlOther (packPTH "SqlType unset for sex")))
                    [packPTH "Maybe"])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "createdTests")))
                       (DBName (packPTH "created_tests")))
                      (FTList ((FTTypeCon Nothing) (packPTH "ObjectId"))))
                     (SqlOther (packPTH "SqlType unset for createdTests")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "passedTests")))
                       (DBName (packPTH "passed_tests")))
                      (FTList ((FTTypeCon Nothing) (packPTH "TestResult"))))
                     (SqlOther (packPTH "SqlType unset for passedTests")))
                    [])
                   True)
                  (EmbedRef
                     ((EmbedEntityDef (HaskellName (packPTH "TestResult")))
                        [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing) Nothing,
                         ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                         ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                           Nothing]))])
              [(((UniqueDef (HaskellName (packPTH "Email")))
                   (DBName (packPTH "email")))
                  [(HaskellName (packPTH "email"), DBName (packPTH "email"))])
                 [],
               (((UniqueDef (HaskellName (packPTH "Username")))
                   (DBName (packPTH "username")))
                  [(HaskellName (packPTH "username"), DBName (packPTH "username"))])
                 []])
             [])
            [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
           (Data.Map.Internal.fromList []))
          False
          {entityFields = [((((((FieldDef (HaskellName (packPTH "username")))
                                  (DBName (packPTH "username")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "password")))
                                  (DBName (packPTH "password")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "email")))
                                  (DBName (packPTH "email")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "avatar")))
                                  (DBName (packPTH "avatar")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "firstName")))
                                  (DBName (packPTH "first_name")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [packPTH "Maybe"])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "secondName")))
                                  (DBName (packPTH "second_name")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [packPTH "Maybe"])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "birthDay")))
                                  (DBName (packPTH "birth_day")))
                                 ((FTTypeCon Nothing) (packPTH "UTCTime")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy UTCTime)))
                               [packPTH "Maybe"])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "sex")))
                                  (DBName (packPTH "sex")))
                                 ((FTTypeCon Nothing) (packPTH "Int")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Int)))
                               [packPTH "Maybe"])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "createdTests")))
                                  (DBName (packPTH "created_tests")))
                                 (FTList ((FTTypeCon Nothing) (packPTH "ObjectId"))))
                                SqlString)
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "passedTests")))
                                  (DBName (packPTH "passed_tests")))
                                 (FTList ((FTTypeCon Nothing) (packPTH "TestResult"))))
                                SqlString)
                               [])
                              True)
                             (EmbedRef
                                ((EmbedEntityDef (HaskellName (packPTH "TestResult")))
                                   [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing) Nothing,
                                    ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                                    ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                                      Nothing]))],
           entityId = ((((((FieldDef (HaskellName (packPTH "Id")))
                             (DBName (packPTH "id")))
                            ((FTTypeCon Nothing) (packPTH "UserId")))
                           (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                              (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                          [])
                         True)
                        ((ForeignRef (HaskellName (packPTH "User")))
                           ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))}])
  ======>
    instance PersistField TestResult where
      toPersistValue
        = \ ent_a2H0o
            -> (PersistMap
                  $ ((Prelude.zip
                        ((Prelude.map pack) ["testKey", "result", "passingDate"]))
                       ((Prelude.map toPersistValue) $ (toPersistFields ent_a2H0o))))
      fromPersistValue
        = ((\ x_a2H0p
              -> let
                   columns_a2H0q
                     = unordered-containers-0.2.9.0:Data.HashMap.Strict.fromList x_a2H0p
                 in
                   (fromPersistValues
                      $ ((Prelude.map
                            (\ name_a2H0r
                               -> case
                                      (unordered-containers-0.2.9.0:Data.HashMap.Base.lookup
                                         (pack name_a2H0r))
                                        columns_a2H0q
                                  of
                                    Just v_a2H0s -> v_a2H0s
                                    Nothing -> PersistNull))
                           $ ["testKey", "result", "passingDate"])))
             <=< getPersistMap)
    instance persistent-2.8.1:Database.Persist.Sql.Class.PersistFieldSql TestResult where
      persistent-2.8.1:Database.Persist.Sql.Class.sqlType _ = SqlString
    instance PersistField User where
      toPersistValue
        = \ ent_a2H0t
            -> (PersistMap
                  $ ((Prelude.zip
                        ((Prelude.map pack)
                           ["username", "password", "email", "avatar", "firstName",
                            "secondName", "birthDay", "sex", "createdTests", "passedTests"]))
                       ((Prelude.map toPersistValue) $ (toPersistFields ent_a2H0t))))
      fromPersistValue
        = ((\ x_a2H0u
              -> let
                   columns_a2H0v
                     = unordered-containers-0.2.9.0:Data.HashMap.Strict.fromList x_a2H0u
                 in
                   (fromPersistValues
                      $ ((Prelude.map
                            (\ name_a2H0w
                               -> case
                                      (unordered-containers-0.2.9.0:Data.HashMap.Base.lookup
                                         (pack name_a2H0w))
                                        columns_a2H0v
                                  of
                                    Just v_a2H0x -> v_a2H0x
                                    Nothing -> PersistNull))
                           $ ["username", "password", "email", "avatar", "firstName",
                              "secondName", "birthDay", "sex", "createdTests", "passedTests"])))
             <=< getPersistMap)
    instance persistent-2.8.1:Database.Persist.Sql.Class.PersistFieldSql User where
      persistent-2.8.1:Database.Persist.Sql.Class.sqlType _ = SqlString
    data TestResult
      = TestResult {testResultTestKey :: !Text,
                    testResultResult :: !Text,
                    testResultPassingDate :: !UTCTime}
      deriving (Eq, Read, Show, Generic)
    type TestResultId = Key TestResult
    instance PersistEntity TestResult where
      type PersistEntityBackend TestResult = MongoContext
      data Unique TestResult
      newtype Key TestResult
        = TestResultKey {unTestResultKey :: (BackendKey MongoContext)}
        deriving (Show,
                  Read,
                  Eq,
                  Ord,
                  path-pieces-0.2.1:Web.PathPieces.PathPiece,
                  http-api-data-0.3.7.2:Web.Internal.HttpApiData.ToHttpApiData,
                  http-api-data-0.3.7.2:Web.Internal.HttpApiData.FromHttpApiData,
                  PersistField,
                  persistent-2.8.1:Database.Persist.Sql.Class.PersistFieldSql,
                  Aeson.ToJSON,
                  Aeson.FromJSON)
      data EntityField TestResult typ
        = typ ~ Key TestResult => TestResultId |
          typ ~ Text => TestResultTestKey |
          typ ~ Text => TestResultResult |
          typ ~ UTCTime => TestResultPassingDate
      keyToValues
        = ((ghc-prim-0.5.1.1:GHC.Types.: [])
             . (toPersistValue . unTestResultKey))
      keyFromValues
        = ((fmap TestResultKey)
             . (fromPersistValue . Database.Persist.TH.headNote))
      entityDef _
        = (((((((((EntityDef (HaskellName (packPTH "TestResult")))
                    (DBName (packPTH "test_result")))
                   (((((((FieldDef (HaskellName (packPTH "Id")))
                           (DBName (packPTH "id")))
                          ((FTTypeCon Nothing) (packPTH "TestResultId")))
                         SqlInt64)
                        [])
                       True)
                      ((ForeignRef (HaskellName (packPTH "TestResult")))
                         ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                  [])
                 [((((((FieldDef (HaskellName (packPTH "testKey")))
                         (DBName (packPTH "test_key")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "result")))
                         (DBName (packPTH "result")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "passingDate")))
                         (DBName (packPTH "passing_date")))
                        ((FTTypeCon Nothing) (packPTH "UTCTime")))
                       SqlDayTime)
                      [])
                     True)
                    NoReference])
                [])
               [])
              [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
             (Data.Map.Internal.fromList []))
            False
      toPersistFields (TestResult x_a2H0y x_a2H0z x_a2H0A)
        = [SomePersistField x_a2H0y, SomePersistField x_a2H0z,
           SomePersistField x_a2H0A]
      fromPersistValues [x1_a2H0C, x2_a2H0D, x3_a2H0E]
        = TestResult
            <$>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "testKey")))
                 . fromPersistValue)
                x1_a2H0C
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "result")))
                 . fromPersistValue)
                x2_a2H0D
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "passingDate")))
                 . fromPersistValue)
                x3_a2H0E
      fromPersistValues x_a2H0B
        = (Left
             $ ((mappend (packPTH "TestResult: fromPersistValues failed on: "))
                  (pack $ (show x_a2H0B))))
      persistUniqueToFieldNames _
        = error "Degenerate case, should never happen"
      persistUniqueToValues _
        = error "Degenerate case, should never happen"
      persistUniqueKeys
        (TestResult _testKey_a2H0F _result_a2H0G _passingDate_a2H0H)
        = []
      persistFieldDef TestResultId
        = ((((((FieldDef (HaskellName (packPTH "Id")))
                 (DBName (packPTH "id")))
                ((FTTypeCon Nothing) (packPTH "TestResultId")))
               SqlInt64)
              [])
             True)
            ((ForeignRef (HaskellName (packPTH "TestResult")))
               ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))
      persistFieldDef TestResultTestKey
        = ((((((FieldDef (HaskellName (packPTH "testKey")))
                 (DBName (packPTH "test_key")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef TestResultResult
        = ((((((FieldDef (HaskellName (packPTH "result")))
                 (DBName (packPTH "result")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef TestResultPassingDate
        = ((((((FieldDef (HaskellName (packPTH "passingDate")))
                 (DBName (packPTH "passing_date")))
                ((FTTypeCon Nothing) (packPTH "UTCTime")))
               SqlDayTime)
              [])
             True)
            NoReference
      persistIdField = TestResultId
      fieldLens TestResultId
        = (lensPTH entityKey)
            (\ Entity _ value_a2H0I key_a2H0J
               -> (Entity key_a2H0J) value_a2H0I)
      fieldLens TestResultTestKey
        = (lensPTH (testResultTestKey . entityVal))
            (\ Entity key_a2H0K value_a2H0L x_a2H0M
               -> (Entity key_a2H0K) value_a2H0L {testResultTestKey = x_a2H0M})
      fieldLens TestResultResult
        = (lensPTH (testResultResult . entityVal))
            (\ Entity key_a2H0K value_a2H0L x_a2H0M
               -> (Entity key_a2H0K) value_a2H0L {testResultResult = x_a2H0M})
      fieldLens TestResultPassingDate
        = (lensPTH (testResultPassingDate . entityVal))
            (\ Entity key_a2H0K value_a2H0L x_a2H0M
               -> (Entity key_a2H0K)
                    value_a2H0L {testResultPassingDate = x_a2H0M})
    instance ToBackendKey MongoContext TestResult where
      toBackendKey = unTestResultKey
      fromBackendKey = TestResultKey
    data User
      = User {userUsername :: !Text,
              userPassword :: !Text,
              userEmail :: !Text,
              userAvatar :: !Text,
              userFirstName :: !(Maybe Text),
              userSecondName :: !(Maybe Text),
              userBirthDay :: !(Maybe UTCTime),
              userSex :: !(Maybe Int),
              userCreatedTests :: ![ObjectId],
              userPassedTests :: ![TestResult]}
      deriving (Eq, Read, Show, Generic)
    type UserId = Key User
    instance PersistEntity User where
      type PersistEntityBackend User = MongoContext
      data Unique User = Email Text | Username Text
      newtype Key User
        = UserKey {unUserKey :: (BackendKey MongoContext)}
        deriving (Show,
                  Read,
                  Eq,
                  Ord,
                  path-pieces-0.2.1:Web.PathPieces.PathPiece,
                  http-api-data-0.3.7.2:Web.Internal.HttpApiData.ToHttpApiData,
                  http-api-data-0.3.7.2:Web.Internal.HttpApiData.FromHttpApiData,
                  PersistField,
                  persistent-2.8.1:Database.Persist.Sql.Class.PersistFieldSql,
                  Aeson.ToJSON,
                  Aeson.FromJSON)
      data EntityField User typ
        = typ ~ Key User => UserId |
          typ ~ Text => UserUsername |
          typ ~ Text => UserPassword |
          typ ~ Text => UserEmail |
          typ ~ Text => UserAvatar |
          typ ~ Maybe Text => UserFirstName |
          typ ~ Maybe Text => UserSecondName |
          typ ~ Maybe UTCTime => UserBirthDay |
          typ ~ Maybe Int => UserSex |
          typ ~ [ObjectId] => UserCreatedTests |
          typ ~ [TestResult] => UserPassedTests
      keyToValues
        = ((ghc-prim-0.5.1.1:GHC.Types.: [])
             . (toPersistValue . unUserKey))
      keyFromValues
        = ((fmap UserKey)
             . (fromPersistValue . Database.Persist.TH.headNote))
      entityDef _
        = (((((((((EntityDef (HaskellName (packPTH "User")))
                    (DBName (packPTH "user")))
                   (((((((FieldDef (HaskellName (packPTH "Id")))
                           (DBName (packPTH "id")))
                          ((FTTypeCon Nothing) (packPTH "UserId")))
                         SqlInt64)
                        [])
                       True)
                      ((ForeignRef (HaskellName (packPTH "User")))
                         ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                  [])
                 [((((((FieldDef (HaskellName (packPTH "username")))
                         (DBName (packPTH "username")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "password")))
                         (DBName (packPTH "password")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "email")))
                         (DBName (packPTH "email")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "avatar")))
                         (DBName (packPTH "avatar")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "firstName")))
                         (DBName (packPTH "first_name")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [packPTH "Maybe"])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "secondName")))
                         (DBName (packPTH "second_name")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [packPTH "Maybe"])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "birthDay")))
                         (DBName (packPTH "birth_day")))
                        ((FTTypeCon Nothing) (packPTH "UTCTime")))
                       SqlDayTime)
                      [packPTH "Maybe"])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "sex")))
                         (DBName (packPTH "sex")))
                        ((FTTypeCon Nothing) (packPTH "Int")))
                       SqlInt64)
                      [packPTH "Maybe"])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "createdTests")))
                         (DBName (packPTH "created_tests")))
                        (FTList ((FTTypeCon Nothing) (packPTH "ObjectId"))))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "passedTests")))
                         (DBName (packPTH "passed_tests")))
                        (FTList ((FTTypeCon Nothing) (packPTH "TestResult"))))
                       SqlString)
                      [])
                     True)
                    (EmbedRef
                       ((EmbedEntityDef (HaskellName (packPTH "TestResult")))
                          [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing) Nothing,
                           ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                           ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                             Nothing]))])
                [(((UniqueDef (HaskellName (packPTH "Email")))
                     (DBName (packPTH "email")))
                    [(HaskellName (packPTH "email"), DBName (packPTH "email"))])
                   [],
                 (((UniqueDef (HaskellName (packPTH "Username")))
                     (DBName (packPTH "username")))
                    [(HaskellName (packPTH "username"), DBName (packPTH "username"))])
                   []])
               [])
              [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
             (Data.Map.Internal.fromList []))
            False
      toPersistFields
        (User x_a2H0N
              x_a2H0O
              x_a2H0P
              x_a2H0Q
              x_a2H0R
              x_a2H0S
              x_a2H0T
              x_a2H0U
              x_a2H0V
              x_a2H0W)
        = [SomePersistField x_a2H0N, SomePersistField x_a2H0O,
           SomePersistField x_a2H0P, SomePersistField x_a2H0Q,
           SomePersistField x_a2H0R, SomePersistField x_a2H0S,
           SomePersistField x_a2H0T, SomePersistField x_a2H0U,
           SomePersistField x_a2H0V, SomePersistField x_a2H0W]
      fromPersistValues
        [x1_a2H0Y,
         x2_a2H0Z,
         x3_a2H10,
         x4_a2H11,
         x5_a2H12,
         x6_a2H13,
         x7_a2H14,
         x8_a2H15,
         x9_a2H16,
         x10_a2H17]
        = User
            <$>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "username")))
                 . fromPersistValue)
                x1_a2H0Y
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "password")))
                 . fromPersistValue)
                x2_a2H0Z
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "email")))
                 . fromPersistValue)
                x3_a2H10
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "avatar")))
                 . fromPersistValue)
                x4_a2H11
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "firstName")))
                 . fromPersistValue)
                x5_a2H12
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "secondName")))
                 . fromPersistValue)
                x6_a2H13
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "birthDay")))
                 . fromPersistValue)
                x7_a2H14
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "sex")))
                 . fromPersistValue)
                x8_a2H15
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "createdTests")))
                 . fromPersistValue)
                x9_a2H16
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "passedTests")))
                 . fromPersistValue)
                x10_a2H17
      fromPersistValues x_a2H0X
        = (Left
             $ ((mappend (packPTH "User: fromPersistValues failed on: "))
                  (pack $ (show x_a2H0X))))
      persistUniqueToFieldNames Email {}
        = [(HaskellName (packPTH "email"), DBName (packPTH "email"))]
      persistUniqueToFieldNames Username {}
        = [(HaskellName (packPTH "username"), DBName (packPTH "username"))]
      persistUniqueToValues (Email x_a2H18) = [toPersistValue x_a2H18]
      persistUniqueToValues (Username x_a2H19) = [toPersistValue x_a2H19]
      persistUniqueKeys
        (User _username_a2H1a
              _password_a2H1b
              _email_a2H1c
              _avatar_a2H1d
              _firstName_a2H1e
              _secondName_a2H1f
              _birthDay_a2H1g
              _sex_a2H1h
              _createdTests_a2H1i
              _passedTests_a2H1j)
        = [Email _email_a2H1c, Username _username_a2H1a]
      persistFieldDef UserId
        = ((((((FieldDef (HaskellName (packPTH "Id")))
                 (DBName (packPTH "id")))
                ((FTTypeCon Nothing) (packPTH "UserId")))
               SqlInt64)
              [])
             True)
            ((ForeignRef (HaskellName (packPTH "User")))
               ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))
      persistFieldDef UserUsername
        = ((((((FieldDef (HaskellName (packPTH "username")))
                 (DBName (packPTH "username")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef UserPassword
        = ((((((FieldDef (HaskellName (packPTH "password")))
                 (DBName (packPTH "password")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef UserEmail
        = ((((((FieldDef (HaskellName (packPTH "email")))
                 (DBName (packPTH "email")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef UserAvatar
        = ((((((FieldDef (HaskellName (packPTH "avatar")))
                 (DBName (packPTH "avatar")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef UserFirstName
        = ((((((FieldDef (HaskellName (packPTH "firstName")))
                 (DBName (packPTH "first_name")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [packPTH "Maybe"])
             True)
            NoReference
      persistFieldDef UserSecondName
        = ((((((FieldDef (HaskellName (packPTH "secondName")))
                 (DBName (packPTH "second_name")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [packPTH "Maybe"])
             True)
            NoReference
      persistFieldDef UserBirthDay
        = ((((((FieldDef (HaskellName (packPTH "birthDay")))
                 (DBName (packPTH "birth_day")))
                ((FTTypeCon Nothing) (packPTH "UTCTime")))
               SqlDayTime)
              [packPTH "Maybe"])
             True)
            NoReference
      persistFieldDef UserSex
        = ((((((FieldDef (HaskellName (packPTH "sex")))
                 (DBName (packPTH "sex")))
                ((FTTypeCon Nothing) (packPTH "Int")))
               SqlInt64)
              [packPTH "Maybe"])
             True)
            NoReference
      persistFieldDef UserCreatedTests
        = ((((((FieldDef (HaskellName (packPTH "createdTests")))
                 (DBName (packPTH "created_tests")))
                (FTList ((FTTypeCon Nothing) (packPTH "ObjectId"))))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef UserPassedTests
        = ((((((FieldDef (HaskellName (packPTH "passedTests")))
                 (DBName (packPTH "passed_tests")))
                (FTList ((FTTypeCon Nothing) (packPTH "TestResult"))))
               SqlString)
              [])
             True)
            (EmbedRef
               ((EmbedEntityDef (HaskellName (packPTH "TestResult")))
                  [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing) Nothing,
                   ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                   ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                     Nothing]))
      persistIdField = UserId
      fieldLens UserId
        = (lensPTH entityKey)
            (\ Entity _ value_a2H1k key_a2H1l
               -> (Entity key_a2H1l) value_a2H1k)
      fieldLens UserUsername
        = (lensPTH (userUsername . entityVal))
            (\ Entity key_a2H1m value_a2H1n x_a2H1o
               -> (Entity key_a2H1m) value_a2H1n {userUsername = x_a2H1o})
      fieldLens UserPassword
        = (lensPTH (userPassword . entityVal))
            (\ Entity key_a2H1m value_a2H1n x_a2H1o
               -> (Entity key_a2H1m) value_a2H1n {userPassword = x_a2H1o})
      fieldLens UserEmail
        = (lensPTH (userEmail . entityVal))
            (\ Entity key_a2H1m value_a2H1n x_a2H1o
               -> (Entity key_a2H1m) value_a2H1n {userEmail = x_a2H1o})
      fieldLens UserAvatar
        = (lensPTH (userAvatar . entityVal))
            (\ Entity key_a2H1m value_a2H1n x_a2H1o
               -> (Entity key_a2H1m) value_a2H1n {userAvatar = x_a2H1o})
      fieldLens UserFirstName
        = (lensPTH (userFirstName . entityVal))
            (\ Entity key_a2H1m value_a2H1n x_a2H1o
               -> (Entity key_a2H1m) value_a2H1n {userFirstName = x_a2H1o})
      fieldLens UserSecondName
        = (lensPTH (userSecondName . entityVal))
            (\ Entity key_a2H1m value_a2H1n x_a2H1o
               -> (Entity key_a2H1m) value_a2H1n {userSecondName = x_a2H1o})
      fieldLens UserBirthDay
        = (lensPTH (userBirthDay . entityVal))
            (\ Entity key_a2H1m value_a2H1n x_a2H1o
               -> (Entity key_a2H1m) value_a2H1n {userBirthDay = x_a2H1o})
      fieldLens UserSex
        = (lensPTH (userSex . entityVal))
            (\ Entity key_a2H1m value_a2H1n x_a2H1o
               -> (Entity key_a2H1m) value_a2H1n {userSex = x_a2H1o})
      fieldLens UserCreatedTests
        = (lensPTH (userCreatedTests . entityVal))
            (\ Entity key_a2H1m value_a2H1n x_a2H1o
               -> (Entity key_a2H1m) value_a2H1n {userCreatedTests = x_a2H1o})
      fieldLens UserPassedTests
        = (lensPTH (userPassedTests . entityVal))
            (\ Entity key_a2H1m value_a2H1n x_a2H1o
               -> (Entity key_a2H1m) value_a2H1n {userPassedTests = x_a2H1o})
    instance ToBackendKey MongoContext User where
      toBackendKey = unUserKey
      fromBackendKey = UserKey
/home/nikita/Projects/labs/Databases/Course-Project/Server/src/Model/User.hs:(27,79)-(47,2): Splicing expression
    Language.Haskell.TH.Quote.quoteExp
      persistLowerCase
      "\n\
      \TestResult\n\
      \  testKey       Text\n\
      \  result        Text\n\
      \  passingDate   UTCTime\n\
      \  deriving      Eq Read Show Generic\n\
      \User\n\
      \  username      Text\n\
      \  password      Text\n\
      \  email         Text\n\
      \  avatar        Text\n\
      \  firstName     Text Maybe\n\
      \  secondName    Text Maybe\n\
      \  birthDay      UTCTime Maybe\n\
      \  sex           Int Maybe\n\
      \  createdTests  [ObjectId]\n\
      \  passedTests   [TestResult]\n\
      \  Email         email\n\
      \  Username      username\n\
      \  deriving      Eq Read Show Generic\n"
  ======>
    [(((((((((EntityDef (HaskellName (packPTH "TestResult")))
               (DBName (packPTH "test_result")))
              (((((((FieldDef (HaskellName (packPTH "Id")))
                      (DBName (packPTH "id")))
                     ((FTTypeCon Nothing) (packPTH "TestResultId")))
                    SqlInt64)
                   [])
                  True)
                 ((ForeignRef (HaskellName (packPTH "TestResult")))
                    ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
             [])
            [((((((FieldDef (HaskellName (packPTH "testKey")))
                    (DBName (packPTH "test_key")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for testKey")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "result")))
                    (DBName (packPTH "result")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for result")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "passingDate")))
                    (DBName (packPTH "passing_date")))
                   ((FTTypeCon Nothing) (packPTH "UTCTime")))
                  (SqlOther (packPTH "SqlType unset for passingDate")))
                 [])
                True)
               NoReference])
           [])
          [])
         [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
        (Data.Map.Internal.fromList []))
       False
       {entityFields = [((((((FieldDef (HaskellName (packPTH "testKey")))
                               (DBName (packPTH "test_key")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "result")))
                               (DBName (packPTH "result")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "passingDate")))
                               (DBName (packPTH "passing_date")))
                              ((FTTypeCon Nothing) (packPTH "UTCTime")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy UTCTime)))
                            [])
                           True)
                          NoReference],
        entityId = ((((((FieldDef (HaskellName (packPTH "Id")))
                          (DBName (packPTH "id")))
                         ((FTTypeCon Nothing) (packPTH "TestResultId")))
                        (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                           (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                       [])
                      True)
                     ((ForeignRef (HaskellName (packPTH "TestResult")))
                        ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))},
     (((((((((EntityDef (HaskellName (packPTH "User")))
               (DBName (packPTH "user")))
              (((((((FieldDef (HaskellName (packPTH "Id")))
                      (DBName (packPTH "id")))
                     ((FTTypeCon Nothing) (packPTH "UserId")))
                    SqlInt64)
                   [])
                  True)
                 ((ForeignRef (HaskellName (packPTH "User")))
                    ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
             [])
            [((((((FieldDef (HaskellName (packPTH "username")))
                    (DBName (packPTH "username")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for username")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "password")))
                    (DBName (packPTH "password")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for password")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "email")))
                    (DBName (packPTH "email")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for email")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "avatar")))
                    (DBName (packPTH "avatar")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for avatar")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "firstName")))
                    (DBName (packPTH "first_name")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for firstName")))
                 [packPTH "Maybe"])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "secondName")))
                    (DBName (packPTH "second_name")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for secondName")))
                 [packPTH "Maybe"])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "birthDay")))
                    (DBName (packPTH "birth_day")))
                   ((FTTypeCon Nothing) (packPTH "UTCTime")))
                  (SqlOther (packPTH "SqlType unset for birthDay")))
                 [packPTH "Maybe"])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "sex")))
                    (DBName (packPTH "sex")))
                   ((FTTypeCon Nothing) (packPTH "Int")))
                  (SqlOther (packPTH "SqlType unset for sex")))
                 [packPTH "Maybe"])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "createdTests")))
                    (DBName (packPTH "created_tests")))
                   (FTList ((FTTypeCon Nothing) (packPTH "ObjectId"))))
                  (SqlOther (packPTH "SqlType unset for createdTests")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "passedTests")))
                    (DBName (packPTH "passed_tests")))
                   (FTList ((FTTypeCon Nothing) (packPTH "TestResult"))))
                  (SqlOther (packPTH "SqlType unset for passedTests")))
                 [])
                True)
               (EmbedRef
                  ((EmbedEntityDef (HaskellName (packPTH "TestResult")))
                     [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing) Nothing,
                      ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                      ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                        Nothing]))])
           [(((UniqueDef (HaskellName (packPTH "Email")))
                (DBName (packPTH "email")))
               [(HaskellName (packPTH "email"), DBName (packPTH "email"))])
              [],
            (((UniqueDef (HaskellName (packPTH "Username")))
                (DBName (packPTH "username")))
               [(HaskellName (packPTH "username"), DBName (packPTH "username"))])
              []])
          [])
         [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
        (Data.Map.Internal.fromList []))
       False
       {entityFields = [((((((FieldDef (HaskellName (packPTH "username")))
                               (DBName (packPTH "username")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "password")))
                               (DBName (packPTH "password")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "email")))
                               (DBName (packPTH "email")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "avatar")))
                               (DBName (packPTH "avatar")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "firstName")))
                               (DBName (packPTH "first_name")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [packPTH "Maybe"])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "secondName")))
                               (DBName (packPTH "second_name")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [packPTH "Maybe"])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "birthDay")))
                               (DBName (packPTH "birth_day")))
                              ((FTTypeCon Nothing) (packPTH "UTCTime")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy UTCTime)))
                            [packPTH "Maybe"])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "sex")))
                               (DBName (packPTH "sex")))
                              ((FTTypeCon Nothing) (packPTH "Int")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Int)))
                            [packPTH "Maybe"])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "createdTests")))
                               (DBName (packPTH "created_tests")))
                              (FTList ((FTTypeCon Nothing) (packPTH "ObjectId"))))
                             SqlString)
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "passedTests")))
                               (DBName (packPTH "passed_tests")))
                              (FTList ((FTTypeCon Nothing) (packPTH "TestResult"))))
                             SqlString)
                            [])
                           True)
                          (EmbedRef
                             ((EmbedEntityDef (HaskellName (packPTH "TestResult")))
                                [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing) Nothing,
                                 ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                                 ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                                   Nothing]))],
        entityId = ((((((FieldDef (HaskellName (packPTH "Id")))
                          (DBName (packPTH "id")))
                         ((FTTypeCon Nothing) (packPTH "UserId")))
                        (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                           (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                       [])
                      True)
                     ((ForeignRef (HaskellName (packPTH "User")))
                        ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))}]
/home/nikita/Projects/labs/Databases/Course-Project/Server/src/Model/User.hs:(27,1)-(47,2): Splicing declarations
    share
      [mkPersist (mkPersistSettings (ConT ''MongoContext))]
      ([(((((((((EntityDef (HaskellName (packPTH "TestResult")))
                  (DBName (packPTH "test_result")))
                 (((((((FieldDef (HaskellName (packPTH "Id")))
                         (DBName (packPTH "id")))
                        ((FTTypeCon Nothing) (packPTH "TestResultId")))
                       SqlInt64)
                      [])
                     True)
                    ((ForeignRef (HaskellName (packPTH "TestResult")))
                       ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                [])
               [((((((FieldDef (HaskellName (packPTH "testKey")))
                       (DBName (packPTH "test_key")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for testKey")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "result")))
                       (DBName (packPTH "result")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for result")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "passingDate")))
                       (DBName (packPTH "passing_date")))
                      ((FTTypeCon Nothing) (packPTH "UTCTime")))
                     (SqlOther (packPTH "SqlType unset for passingDate")))
                    [])
                   True)
                  NoReference])
              [])
             [])
            [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
           (Data.Map.Internal.fromList []))
          False
          {entityFields = [((((((FieldDef (HaskellName (packPTH "testKey")))
                                  (DBName (packPTH "test_key")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "result")))
                                  (DBName (packPTH "result")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "passingDate")))
                                  (DBName (packPTH "passing_date")))
                                 ((FTTypeCon Nothing) (packPTH "UTCTime")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy UTCTime)))
                               [])
                              True)
                             NoReference],
           entityId = ((((((FieldDef (HaskellName (packPTH "Id")))
                             (DBName (packPTH "id")))
                            ((FTTypeCon Nothing) (packPTH "TestResultId")))
                           (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                              (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                          [])
                         True)
                        ((ForeignRef (HaskellName (packPTH "TestResult")))
                           ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))},
        (((((((((EntityDef (HaskellName (packPTH "User")))
                  (DBName (packPTH "user")))
                 (((((((FieldDef (HaskellName (packPTH "Id")))
                         (DBName (packPTH "id")))
                        ((FTTypeCon Nothing) (packPTH "UserId")))
                       SqlInt64)
                      [])
                     True)
                    ((ForeignRef (HaskellName (packPTH "User")))
                       ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                [])
               [((((((FieldDef (HaskellName (packPTH "username")))
                       (DBName (packPTH "username")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for username")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "password")))
                       (DBName (packPTH "password")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for password")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "email")))
                       (DBName (packPTH "email")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for email")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "avatar")))
                       (DBName (packPTH "avatar")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for avatar")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "firstName")))
                       (DBName (packPTH "first_name")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for firstName")))
                    [packPTH "Maybe"])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "secondName")))
                       (DBName (packPTH "second_name")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for secondName")))
                    [packPTH "Maybe"])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "birthDay")))
                       (DBName (packPTH "birth_day")))
                      ((FTTypeCon Nothing) (packPTH "UTCTime")))
                     (SqlOther (packPTH "SqlType unset for birthDay")))
                    [packPTH "Maybe"])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "sex")))
                       (DBName (packPTH "sex")))
                      ((FTTypeCon Nothing) (packPTH "Int")))
                     (SqlOther (packPTH "SqlType unset for sex")))
                    [packPTH "Maybe"])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "createdTests")))
                       (DBName (packPTH "created_tests")))
                      (FTList ((FTTypeCon Nothing) (packPTH "ObjectId"))))
                     (SqlOther (packPTH "SqlType unset for createdTests")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "passedTests")))
                       (DBName (packPTH "passed_tests")))
                      (FTList ((FTTypeCon Nothing) (packPTH "TestResult"))))
                     (SqlOther (packPTH "SqlType unset for passedTests")))
                    [])
                   True)
                  (EmbedRef
                     ((EmbedEntityDef (HaskellName (packPTH "TestResult")))
                        [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing) Nothing,
                         ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                         ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                           Nothing]))])
              [(((UniqueDef (HaskellName (packPTH "Email")))
                   (DBName (packPTH "email")))
                  [(HaskellName (packPTH "email"), DBName (packPTH "email"))])
                 [],
               (((UniqueDef (HaskellName (packPTH "Username")))
                   (DBName (packPTH "username")))
                  [(HaskellName (packPTH "username"), DBName (packPTH "username"))])
                 []])
             [])
            [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
           (Data.Map.Internal.fromList []))
          False
          {entityFields = [((((((FieldDef (HaskellName (packPTH "username")))
                                  (DBName (packPTH "username")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "password")))
                                  (DBName (packPTH "password")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "email")))
                                  (DBName (packPTH "email")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "avatar")))
                                  (DBName (packPTH "avatar")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "firstName")))
                                  (DBName (packPTH "first_name")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [packPTH "Maybe"])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "secondName")))
                                  (DBName (packPTH "second_name")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [packPTH "Maybe"])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "birthDay")))
                                  (DBName (packPTH "birth_day")))
                                 ((FTTypeCon Nothing) (packPTH "UTCTime")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy UTCTime)))
                               [packPTH "Maybe"])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "sex")))
                                  (DBName (packPTH "sex")))
                                 ((FTTypeCon Nothing) (packPTH "Int")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Int)))
                               [packPTH "Maybe"])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "createdTests")))
                                  (DBName (packPTH "created_tests")))
                                 (FTList ((FTTypeCon Nothing) (packPTH "ObjectId"))))
                                SqlString)
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "passedTests")))
                                  (DBName (packPTH "passed_tests")))
                                 (FTList ((FTTypeCon Nothing) (packPTH "TestResult"))))
                                SqlString)
                               [])
                              True)
                             (EmbedRef
                                ((EmbedEntityDef (HaskellName (packPTH "TestResult")))
                                   [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing) Nothing,
                                    ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                                    ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                                      Nothing]))],
           entityId = ((((((FieldDef (HaskellName (packPTH "Id")))
                             (DBName (packPTH "id")))
                            ((FTTypeCon Nothing) (packPTH "UserId")))
                           (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                              (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                          [])
                         True)
                        ((ForeignRef (HaskellName (packPTH "User")))
                           ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))}])
  ======>
    instance PersistField TestResult where
      toPersistValue
        = \ ent_a2K3G
            -> (PersistMap
                  $ ((Prelude.zip
                        ((Prelude.map pack) ["testKey", "result", "passingDate"]))
                       ((Prelude.map toPersistValue) $ (toPersistFields ent_a2K3G))))
      fromPersistValue
        = ((\ x_a2K3H
              -> let
                   columns_a2K3I
                     = unordered-containers-0.2.9.0:Data.HashMap.Strict.fromList x_a2K3H
                 in
                   (fromPersistValues
                      $ ((Prelude.map
                            (\ name_a2K3J
                               -> case
                                      (unordered-containers-0.2.9.0:Data.HashMap.Base.lookup
                                         (pack name_a2K3J))
                                        columns_a2K3I
                                  of
                                    Just v_a2K3K -> v_a2K3K
                                    Nothing -> PersistNull))
                           $ ["testKey", "result", "passingDate"])))
             <=< getPersistMap)
    instance persistent-2.8.1:Database.Persist.Sql.Class.PersistFieldSql TestResult where
      persistent-2.8.1:Database.Persist.Sql.Class.sqlType _ = SqlString
    instance PersistField User where
      toPersistValue
        = \ ent_a2K3L
            -> (PersistMap
                  $ ((Prelude.zip
                        ((Prelude.map pack)
                           ["username", "password", "email", "avatar", "firstName",
                            "secondName", "birthDay", "sex", "createdTests", "passedTests"]))
                       ((Prelude.map toPersistValue) $ (toPersistFields ent_a2K3L))))
      fromPersistValue
        = ((\ x_a2K3M
              -> let
                   columns_a2K3N
                     = unordered-containers-0.2.9.0:Data.HashMap.Strict.fromList x_a2K3M
                 in
                   (fromPersistValues
                      $ ((Prelude.map
                            (\ name_a2K3O
                               -> case
                                      (unordered-containers-0.2.9.0:Data.HashMap.Base.lookup
                                         (pack name_a2K3O))
                                        columns_a2K3N
                                  of
                                    Just v_a2K3P -> v_a2K3P
                                    Nothing -> PersistNull))
                           $ ["username", "password", "email", "avatar", "firstName",
                              "secondName", "birthDay", "sex", "createdTests", "passedTests"])))
             <=< getPersistMap)
    instance persistent-2.8.1:Database.Persist.Sql.Class.PersistFieldSql User where
      persistent-2.8.1:Database.Persist.Sql.Class.sqlType _ = SqlString
    data TestResult
      = TestResult {testResultTestKey :: !Text,
                    testResultResult :: !Text,
                    testResultPassingDate :: !UTCTime}
      deriving (Eq, Read, Show, Generic)
    type TestResultId = Key TestResult
    instance PersistEntity TestResult where
      type PersistEntityBackend TestResult = MongoContext
      data Unique TestResult
      newtype Key TestResult
        = TestResultKey {unTestResultKey :: (BackendKey MongoContext)}
        deriving (Show,
                  Read,
                  Eq,
                  Ord,
                  path-pieces-0.2.1:Web.PathPieces.PathPiece,
                  http-api-data-0.3.7.2:Web.Internal.HttpApiData.ToHttpApiData,
                  http-api-data-0.3.7.2:Web.Internal.HttpApiData.FromHttpApiData,
                  PersistField,
                  persistent-2.8.1:Database.Persist.Sql.Class.PersistFieldSql,
                  Aeson.ToJSON,
                  Aeson.FromJSON)
      data EntityField TestResult typ
        = typ ~ Key TestResult => TestResultId |
          typ ~ Text => TestResultTestKey |
          typ ~ Text => TestResultResult |
          typ ~ UTCTime => TestResultPassingDate
      keyToValues
        = ((ghc-prim-0.5.1.1:GHC.Types.: [])
             . (toPersistValue . unTestResultKey))
      keyFromValues
        = ((fmap TestResultKey)
             . (fromPersistValue . Database.Persist.TH.headNote))
      entityDef _
        = (((((((((EntityDef (HaskellName (packPTH "TestResult")))
                    (DBName (packPTH "test_result")))
                   (((((((FieldDef (HaskellName (packPTH "Id")))
                           (DBName (packPTH "id")))
                          ((FTTypeCon Nothing) (packPTH "TestResultId")))
                         SqlInt64)
                        [])
                       True)
                      ((ForeignRef (HaskellName (packPTH "TestResult")))
                         ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                  [])
                 [((((((FieldDef (HaskellName (packPTH "testKey")))
                         (DBName (packPTH "test_key")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "result")))
                         (DBName (packPTH "result")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "passingDate")))
                         (DBName (packPTH "passing_date")))
                        ((FTTypeCon Nothing) (packPTH "UTCTime")))
                       SqlDayTime)
                      [])
                     True)
                    NoReference])
                [])
               [])
              [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
             (Data.Map.Internal.fromList []))
            False
      toPersistFields (TestResult x_a2K3Q x_a2K3R x_a2K3S)
        = [SomePersistField x_a2K3Q, SomePersistField x_a2K3R,
           SomePersistField x_a2K3S]
      fromPersistValues [x1_a2K3U, x2_a2K3V, x3_a2K3W]
        = TestResult
            <$>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "testKey")))
                 . fromPersistValue)
                x1_a2K3U
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "result")))
                 . fromPersistValue)
                x2_a2K3V
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "passingDate")))
                 . fromPersistValue)
                x3_a2K3W
      fromPersistValues x_a2K3T
        = (Left
             $ ((mappend (packPTH "TestResult: fromPersistValues failed on: "))
                  (pack $ (show x_a2K3T))))
      persistUniqueToFieldNames _
        = error "Degenerate case, should never happen"
      persistUniqueToValues _
        = error "Degenerate case, should never happen"
      persistUniqueKeys
        (TestResult _testKey_a2K3X _result_a2K3Y _passingDate_a2K3Z)
        = []
      persistFieldDef TestResultId
        = ((((((FieldDef (HaskellName (packPTH "Id")))
                 (DBName (packPTH "id")))
                ((FTTypeCon Nothing) (packPTH "TestResultId")))
               SqlInt64)
              [])
             True)
            ((ForeignRef (HaskellName (packPTH "TestResult")))
               ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))
      persistFieldDef TestResultTestKey
        = ((((((FieldDef (HaskellName (packPTH "testKey")))
                 (DBName (packPTH "test_key")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef TestResultResult
        = ((((((FieldDef (HaskellName (packPTH "result")))
                 (DBName (packPTH "result")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef TestResultPassingDate
        = ((((((FieldDef (HaskellName (packPTH "passingDate")))
                 (DBName (packPTH "passing_date")))
                ((FTTypeCon Nothing) (packPTH "UTCTime")))
               SqlDayTime)
              [])
             True)
            NoReference
      persistIdField = TestResultId
      fieldLens TestResultId
        = (lensPTH entityKey)
            (\ Entity _ value_a2K40 key_a2K41
               -> (Entity key_a2K41) value_a2K40)
      fieldLens TestResultTestKey
        = (lensPTH (testResultTestKey . entityVal))
            (\ Entity key_a2K42 value_a2K43 x_a2K44
               -> (Entity key_a2K42) value_a2K43 {testResultTestKey = x_a2K44})
      fieldLens TestResultResult
        = (lensPTH (testResultResult . entityVal))
            (\ Entity key_a2K42 value_a2K43 x_a2K44
               -> (Entity key_a2K42) value_a2K43 {testResultResult = x_a2K44})
      fieldLens TestResultPassingDate
        = (lensPTH (testResultPassingDate . entityVal))
            (\ Entity key_a2K42 value_a2K43 x_a2K44
               -> (Entity key_a2K42)
                    value_a2K43 {testResultPassingDate = x_a2K44})
    instance ToBackendKey MongoContext TestResult where
      toBackendKey = unTestResultKey
      fromBackendKey = TestResultKey
    data User
      = User {userUsername :: !Text,
              userPassword :: !Text,
              userEmail :: !Text,
              userAvatar :: !Text,
              userFirstName :: !(Maybe Text),
              userSecondName :: !(Maybe Text),
              userBirthDay :: !(Maybe UTCTime),
              userSex :: !(Maybe Int),
              userCreatedTests :: ![ObjectId],
              userPassedTests :: ![TestResult]}
      deriving (Eq, Read, Show, Generic)
    type UserId = Key User
    instance PersistEntity User where
      type PersistEntityBackend User = MongoContext
      data Unique User = Email Text | Username Text
      newtype Key User
        = UserKey {unUserKey :: (BackendKey MongoContext)}
        deriving (Show,
                  Read,
                  Eq,
                  Ord,
                  path-pieces-0.2.1:Web.PathPieces.PathPiece,
                  http-api-data-0.3.7.2:Web.Internal.HttpApiData.ToHttpApiData,
                  http-api-data-0.3.7.2:Web.Internal.HttpApiData.FromHttpApiData,
                  PersistField,
                  persistent-2.8.1:Database.Persist.Sql.Class.PersistFieldSql,
                  Aeson.ToJSON,
                  Aeson.FromJSON)
      data EntityField User typ
        = typ ~ Key User => UserId |
          typ ~ Text => UserUsername |
          typ ~ Text => UserPassword |
          typ ~ Text => UserEmail |
          typ ~ Text => UserAvatar |
          typ ~ Maybe Text => UserFirstName |
          typ ~ Maybe Text => UserSecondName |
          typ ~ Maybe UTCTime => UserBirthDay |
          typ ~ Maybe Int => UserSex |
          typ ~ [ObjectId] => UserCreatedTests |
          typ ~ [TestResult] => UserPassedTests
      keyToValues
        = ((ghc-prim-0.5.1.1:GHC.Types.: [])
             . (toPersistValue . unUserKey))
      keyFromValues
        = ((fmap UserKey)
             . (fromPersistValue . Database.Persist.TH.headNote))
      entityDef _
        = (((((((((EntityDef (HaskellName (packPTH "User")))
                    (DBName (packPTH "user")))
                   (((((((FieldDef (HaskellName (packPTH "Id")))
                           (DBName (packPTH "id")))
                          ((FTTypeCon Nothing) (packPTH "UserId")))
                         SqlInt64)
                        [])
                       True)
                      ((ForeignRef (HaskellName (packPTH "User")))
                         ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                  [])
                 [((((((FieldDef (HaskellName (packPTH "username")))
                         (DBName (packPTH "username")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "password")))
                         (DBName (packPTH "password")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "email")))
                         (DBName (packPTH "email")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "avatar")))
                         (DBName (packPTH "avatar")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "firstName")))
                         (DBName (packPTH "first_name")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [packPTH "Maybe"])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "secondName")))
                         (DBName (packPTH "second_name")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [packPTH "Maybe"])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "birthDay")))
                         (DBName (packPTH "birth_day")))
                        ((FTTypeCon Nothing) (packPTH "UTCTime")))
                       SqlDayTime)
                      [packPTH "Maybe"])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "sex")))
                         (DBName (packPTH "sex")))
                        ((FTTypeCon Nothing) (packPTH "Int")))
                       SqlInt64)
                      [packPTH "Maybe"])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "createdTests")))
                         (DBName (packPTH "created_tests")))
                        (FTList ((FTTypeCon Nothing) (packPTH "ObjectId"))))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "passedTests")))
                         (DBName (packPTH "passed_tests")))
                        (FTList ((FTTypeCon Nothing) (packPTH "TestResult"))))
                       SqlString)
                      [])
                     True)
                    (EmbedRef
                       ((EmbedEntityDef (HaskellName (packPTH "TestResult")))
                          [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing) Nothing,
                           ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                           ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                             Nothing]))])
                [(((UniqueDef (HaskellName (packPTH "Email")))
                     (DBName (packPTH "email")))
                    [(HaskellName (packPTH "email"), DBName (packPTH "email"))])
                   [],
                 (((UniqueDef (HaskellName (packPTH "Username")))
                     (DBName (packPTH "username")))
                    [(HaskellName (packPTH "username"), DBName (packPTH "username"))])
                   []])
               [])
              [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
             (Data.Map.Internal.fromList []))
            False
      toPersistFields
        (User x_a2K45
              x_a2K46
              x_a2K47
              x_a2K48
              x_a2K49
              x_a2K4a
              x_a2K4b
              x_a2K4c
              x_a2K4d
              x_a2K4e)
        = [SomePersistField x_a2K45, SomePersistField x_a2K46,
           SomePersistField x_a2K47, SomePersistField x_a2K48,
           SomePersistField x_a2K49, SomePersistField x_a2K4a,
           SomePersistField x_a2K4b, SomePersistField x_a2K4c,
           SomePersistField x_a2K4d, SomePersistField x_a2K4e]
      fromPersistValues
        [x1_a2K4g,
         x2_a2K4h,
         x3_a2K4i,
         x4_a2K4j,
         x5_a2K4k,
         x6_a2K4l,
         x7_a2K4m,
         x8_a2K4n,
         x9_a2K4o,
         x10_a2K4p]
        = User
            <$>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "username")))
                 . fromPersistValue)
                x1_a2K4g
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "password")))
                 . fromPersistValue)
                x2_a2K4h
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "email")))
                 . fromPersistValue)
                x3_a2K4i
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "avatar")))
                 . fromPersistValue)
                x4_a2K4j
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "firstName")))
                 . fromPersistValue)
                x5_a2K4k
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "secondName")))
                 . fromPersistValue)
                x6_a2K4l
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "birthDay")))
                 . fromPersistValue)
                x7_a2K4m
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "sex")))
                 . fromPersistValue)
                x8_a2K4n
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "createdTests")))
                 . fromPersistValue)
                x9_a2K4o
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "passedTests")))
                 . fromPersistValue)
                x10_a2K4p
      fromPersistValues x_a2K4f
        = (Left
             $ ((mappend (packPTH "User: fromPersistValues failed on: "))
                  (pack $ (show x_a2K4f))))
      persistUniqueToFieldNames Email {}
        = [(HaskellName (packPTH "email"), DBName (packPTH "email"))]
      persistUniqueToFieldNames Username {}
        = [(HaskellName (packPTH "username"), DBName (packPTH "username"))]
      persistUniqueToValues (Email x_a2K4q) = [toPersistValue x_a2K4q]
      persistUniqueToValues (Username x_a2K4r) = [toPersistValue x_a2K4r]
      persistUniqueKeys
        (User _username_a2K4s
              _password_a2K4t
              _email_a2K4u
              _avatar_a2K4v
              _firstName_a2K4w
              _secondName_a2K4x
              _birthDay_a2K4y
              _sex_a2K4z
              _createdTests_a2K4A
              _passedTests_a2K4B)
        = [Email _email_a2K4u, Username _username_a2K4s]
      persistFieldDef UserId
        = ((((((FieldDef (HaskellName (packPTH "Id")))
                 (DBName (packPTH "id")))
                ((FTTypeCon Nothing) (packPTH "UserId")))
               SqlInt64)
              [])
             True)
            ((ForeignRef (HaskellName (packPTH "User")))
               ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))
      persistFieldDef UserUsername
        = ((((((FieldDef (HaskellName (packPTH "username")))
                 (DBName (packPTH "username")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef UserPassword
        = ((((((FieldDef (HaskellName (packPTH "password")))
                 (DBName (packPTH "password")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef UserEmail
        = ((((((FieldDef (HaskellName (packPTH "email")))
                 (DBName (packPTH "email")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef UserAvatar
        = ((((((FieldDef (HaskellName (packPTH "avatar")))
                 (DBName (packPTH "avatar")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef UserFirstName
        = ((((((FieldDef (HaskellName (packPTH "firstName")))
                 (DBName (packPTH "first_name")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [packPTH "Maybe"])
             True)
            NoReference
      persistFieldDef UserSecondName
        = ((((((FieldDef (HaskellName (packPTH "secondName")))
                 (DBName (packPTH "second_name")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [packPTH "Maybe"])
             True)
            NoReference
      persistFieldDef UserBirthDay
        = ((((((FieldDef (HaskellName (packPTH "birthDay")))
                 (DBName (packPTH "birth_day")))
                ((FTTypeCon Nothing) (packPTH "UTCTime")))
               SqlDayTime)
              [packPTH "Maybe"])
             True)
            NoReference
      persistFieldDef UserSex
        = ((((((FieldDef (HaskellName (packPTH "sex")))
                 (DBName (packPTH "sex")))
                ((FTTypeCon Nothing) (packPTH "Int")))
               SqlInt64)
              [packPTH "Maybe"])
             True)
            NoReference
      persistFieldDef UserCreatedTests
        = ((((((FieldDef (HaskellName (packPTH "createdTests")))
                 (DBName (packPTH "created_tests")))
                (FTList ((FTTypeCon Nothing) (packPTH "ObjectId"))))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef UserPassedTests
        = ((((((FieldDef (HaskellName (packPTH "passedTests")))
                 (DBName (packPTH "passed_tests")))
                (FTList ((FTTypeCon Nothing) (packPTH "TestResult"))))
               SqlString)
              [])
             True)
            (EmbedRef
               ((EmbedEntityDef (HaskellName (packPTH "TestResult")))
                  [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing) Nothing,
                   ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                   ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                     Nothing]))
      persistIdField = UserId
      fieldLens UserId
        = (lensPTH entityKey)
            (\ Entity _ value_a2K4C key_a2K4D
               -> (Entity key_a2K4D) value_a2K4C)
      fieldLens UserUsername
        = (lensPTH (userUsername . entityVal))
            (\ Entity key_a2K4E value_a2K4F x_a2K4G
               -> (Entity key_a2K4E) value_a2K4F {userUsername = x_a2K4G})
      fieldLens UserPassword
        = (lensPTH (userPassword . entityVal))
            (\ Entity key_a2K4E value_a2K4F x_a2K4G
               -> (Entity key_a2K4E) value_a2K4F {userPassword = x_a2K4G})
      fieldLens UserEmail
        = (lensPTH (userEmail . entityVal))
            (\ Entity key_a2K4E value_a2K4F x_a2K4G
               -> (Entity key_a2K4E) value_a2K4F {userEmail = x_a2K4G})
      fieldLens UserAvatar
        = (lensPTH (userAvatar . entityVal))
            (\ Entity key_a2K4E value_a2K4F x_a2K4G
               -> (Entity key_a2K4E) value_a2K4F {userAvatar = x_a2K4G})
      fieldLens UserFirstName
        = (lensPTH (userFirstName . entityVal))
            (\ Entity key_a2K4E value_a2K4F x_a2K4G
               -> (Entity key_a2K4E) value_a2K4F {userFirstName = x_a2K4G})
      fieldLens UserSecondName
        = (lensPTH (userSecondName . entityVal))
            (\ Entity key_a2K4E value_a2K4F x_a2K4G
               -> (Entity key_a2K4E) value_a2K4F {userSecondName = x_a2K4G})
      fieldLens UserBirthDay
        = (lensPTH (userBirthDay . entityVal))
            (\ Entity key_a2K4E value_a2K4F x_a2K4G
               -> (Entity key_a2K4E) value_a2K4F {userBirthDay = x_a2K4G})
      fieldLens UserSex
        = (lensPTH (userSex . entityVal))
            (\ Entity key_a2K4E value_a2K4F x_a2K4G
               -> (Entity key_a2K4E) value_a2K4F {userSex = x_a2K4G})
      fieldLens UserCreatedTests
        = (lensPTH (userCreatedTests . entityVal))
            (\ Entity key_a2K4E value_a2K4F x_a2K4G
               -> (Entity key_a2K4E) value_a2K4F {userCreatedTests = x_a2K4G})
      fieldLens UserPassedTests
        = (lensPTH (userPassedTests . entityVal))
            (\ Entity key_a2K4E value_a2K4F x_a2K4G
               -> (Entity key_a2K4E) value_a2K4F {userPassedTests = x_a2K4G})
    instance ToBackendKey MongoContext User where
      toBackendKey = unUserKey
      fromBackendKey = UserKey
/home/nikita/Projects/labs/Databases/Course-Project/Server/src/Model/User.hs:(27,79)-(47,2): Splicing expression
    Language.Haskell.TH.Quote.quoteExp
      persistLowerCase
      "\n\
      \TestResult\n\
      \  testKey       Text\n\
      \  result        Text\n\
      \  passingDate   UTCTime\n\
      \  deriving      Eq Read Show Generic\n\
      \User\n\
      \  username      Text\n\
      \  password      Text\n\
      \  email         Text\n\
      \  avatar        Text\n\
      \  firstName     Text Maybe\n\
      \  secondName    Text Maybe\n\
      \  birthDay      UTCTime Maybe\n\
      \  sex           Int Maybe\n\
      \  createdTests  [ObjectId]\n\
      \  passedTests   [TestResult]\n\
      \  Email         email\n\
      \  Username      username\n\
      \  deriving      Eq Read Show Generic\n"
  ======>
    [(((((((((EntityDef (HaskellName (packPTH "TestResult")))
               (DBName (packPTH "test_result")))
              (((((((FieldDef (HaskellName (packPTH "Id")))
                      (DBName (packPTH "id")))
                     ((FTTypeCon Nothing) (packPTH "TestResultId")))
                    SqlInt64)
                   [])
                  True)
                 ((ForeignRef (HaskellName (packPTH "TestResult")))
                    ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
             [])
            [((((((FieldDef (HaskellName (packPTH "testKey")))
                    (DBName (packPTH "test_key")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for testKey")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "result")))
                    (DBName (packPTH "result")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for result")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "passingDate")))
                    (DBName (packPTH "passing_date")))
                   ((FTTypeCon Nothing) (packPTH "UTCTime")))
                  (SqlOther (packPTH "SqlType unset for passingDate")))
                 [])
                True)
               NoReference])
           [])
          [])
         [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
        (Data.Map.Internal.fromList []))
       False
       {entityFields = [((((((FieldDef (HaskellName (packPTH "testKey")))
                               (DBName (packPTH "test_key")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "result")))
                               (DBName (packPTH "result")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "passingDate")))
                               (DBName (packPTH "passing_date")))
                              ((FTTypeCon Nothing) (packPTH "UTCTime")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy UTCTime)))
                            [])
                           True)
                          NoReference],
        entityId = ((((((FieldDef (HaskellName (packPTH "Id")))
                          (DBName (packPTH "id")))
                         ((FTTypeCon Nothing) (packPTH "TestResultId")))
                        (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                           (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                       [])
                      True)
                     ((ForeignRef (HaskellName (packPTH "TestResult")))
                        ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))},
     (((((((((EntityDef (HaskellName (packPTH "User")))
               (DBName (packPTH "user")))
              (((((((FieldDef (HaskellName (packPTH "Id")))
                      (DBName (packPTH "id")))
                     ((FTTypeCon Nothing) (packPTH "UserId")))
                    SqlInt64)
                   [])
                  True)
                 ((ForeignRef (HaskellName (packPTH "User")))
                    ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
             [])
            [((((((FieldDef (HaskellName (packPTH "username")))
                    (DBName (packPTH "username")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for username")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "password")))
                    (DBName (packPTH "password")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for password")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "email")))
                    (DBName (packPTH "email")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for email")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "avatar")))
                    (DBName (packPTH "avatar")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for avatar")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "firstName")))
                    (DBName (packPTH "first_name")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for firstName")))
                 [packPTH "Maybe"])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "secondName")))
                    (DBName (packPTH "second_name")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for secondName")))
                 [packPTH "Maybe"])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "birthDay")))
                    (DBName (packPTH "birth_day")))
                   ((FTTypeCon Nothing) (packPTH "UTCTime")))
                  (SqlOther (packPTH "SqlType unset for birthDay")))
                 [packPTH "Maybe"])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "sex")))
                    (DBName (packPTH "sex")))
                   ((FTTypeCon Nothing) (packPTH "Int")))
                  (SqlOther (packPTH "SqlType unset for sex")))
                 [packPTH "Maybe"])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "createdTests")))
                    (DBName (packPTH "created_tests")))
                   (FTList ((FTTypeCon Nothing) (packPTH "ObjectId"))))
                  (SqlOther (packPTH "SqlType unset for createdTests")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "passedTests")))
                    (DBName (packPTH "passed_tests")))
                   (FTList ((FTTypeCon Nothing) (packPTH "TestResult"))))
                  (SqlOther (packPTH "SqlType unset for passedTests")))
                 [])
                True)
               (EmbedRef
                  ((EmbedEntityDef (HaskellName (packPTH "TestResult")))
                     [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing) Nothing,
                      ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                      ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                        Nothing]))])
           [(((UniqueDef (HaskellName (packPTH "Email")))
                (DBName (packPTH "email")))
               [(HaskellName (packPTH "email"), DBName (packPTH "email"))])
              [],
            (((UniqueDef (HaskellName (packPTH "Username")))
                (DBName (packPTH "username")))
               [(HaskellName (packPTH "username"), DBName (packPTH "username"))])
              []])
          [])
         [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
        (Data.Map.Internal.fromList []))
       False
       {entityFields = [((((((FieldDef (HaskellName (packPTH "username")))
                               (DBName (packPTH "username")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "password")))
                               (DBName (packPTH "password")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "email")))
                               (DBName (packPTH "email")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "avatar")))
                               (DBName (packPTH "avatar")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "firstName")))
                               (DBName (packPTH "first_name")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [packPTH "Maybe"])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "secondName")))
                               (DBName (packPTH "second_name")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [packPTH "Maybe"])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "birthDay")))
                               (DBName (packPTH "birth_day")))
                              ((FTTypeCon Nothing) (packPTH "UTCTime")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy UTCTime)))
                            [packPTH "Maybe"])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "sex")))
                               (DBName (packPTH "sex")))
                              ((FTTypeCon Nothing) (packPTH "Int")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Int)))
                            [packPTH "Maybe"])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "createdTests")))
                               (DBName (packPTH "created_tests")))
                              (FTList ((FTTypeCon Nothing) (packPTH "ObjectId"))))
                             SqlString)
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "passedTests")))
                               (DBName (packPTH "passed_tests")))
                              (FTList ((FTTypeCon Nothing) (packPTH "TestResult"))))
                             SqlString)
                            [])
                           True)
                          (EmbedRef
                             ((EmbedEntityDef (HaskellName (packPTH "TestResult")))
                                [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing) Nothing,
                                 ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                                 ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                                   Nothing]))],
        entityId = ((((((FieldDef (HaskellName (packPTH "Id")))
                          (DBName (packPTH "id")))
                         ((FTTypeCon Nothing) (packPTH "UserId")))
                        (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                           (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                       [])
                      True)
                     ((ForeignRef (HaskellName (packPTH "User")))
                        ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))}]
/home/nikita/Projects/labs/Databases/Course-Project/Server/src/Model/User.hs:(27,1)-(47,2): Splicing declarations
    share
      [mkPersist (mkPersistSettings (ConT ''MongoContext))]
      ([(((((((((EntityDef (HaskellName (packPTH "TestResult")))
                  (DBName (packPTH "test_result")))
                 (((((((FieldDef (HaskellName (packPTH "Id")))
                         (DBName (packPTH "id")))
                        ((FTTypeCon Nothing) (packPTH "TestResultId")))
                       SqlInt64)
                      [])
                     True)
                    ((ForeignRef (HaskellName (packPTH "TestResult")))
                       ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                [])
               [((((((FieldDef (HaskellName (packPTH "testKey")))
                       (DBName (packPTH "test_key")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for testKey")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "result")))
                       (DBName (packPTH "result")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for result")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "passingDate")))
                       (DBName (packPTH "passing_date")))
                      ((FTTypeCon Nothing) (packPTH "UTCTime")))
                     (SqlOther (packPTH "SqlType unset for passingDate")))
                    [])
                   True)
                  NoReference])
              [])
             [])
            [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
           (Data.Map.Internal.fromList []))
          False
          {entityFields = [((((((FieldDef (HaskellName (packPTH "testKey")))
                                  (DBName (packPTH "test_key")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "result")))
                                  (DBName (packPTH "result")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "passingDate")))
                                  (DBName (packPTH "passing_date")))
                                 ((FTTypeCon Nothing) (packPTH "UTCTime")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy UTCTime)))
                               [])
                              True)
                             NoReference],
           entityId = ((((((FieldDef (HaskellName (packPTH "Id")))
                             (DBName (packPTH "id")))
                            ((FTTypeCon Nothing) (packPTH "TestResultId")))
                           (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                              (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                          [])
                         True)
                        ((ForeignRef (HaskellName (packPTH "TestResult")))
                           ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))},
        (((((((((EntityDef (HaskellName (packPTH "User")))
                  (DBName (packPTH "user")))
                 (((((((FieldDef (HaskellName (packPTH "Id")))
                         (DBName (packPTH "id")))
                        ((FTTypeCon Nothing) (packPTH "UserId")))
                       SqlInt64)
                      [])
                     True)
                    ((ForeignRef (HaskellName (packPTH "User")))
                       ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                [])
               [((((((FieldDef (HaskellName (packPTH "username")))
                       (DBName (packPTH "username")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for username")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "password")))
                       (DBName (packPTH "password")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for password")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "email")))
                       (DBName (packPTH "email")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for email")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "avatar")))
                       (DBName (packPTH "avatar")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for avatar")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "firstName")))
                       (DBName (packPTH "first_name")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for firstName")))
                    [packPTH "Maybe"])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "secondName")))
                       (DBName (packPTH "second_name")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for secondName")))
                    [packPTH "Maybe"])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "birthDay")))
                       (DBName (packPTH "birth_day")))
                      ((FTTypeCon Nothing) (packPTH "UTCTime")))
                     (SqlOther (packPTH "SqlType unset for birthDay")))
                    [packPTH "Maybe"])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "sex")))
                       (DBName (packPTH "sex")))
                      ((FTTypeCon Nothing) (packPTH "Int")))
                     (SqlOther (packPTH "SqlType unset for sex")))
                    [packPTH "Maybe"])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "createdTests")))
                       (DBName (packPTH "created_tests")))
                      (FTList ((FTTypeCon Nothing) (packPTH "ObjectId"))))
                     (SqlOther (packPTH "SqlType unset for createdTests")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "passedTests")))
                       (DBName (packPTH "passed_tests")))
                      (FTList ((FTTypeCon Nothing) (packPTH "TestResult"))))
                     (SqlOther (packPTH "SqlType unset for passedTests")))
                    [])
                   True)
                  (EmbedRef
                     ((EmbedEntityDef (HaskellName (packPTH "TestResult")))
                        [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing) Nothing,
                         ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                         ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                           Nothing]))])
              [(((UniqueDef (HaskellName (packPTH "Email")))
                   (DBName (packPTH "email")))
                  [(HaskellName (packPTH "email"), DBName (packPTH "email"))])
                 [],
               (((UniqueDef (HaskellName (packPTH "Username")))
                   (DBName (packPTH "username")))
                  [(HaskellName (packPTH "username"), DBName (packPTH "username"))])
                 []])
             [])
            [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
           (Data.Map.Internal.fromList []))
          False
          {entityFields = [((((((FieldDef (HaskellName (packPTH "username")))
                                  (DBName (packPTH "username")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "password")))
                                  (DBName (packPTH "password")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "email")))
                                  (DBName (packPTH "email")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "avatar")))
                                  (DBName (packPTH "avatar")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "firstName")))
                                  (DBName (packPTH "first_name")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [packPTH "Maybe"])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "secondName")))
                                  (DBName (packPTH "second_name")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [packPTH "Maybe"])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "birthDay")))
                                  (DBName (packPTH "birth_day")))
                                 ((FTTypeCon Nothing) (packPTH "UTCTime")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy UTCTime)))
                               [packPTH "Maybe"])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "sex")))
                                  (DBName (packPTH "sex")))
                                 ((FTTypeCon Nothing) (packPTH "Int")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Int)))
                               [packPTH "Maybe"])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "createdTests")))
                                  (DBName (packPTH "created_tests")))
                                 (FTList ((FTTypeCon Nothing) (packPTH "ObjectId"))))
                                SqlString)
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "passedTests")))
                                  (DBName (packPTH "passed_tests")))
                                 (FTList ((FTTypeCon Nothing) (packPTH "TestResult"))))
                                SqlString)
                               [])
                              True)
                             (EmbedRef
                                ((EmbedEntityDef (HaskellName (packPTH "TestResult")))
                                   [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing) Nothing,
                                    ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                                    ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                                      Nothing]))],
           entityId = ((((((FieldDef (HaskellName (packPTH "Id")))
                             (DBName (packPTH "id")))
                            ((FTTypeCon Nothing) (packPTH "UserId")))
                           (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                              (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                          [])
                         True)
                        ((ForeignRef (HaskellName (packPTH "User")))
                           ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))}])
  ======>
    instance PersistField TestResult where
      toPersistValue
        = \ ent_a2OeP
            -> (PersistMap
                  $ ((Prelude.zip
                        ((Prelude.map pack) ["testKey", "result", "passingDate"]))
                       ((Prelude.map toPersistValue) $ (toPersistFields ent_a2OeP))))
      fromPersistValue
        = ((\ x_a2OeQ
              -> let
                   columns_a2OeR
                     = unordered-containers-0.2.9.0:Data.HashMap.Strict.fromList x_a2OeQ
                 in
                   (fromPersistValues
                      $ ((Prelude.map
                            (\ name_a2OeS
                               -> case
                                      (unordered-containers-0.2.9.0:Data.HashMap.Base.lookup
                                         (pack name_a2OeS))
                                        columns_a2OeR
                                  of
                                    Just v_a2OeT -> v_a2OeT
                                    Nothing -> PersistNull))
                           $ ["testKey", "result", "passingDate"])))
             <=< getPersistMap)
    instance persistent-2.8.1:Database.Persist.Sql.Class.PersistFieldSql TestResult where
      persistent-2.8.1:Database.Persist.Sql.Class.sqlType _ = SqlString
    instance PersistField User where
      toPersistValue
        = \ ent_a2OeU
            -> (PersistMap
                  $ ((Prelude.zip
                        ((Prelude.map pack)
                           ["username", "password", "email", "avatar", "firstName",
                            "secondName", "birthDay", "sex", "createdTests", "passedTests"]))
                       ((Prelude.map toPersistValue) $ (toPersistFields ent_a2OeU))))
      fromPersistValue
        = ((\ x_a2OeV
              -> let
                   columns_a2OeW
                     = unordered-containers-0.2.9.0:Data.HashMap.Strict.fromList x_a2OeV
                 in
                   (fromPersistValues
                      $ ((Prelude.map
                            (\ name_a2OeX
                               -> case
                                      (unordered-containers-0.2.9.0:Data.HashMap.Base.lookup
                                         (pack name_a2OeX))
                                        columns_a2OeW
                                  of
                                    Just v_a2OeY -> v_a2OeY
                                    Nothing -> PersistNull))
                           $ ["username", "password", "email", "avatar", "firstName",
                              "secondName", "birthDay", "sex", "createdTests", "passedTests"])))
             <=< getPersistMap)
    instance persistent-2.8.1:Database.Persist.Sql.Class.PersistFieldSql User where
      persistent-2.8.1:Database.Persist.Sql.Class.sqlType _ = SqlString
    data TestResult
      = TestResult {testResultTestKey :: !Text,
                    testResultResult :: !Text,
                    testResultPassingDate :: !UTCTime}
      deriving (Eq, Read, Show, Generic)
    type TestResultId = Key TestResult
    instance PersistEntity TestResult where
      type PersistEntityBackend TestResult = MongoContext
      data Unique TestResult
      newtype Key TestResult
        = TestResultKey {unTestResultKey :: (BackendKey MongoContext)}
        deriving (Show,
                  Read,
                  Eq,
                  Ord,
                  path-pieces-0.2.1:Web.PathPieces.PathPiece,
                  http-api-data-0.3.7.2:Web.Internal.HttpApiData.ToHttpApiData,
                  http-api-data-0.3.7.2:Web.Internal.HttpApiData.FromHttpApiData,
                  PersistField,
                  persistent-2.8.1:Database.Persist.Sql.Class.PersistFieldSql,
                  Aeson.ToJSON,
                  Aeson.FromJSON)
      data EntityField TestResult typ
        = typ ~ Key TestResult => TestResultId |
          typ ~ Text => TestResultTestKey |
          typ ~ Text => TestResultResult |
          typ ~ UTCTime => TestResultPassingDate
      keyToValues
        = ((ghc-prim-0.5.1.1:GHC.Types.: [])
             . (toPersistValue . unTestResultKey))
      keyFromValues
        = ((fmap TestResultKey)
             . (fromPersistValue . Database.Persist.TH.headNote))
      entityDef _
        = (((((((((EntityDef (HaskellName (packPTH "TestResult")))
                    (DBName (packPTH "test_result")))
                   (((((((FieldDef (HaskellName (packPTH "Id")))
                           (DBName (packPTH "id")))
                          ((FTTypeCon Nothing) (packPTH "TestResultId")))
                         SqlInt64)
                        [])
                       True)
                      ((ForeignRef (HaskellName (packPTH "TestResult")))
                         ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                  [])
                 [((((((FieldDef (HaskellName (packPTH "testKey")))
                         (DBName (packPTH "test_key")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "result")))
                         (DBName (packPTH "result")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "passingDate")))
                         (DBName (packPTH "passing_date")))
                        ((FTTypeCon Nothing) (packPTH "UTCTime")))
                       SqlDayTime)
                      [])
                     True)
                    NoReference])
                [])
               [])
              [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
             (Data.Map.Internal.fromList []))
            False
      toPersistFields (TestResult x_a2OeZ x_a2Of0 x_a2Of1)
        = [SomePersistField x_a2OeZ, SomePersistField x_a2Of0,
           SomePersistField x_a2Of1]
      fromPersistValues [x1_a2Of3, x2_a2Of4, x3_a2Of5]
        = TestResult
            <$>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "testKey")))
                 . fromPersistValue)
                x1_a2Of3
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "result")))
                 . fromPersistValue)
                x2_a2Of4
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "passingDate")))
                 . fromPersistValue)
                x3_a2Of5
      fromPersistValues x_a2Of2
        = (Left
             $ ((mappend (packPTH "TestResult: fromPersistValues failed on: "))
                  (pack $ (show x_a2Of2))))
      persistUniqueToFieldNames _
        = error "Degenerate case, should never happen"
      persistUniqueToValues _
        = error "Degenerate case, should never happen"
      persistUniqueKeys
        (TestResult _testKey_a2Of6 _result_a2Of7 _passingDate_a2Of8)
        = []
      persistFieldDef TestResultId
        = ((((((FieldDef (HaskellName (packPTH "Id")))
                 (DBName (packPTH "id")))
                ((FTTypeCon Nothing) (packPTH "TestResultId")))
               SqlInt64)
              [])
             True)
            ((ForeignRef (HaskellName (packPTH "TestResult")))
               ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))
      persistFieldDef TestResultTestKey
        = ((((((FieldDef (HaskellName (packPTH "testKey")))
                 (DBName (packPTH "test_key")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef TestResultResult
        = ((((((FieldDef (HaskellName (packPTH "result")))
                 (DBName (packPTH "result")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef TestResultPassingDate
        = ((((((FieldDef (HaskellName (packPTH "passingDate")))
                 (DBName (packPTH "passing_date")))
                ((FTTypeCon Nothing) (packPTH "UTCTime")))
               SqlDayTime)
              [])
             True)
            NoReference
      persistIdField = TestResultId
      fieldLens TestResultId
        = (lensPTH entityKey)
            (\ Entity _ value_a2Of9 key_a2Ofa
               -> (Entity key_a2Ofa) value_a2Of9)
      fieldLens TestResultTestKey
        = (lensPTH (testResultTestKey . entityVal))
            (\ Entity key_a2Ofb value_a2Ofc x_a2Ofd
               -> (Entity key_a2Ofb) value_a2Ofc {testResultTestKey = x_a2Ofd})
      fieldLens TestResultResult
        = (lensPTH (testResultResult . entityVal))
            (\ Entity key_a2Ofb value_a2Ofc x_a2Ofd
               -> (Entity key_a2Ofb) value_a2Ofc {testResultResult = x_a2Ofd})
      fieldLens TestResultPassingDate
        = (lensPTH (testResultPassingDate . entityVal))
            (\ Entity key_a2Ofb value_a2Ofc x_a2Ofd
               -> (Entity key_a2Ofb)
                    value_a2Ofc {testResultPassingDate = x_a2Ofd})
    instance ToBackendKey MongoContext TestResult where
      toBackendKey = unTestResultKey
      fromBackendKey = TestResultKey
    data User
      = User {userUsername :: !Text,
              userPassword :: !Text,
              userEmail :: !Text,
              userAvatar :: !Text,
              userFirstName :: !(Maybe Text),
              userSecondName :: !(Maybe Text),
              userBirthDay :: !(Maybe UTCTime),
              userSex :: !(Maybe Int),
              userCreatedTests :: ![ObjectId],
              userPassedTests :: ![TestResult]}
      deriving (Eq, Read, Show, Generic)
    type UserId = Key User
    instance PersistEntity User where
      type PersistEntityBackend User = MongoContext
      data Unique User = Email Text | Username Text
      newtype Key User
        = UserKey {unUserKey :: (BackendKey MongoContext)}
        deriving (Show,
                  Read,
                  Eq,
                  Ord,
                  path-pieces-0.2.1:Web.PathPieces.PathPiece,
                  http-api-data-0.3.7.2:Web.Internal.HttpApiData.ToHttpApiData,
                  http-api-data-0.3.7.2:Web.Internal.HttpApiData.FromHttpApiData,
                  PersistField,
                  persistent-2.8.1:Database.Persist.Sql.Class.PersistFieldSql,
                  Aeson.ToJSON,
                  Aeson.FromJSON)
      data EntityField User typ
        = typ ~ Key User => UserId |
          typ ~ Text => UserUsername |
          typ ~ Text => UserPassword |
          typ ~ Text => UserEmail |
          typ ~ Text => UserAvatar |
          typ ~ Maybe Text => UserFirstName |
          typ ~ Maybe Text => UserSecondName |
          typ ~ Maybe UTCTime => UserBirthDay |
          typ ~ Maybe Int => UserSex |
          typ ~ [ObjectId] => UserCreatedTests |
          typ ~ [TestResult] => UserPassedTests
      keyToValues
        = ((ghc-prim-0.5.1.1:GHC.Types.: [])
             . (toPersistValue . unUserKey))
      keyFromValues
        = ((fmap UserKey)
             . (fromPersistValue . Database.Persist.TH.headNote))
      entityDef _
        = (((((((((EntityDef (HaskellName (packPTH "User")))
                    (DBName (packPTH "user")))
                   (((((((FieldDef (HaskellName (packPTH "Id")))
                           (DBName (packPTH "id")))
                          ((FTTypeCon Nothing) (packPTH "UserId")))
                         SqlInt64)
                        [])
                       True)
                      ((ForeignRef (HaskellName (packPTH "User")))
                         ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                  [])
                 [((((((FieldDef (HaskellName (packPTH "username")))
                         (DBName (packPTH "username")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "password")))
                         (DBName (packPTH "password")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "email")))
                         (DBName (packPTH "email")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "avatar")))
                         (DBName (packPTH "avatar")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "firstName")))
                         (DBName (packPTH "first_name")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [packPTH "Maybe"])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "secondName")))
                         (DBName (packPTH "second_name")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [packPTH "Maybe"])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "birthDay")))
                         (DBName (packPTH "birth_day")))
                        ((FTTypeCon Nothing) (packPTH "UTCTime")))
                       SqlDayTime)
                      [packPTH "Maybe"])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "sex")))
                         (DBName (packPTH "sex")))
                        ((FTTypeCon Nothing) (packPTH "Int")))
                       SqlInt64)
                      [packPTH "Maybe"])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "createdTests")))
                         (DBName (packPTH "created_tests")))
                        (FTList ((FTTypeCon Nothing) (packPTH "ObjectId"))))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "passedTests")))
                         (DBName (packPTH "passed_tests")))
                        (FTList ((FTTypeCon Nothing) (packPTH "TestResult"))))
                       SqlString)
                      [])
                     True)
                    (EmbedRef
                       ((EmbedEntityDef (HaskellName (packPTH "TestResult")))
                          [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing) Nothing,
                           ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                           ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                             Nothing]))])
                [(((UniqueDef (HaskellName (packPTH "Email")))
                     (DBName (packPTH "email")))
                    [(HaskellName (packPTH "email"), DBName (packPTH "email"))])
                   [],
                 (((UniqueDef (HaskellName (packPTH "Username")))
                     (DBName (packPTH "username")))
                    [(HaskellName (packPTH "username"), DBName (packPTH "username"))])
                   []])
               [])
              [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
             (Data.Map.Internal.fromList []))
            False
      toPersistFields
        (User x_a2Ofe
              x_a2Off
              x_a2Ofg
              x_a2Ofh
              x_a2Ofi
              x_a2Ofj
              x_a2Ofk
              x_a2Ofl
              x_a2Ofm
              x_a2Ofn)
        = [SomePersistField x_a2Ofe, SomePersistField x_a2Off,
           SomePersistField x_a2Ofg, SomePersistField x_a2Ofh,
           SomePersistField x_a2Ofi, SomePersistField x_a2Ofj,
           SomePersistField x_a2Ofk, SomePersistField x_a2Ofl,
           SomePersistField x_a2Ofm, SomePersistField x_a2Ofn]
      fromPersistValues
        [x1_a2Ofp,
         x2_a2Ofq,
         x3_a2Ofr,
         x4_a2Ofs,
         x5_a2Oft,
         x6_a2Ofu,
         x7_a2Ofv,
         x8_a2Ofw,
         x9_a2Ofx,
         x10_a2Ofy]
        = User
            <$>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "username")))
                 . fromPersistValue)
                x1_a2Ofp
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "password")))
                 . fromPersistValue)
                x2_a2Ofq
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "email")))
                 . fromPersistValue)
                x3_a2Ofr
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "avatar")))
                 . fromPersistValue)
                x4_a2Ofs
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "firstName")))
                 . fromPersistValue)
                x5_a2Oft
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "secondName")))
                 . fromPersistValue)
                x6_a2Ofu
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "birthDay")))
                 . fromPersistValue)
                x7_a2Ofv
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "sex")))
                 . fromPersistValue)
                x8_a2Ofw
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "createdTests")))
                 . fromPersistValue)
                x9_a2Ofx
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "passedTests")))
                 . fromPersistValue)
                x10_a2Ofy
      fromPersistValues x_a2Ofo
        = (Left
             $ ((mappend (packPTH "User: fromPersistValues failed on: "))
                  (pack $ (show x_a2Ofo))))
      persistUniqueToFieldNames Email {}
        = [(HaskellName (packPTH "email"), DBName (packPTH "email"))]
      persistUniqueToFieldNames Username {}
        = [(HaskellName (packPTH "username"), DBName (packPTH "username"))]
      persistUniqueToValues (Email x_a2Ofz) = [toPersistValue x_a2Ofz]
      persistUniqueToValues (Username x_a2OfA) = [toPersistValue x_a2OfA]
      persistUniqueKeys
        (User _username_a2OfB
              _password_a2OfC
              _email_a2OfD
              _avatar_a2OfE
              _firstName_a2OfF
              _secondName_a2OfG
              _birthDay_a2OfH
              _sex_a2OfI
              _createdTests_a2OfJ
              _passedTests_a2OfK)
        = [Email _email_a2OfD, Username _username_a2OfB]
      persistFieldDef UserId
        = ((((((FieldDef (HaskellName (packPTH "Id")))
                 (DBName (packPTH "id")))
                ((FTTypeCon Nothing) (packPTH "UserId")))
               SqlInt64)
              [])
             True)
            ((ForeignRef (HaskellName (packPTH "User")))
               ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))
      persistFieldDef UserUsername
        = ((((((FieldDef (HaskellName (packPTH "username")))
                 (DBName (packPTH "username")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef UserPassword
        = ((((((FieldDef (HaskellName (packPTH "password")))
                 (DBName (packPTH "password")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef UserEmail
        = ((((((FieldDef (HaskellName (packPTH "email")))
                 (DBName (packPTH "email")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef UserAvatar
        = ((((((FieldDef (HaskellName (packPTH "avatar")))
                 (DBName (packPTH "avatar")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef UserFirstName
        = ((((((FieldDef (HaskellName (packPTH "firstName")))
                 (DBName (packPTH "first_name")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [packPTH "Maybe"])
             True)
            NoReference
      persistFieldDef UserSecondName
        = ((((((FieldDef (HaskellName (packPTH "secondName")))
                 (DBName (packPTH "second_name")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [packPTH "Maybe"])
             True)
            NoReference
      persistFieldDef UserBirthDay
        = ((((((FieldDef (HaskellName (packPTH "birthDay")))
                 (DBName (packPTH "birth_day")))
                ((FTTypeCon Nothing) (packPTH "UTCTime")))
               SqlDayTime)
              [packPTH "Maybe"])
             True)
            NoReference
      persistFieldDef UserSex
        = ((((((FieldDef (HaskellName (packPTH "sex")))
                 (DBName (packPTH "sex")))
                ((FTTypeCon Nothing) (packPTH "Int")))
               SqlInt64)
              [packPTH "Maybe"])
             True)
            NoReference
      persistFieldDef UserCreatedTests
        = ((((((FieldDef (HaskellName (packPTH "createdTests")))
                 (DBName (packPTH "created_tests")))
                (FTList ((FTTypeCon Nothing) (packPTH "ObjectId"))))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef UserPassedTests
        = ((((((FieldDef (HaskellName (packPTH "passedTests")))
                 (DBName (packPTH "passed_tests")))
                (FTList ((FTTypeCon Nothing) (packPTH "TestResult"))))
               SqlString)
              [])
             True)
            (EmbedRef
               ((EmbedEntityDef (HaskellName (packPTH "TestResult")))
                  [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing) Nothing,
                   ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                   ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                     Nothing]))
      persistIdField = UserId
      fieldLens UserId
        = (lensPTH entityKey)
            (\ Entity _ value_a2OfL key_a2OfM
               -> (Entity key_a2OfM) value_a2OfL)
      fieldLens UserUsername
        = (lensPTH (userUsername . entityVal))
            (\ Entity key_a2OfN value_a2OfO x_a2OfP
               -> (Entity key_a2OfN) value_a2OfO {userUsername = x_a2OfP})
      fieldLens UserPassword
        = (lensPTH (userPassword . entityVal))
            (\ Entity key_a2OfN value_a2OfO x_a2OfP
               -> (Entity key_a2OfN) value_a2OfO {userPassword = x_a2OfP})
      fieldLens UserEmail
        = (lensPTH (userEmail . entityVal))
            (\ Entity key_a2OfN value_a2OfO x_a2OfP
               -> (Entity key_a2OfN) value_a2OfO {userEmail = x_a2OfP})
      fieldLens UserAvatar
        = (lensPTH (userAvatar . entityVal))
            (\ Entity key_a2OfN value_a2OfO x_a2OfP
               -> (Entity key_a2OfN) value_a2OfO {userAvatar = x_a2OfP})
      fieldLens UserFirstName
        = (lensPTH (userFirstName . entityVal))
            (\ Entity key_a2OfN value_a2OfO x_a2OfP
               -> (Entity key_a2OfN) value_a2OfO {userFirstName = x_a2OfP})
      fieldLens UserSecondName
        = (lensPTH (userSecondName . entityVal))
            (\ Entity key_a2OfN value_a2OfO x_a2OfP
               -> (Entity key_a2OfN) value_a2OfO {userSecondName = x_a2OfP})
      fieldLens UserBirthDay
        = (lensPTH (userBirthDay . entityVal))
            (\ Entity key_a2OfN value_a2OfO x_a2OfP
               -> (Entity key_a2OfN) value_a2OfO {userBirthDay = x_a2OfP})
      fieldLens UserSex
        = (lensPTH (userSex . entityVal))
            (\ Entity key_a2OfN value_a2OfO x_a2OfP
               -> (Entity key_a2OfN) value_a2OfO {userSex = x_a2OfP})
      fieldLens UserCreatedTests
        = (lensPTH (userCreatedTests . entityVal))
            (\ Entity key_a2OfN value_a2OfO x_a2OfP
               -> (Entity key_a2OfN) value_a2OfO {userCreatedTests = x_a2OfP})
      fieldLens UserPassedTests
        = (lensPTH (userPassedTests . entityVal))
            (\ Entity key_a2OfN value_a2OfO x_a2OfP
               -> (Entity key_a2OfN) value_a2OfO {userPassedTests = x_a2OfP})
    instance ToBackendKey MongoContext User where
      toBackendKey = unUserKey
      fromBackendKey = UserKey
/home/nikita/Projects/labs/Databases/Course-Project/Server/src/Model/User.hs:(27,79)-(47,2): Splicing expression
    Language.Haskell.TH.Quote.quoteExp
      persistLowerCase
      "\n\
      \TestResult\n\
      \  testKey       Text\n\
      \  result        Text\n\
      \  passingDate   UTCTime\n\
      \  deriving      Eq Read Show Generic\n\
      \User\n\
      \  username      Text\n\
      \  password      Text\n\
      \  email         Text\n\
      \  avatar        Text\n\
      \  firstName     Text Maybe\n\
      \  secondName    Text Maybe\n\
      \  birthDay      UTCTime Maybe\n\
      \  sex           Int Maybe\n\
      \  createdTests  [ObjectId]\n\
      \  passedTests   [TestResult]\n\
      \  Email         email\n\
      \  Username      username\n\
      \  deriving      Eq Read Show Generic\n"
  ======>
    [(((((((((EntityDef (HaskellName (packPTH "TestResult")))
               (DBName (packPTH "test_result")))
              (((((((FieldDef (HaskellName (packPTH "Id")))
                      (DBName (packPTH "id")))
                     ((FTTypeCon Nothing) (packPTH "TestResultId")))
                    SqlInt64)
                   [])
                  True)
                 ((ForeignRef (HaskellName (packPTH "TestResult")))
                    ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
             [])
            [((((((FieldDef (HaskellName (packPTH "testKey")))
                    (DBName (packPTH "test_key")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for testKey")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "result")))
                    (DBName (packPTH "result")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for result")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "passingDate")))
                    (DBName (packPTH "passing_date")))
                   ((FTTypeCon Nothing) (packPTH "UTCTime")))
                  (SqlOther (packPTH "SqlType unset for passingDate")))
                 [])
                True)
               NoReference])
           [])
          [])
         [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
        (Data.Map.Internal.fromList []))
       False
       {entityFields = [((((((FieldDef (HaskellName (packPTH "testKey")))
                               (DBName (packPTH "test_key")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "result")))
                               (DBName (packPTH "result")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "passingDate")))
                               (DBName (packPTH "passing_date")))
                              ((FTTypeCon Nothing) (packPTH "UTCTime")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy UTCTime)))
                            [])
                           True)
                          NoReference],
        entityId = ((((((FieldDef (HaskellName (packPTH "Id")))
                          (DBName (packPTH "id")))
                         ((FTTypeCon Nothing) (packPTH "TestResultId")))
                        (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                           (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                       [])
                      True)
                     ((ForeignRef (HaskellName (packPTH "TestResult")))
                        ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))},
     (((((((((EntityDef (HaskellName (packPTH "User")))
               (DBName (packPTH "user")))
              (((((((FieldDef (HaskellName (packPTH "Id")))
                      (DBName (packPTH "id")))
                     ((FTTypeCon Nothing) (packPTH "UserId")))
                    SqlInt64)
                   [])
                  True)
                 ((ForeignRef (HaskellName (packPTH "User")))
                    ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
             [])
            [((((((FieldDef (HaskellName (packPTH "username")))
                    (DBName (packPTH "username")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for username")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "password")))
                    (DBName (packPTH "password")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for password")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "email")))
                    (DBName (packPTH "email")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for email")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "avatar")))
                    (DBName (packPTH "avatar")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for avatar")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "firstName")))
                    (DBName (packPTH "first_name")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for firstName")))
                 [packPTH "Maybe"])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "secondName")))
                    (DBName (packPTH "second_name")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for secondName")))
                 [packPTH "Maybe"])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "birthDay")))
                    (DBName (packPTH "birth_day")))
                   ((FTTypeCon Nothing) (packPTH "UTCTime")))
                  (SqlOther (packPTH "SqlType unset for birthDay")))
                 [packPTH "Maybe"])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "sex")))
                    (DBName (packPTH "sex")))
                   ((FTTypeCon Nothing) (packPTH "Int")))
                  (SqlOther (packPTH "SqlType unset for sex")))
                 [packPTH "Maybe"])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "createdTests")))
                    (DBName (packPTH "created_tests")))
                   (FTList ((FTTypeCon Nothing) (packPTH "ObjectId"))))
                  (SqlOther (packPTH "SqlType unset for createdTests")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "passedTests")))
                    (DBName (packPTH "passed_tests")))
                   (FTList ((FTTypeCon Nothing) (packPTH "TestResult"))))
                  (SqlOther (packPTH "SqlType unset for passedTests")))
                 [])
                True)
               (EmbedRef
                  ((EmbedEntityDef (HaskellName (packPTH "TestResult")))
                     [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing) Nothing,
                      ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                      ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                        Nothing]))])
           [(((UniqueDef (HaskellName (packPTH "Email")))
                (DBName (packPTH "email")))
               [(HaskellName (packPTH "email"), DBName (packPTH "email"))])
              [],
            (((UniqueDef (HaskellName (packPTH "Username")))
                (DBName (packPTH "username")))
               [(HaskellName (packPTH "username"), DBName (packPTH "username"))])
              []])
          [])
         [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
        (Data.Map.Internal.fromList []))
       False
       {entityFields = [((((((FieldDef (HaskellName (packPTH "username")))
                               (DBName (packPTH "username")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "password")))
                               (DBName (packPTH "password")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "email")))
                               (DBName (packPTH "email")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "avatar")))
                               (DBName (packPTH "avatar")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "firstName")))
                               (DBName (packPTH "first_name")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [packPTH "Maybe"])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "secondName")))
                               (DBName (packPTH "second_name")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [packPTH "Maybe"])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "birthDay")))
                               (DBName (packPTH "birth_day")))
                              ((FTTypeCon Nothing) (packPTH "UTCTime")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy UTCTime)))
                            [packPTH "Maybe"])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "sex")))
                               (DBName (packPTH "sex")))
                              ((FTTypeCon Nothing) (packPTH "Int")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Int)))
                            [packPTH "Maybe"])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "createdTests")))
                               (DBName (packPTH "created_tests")))
                              (FTList ((FTTypeCon Nothing) (packPTH "ObjectId"))))
                             SqlString)
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "passedTests")))
                               (DBName (packPTH "passed_tests")))
                              (FTList ((FTTypeCon Nothing) (packPTH "TestResult"))))
                             SqlString)
                            [])
                           True)
                          (EmbedRef
                             ((EmbedEntityDef (HaskellName (packPTH "TestResult")))
                                [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing) Nothing,
                                 ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                                 ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                                   Nothing]))],
        entityId = ((((((FieldDef (HaskellName (packPTH "Id")))
                          (DBName (packPTH "id")))
                         ((FTTypeCon Nothing) (packPTH "UserId")))
                        (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                           (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                       [])
                      True)
                     ((ForeignRef (HaskellName (packPTH "User")))
                        ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))}]
/home/nikita/Projects/labs/Databases/Course-Project/Server/src/Model/User.hs:(27,1)-(47,2): Splicing declarations
    share
      [mkPersist (mkPersistSettings (ConT ''MongoContext))]
      ([(((((((((EntityDef (HaskellName (packPTH "TestResult")))
                  (DBName (packPTH "test_result")))
                 (((((((FieldDef (HaskellName (packPTH "Id")))
                         (DBName (packPTH "id")))
                        ((FTTypeCon Nothing) (packPTH "TestResultId")))
                       SqlInt64)
                      [])
                     True)
                    ((ForeignRef (HaskellName (packPTH "TestResult")))
                       ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                [])
               [((((((FieldDef (HaskellName (packPTH "testKey")))
                       (DBName (packPTH "test_key")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for testKey")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "result")))
                       (DBName (packPTH "result")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for result")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "passingDate")))
                       (DBName (packPTH "passing_date")))
                      ((FTTypeCon Nothing) (packPTH "UTCTime")))
                     (SqlOther (packPTH "SqlType unset for passingDate")))
                    [])
                   True)
                  NoReference])
              [])
             [])
            [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
           (Data.Map.Internal.fromList []))
          False
          {entityFields = [((((((FieldDef (HaskellName (packPTH "testKey")))
                                  (DBName (packPTH "test_key")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "result")))
                                  (DBName (packPTH "result")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "passingDate")))
                                  (DBName (packPTH "passing_date")))
                                 ((FTTypeCon Nothing) (packPTH "UTCTime")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy UTCTime)))
                               [])
                              True)
                             NoReference],
           entityId = ((((((FieldDef (HaskellName (packPTH "Id")))
                             (DBName (packPTH "id")))
                            ((FTTypeCon Nothing) (packPTH "TestResultId")))
                           (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                              (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                          [])
                         True)
                        ((ForeignRef (HaskellName (packPTH "TestResult")))
                           ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))},
        (((((((((EntityDef (HaskellName (packPTH "User")))
                  (DBName (packPTH "user")))
                 (((((((FieldDef (HaskellName (packPTH "Id")))
                         (DBName (packPTH "id")))
                        ((FTTypeCon Nothing) (packPTH "UserId")))
                       SqlInt64)
                      [])
                     True)
                    ((ForeignRef (HaskellName (packPTH "User")))
                       ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                [])
               [((((((FieldDef (HaskellName (packPTH "username")))
                       (DBName (packPTH "username")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for username")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "password")))
                       (DBName (packPTH "password")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for password")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "email")))
                       (DBName (packPTH "email")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for email")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "avatar")))
                       (DBName (packPTH "avatar")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for avatar")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "firstName")))
                       (DBName (packPTH "first_name")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for firstName")))
                    [packPTH "Maybe"])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "secondName")))
                       (DBName (packPTH "second_name")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for secondName")))
                    [packPTH "Maybe"])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "birthDay")))
                       (DBName (packPTH "birth_day")))
                      ((FTTypeCon Nothing) (packPTH "UTCTime")))
                     (SqlOther (packPTH "SqlType unset for birthDay")))
                    [packPTH "Maybe"])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "sex")))
                       (DBName (packPTH "sex")))
                      ((FTTypeCon Nothing) (packPTH "Int")))
                     (SqlOther (packPTH "SqlType unset for sex")))
                    [packPTH "Maybe"])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "createdTests")))
                       (DBName (packPTH "created_tests")))
                      (FTList ((FTTypeCon Nothing) (packPTH "ObjectId"))))
                     (SqlOther (packPTH "SqlType unset for createdTests")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "passedTests")))
                       (DBName (packPTH "passed_tests")))
                      (FTList ((FTTypeCon Nothing) (packPTH "TestResult"))))
                     (SqlOther (packPTH "SqlType unset for passedTests")))
                    [])
                   True)
                  (EmbedRef
                     ((EmbedEntityDef (HaskellName (packPTH "TestResult")))
                        [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing) Nothing,
                         ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                         ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                           Nothing]))])
              [(((UniqueDef (HaskellName (packPTH "Email")))
                   (DBName (packPTH "email")))
                  [(HaskellName (packPTH "email"), DBName (packPTH "email"))])
                 [],
               (((UniqueDef (HaskellName (packPTH "Username")))
                   (DBName (packPTH "username")))
                  [(HaskellName (packPTH "username"), DBName (packPTH "username"))])
                 []])
             [])
            [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
           (Data.Map.Internal.fromList []))
          False
          {entityFields = [((((((FieldDef (HaskellName (packPTH "username")))
                                  (DBName (packPTH "username")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "password")))
                                  (DBName (packPTH "password")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "email")))
                                  (DBName (packPTH "email")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "avatar")))
                                  (DBName (packPTH "avatar")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "firstName")))
                                  (DBName (packPTH "first_name")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [packPTH "Maybe"])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "secondName")))
                                  (DBName (packPTH "second_name")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [packPTH "Maybe"])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "birthDay")))
                                  (DBName (packPTH "birth_day")))
                                 ((FTTypeCon Nothing) (packPTH "UTCTime")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy UTCTime)))
                               [packPTH "Maybe"])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "sex")))
                                  (DBName (packPTH "sex")))
                                 ((FTTypeCon Nothing) (packPTH "Int")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Int)))
                               [packPTH "Maybe"])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "createdTests")))
                                  (DBName (packPTH "created_tests")))
                                 (FTList ((FTTypeCon Nothing) (packPTH "ObjectId"))))
                                SqlString)
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "passedTests")))
                                  (DBName (packPTH "passed_tests")))
                                 (FTList ((FTTypeCon Nothing) (packPTH "TestResult"))))
                                SqlString)
                               [])
                              True)
                             (EmbedRef
                                ((EmbedEntityDef (HaskellName (packPTH "TestResult")))
                                   [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing) Nothing,
                                    ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                                    ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                                      Nothing]))],
           entityId = ((((((FieldDef (HaskellName (packPTH "Id")))
                             (DBName (packPTH "id")))
                            ((FTTypeCon Nothing) (packPTH "UserId")))
                           (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                              (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                          [])
                         True)
                        ((ForeignRef (HaskellName (packPTH "User")))
                           ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))}])
  ======>
    instance PersistField TestResult where
      toPersistValue
        = \ ent_a2Ri7
            -> (PersistMap
                  $ ((Prelude.zip
                        ((Prelude.map pack) ["testKey", "result", "passingDate"]))
                       ((Prelude.map toPersistValue) $ (toPersistFields ent_a2Ri7))))
      fromPersistValue
        = ((\ x_a2Ri8
              -> let
                   columns_a2Ri9
                     = unordered-containers-0.2.9.0:Data.HashMap.Strict.fromList x_a2Ri8
                 in
                   (fromPersistValues
                      $ ((Prelude.map
                            (\ name_a2Ria
                               -> case
                                      (unordered-containers-0.2.9.0:Data.HashMap.Base.lookup
                                         (pack name_a2Ria))
                                        columns_a2Ri9
                                  of
                                    Just v_a2Rib -> v_a2Rib
                                    Nothing -> PersistNull))
                           $ ["testKey", "result", "passingDate"])))
             <=< getPersistMap)
    instance persistent-2.8.1:Database.Persist.Sql.Class.PersistFieldSql TestResult where
      persistent-2.8.1:Database.Persist.Sql.Class.sqlType _ = SqlString
    instance PersistField User where
      toPersistValue
        = \ ent_a2Ric
            -> (PersistMap
                  $ ((Prelude.zip
                        ((Prelude.map pack)
                           ["username", "password", "email", "avatar", "firstName",
                            "secondName", "birthDay", "sex", "createdTests", "passedTests"]))
                       ((Prelude.map toPersistValue) $ (toPersistFields ent_a2Ric))))
      fromPersistValue
        = ((\ x_a2Rid
              -> let
                   columns_a2Rie
                     = unordered-containers-0.2.9.0:Data.HashMap.Strict.fromList x_a2Rid
                 in
                   (fromPersistValues
                      $ ((Prelude.map
                            (\ name_a2Rif
                               -> case
                                      (unordered-containers-0.2.9.0:Data.HashMap.Base.lookup
                                         (pack name_a2Rif))
                                        columns_a2Rie
                                  of
                                    Just v_a2Rig -> v_a2Rig
                                    Nothing -> PersistNull))
                           $ ["username", "password", "email", "avatar", "firstName",
                              "secondName", "birthDay", "sex", "createdTests", "passedTests"])))
             <=< getPersistMap)
    instance persistent-2.8.1:Database.Persist.Sql.Class.PersistFieldSql User where
      persistent-2.8.1:Database.Persist.Sql.Class.sqlType _ = SqlString
    data TestResult
      = TestResult {testResultTestKey :: !Text,
                    testResultResult :: !Text,
                    testResultPassingDate :: !UTCTime}
      deriving (Eq, Read, Show, Generic)
    type TestResultId = Key TestResult
    instance PersistEntity TestResult where
      type PersistEntityBackend TestResult = MongoContext
      data Unique TestResult
      newtype Key TestResult
        = TestResultKey {unTestResultKey :: (BackendKey MongoContext)}
        deriving (Show,
                  Read,
                  Eq,
                  Ord,
                  path-pieces-0.2.1:Web.PathPieces.PathPiece,
                  http-api-data-0.3.7.2:Web.Internal.HttpApiData.ToHttpApiData,
                  http-api-data-0.3.7.2:Web.Internal.HttpApiData.FromHttpApiData,
                  PersistField,
                  persistent-2.8.1:Database.Persist.Sql.Class.PersistFieldSql,
                  Aeson.ToJSON,
                  Aeson.FromJSON)
      data EntityField TestResult typ
        = typ ~ Key TestResult => TestResultId |
          typ ~ Text => TestResultTestKey |
          typ ~ Text => TestResultResult |
          typ ~ UTCTime => TestResultPassingDate
      keyToValues
        = ((ghc-prim-0.5.1.1:GHC.Types.: [])
             . (toPersistValue . unTestResultKey))
      keyFromValues
        = ((fmap TestResultKey)
             . (fromPersistValue . Database.Persist.TH.headNote))
      entityDef _
        = (((((((((EntityDef (HaskellName (packPTH "TestResult")))
                    (DBName (packPTH "test_result")))
                   (((((((FieldDef (HaskellName (packPTH "Id")))
                           (DBName (packPTH "id")))
                          ((FTTypeCon Nothing) (packPTH "TestResultId")))
                         SqlInt64)
                        [])
                       True)
                      ((ForeignRef (HaskellName (packPTH "TestResult")))
                         ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                  [])
                 [((((((FieldDef (HaskellName (packPTH "testKey")))
                         (DBName (packPTH "test_key")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "result")))
                         (DBName (packPTH "result")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "passingDate")))
                         (DBName (packPTH "passing_date")))
                        ((FTTypeCon Nothing) (packPTH "UTCTime")))
                       SqlDayTime)
                      [])
                     True)
                    NoReference])
                [])
               [])
              [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
             (Data.Map.Internal.fromList []))
            False
      toPersistFields (TestResult x_a2Rih x_a2Rii x_a2Rij)
        = [SomePersistField x_a2Rih, SomePersistField x_a2Rii,
           SomePersistField x_a2Rij]
      fromPersistValues [x1_a2Ril, x2_a2Rim, x3_a2Rin]
        = TestResult
            <$>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "testKey")))
                 . fromPersistValue)
                x1_a2Ril
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "result")))
                 . fromPersistValue)
                x2_a2Rim
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "passingDate")))
                 . fromPersistValue)
                x3_a2Rin
      fromPersistValues x_a2Rik
        = (Left
             $ ((mappend (packPTH "TestResult: fromPersistValues failed on: "))
                  (pack $ (show x_a2Rik))))
      persistUniqueToFieldNames _
        = error "Degenerate case, should never happen"
      persistUniqueToValues _
        = error "Degenerate case, should never happen"
      persistUniqueKeys
        (TestResult _testKey_a2Rio _result_a2Rip _passingDate_a2Riq)
        = []
      persistFieldDef TestResultId
        = ((((((FieldDef (HaskellName (packPTH "Id")))
                 (DBName (packPTH "id")))
                ((FTTypeCon Nothing) (packPTH "TestResultId")))
               SqlInt64)
              [])
             True)
            ((ForeignRef (HaskellName (packPTH "TestResult")))
               ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))
      persistFieldDef TestResultTestKey
        = ((((((FieldDef (HaskellName (packPTH "testKey")))
                 (DBName (packPTH "test_key")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef TestResultResult
        = ((((((FieldDef (HaskellName (packPTH "result")))
                 (DBName (packPTH "result")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef TestResultPassingDate
        = ((((((FieldDef (HaskellName (packPTH "passingDate")))
                 (DBName (packPTH "passing_date")))
                ((FTTypeCon Nothing) (packPTH "UTCTime")))
               SqlDayTime)
              [])
             True)
            NoReference
      persistIdField = TestResultId
      fieldLens TestResultId
        = (lensPTH entityKey)
            (\ Entity _ value_a2Rir key_a2Ris
               -> (Entity key_a2Ris) value_a2Rir)
      fieldLens TestResultTestKey
        = (lensPTH (testResultTestKey . entityVal))
            (\ Entity key_a2Rit value_a2Riu x_a2Riv
               -> (Entity key_a2Rit) value_a2Riu {testResultTestKey = x_a2Riv})
      fieldLens TestResultResult
        = (lensPTH (testResultResult . entityVal))
            (\ Entity key_a2Rit value_a2Riu x_a2Riv
               -> (Entity key_a2Rit) value_a2Riu {testResultResult = x_a2Riv})
      fieldLens TestResultPassingDate
        = (lensPTH (testResultPassingDate . entityVal))
            (\ Entity key_a2Rit value_a2Riu x_a2Riv
               -> (Entity key_a2Rit)
                    value_a2Riu {testResultPassingDate = x_a2Riv})
    instance ToBackendKey MongoContext TestResult where
      toBackendKey = unTestResultKey
      fromBackendKey = TestResultKey
    data User
      = User {userUsername :: !Text,
              userPassword :: !Text,
              userEmail :: !Text,
              userAvatar :: !Text,
              userFirstName :: !(Maybe Text),
              userSecondName :: !(Maybe Text),
              userBirthDay :: !(Maybe UTCTime),
              userSex :: !(Maybe Int),
              userCreatedTests :: ![ObjectId],
              userPassedTests :: ![TestResult]}
      deriving (Eq, Read, Show, Generic)
    type UserId = Key User
    instance PersistEntity User where
      type PersistEntityBackend User = MongoContext
      data Unique User = Email Text | Username Text
      newtype Key User
        = UserKey {unUserKey :: (BackendKey MongoContext)}
        deriving (Show,
                  Read,
                  Eq,
                  Ord,
                  path-pieces-0.2.1:Web.PathPieces.PathPiece,
                  http-api-data-0.3.7.2:Web.Internal.HttpApiData.ToHttpApiData,
                  http-api-data-0.3.7.2:Web.Internal.HttpApiData.FromHttpApiData,
                  PersistField,
                  persistent-2.8.1:Database.Persist.Sql.Class.PersistFieldSql,
                  Aeson.ToJSON,
                  Aeson.FromJSON)
      data EntityField User typ
        = typ ~ Key User => UserId |
          typ ~ Text => UserUsername |
          typ ~ Text => UserPassword |
          typ ~ Text => UserEmail |
          typ ~ Text => UserAvatar |
          typ ~ Maybe Text => UserFirstName |
          typ ~ Maybe Text => UserSecondName |
          typ ~ Maybe UTCTime => UserBirthDay |
          typ ~ Maybe Int => UserSex |
          typ ~ [ObjectId] => UserCreatedTests |
          typ ~ [TestResult] => UserPassedTests
      keyToValues
        = ((ghc-prim-0.5.1.1:GHC.Types.: [])
             . (toPersistValue . unUserKey))
      keyFromValues
        = ((fmap UserKey)
             . (fromPersistValue . Database.Persist.TH.headNote))
      entityDef _
        = (((((((((EntityDef (HaskellName (packPTH "User")))
                    (DBName (packPTH "user")))
                   (((((((FieldDef (HaskellName (packPTH "Id")))
                           (DBName (packPTH "id")))
                          ((FTTypeCon Nothing) (packPTH "UserId")))
                         SqlInt64)
                        [])
                       True)
                      ((ForeignRef (HaskellName (packPTH "User")))
                         ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                  [])
                 [((((((FieldDef (HaskellName (packPTH "username")))
                         (DBName (packPTH "username")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "password")))
                         (DBName (packPTH "password")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "email")))
                         (DBName (packPTH "email")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "avatar")))
                         (DBName (packPTH "avatar")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "firstName")))
                         (DBName (packPTH "first_name")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [packPTH "Maybe"])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "secondName")))
                         (DBName (packPTH "second_name")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [packPTH "Maybe"])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "birthDay")))
                         (DBName (packPTH "birth_day")))
                        ((FTTypeCon Nothing) (packPTH "UTCTime")))
                       SqlDayTime)
                      [packPTH "Maybe"])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "sex")))
                         (DBName (packPTH "sex")))
                        ((FTTypeCon Nothing) (packPTH "Int")))
                       SqlInt64)
                      [packPTH "Maybe"])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "createdTests")))
                         (DBName (packPTH "created_tests")))
                        (FTList ((FTTypeCon Nothing) (packPTH "ObjectId"))))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "passedTests")))
                         (DBName (packPTH "passed_tests")))
                        (FTList ((FTTypeCon Nothing) (packPTH "TestResult"))))
                       SqlString)
                      [])
                     True)
                    (EmbedRef
                       ((EmbedEntityDef (HaskellName (packPTH "TestResult")))
                          [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing) Nothing,
                           ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                           ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                             Nothing]))])
                [(((UniqueDef (HaskellName (packPTH "Email")))
                     (DBName (packPTH "email")))
                    [(HaskellName (packPTH "email"), DBName (packPTH "email"))])
                   [],
                 (((UniqueDef (HaskellName (packPTH "Username")))
                     (DBName (packPTH "username")))
                    [(HaskellName (packPTH "username"), DBName (packPTH "username"))])
                   []])
               [])
              [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
             (Data.Map.Internal.fromList []))
            False
      toPersistFields
        (User x_a2Riw
              x_a2Rix
              x_a2Riy
              x_a2Riz
              x_a2RiA
              x_a2RiB
              x_a2RiC
              x_a2RiD
              x_a2RiE
              x_a2RiF)
        = [SomePersistField x_a2Riw, SomePersistField x_a2Rix,
           SomePersistField x_a2Riy, SomePersistField x_a2Riz,
           SomePersistField x_a2RiA, SomePersistField x_a2RiB,
           SomePersistField x_a2RiC, SomePersistField x_a2RiD,
           SomePersistField x_a2RiE, SomePersistField x_a2RiF]
      fromPersistValues
        [x1_a2RiH,
         x2_a2RiI,
         x3_a2RiJ,
         x4_a2RiK,
         x5_a2RiL,
         x6_a2RiM,
         x7_a2RiN,
         x8_a2RiO,
         x9_a2RiP,
         x10_a2RiQ]
        = User
            <$>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "username")))
                 . fromPersistValue)
                x1_a2RiH
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "password")))
                 . fromPersistValue)
                x2_a2RiI
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "email")))
                 . fromPersistValue)
                x3_a2RiJ
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "avatar")))
                 . fromPersistValue)
                x4_a2RiK
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "firstName")))
                 . fromPersistValue)
                x5_a2RiL
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "secondName")))
                 . fromPersistValue)
                x6_a2RiM
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "birthDay")))
                 . fromPersistValue)
                x7_a2RiN
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "sex")))
                 . fromPersistValue)
                x8_a2RiO
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "createdTests")))
                 . fromPersistValue)
                x9_a2RiP
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "passedTests")))
                 . fromPersistValue)
                x10_a2RiQ
      fromPersistValues x_a2RiG
        = (Left
             $ ((mappend (packPTH "User: fromPersistValues failed on: "))
                  (pack $ (show x_a2RiG))))
      persistUniqueToFieldNames Email {}
        = [(HaskellName (packPTH "email"), DBName (packPTH "email"))]
      persistUniqueToFieldNames Username {}
        = [(HaskellName (packPTH "username"), DBName (packPTH "username"))]
      persistUniqueToValues (Email x_a2RiR) = [toPersistValue x_a2RiR]
      persistUniqueToValues (Username x_a2RiS) = [toPersistValue x_a2RiS]
      persistUniqueKeys
        (User _username_a2RiT
              _password_a2RiU
              _email_a2RiV
              _avatar_a2RiW
              _firstName_a2RiX
              _secondName_a2RiY
              _birthDay_a2RiZ
              _sex_a2Rj0
              _createdTests_a2Rj1
              _passedTests_a2Rj2)
        = [Email _email_a2RiV, Username _username_a2RiT]
      persistFieldDef UserId
        = ((((((FieldDef (HaskellName (packPTH "Id")))
                 (DBName (packPTH "id")))
                ((FTTypeCon Nothing) (packPTH "UserId")))
               SqlInt64)
              [])
             True)
            ((ForeignRef (HaskellName (packPTH "User")))
               ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))
      persistFieldDef UserUsername
        = ((((((FieldDef (HaskellName (packPTH "username")))
                 (DBName (packPTH "username")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef UserPassword
        = ((((((FieldDef (HaskellName (packPTH "password")))
                 (DBName (packPTH "password")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef UserEmail
        = ((((((FieldDef (HaskellName (packPTH "email")))
                 (DBName (packPTH "email")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef UserAvatar
        = ((((((FieldDef (HaskellName (packPTH "avatar")))
                 (DBName (packPTH "avatar")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef UserFirstName
        = ((((((FieldDef (HaskellName (packPTH "firstName")))
                 (DBName (packPTH "first_name")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [packPTH "Maybe"])
             True)
            NoReference
      persistFieldDef UserSecondName
        = ((((((FieldDef (HaskellName (packPTH "secondName")))
                 (DBName (packPTH "second_name")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [packPTH "Maybe"])
             True)
            NoReference
      persistFieldDef UserBirthDay
        = ((((((FieldDef (HaskellName (packPTH "birthDay")))
                 (DBName (packPTH "birth_day")))
                ((FTTypeCon Nothing) (packPTH "UTCTime")))
               SqlDayTime)
              [packPTH "Maybe"])
             True)
            NoReference
      persistFieldDef UserSex
        = ((((((FieldDef (HaskellName (packPTH "sex")))
                 (DBName (packPTH "sex")))
                ((FTTypeCon Nothing) (packPTH "Int")))
               SqlInt64)
              [packPTH "Maybe"])
             True)
            NoReference
      persistFieldDef UserCreatedTests
        = ((((((FieldDef (HaskellName (packPTH "createdTests")))
                 (DBName (packPTH "created_tests")))
                (FTList ((FTTypeCon Nothing) (packPTH "ObjectId"))))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef UserPassedTests
        = ((((((FieldDef (HaskellName (packPTH "passedTests")))
                 (DBName (packPTH "passed_tests")))
                (FTList ((FTTypeCon Nothing) (packPTH "TestResult"))))
               SqlString)
              [])
             True)
            (EmbedRef
               ((EmbedEntityDef (HaskellName (packPTH "TestResult")))
                  [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing) Nothing,
                   ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                   ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                     Nothing]))
      persistIdField = UserId
      fieldLens UserId
        = (lensPTH entityKey)
            (\ Entity _ value_a2Rj3 key_a2Rj4
               -> (Entity key_a2Rj4) value_a2Rj3)
      fieldLens UserUsername
        = (lensPTH (userUsername . entityVal))
            (\ Entity key_a2Rj5 value_a2Rj6 x_a2Rj7
               -> (Entity key_a2Rj5) value_a2Rj6 {userUsername = x_a2Rj7})
      fieldLens UserPassword
        = (lensPTH (userPassword . entityVal))
            (\ Entity key_a2Rj5 value_a2Rj6 x_a2Rj7
               -> (Entity key_a2Rj5) value_a2Rj6 {userPassword = x_a2Rj7})
      fieldLens UserEmail
        = (lensPTH (userEmail . entityVal))
            (\ Entity key_a2Rj5 value_a2Rj6 x_a2Rj7
               -> (Entity key_a2Rj5) value_a2Rj6 {userEmail = x_a2Rj7})
      fieldLens UserAvatar
        = (lensPTH (userAvatar . entityVal))
            (\ Entity key_a2Rj5 value_a2Rj6 x_a2Rj7
               -> (Entity key_a2Rj5) value_a2Rj6 {userAvatar = x_a2Rj7})
      fieldLens UserFirstName
        = (lensPTH (userFirstName . entityVal))
            (\ Entity key_a2Rj5 value_a2Rj6 x_a2Rj7
               -> (Entity key_a2Rj5) value_a2Rj6 {userFirstName = x_a2Rj7})
      fieldLens UserSecondName
        = (lensPTH (userSecondName . entityVal))
            (\ Entity key_a2Rj5 value_a2Rj6 x_a2Rj7
               -> (Entity key_a2Rj5) value_a2Rj6 {userSecondName = x_a2Rj7})
      fieldLens UserBirthDay
        = (lensPTH (userBirthDay . entityVal))
            (\ Entity key_a2Rj5 value_a2Rj6 x_a2Rj7
               -> (Entity key_a2Rj5) value_a2Rj6 {userBirthDay = x_a2Rj7})
      fieldLens UserSex
        = (lensPTH (userSex . entityVal))
            (\ Entity key_a2Rj5 value_a2Rj6 x_a2Rj7
               -> (Entity key_a2Rj5) value_a2Rj6 {userSex = x_a2Rj7})
      fieldLens UserCreatedTests
        = (lensPTH (userCreatedTests . entityVal))
            (\ Entity key_a2Rj5 value_a2Rj6 x_a2Rj7
               -> (Entity key_a2Rj5) value_a2Rj6 {userCreatedTests = x_a2Rj7})
      fieldLens UserPassedTests
        = (lensPTH (userPassedTests . entityVal))
            (\ Entity key_a2Rj5 value_a2Rj6 x_a2Rj7
               -> (Entity key_a2Rj5) value_a2Rj6 {userPassedTests = x_a2Rj7})
    instance ToBackendKey MongoContext User where
      toBackendKey = unUserKey
      fromBackendKey = UserKey
/home/nikita/Projects/labs/Databases/Course-Project/Server/src/Model/User.hs:(27,79)-(47,2): Splicing expression
    Language.Haskell.TH.Quote.quoteExp
      persistLowerCase
      "\n\
      \TestResult\n\
      \  testKey       Text\n\
      \  result        Text\n\
      \  passingDate   UTCTime\n\
      \  deriving      Eq Read Show Generic\n\
      \User\n\
      \  username      Text\n\
      \  password      Text\n\
      \  email         Text\n\
      \  avatar        Text\n\
      \  firstName     Text Maybe\n\
      \  secondName    Text Maybe\n\
      \  birthDay      UTCTime Maybe\n\
      \  sex           Int Maybe\n\
      \  createdTests  [ObjectId]\n\
      \  passedTests   [TestResult]\n\
      \  Email         email\n\
      \  Username      username\n\
      \  deriving      Eq Read Show Generic\n"
  ======>
    [(((((((((EntityDef (HaskellName (packPTH "TestResult")))
               (DBName (packPTH "test_result")))
              (((((((FieldDef (HaskellName (packPTH "Id")))
                      (DBName (packPTH "id")))
                     ((FTTypeCon Nothing) (packPTH "TestResultId")))
                    SqlInt64)
                   [])
                  True)
                 ((ForeignRef (HaskellName (packPTH "TestResult")))
                    ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
             [])
            [((((((FieldDef (HaskellName (packPTH "testKey")))
                    (DBName (packPTH "test_key")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for testKey")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "result")))
                    (DBName (packPTH "result")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for result")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "passingDate")))
                    (DBName (packPTH "passing_date")))
                   ((FTTypeCon Nothing) (packPTH "UTCTime")))
                  (SqlOther (packPTH "SqlType unset for passingDate")))
                 [])
                True)
               NoReference])
           [])
          [])
         [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
        (Data.Map.Internal.fromList []))
       False
       {entityFields = [((((((FieldDef (HaskellName (packPTH "testKey")))
                               (DBName (packPTH "test_key")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "result")))
                               (DBName (packPTH "result")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "passingDate")))
                               (DBName (packPTH "passing_date")))
                              ((FTTypeCon Nothing) (packPTH "UTCTime")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy UTCTime)))
                            [])
                           True)
                          NoReference],
        entityId = ((((((FieldDef (HaskellName (packPTH "Id")))
                          (DBName (packPTH "id")))
                         ((FTTypeCon Nothing) (packPTH "TestResultId")))
                        (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                           (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                       [])
                      True)
                     ((ForeignRef (HaskellName (packPTH "TestResult")))
                        ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))},
     (((((((((EntityDef (HaskellName (packPTH "User")))
               (DBName (packPTH "user")))
              (((((((FieldDef (HaskellName (packPTH "Id")))
                      (DBName (packPTH "id")))
                     ((FTTypeCon Nothing) (packPTH "UserId")))
                    SqlInt64)
                   [])
                  True)
                 ((ForeignRef (HaskellName (packPTH "User")))
                    ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
             [])
            [((((((FieldDef (HaskellName (packPTH "username")))
                    (DBName (packPTH "username")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for username")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "password")))
                    (DBName (packPTH "password")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for password")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "email")))
                    (DBName (packPTH "email")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for email")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "avatar")))
                    (DBName (packPTH "avatar")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for avatar")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "firstName")))
                    (DBName (packPTH "first_name")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for firstName")))
                 [packPTH "Maybe"])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "secondName")))
                    (DBName (packPTH "second_name")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for secondName")))
                 [packPTH "Maybe"])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "birthDay")))
                    (DBName (packPTH "birth_day")))
                   ((FTTypeCon Nothing) (packPTH "UTCTime")))
                  (SqlOther (packPTH "SqlType unset for birthDay")))
                 [packPTH "Maybe"])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "sex")))
                    (DBName (packPTH "sex")))
                   ((FTTypeCon Nothing) (packPTH "Int")))
                  (SqlOther (packPTH "SqlType unset for sex")))
                 [packPTH "Maybe"])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "createdTests")))
                    (DBName (packPTH "created_tests")))
                   (FTList ((FTTypeCon Nothing) (packPTH "ObjectId"))))
                  (SqlOther (packPTH "SqlType unset for createdTests")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "passedTests")))
                    (DBName (packPTH "passed_tests")))
                   (FTList ((FTTypeCon Nothing) (packPTH "TestResult"))))
                  (SqlOther (packPTH "SqlType unset for passedTests")))
                 [])
                True)
               (EmbedRef
                  ((EmbedEntityDef (HaskellName (packPTH "TestResult")))
                     [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing) Nothing,
                      ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                      ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                        Nothing]))])
           [(((UniqueDef (HaskellName (packPTH "Email")))
                (DBName (packPTH "email")))
               [(HaskellName (packPTH "email"), DBName (packPTH "email"))])
              [],
            (((UniqueDef (HaskellName (packPTH "Username")))
                (DBName (packPTH "username")))
               [(HaskellName (packPTH "username"), DBName (packPTH "username"))])
              []])
          [])
         [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
        (Data.Map.Internal.fromList []))
       False
       {entityFields = [((((((FieldDef (HaskellName (packPTH "username")))
                               (DBName (packPTH "username")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "password")))
                               (DBName (packPTH "password")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "email")))
                               (DBName (packPTH "email")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "avatar")))
                               (DBName (packPTH "avatar")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "firstName")))
                               (DBName (packPTH "first_name")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [packPTH "Maybe"])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "secondName")))
                               (DBName (packPTH "second_name")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [packPTH "Maybe"])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "birthDay")))
                               (DBName (packPTH "birth_day")))
                              ((FTTypeCon Nothing) (packPTH "UTCTime")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy UTCTime)))
                            [packPTH "Maybe"])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "sex")))
                               (DBName (packPTH "sex")))
                              ((FTTypeCon Nothing) (packPTH "Int")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Int)))
                            [packPTH "Maybe"])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "createdTests")))
                               (DBName (packPTH "created_tests")))
                              (FTList ((FTTypeCon Nothing) (packPTH "ObjectId"))))
                             SqlString)
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "passedTests")))
                               (DBName (packPTH "passed_tests")))
                              (FTList ((FTTypeCon Nothing) (packPTH "TestResult"))))
                             SqlString)
                            [])
                           True)
                          (EmbedRef
                             ((EmbedEntityDef (HaskellName (packPTH "TestResult")))
                                [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing) Nothing,
                                 ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                                 ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                                   Nothing]))],
        entityId = ((((((FieldDef (HaskellName (packPTH "Id")))
                          (DBName (packPTH "id")))
                         ((FTTypeCon Nothing) (packPTH "UserId")))
                        (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                           (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                       [])
                      True)
                     ((ForeignRef (HaskellName (packPTH "User")))
                        ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))}]
/home/nikita/Projects/labs/Databases/Course-Project/Server/src/Model/User.hs:(27,1)-(47,2): Splicing declarations
    share
      [mkPersist (mkPersistSettings (ConT ''MongoContext))]
      ([(((((((((EntityDef (HaskellName (packPTH "TestResult")))
                  (DBName (packPTH "test_result")))
                 (((((((FieldDef (HaskellName (packPTH "Id")))
                         (DBName (packPTH "id")))
                        ((FTTypeCon Nothing) (packPTH "TestResultId")))
                       SqlInt64)
                      [])
                     True)
                    ((ForeignRef (HaskellName (packPTH "TestResult")))
                       ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                [])
               [((((((FieldDef (HaskellName (packPTH "testKey")))
                       (DBName (packPTH "test_key")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for testKey")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "result")))
                       (DBName (packPTH "result")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for result")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "passingDate")))
                       (DBName (packPTH "passing_date")))
                      ((FTTypeCon Nothing) (packPTH "UTCTime")))
                     (SqlOther (packPTH "SqlType unset for passingDate")))
                    [])
                   True)
                  NoReference])
              [])
             [])
            [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
           (Data.Map.Internal.fromList []))
          False
          {entityFields = [((((((FieldDef (HaskellName (packPTH "testKey")))
                                  (DBName (packPTH "test_key")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "result")))
                                  (DBName (packPTH "result")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "passingDate")))
                                  (DBName (packPTH "passing_date")))
                                 ((FTTypeCon Nothing) (packPTH "UTCTime")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy UTCTime)))
                               [])
                              True)
                             NoReference],
           entityId = ((((((FieldDef (HaskellName (packPTH "Id")))
                             (DBName (packPTH "id")))
                            ((FTTypeCon Nothing) (packPTH "TestResultId")))
                           (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                              (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                          [])
                         True)
                        ((ForeignRef (HaskellName (packPTH "TestResult")))
                           ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))},
        (((((((((EntityDef (HaskellName (packPTH "User")))
                  (DBName (packPTH "user")))
                 (((((((FieldDef (HaskellName (packPTH "Id")))
                         (DBName (packPTH "id")))
                        ((FTTypeCon Nothing) (packPTH "UserId")))
                       SqlInt64)
                      [])
                     True)
                    ((ForeignRef (HaskellName (packPTH "User")))
                       ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                [])
               [((((((FieldDef (HaskellName (packPTH "username")))
                       (DBName (packPTH "username")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for username")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "password")))
                       (DBName (packPTH "password")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for password")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "email")))
                       (DBName (packPTH "email")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for email")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "avatar")))
                       (DBName (packPTH "avatar")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for avatar")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "firstName")))
                       (DBName (packPTH "first_name")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for firstName")))
                    [packPTH "Maybe"])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "secondName")))
                       (DBName (packPTH "second_name")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for secondName")))
                    [packPTH "Maybe"])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "birthDay")))
                       (DBName (packPTH "birth_day")))
                      ((FTTypeCon Nothing) (packPTH "UTCTime")))
                     (SqlOther (packPTH "SqlType unset for birthDay")))
                    [packPTH "Maybe"])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "sex")))
                       (DBName (packPTH "sex")))
                      ((FTTypeCon Nothing) (packPTH "Int")))
                     (SqlOther (packPTH "SqlType unset for sex")))
                    [packPTH "Maybe"])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "createdTests")))
                       (DBName (packPTH "created_tests")))
                      (FTList ((FTTypeCon Nothing) (packPTH "ObjectId"))))
                     (SqlOther (packPTH "SqlType unset for createdTests")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "passedTests")))
                       (DBName (packPTH "passed_tests")))
                      (FTList ((FTTypeCon Nothing) (packPTH "TestResult"))))
                     (SqlOther (packPTH "SqlType unset for passedTests")))
                    [])
                   True)
                  (EmbedRef
                     ((EmbedEntityDef (HaskellName (packPTH "TestResult")))
                        [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing) Nothing,
                         ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                         ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                           Nothing]))])
              [(((UniqueDef (HaskellName (packPTH "Email")))
                   (DBName (packPTH "email")))
                  [(HaskellName (packPTH "email"), DBName (packPTH "email"))])
                 [],
               (((UniqueDef (HaskellName (packPTH "Username")))
                   (DBName (packPTH "username")))
                  [(HaskellName (packPTH "username"), DBName (packPTH "username"))])
                 []])
             [])
            [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
           (Data.Map.Internal.fromList []))
          False
          {entityFields = [((((((FieldDef (HaskellName (packPTH "username")))
                                  (DBName (packPTH "username")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "password")))
                                  (DBName (packPTH "password")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "email")))
                                  (DBName (packPTH "email")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "avatar")))
                                  (DBName (packPTH "avatar")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "firstName")))
                                  (DBName (packPTH "first_name")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [packPTH "Maybe"])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "secondName")))
                                  (DBName (packPTH "second_name")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [packPTH "Maybe"])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "birthDay")))
                                  (DBName (packPTH "birth_day")))
                                 ((FTTypeCon Nothing) (packPTH "UTCTime")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy UTCTime)))
                               [packPTH "Maybe"])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "sex")))
                                  (DBName (packPTH "sex")))
                                 ((FTTypeCon Nothing) (packPTH "Int")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Int)))
                               [packPTH "Maybe"])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "createdTests")))
                                  (DBName (packPTH "created_tests")))
                                 (FTList ((FTTypeCon Nothing) (packPTH "ObjectId"))))
                                SqlString)
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "passedTests")))
                                  (DBName (packPTH "passed_tests")))
                                 (FTList ((FTTypeCon Nothing) (packPTH "TestResult"))))
                                SqlString)
                               [])
                              True)
                             (EmbedRef
                                ((EmbedEntityDef (HaskellName (packPTH "TestResult")))
                                   [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing) Nothing,
                                    ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                                    ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                                      Nothing]))],
           entityId = ((((((FieldDef (HaskellName (packPTH "Id")))
                             (DBName (packPTH "id")))
                            ((FTTypeCon Nothing) (packPTH "UserId")))
                           (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                              (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                          [])
                         True)
                        ((ForeignRef (HaskellName (packPTH "User")))
                           ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))}])
  ======>
    instance PersistField TestResult where
      toPersistValue
        = \ ent_a2TsU
            -> (PersistMap
                  $ ((Prelude.zip
                        ((Prelude.map pack) ["testKey", "result", "passingDate"]))
                       ((Prelude.map toPersistValue) $ (toPersistFields ent_a2TsU))))
      fromPersistValue
        = ((\ x_a2TsV
              -> let
                   columns_a2TsW
                     = unordered-containers-0.2.9.0:Data.HashMap.Strict.fromList x_a2TsV
                 in
                   (fromPersistValues
                      $ ((Prelude.map
                            (\ name_a2TsX
                               -> case
                                      (unordered-containers-0.2.9.0:Data.HashMap.Base.lookup
                                         (pack name_a2TsX))
                                        columns_a2TsW
                                  of
                                    Just v_a2TsY -> v_a2TsY
                                    Nothing -> PersistNull))
                           $ ["testKey", "result", "passingDate"])))
             <=< getPersistMap)
    instance persistent-2.8.1:Database.Persist.Sql.Class.PersistFieldSql TestResult where
      persistent-2.8.1:Database.Persist.Sql.Class.sqlType _ = SqlString
    instance PersistField User where
      toPersistValue
        = \ ent_a2TsZ
            -> (PersistMap
                  $ ((Prelude.zip
                        ((Prelude.map pack)
                           ["username", "password", "email", "avatar", "firstName",
                            "secondName", "birthDay", "sex", "createdTests", "passedTests"]))
                       ((Prelude.map toPersistValue) $ (toPersistFields ent_a2TsZ))))
      fromPersistValue
        = ((\ x_a2Tt0
              -> let
                   columns_a2Tt1
                     = unordered-containers-0.2.9.0:Data.HashMap.Strict.fromList x_a2Tt0
                 in
                   (fromPersistValues
                      $ ((Prelude.map
                            (\ name_a2Tt2
                               -> case
                                      (unordered-containers-0.2.9.0:Data.HashMap.Base.lookup
                                         (pack name_a2Tt2))
                                        columns_a2Tt1
                                  of
                                    Just v_a2Tt3 -> v_a2Tt3
                                    Nothing -> PersistNull))
                           $ ["username", "password", "email", "avatar", "firstName",
                              "secondName", "birthDay", "sex", "createdTests", "passedTests"])))
             <=< getPersistMap)
    instance persistent-2.8.1:Database.Persist.Sql.Class.PersistFieldSql User where
      persistent-2.8.1:Database.Persist.Sql.Class.sqlType _ = SqlString
    data TestResult
      = TestResult {testResultTestKey :: !Text,
                    testResultResult :: !Text,
                    testResultPassingDate :: !UTCTime}
      deriving (Eq, Read, Show, Generic)
    type TestResultId = Key TestResult
    instance PersistEntity TestResult where
      type PersistEntityBackend TestResult = MongoContext
      data Unique TestResult
      newtype Key TestResult
        = TestResultKey {unTestResultKey :: (BackendKey MongoContext)}
        deriving (Show,
                  Read,
                  Eq,
                  Ord,
                  path-pieces-0.2.1:Web.PathPieces.PathPiece,
                  http-api-data-0.3.7.2:Web.Internal.HttpApiData.ToHttpApiData,
                  http-api-data-0.3.7.2:Web.Internal.HttpApiData.FromHttpApiData,
                  PersistField,
                  persistent-2.8.1:Database.Persist.Sql.Class.PersistFieldSql,
                  Aeson.ToJSON,
                  Aeson.FromJSON)
      data EntityField TestResult typ
        = typ ~ Key TestResult => TestResultId |
          typ ~ Text => TestResultTestKey |
          typ ~ Text => TestResultResult |
          typ ~ UTCTime => TestResultPassingDate
      keyToValues
        = ((ghc-prim-0.5.1.1:GHC.Types.: [])
             . (toPersistValue . unTestResultKey))
      keyFromValues
        = ((fmap TestResultKey)
             . (fromPersistValue . Database.Persist.TH.headNote))
      entityDef _
        = (((((((((EntityDef (HaskellName (packPTH "TestResult")))
                    (DBName (packPTH "test_result")))
                   (((((((FieldDef (HaskellName (packPTH "Id")))
                           (DBName (packPTH "id")))
                          ((FTTypeCon Nothing) (packPTH "TestResultId")))
                         SqlInt64)
                        [])
                       True)
                      ((ForeignRef (HaskellName (packPTH "TestResult")))
                         ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                  [])
                 [((((((FieldDef (HaskellName (packPTH "testKey")))
                         (DBName (packPTH "test_key")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "result")))
                         (DBName (packPTH "result")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "passingDate")))
                         (DBName (packPTH "passing_date")))
                        ((FTTypeCon Nothing) (packPTH "UTCTime")))
                       SqlDayTime)
                      [])
                     True)
                    NoReference])
                [])
               [])
              [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
             (Data.Map.Internal.fromList []))
            False
      toPersistFields (TestResult x_a2Tt4 x_a2Tt5 x_a2Tt6)
        = [SomePersistField x_a2Tt4, SomePersistField x_a2Tt5,
           SomePersistField x_a2Tt6]
      fromPersistValues [x1_a2Tt8, x2_a2Tt9, x3_a2Tta]
        = TestResult
            <$>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "testKey")))
                 . fromPersistValue)
                x1_a2Tt8
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "result")))
                 . fromPersistValue)
                x2_a2Tt9
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "passingDate")))
                 . fromPersistValue)
                x3_a2Tta
      fromPersistValues x_a2Tt7
        = (Left
             $ ((mappend (packPTH "TestResult: fromPersistValues failed on: "))
                  (pack $ (show x_a2Tt7))))
      persistUniqueToFieldNames _
        = error "Degenerate case, should never happen"
      persistUniqueToValues _
        = error "Degenerate case, should never happen"
      persistUniqueKeys
        (TestResult _testKey_a2Ttb _result_a2Ttc _passingDate_a2Ttd)
        = []
      persistFieldDef TestResultId
        = ((((((FieldDef (HaskellName (packPTH "Id")))
                 (DBName (packPTH "id")))
                ((FTTypeCon Nothing) (packPTH "TestResultId")))
               SqlInt64)
              [])
             True)
            ((ForeignRef (HaskellName (packPTH "TestResult")))
               ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))
      persistFieldDef TestResultTestKey
        = ((((((FieldDef (HaskellName (packPTH "testKey")))
                 (DBName (packPTH "test_key")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef TestResultResult
        = ((((((FieldDef (HaskellName (packPTH "result")))
                 (DBName (packPTH "result")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef TestResultPassingDate
        = ((((((FieldDef (HaskellName (packPTH "passingDate")))
                 (DBName (packPTH "passing_date")))
                ((FTTypeCon Nothing) (packPTH "UTCTime")))
               SqlDayTime)
              [])
             True)
            NoReference
      persistIdField = TestResultId
      fieldLens TestResultId
        = (lensPTH entityKey)
            (\ Entity _ value_a2Tte key_a2Ttf
               -> (Entity key_a2Ttf) value_a2Tte)
      fieldLens TestResultTestKey
        = (lensPTH (testResultTestKey . entityVal))
            (\ Entity key_a2Ttg value_a2Tth x_a2Tti
               -> (Entity key_a2Ttg) value_a2Tth {testResultTestKey = x_a2Tti})
      fieldLens TestResultResult
        = (lensPTH (testResultResult . entityVal))
            (\ Entity key_a2Ttg value_a2Tth x_a2Tti
               -> (Entity key_a2Ttg) value_a2Tth {testResultResult = x_a2Tti})
      fieldLens TestResultPassingDate
        = (lensPTH (testResultPassingDate . entityVal))
            (\ Entity key_a2Ttg value_a2Tth x_a2Tti
               -> (Entity key_a2Ttg)
                    value_a2Tth {testResultPassingDate = x_a2Tti})
    instance ToBackendKey MongoContext TestResult where
      toBackendKey = unTestResultKey
      fromBackendKey = TestResultKey
    data User
      = User {userUsername :: !Text,
              userPassword :: !Text,
              userEmail :: !Text,
              userAvatar :: !Text,
              userFirstName :: !(Maybe Text),
              userSecondName :: !(Maybe Text),
              userBirthDay :: !(Maybe UTCTime),
              userSex :: !(Maybe Int),
              userCreatedTests :: ![ObjectId],
              userPassedTests :: ![TestResult]}
      deriving (Eq, Read, Show, Generic)
    type UserId = Key User
    instance PersistEntity User where
      type PersistEntityBackend User = MongoContext
      data Unique User = Email Text | Username Text
      newtype Key User
        = UserKey {unUserKey :: (BackendKey MongoContext)}
        deriving (Show,
                  Read,
                  Eq,
                  Ord,
                  path-pieces-0.2.1:Web.PathPieces.PathPiece,
                  http-api-data-0.3.7.2:Web.Internal.HttpApiData.ToHttpApiData,
                  http-api-data-0.3.7.2:Web.Internal.HttpApiData.FromHttpApiData,
                  PersistField,
                  persistent-2.8.1:Database.Persist.Sql.Class.PersistFieldSql,
                  Aeson.ToJSON,
                  Aeson.FromJSON)
      data EntityField User typ
        = typ ~ Key User => UserId |
          typ ~ Text => UserUsername |
          typ ~ Text => UserPassword |
          typ ~ Text => UserEmail |
          typ ~ Text => UserAvatar |
          typ ~ Maybe Text => UserFirstName |
          typ ~ Maybe Text => UserSecondName |
          typ ~ Maybe UTCTime => UserBirthDay |
          typ ~ Maybe Int => UserSex |
          typ ~ [ObjectId] => UserCreatedTests |
          typ ~ [TestResult] => UserPassedTests
      keyToValues
        = ((ghc-prim-0.5.1.1:GHC.Types.: [])
             . (toPersistValue . unUserKey))
      keyFromValues
        = ((fmap UserKey)
             . (fromPersistValue . Database.Persist.TH.headNote))
      entityDef _
        = (((((((((EntityDef (HaskellName (packPTH "User")))
                    (DBName (packPTH "user")))
                   (((((((FieldDef (HaskellName (packPTH "Id")))
                           (DBName (packPTH "id")))
                          ((FTTypeCon Nothing) (packPTH "UserId")))
                         SqlInt64)
                        [])
                       True)
                      ((ForeignRef (HaskellName (packPTH "User")))
                         ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                  [])
                 [((((((FieldDef (HaskellName (packPTH "username")))
                         (DBName (packPTH "username")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "password")))
                         (DBName (packPTH "password")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "email")))
                         (DBName (packPTH "email")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "avatar")))
                         (DBName (packPTH "avatar")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "firstName")))
                         (DBName (packPTH "first_name")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [packPTH "Maybe"])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "secondName")))
                         (DBName (packPTH "second_name")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [packPTH "Maybe"])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "birthDay")))
                         (DBName (packPTH "birth_day")))
                        ((FTTypeCon Nothing) (packPTH "UTCTime")))
                       SqlDayTime)
                      [packPTH "Maybe"])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "sex")))
                         (DBName (packPTH "sex")))
                        ((FTTypeCon Nothing) (packPTH "Int")))
                       SqlInt64)
                      [packPTH "Maybe"])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "createdTests")))
                         (DBName (packPTH "created_tests")))
                        (FTList ((FTTypeCon Nothing) (packPTH "ObjectId"))))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "passedTests")))
                         (DBName (packPTH "passed_tests")))
                        (FTList ((FTTypeCon Nothing) (packPTH "TestResult"))))
                       SqlString)
                      [])
                     True)
                    (EmbedRef
                       ((EmbedEntityDef (HaskellName (packPTH "TestResult")))
                          [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing) Nothing,
                           ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                           ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                             Nothing]))])
                [(((UniqueDef (HaskellName (packPTH "Email")))
                     (DBName (packPTH "email")))
                    [(HaskellName (packPTH "email"), DBName (packPTH "email"))])
                   [],
                 (((UniqueDef (HaskellName (packPTH "Username")))
                     (DBName (packPTH "username")))
                    [(HaskellName (packPTH "username"), DBName (packPTH "username"))])
                   []])
               [])
              [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
             (Data.Map.Internal.fromList []))
            False
      toPersistFields
        (User x_a2Ttj
              x_a2Ttk
              x_a2Ttl
              x_a2Ttm
              x_a2Ttn
              x_a2Tto
              x_a2Ttp
              x_a2Ttq
              x_a2Ttr
              x_a2Tts)
        = [SomePersistField x_a2Ttj, SomePersistField x_a2Ttk,
           SomePersistField x_a2Ttl, SomePersistField x_a2Ttm,
           SomePersistField x_a2Ttn, SomePersistField x_a2Tto,
           SomePersistField x_a2Ttp, SomePersistField x_a2Ttq,
           SomePersistField x_a2Ttr, SomePersistField x_a2Tts]
      fromPersistValues
        [x1_a2Ttu,
         x2_a2Ttv,
         x3_a2Ttw,
         x4_a2Ttx,
         x5_a2Tty,
         x6_a2Ttz,
         x7_a2TtA,
         x8_a2TtB,
         x9_a2TtC,
         x10_a2TtD]
        = User
            <$>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "username")))
                 . fromPersistValue)
                x1_a2Ttu
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "password")))
                 . fromPersistValue)
                x2_a2Ttv
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "email")))
                 . fromPersistValue)
                x3_a2Ttw
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "avatar")))
                 . fromPersistValue)
                x4_a2Ttx
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "firstName")))
                 . fromPersistValue)
                x5_a2Tty
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "secondName")))
                 . fromPersistValue)
                x6_a2Ttz
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "birthDay")))
                 . fromPersistValue)
                x7_a2TtA
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "sex")))
                 . fromPersistValue)
                x8_a2TtB
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "createdTests")))
                 . fromPersistValue)
                x9_a2TtC
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "passedTests")))
                 . fromPersistValue)
                x10_a2TtD
      fromPersistValues x_a2Ttt
        = (Left
             $ ((mappend (packPTH "User: fromPersistValues failed on: "))
                  (pack $ (show x_a2Ttt))))
      persistUniqueToFieldNames Email {}
        = [(HaskellName (packPTH "email"), DBName (packPTH "email"))]
      persistUniqueToFieldNames Username {}
        = [(HaskellName (packPTH "username"), DBName (packPTH "username"))]
      persistUniqueToValues (Email x_a2TtE) = [toPersistValue x_a2TtE]
      persistUniqueToValues (Username x_a2TtF) = [toPersistValue x_a2TtF]
      persistUniqueKeys
        (User _username_a2TtG
              _password_a2TtH
              _email_a2TtI
              _avatar_a2TtJ
              _firstName_a2TtK
              _secondName_a2TtL
              _birthDay_a2TtM
              _sex_a2TtN
              _createdTests_a2TtO
              _passedTests_a2TtP)
        = [Email _email_a2TtI, Username _username_a2TtG]
      persistFieldDef UserId
        = ((((((FieldDef (HaskellName (packPTH "Id")))
                 (DBName (packPTH "id")))
                ((FTTypeCon Nothing) (packPTH "UserId")))
               SqlInt64)
              [])
             True)
            ((ForeignRef (HaskellName (packPTH "User")))
               ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))
      persistFieldDef UserUsername
        = ((((((FieldDef (HaskellName (packPTH "username")))
                 (DBName (packPTH "username")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef UserPassword
        = ((((((FieldDef (HaskellName (packPTH "password")))
                 (DBName (packPTH "password")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef UserEmail
        = ((((((FieldDef (HaskellName (packPTH "email")))
                 (DBName (packPTH "email")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef UserAvatar
        = ((((((FieldDef (HaskellName (packPTH "avatar")))
                 (DBName (packPTH "avatar")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef UserFirstName
        = ((((((FieldDef (HaskellName (packPTH "firstName")))
                 (DBName (packPTH "first_name")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [packPTH "Maybe"])
             True)
            NoReference
      persistFieldDef UserSecondName
        = ((((((FieldDef (HaskellName (packPTH "secondName")))
                 (DBName (packPTH "second_name")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [packPTH "Maybe"])
             True)
            NoReference
      persistFieldDef UserBirthDay
        = ((((((FieldDef (HaskellName (packPTH "birthDay")))
                 (DBName (packPTH "birth_day")))
                ((FTTypeCon Nothing) (packPTH "UTCTime")))
               SqlDayTime)
              [packPTH "Maybe"])
             True)
            NoReference
      persistFieldDef UserSex
        = ((((((FieldDef (HaskellName (packPTH "sex")))
                 (DBName (packPTH "sex")))
                ((FTTypeCon Nothing) (packPTH "Int")))
               SqlInt64)
              [packPTH "Maybe"])
             True)
            NoReference
      persistFieldDef UserCreatedTests
        = ((((((FieldDef (HaskellName (packPTH "createdTests")))
                 (DBName (packPTH "created_tests")))
                (FTList ((FTTypeCon Nothing) (packPTH "ObjectId"))))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef UserPassedTests
        = ((((((FieldDef (HaskellName (packPTH "passedTests")))
                 (DBName (packPTH "passed_tests")))
                (FTList ((FTTypeCon Nothing) (packPTH "TestResult"))))
               SqlString)
              [])
             True)
            (EmbedRef
               ((EmbedEntityDef (HaskellName (packPTH "TestResult")))
                  [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing) Nothing,
                   ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                   ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                     Nothing]))
      persistIdField = UserId
      fieldLens UserId
        = (lensPTH entityKey)
            (\ Entity _ value_a2TtQ key_a2TtR
               -> (Entity key_a2TtR) value_a2TtQ)
      fieldLens UserUsername
        = (lensPTH (userUsername . entityVal))
            (\ Entity key_a2TtS value_a2TtT x_a2TtU
               -> (Entity key_a2TtS) value_a2TtT {userUsername = x_a2TtU})
      fieldLens UserPassword
        = (lensPTH (userPassword . entityVal))
            (\ Entity key_a2TtS value_a2TtT x_a2TtU
               -> (Entity key_a2TtS) value_a2TtT {userPassword = x_a2TtU})
      fieldLens UserEmail
        = (lensPTH (userEmail . entityVal))
            (\ Entity key_a2TtS value_a2TtT x_a2TtU
               -> (Entity key_a2TtS) value_a2TtT {userEmail = x_a2TtU})
      fieldLens UserAvatar
        = (lensPTH (userAvatar . entityVal))
            (\ Entity key_a2TtS value_a2TtT x_a2TtU
               -> (Entity key_a2TtS) value_a2TtT {userAvatar = x_a2TtU})
      fieldLens UserFirstName
        = (lensPTH (userFirstName . entityVal))
            (\ Entity key_a2TtS value_a2TtT x_a2TtU
               -> (Entity key_a2TtS) value_a2TtT {userFirstName = x_a2TtU})
      fieldLens UserSecondName
        = (lensPTH (userSecondName . entityVal))
            (\ Entity key_a2TtS value_a2TtT x_a2TtU
               -> (Entity key_a2TtS) value_a2TtT {userSecondName = x_a2TtU})
      fieldLens UserBirthDay
        = (lensPTH (userBirthDay . entityVal))
            (\ Entity key_a2TtS value_a2TtT x_a2TtU
               -> (Entity key_a2TtS) value_a2TtT {userBirthDay = x_a2TtU})
      fieldLens UserSex
        = (lensPTH (userSex . entityVal))
            (\ Entity key_a2TtS value_a2TtT x_a2TtU
               -> (Entity key_a2TtS) value_a2TtT {userSex = x_a2TtU})
      fieldLens UserCreatedTests
        = (lensPTH (userCreatedTests . entityVal))
            (\ Entity key_a2TtS value_a2TtT x_a2TtU
               -> (Entity key_a2TtS) value_a2TtT {userCreatedTests = x_a2TtU})
      fieldLens UserPassedTests
        = (lensPTH (userPassedTests . entityVal))
            (\ Entity key_a2TtS value_a2TtT x_a2TtU
               -> (Entity key_a2TtS) value_a2TtT {userPassedTests = x_a2TtU})
    instance ToBackendKey MongoContext User where
      toBackendKey = unUserKey
      fromBackendKey = UserKey
/home/nikita/Projects/labs/Databases/Course-Project/Server/src/Model/User.hs:(27,79)-(47,2): Splicing expression
    Language.Haskell.TH.Quote.quoteExp
      persistLowerCase
      "\n\
      \TestResult\n\
      \  testKey       Text\n\
      \  result        Text\n\
      \  passingDate   UTCTime\n\
      \  deriving      Eq Read Show Generic\n\
      \User\n\
      \  username      Text\n\
      \  password      Text\n\
      \  email         Text\n\
      \  avatar        Text\n\
      \  firstName     Text Maybe\n\
      \  secondName    Text Maybe\n\
      \  birthDay      UTCTime Maybe\n\
      \  sex           Int Maybe\n\
      \  createdTests  [ObjectId]\n\
      \  passedTests   [TestResult]\n\
      \  Email         email\n\
      \  Username      username\n\
      \  deriving      Eq Read Show Generic\n"
  ======>
    [(((((((((EntityDef (HaskellName (packPTH "TestResult")))
               (DBName (packPTH "test_result")))
              (((((((FieldDef (HaskellName (packPTH "Id")))
                      (DBName (packPTH "id")))
                     ((FTTypeCon Nothing) (packPTH "TestResultId")))
                    SqlInt64)
                   [])
                  True)
                 ((ForeignRef (HaskellName (packPTH "TestResult")))
                    ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
             [])
            [((((((FieldDef (HaskellName (packPTH "testKey")))
                    (DBName (packPTH "test_key")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for testKey")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "result")))
                    (DBName (packPTH "result")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for result")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "passingDate")))
                    (DBName (packPTH "passing_date")))
                   ((FTTypeCon Nothing) (packPTH "UTCTime")))
                  (SqlOther (packPTH "SqlType unset for passingDate")))
                 [])
                True)
               NoReference])
           [])
          [])
         [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
        (Data.Map.Internal.fromList []))
       False
       {entityFields = [((((((FieldDef (HaskellName (packPTH "testKey")))
                               (DBName (packPTH "test_key")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "result")))
                               (DBName (packPTH "result")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "passingDate")))
                               (DBName (packPTH "passing_date")))
                              ((FTTypeCon Nothing) (packPTH "UTCTime")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy UTCTime)))
                            [])
                           True)
                          NoReference],
        entityId = ((((((FieldDef (HaskellName (packPTH "Id")))
                          (DBName (packPTH "id")))
                         ((FTTypeCon Nothing) (packPTH "TestResultId")))
                        (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                           (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                       [])
                      True)
                     ((ForeignRef (HaskellName (packPTH "TestResult")))
                        ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))},
     (((((((((EntityDef (HaskellName (packPTH "User")))
               (DBName (packPTH "user")))
              (((((((FieldDef (HaskellName (packPTH "Id")))
                      (DBName (packPTH "id")))
                     ((FTTypeCon Nothing) (packPTH "UserId")))
                    SqlInt64)
                   [])
                  True)
                 ((ForeignRef (HaskellName (packPTH "User")))
                    ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
             [])
            [((((((FieldDef (HaskellName (packPTH "username")))
                    (DBName (packPTH "username")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for username")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "password")))
                    (DBName (packPTH "password")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for password")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "email")))
                    (DBName (packPTH "email")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for email")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "avatar")))
                    (DBName (packPTH "avatar")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for avatar")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "firstName")))
                    (DBName (packPTH "first_name")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for firstName")))
                 [packPTH "Maybe"])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "secondName")))
                    (DBName (packPTH "second_name")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for secondName")))
                 [packPTH "Maybe"])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "birthDay")))
                    (DBName (packPTH "birth_day")))
                   ((FTTypeCon Nothing) (packPTH "UTCTime")))
                  (SqlOther (packPTH "SqlType unset for birthDay")))
                 [packPTH "Maybe"])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "sex")))
                    (DBName (packPTH "sex")))
                   ((FTTypeCon Nothing) (packPTH "Int")))
                  (SqlOther (packPTH "SqlType unset for sex")))
                 [packPTH "Maybe"])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "createdTests")))
                    (DBName (packPTH "created_tests")))
                   (FTList ((FTTypeCon Nothing) (packPTH "ObjectId"))))
                  (SqlOther (packPTH "SqlType unset for createdTests")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "passedTests")))
                    (DBName (packPTH "passed_tests")))
                   (FTList ((FTTypeCon Nothing) (packPTH "TestResult"))))
                  (SqlOther (packPTH "SqlType unset for passedTests")))
                 [])
                True)
               (EmbedRef
                  ((EmbedEntityDef (HaskellName (packPTH "TestResult")))
                     [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing) Nothing,
                      ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                      ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                        Nothing]))])
           [(((UniqueDef (HaskellName (packPTH "Email")))
                (DBName (packPTH "email")))
               [(HaskellName (packPTH "email"), DBName (packPTH "email"))])
              [],
            (((UniqueDef (HaskellName (packPTH "Username")))
                (DBName (packPTH "username")))
               [(HaskellName (packPTH "username"), DBName (packPTH "username"))])
              []])
          [])
         [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
        (Data.Map.Internal.fromList []))
       False
       {entityFields = [((((((FieldDef (HaskellName (packPTH "username")))
                               (DBName (packPTH "username")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "password")))
                               (DBName (packPTH "password")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "email")))
                               (DBName (packPTH "email")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "avatar")))
                               (DBName (packPTH "avatar")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "firstName")))
                               (DBName (packPTH "first_name")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [packPTH "Maybe"])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "secondName")))
                               (DBName (packPTH "second_name")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [packPTH "Maybe"])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "birthDay")))
                               (DBName (packPTH "birth_day")))
                              ((FTTypeCon Nothing) (packPTH "UTCTime")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy UTCTime)))
                            [packPTH "Maybe"])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "sex")))
                               (DBName (packPTH "sex")))
                              ((FTTypeCon Nothing) (packPTH "Int")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Int)))
                            [packPTH "Maybe"])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "createdTests")))
                               (DBName (packPTH "created_tests")))
                              (FTList ((FTTypeCon Nothing) (packPTH "ObjectId"))))
                             SqlString)
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "passedTests")))
                               (DBName (packPTH "passed_tests")))
                              (FTList ((FTTypeCon Nothing) (packPTH "TestResult"))))
                             SqlString)
                            [])
                           True)
                          (EmbedRef
                             ((EmbedEntityDef (HaskellName (packPTH "TestResult")))
                                [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing) Nothing,
                                 ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                                 ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                                   Nothing]))],
        entityId = ((((((FieldDef (HaskellName (packPTH "Id")))
                          (DBName (packPTH "id")))
                         ((FTTypeCon Nothing) (packPTH "UserId")))
                        (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                           (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                       [])
                      True)
                     ((ForeignRef (HaskellName (packPTH "User")))
                        ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))}]
/home/nikita/Projects/labs/Databases/Course-Project/Server/src/Model/User.hs:(27,1)-(47,2): Splicing declarations
    share
      [mkPersist (mkPersistSettings (ConT ''MongoContext))]
      ([(((((((((EntityDef (HaskellName (packPTH "TestResult")))
                  (DBName (packPTH "test_result")))
                 (((((((FieldDef (HaskellName (packPTH "Id")))
                         (DBName (packPTH "id")))
                        ((FTTypeCon Nothing) (packPTH "TestResultId")))
                       SqlInt64)
                      [])
                     True)
                    ((ForeignRef (HaskellName (packPTH "TestResult")))
                       ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                [])
               [((((((FieldDef (HaskellName (packPTH "testKey")))
                       (DBName (packPTH "test_key")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for testKey")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "result")))
                       (DBName (packPTH "result")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for result")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "passingDate")))
                       (DBName (packPTH "passing_date")))
                      ((FTTypeCon Nothing) (packPTH "UTCTime")))
                     (SqlOther (packPTH "SqlType unset for passingDate")))
                    [])
                   True)
                  NoReference])
              [])
             [])
            [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
           (Data.Map.Internal.fromList []))
          False
          {entityFields = [((((((FieldDef (HaskellName (packPTH "testKey")))
                                  (DBName (packPTH "test_key")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "result")))
                                  (DBName (packPTH "result")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "passingDate")))
                                  (DBName (packPTH "passing_date")))
                                 ((FTTypeCon Nothing) (packPTH "UTCTime")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy UTCTime)))
                               [])
                              True)
                             NoReference],
           entityId = ((((((FieldDef (HaskellName (packPTH "Id")))
                             (DBName (packPTH "id")))
                            ((FTTypeCon Nothing) (packPTH "TestResultId")))
                           (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                              (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                          [])
                         True)
                        ((ForeignRef (HaskellName (packPTH "TestResult")))
                           ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))},
        (((((((((EntityDef (HaskellName (packPTH "User")))
                  (DBName (packPTH "user")))
                 (((((((FieldDef (HaskellName (packPTH "Id")))
                         (DBName (packPTH "id")))
                        ((FTTypeCon Nothing) (packPTH "UserId")))
                       SqlInt64)
                      [])
                     True)
                    ((ForeignRef (HaskellName (packPTH "User")))
                       ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                [])
               [((((((FieldDef (HaskellName (packPTH "username")))
                       (DBName (packPTH "username")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for username")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "password")))
                       (DBName (packPTH "password")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for password")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "email")))
                       (DBName (packPTH "email")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for email")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "avatar")))
                       (DBName (packPTH "avatar")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for avatar")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "firstName")))
                       (DBName (packPTH "first_name")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for firstName")))
                    [packPTH "Maybe"])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "secondName")))
                       (DBName (packPTH "second_name")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for secondName")))
                    [packPTH "Maybe"])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "birthDay")))
                       (DBName (packPTH "birth_day")))
                      ((FTTypeCon Nothing) (packPTH "UTCTime")))
                     (SqlOther (packPTH "SqlType unset for birthDay")))
                    [packPTH "Maybe"])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "sex")))
                       (DBName (packPTH "sex")))
                      ((FTTypeCon Nothing) (packPTH "Int")))
                     (SqlOther (packPTH "SqlType unset for sex")))
                    [packPTH "Maybe"])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "createdTests")))
                       (DBName (packPTH "created_tests")))
                      (FTList ((FTTypeCon Nothing) (packPTH "ObjectId"))))
                     (SqlOther (packPTH "SqlType unset for createdTests")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "passedTests")))
                       (DBName (packPTH "passed_tests")))
                      (FTList ((FTTypeCon Nothing) (packPTH "TestResult"))))
                     (SqlOther (packPTH "SqlType unset for passedTests")))
                    [])
                   True)
                  (EmbedRef
                     ((EmbedEntityDef (HaskellName (packPTH "TestResult")))
                        [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing) Nothing,
                         ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                         ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                           Nothing]))])
              [(((UniqueDef (HaskellName (packPTH "Email")))
                   (DBName (packPTH "email")))
                  [(HaskellName (packPTH "email"), DBName (packPTH "email"))])
                 [],
               (((UniqueDef (HaskellName (packPTH "Username")))
                   (DBName (packPTH "username")))
                  [(HaskellName (packPTH "username"), DBName (packPTH "username"))])
                 []])
             [])
            [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
           (Data.Map.Internal.fromList []))
          False
          {entityFields = [((((((FieldDef (HaskellName (packPTH "username")))
                                  (DBName (packPTH "username")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "password")))
                                  (DBName (packPTH "password")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "email")))
                                  (DBName (packPTH "email")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "avatar")))
                                  (DBName (packPTH "avatar")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "firstName")))
                                  (DBName (packPTH "first_name")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [packPTH "Maybe"])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "secondName")))
                                  (DBName (packPTH "second_name")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [packPTH "Maybe"])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "birthDay")))
                                  (DBName (packPTH "birth_day")))
                                 ((FTTypeCon Nothing) (packPTH "UTCTime")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy UTCTime)))
                               [packPTH "Maybe"])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "sex")))
                                  (DBName (packPTH "sex")))
                                 ((FTTypeCon Nothing) (packPTH "Int")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Int)))
                               [packPTH "Maybe"])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "createdTests")))
                                  (DBName (packPTH "created_tests")))
                                 (FTList ((FTTypeCon Nothing) (packPTH "ObjectId"))))
                                SqlString)
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "passedTests")))
                                  (DBName (packPTH "passed_tests")))
                                 (FTList ((FTTypeCon Nothing) (packPTH "TestResult"))))
                                SqlString)
                               [])
                              True)
                             (EmbedRef
                                ((EmbedEntityDef (HaskellName (packPTH "TestResult")))
                                   [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing) Nothing,
                                    ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                                    ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                                      Nothing]))],
           entityId = ((((((FieldDef (HaskellName (packPTH "Id")))
                             (DBName (packPTH "id")))
                            ((FTTypeCon Nothing) (packPTH "UserId")))
                           (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                              (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                          [])
                         True)
                        ((ForeignRef (HaskellName (packPTH "User")))
                           ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))}])
  ======>
    instance PersistField TestResult where
      toPersistValue
        = \ ent_a2Wwc
            -> (PersistMap
                  $ ((Prelude.zip
                        ((Prelude.map pack) ["testKey", "result", "passingDate"]))
                       ((Prelude.map toPersistValue) $ (toPersistFields ent_a2Wwc))))
      fromPersistValue
        = ((\ x_a2Wwd
              -> let
                   columns_a2Wwe
                     = unordered-containers-0.2.9.0:Data.HashMap.Strict.fromList x_a2Wwd
                 in
                   (fromPersistValues
                      $ ((Prelude.map
                            (\ name_a2Wwf
                               -> case
                                      (unordered-containers-0.2.9.0:Data.HashMap.Base.lookup
                                         (pack name_a2Wwf))
                                        columns_a2Wwe
                                  of
                                    Just v_a2Wwg -> v_a2Wwg
                                    Nothing -> PersistNull))
                           $ ["testKey", "result", "passingDate"])))
             <=< getPersistMap)
    instance persistent-2.8.1:Database.Persist.Sql.Class.PersistFieldSql TestResult where
      persistent-2.8.1:Database.Persist.Sql.Class.sqlType _ = SqlString
    instance PersistField User where
      toPersistValue
        = \ ent_a2Wwh
            -> (PersistMap
                  $ ((Prelude.zip
                        ((Prelude.map pack)
                           ["username", "password", "email", "avatar", "firstName",
                            "secondName", "birthDay", "sex", "createdTests", "passedTests"]))
                       ((Prelude.map toPersistValue) $ (toPersistFields ent_a2Wwh))))
      fromPersistValue
        = ((\ x_a2Wwi
              -> let
                   columns_a2Wwj
                     = unordered-containers-0.2.9.0:Data.HashMap.Strict.fromList x_a2Wwi
                 in
                   (fromPersistValues
                      $ ((Prelude.map
                            (\ name_a2Wwk
                               -> case
                                      (unordered-containers-0.2.9.0:Data.HashMap.Base.lookup
                                         (pack name_a2Wwk))
                                        columns_a2Wwj
                                  of
                                    Just v_a2Wwl -> v_a2Wwl
                                    Nothing -> PersistNull))
                           $ ["username", "password", "email", "avatar", "firstName",
                              "secondName", "birthDay", "sex", "createdTests", "passedTests"])))
             <=< getPersistMap)
    instance persistent-2.8.1:Database.Persist.Sql.Class.PersistFieldSql User where
      persistent-2.8.1:Database.Persist.Sql.Class.sqlType _ = SqlString
    data TestResult
      = TestResult {testResultTestKey :: !Text,
                    testResultResult :: !Text,
                    testResultPassingDate :: !UTCTime}
      deriving (Eq, Read, Show, Generic)
    type TestResultId = Key TestResult
    instance PersistEntity TestResult where
      type PersistEntityBackend TestResult = MongoContext
      data Unique TestResult
      newtype Key TestResult
        = TestResultKey {unTestResultKey :: (BackendKey MongoContext)}
        deriving (Show,
                  Read,
                  Eq,
                  Ord,
                  path-pieces-0.2.1:Web.PathPieces.PathPiece,
                  http-api-data-0.3.7.2:Web.Internal.HttpApiData.ToHttpApiData,
                  http-api-data-0.3.7.2:Web.Internal.HttpApiData.FromHttpApiData,
                  PersistField,
                  persistent-2.8.1:Database.Persist.Sql.Class.PersistFieldSql,
                  Aeson.ToJSON,
                  Aeson.FromJSON)
      data EntityField TestResult typ
        = typ ~ Key TestResult => TestResultId |
          typ ~ Text => TestResultTestKey |
          typ ~ Text => TestResultResult |
          typ ~ UTCTime => TestResultPassingDate
      keyToValues
        = ((ghc-prim-0.5.1.1:GHC.Types.: [])
             . (toPersistValue . unTestResultKey))
      keyFromValues
        = ((fmap TestResultKey)
             . (fromPersistValue . Database.Persist.TH.headNote))
      entityDef _
        = (((((((((EntityDef (HaskellName (packPTH "TestResult")))
                    (DBName (packPTH "test_result")))
                   (((((((FieldDef (HaskellName (packPTH "Id")))
                           (DBName (packPTH "id")))
                          ((FTTypeCon Nothing) (packPTH "TestResultId")))
                         SqlInt64)
                        [])
                       True)
                      ((ForeignRef (HaskellName (packPTH "TestResult")))
                         ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                  [])
                 [((((((FieldDef (HaskellName (packPTH "testKey")))
                         (DBName (packPTH "test_key")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "result")))
                         (DBName (packPTH "result")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "passingDate")))
                         (DBName (packPTH "passing_date")))
                        ((FTTypeCon Nothing) (packPTH "UTCTime")))
                       SqlDayTime)
                      [])
                     True)
                    NoReference])
                [])
               [])
              [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
             (Data.Map.Internal.fromList []))
            False
      toPersistFields (TestResult x_a2Wwm x_a2Wwn x_a2Wwo)
        = [SomePersistField x_a2Wwm, SomePersistField x_a2Wwn,
           SomePersistField x_a2Wwo]
      fromPersistValues [x1_a2Wwq, x2_a2Wwr, x3_a2Wws]
        = TestResult
            <$>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "testKey")))
                 . fromPersistValue)
                x1_a2Wwq
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "result")))
                 . fromPersistValue)
                x2_a2Wwr
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "passingDate")))
                 . fromPersistValue)
                x3_a2Wws
      fromPersistValues x_a2Wwp
        = (Left
             $ ((mappend (packPTH "TestResult: fromPersistValues failed on: "))
                  (pack $ (show x_a2Wwp))))
      persistUniqueToFieldNames _
        = error "Degenerate case, should never happen"
      persistUniqueToValues _
        = error "Degenerate case, should never happen"
      persistUniqueKeys
        (TestResult _testKey_a2Wwt _result_a2Wwu _passingDate_a2Wwv)
        = []
      persistFieldDef TestResultId
        = ((((((FieldDef (HaskellName (packPTH "Id")))
                 (DBName (packPTH "id")))
                ((FTTypeCon Nothing) (packPTH "TestResultId")))
               SqlInt64)
              [])
             True)
            ((ForeignRef (HaskellName (packPTH "TestResult")))
               ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))
      persistFieldDef TestResultTestKey
        = ((((((FieldDef (HaskellName (packPTH "testKey")))
                 (DBName (packPTH "test_key")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef TestResultResult
        = ((((((FieldDef (HaskellName (packPTH "result")))
                 (DBName (packPTH "result")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef TestResultPassingDate
        = ((((((FieldDef (HaskellName (packPTH "passingDate")))
                 (DBName (packPTH "passing_date")))
                ((FTTypeCon Nothing) (packPTH "UTCTime")))
               SqlDayTime)
              [])
             True)
            NoReference
      persistIdField = TestResultId
      fieldLens TestResultId
        = (lensPTH entityKey)
            (\ Entity _ value_a2Www key_a2Wwx
               -> (Entity key_a2Wwx) value_a2Www)
      fieldLens TestResultTestKey
        = (lensPTH (testResultTestKey . entityVal))
            (\ Entity key_a2Wwy value_a2Wwz x_a2WwA
               -> (Entity key_a2Wwy) value_a2Wwz {testResultTestKey = x_a2WwA})
      fieldLens TestResultResult
        = (lensPTH (testResultResult . entityVal))
            (\ Entity key_a2Wwy value_a2Wwz x_a2WwA
               -> (Entity key_a2Wwy) value_a2Wwz {testResultResult = x_a2WwA})
      fieldLens TestResultPassingDate
        = (lensPTH (testResultPassingDate . entityVal))
            (\ Entity key_a2Wwy value_a2Wwz x_a2WwA
               -> (Entity key_a2Wwy)
                    value_a2Wwz {testResultPassingDate = x_a2WwA})
    instance ToBackendKey MongoContext TestResult where
      toBackendKey = unTestResultKey
      fromBackendKey = TestResultKey
    data User
      = User {userUsername :: !Text,
              userPassword :: !Text,
              userEmail :: !Text,
              userAvatar :: !Text,
              userFirstName :: !(Maybe Text),
              userSecondName :: !(Maybe Text),
              userBirthDay :: !(Maybe UTCTime),
              userSex :: !(Maybe Int),
              userCreatedTests :: ![ObjectId],
              userPassedTests :: ![TestResult]}
      deriving (Eq, Read, Show, Generic)
    type UserId = Key User
    instance PersistEntity User where
      type PersistEntityBackend User = MongoContext
      data Unique User = Email Text | Username Text
      newtype Key User
        = UserKey {unUserKey :: (BackendKey MongoContext)}
        deriving (Show,
                  Read,
                  Eq,
                  Ord,
                  path-pieces-0.2.1:Web.PathPieces.PathPiece,
                  http-api-data-0.3.7.2:Web.Internal.HttpApiData.ToHttpApiData,
                  http-api-data-0.3.7.2:Web.Internal.HttpApiData.FromHttpApiData,
                  PersistField,
                  persistent-2.8.1:Database.Persist.Sql.Class.PersistFieldSql,
                  Aeson.ToJSON,
                  Aeson.FromJSON)
      data EntityField User typ
        = typ ~ Key User => UserId |
          typ ~ Text => UserUsername |
          typ ~ Text => UserPassword |
          typ ~ Text => UserEmail |
          typ ~ Text => UserAvatar |
          typ ~ Maybe Text => UserFirstName |
          typ ~ Maybe Text => UserSecondName |
          typ ~ Maybe UTCTime => UserBirthDay |
          typ ~ Maybe Int => UserSex |
          typ ~ [ObjectId] => UserCreatedTests |
          typ ~ [TestResult] => UserPassedTests
      keyToValues
        = ((ghc-prim-0.5.1.1:GHC.Types.: [])
             . (toPersistValue . unUserKey))
      keyFromValues
        = ((fmap UserKey)
             . (fromPersistValue . Database.Persist.TH.headNote))
      entityDef _
        = (((((((((EntityDef (HaskellName (packPTH "User")))
                    (DBName (packPTH "user")))
                   (((((((FieldDef (HaskellName (packPTH "Id")))
                           (DBName (packPTH "id")))
                          ((FTTypeCon Nothing) (packPTH "UserId")))
                         SqlInt64)
                        [])
                       True)
                      ((ForeignRef (HaskellName (packPTH "User")))
                         ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                  [])
                 [((((((FieldDef (HaskellName (packPTH "username")))
                         (DBName (packPTH "username")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "password")))
                         (DBName (packPTH "password")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "email")))
                         (DBName (packPTH "email")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "avatar")))
                         (DBName (packPTH "avatar")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "firstName")))
                         (DBName (packPTH "first_name")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [packPTH "Maybe"])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "secondName")))
                         (DBName (packPTH "second_name")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [packPTH "Maybe"])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "birthDay")))
                         (DBName (packPTH "birth_day")))
                        ((FTTypeCon Nothing) (packPTH "UTCTime")))
                       SqlDayTime)
                      [packPTH "Maybe"])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "sex")))
                         (DBName (packPTH "sex")))
                        ((FTTypeCon Nothing) (packPTH "Int")))
                       SqlInt64)
                      [packPTH "Maybe"])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "createdTests")))
                         (DBName (packPTH "created_tests")))
                        (FTList ((FTTypeCon Nothing) (packPTH "ObjectId"))))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "passedTests")))
                         (DBName (packPTH "passed_tests")))
                        (FTList ((FTTypeCon Nothing) (packPTH "TestResult"))))
                       SqlString)
                      [])
                     True)
                    (EmbedRef
                       ((EmbedEntityDef (HaskellName (packPTH "TestResult")))
                          [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing) Nothing,
                           ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                           ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                             Nothing]))])
                [(((UniqueDef (HaskellName (packPTH "Email")))
                     (DBName (packPTH "email")))
                    [(HaskellName (packPTH "email"), DBName (packPTH "email"))])
                   [],
                 (((UniqueDef (HaskellName (packPTH "Username")))
                     (DBName (packPTH "username")))
                    [(HaskellName (packPTH "username"), DBName (packPTH "username"))])
                   []])
               [])
              [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
             (Data.Map.Internal.fromList []))
            False
      toPersistFields
        (User x_a2WwB
              x_a2WwC
              x_a2WwD
              x_a2WwE
              x_a2WwF
              x_a2WwG
              x_a2WwH
              x_a2WwI
              x_a2WwJ
              x_a2WwK)
        = [SomePersistField x_a2WwB, SomePersistField x_a2WwC,
           SomePersistField x_a2WwD, SomePersistField x_a2WwE,
           SomePersistField x_a2WwF, SomePersistField x_a2WwG,
           SomePersistField x_a2WwH, SomePersistField x_a2WwI,
           SomePersistField x_a2WwJ, SomePersistField x_a2WwK]
      fromPersistValues
        [x1_a2WwM,
         x2_a2WwN,
         x3_a2WwO,
         x4_a2WwP,
         x5_a2WwQ,
         x6_a2WwR,
         x7_a2WwS,
         x8_a2WwT,
         x9_a2WwU,
         x10_a2WwV]
        = User
            <$>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "username")))
                 . fromPersistValue)
                x1_a2WwM
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "password")))
                 . fromPersistValue)
                x2_a2WwN
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "email")))
                 . fromPersistValue)
                x3_a2WwO
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "avatar")))
                 . fromPersistValue)
                x4_a2WwP
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "firstName")))
                 . fromPersistValue)
                x5_a2WwQ
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "secondName")))
                 . fromPersistValue)
                x6_a2WwR
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "birthDay")))
                 . fromPersistValue)
                x7_a2WwS
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "sex")))
                 . fromPersistValue)
                x8_a2WwT
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "createdTests")))
                 . fromPersistValue)
                x9_a2WwU
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "passedTests")))
                 . fromPersistValue)
                x10_a2WwV
      fromPersistValues x_a2WwL
        = (Left
             $ ((mappend (packPTH "User: fromPersistValues failed on: "))
                  (pack $ (show x_a2WwL))))
      persistUniqueToFieldNames Email {}
        = [(HaskellName (packPTH "email"), DBName (packPTH "email"))]
      persistUniqueToFieldNames Username {}
        = [(HaskellName (packPTH "username"), DBName (packPTH "username"))]
      persistUniqueToValues (Email x_a2WwW) = [toPersistValue x_a2WwW]
      persistUniqueToValues (Username x_a2WwX) = [toPersistValue x_a2WwX]
      persistUniqueKeys
        (User _username_a2WwY
              _password_a2WwZ
              _email_a2Wx0
              _avatar_a2Wx1
              _firstName_a2Wx2
              _secondName_a2Wx3
              _birthDay_a2Wx4
              _sex_a2Wx5
              _createdTests_a2Wx6
              _passedTests_a2Wx7)
        = [Email _email_a2Wx0, Username _username_a2WwY]
      persistFieldDef UserId
        = ((((((FieldDef (HaskellName (packPTH "Id")))
                 (DBName (packPTH "id")))
                ((FTTypeCon Nothing) (packPTH "UserId")))
               SqlInt64)
              [])
             True)
            ((ForeignRef (HaskellName (packPTH "User")))
               ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))
      persistFieldDef UserUsername
        = ((((((FieldDef (HaskellName (packPTH "username")))
                 (DBName (packPTH "username")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef UserPassword
        = ((((((FieldDef (HaskellName (packPTH "password")))
                 (DBName (packPTH "password")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef UserEmail
        = ((((((FieldDef (HaskellName (packPTH "email")))
                 (DBName (packPTH "email")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef UserAvatar
        = ((((((FieldDef (HaskellName (packPTH "avatar")))
                 (DBName (packPTH "avatar")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef UserFirstName
        = ((((((FieldDef (HaskellName (packPTH "firstName")))
                 (DBName (packPTH "first_name")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [packPTH "Maybe"])
             True)
            NoReference
      persistFieldDef UserSecondName
        = ((((((FieldDef (HaskellName (packPTH "secondName")))
                 (DBName (packPTH "second_name")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [packPTH "Maybe"])
             True)
            NoReference
      persistFieldDef UserBirthDay
        = ((((((FieldDef (HaskellName (packPTH "birthDay")))
                 (DBName (packPTH "birth_day")))
                ((FTTypeCon Nothing) (packPTH "UTCTime")))
               SqlDayTime)
              [packPTH "Maybe"])
             True)
            NoReference
      persistFieldDef UserSex
        = ((((((FieldDef (HaskellName (packPTH "sex")))
                 (DBName (packPTH "sex")))
                ((FTTypeCon Nothing) (packPTH "Int")))
               SqlInt64)
              [packPTH "Maybe"])
             True)
            NoReference
      persistFieldDef UserCreatedTests
        = ((((((FieldDef (HaskellName (packPTH "createdTests")))
                 (DBName (packPTH "created_tests")))
                (FTList ((FTTypeCon Nothing) (packPTH "ObjectId"))))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef UserPassedTests
        = ((((((FieldDef (HaskellName (packPTH "passedTests")))
                 (DBName (packPTH "passed_tests")))
                (FTList ((FTTypeCon Nothing) (packPTH "TestResult"))))
               SqlString)
              [])
             True)
            (EmbedRef
               ((EmbedEntityDef (HaskellName (packPTH "TestResult")))
                  [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing) Nothing,
                   ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                   ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                     Nothing]))
      persistIdField = UserId
      fieldLens UserId
        = (lensPTH entityKey)
            (\ Entity _ value_a2Wx8 key_a2Wx9
               -> (Entity key_a2Wx9) value_a2Wx8)
      fieldLens UserUsername
        = (lensPTH (userUsername . entityVal))
            (\ Entity key_a2Wxa value_a2Wxb x_a2Wxc
               -> (Entity key_a2Wxa) value_a2Wxb {userUsername = x_a2Wxc})
      fieldLens UserPassword
        = (lensPTH (userPassword . entityVal))
            (\ Entity key_a2Wxa value_a2Wxb x_a2Wxc
               -> (Entity key_a2Wxa) value_a2Wxb {userPassword = x_a2Wxc})
      fieldLens UserEmail
        = (lensPTH (userEmail . entityVal))
            (\ Entity key_a2Wxa value_a2Wxb x_a2Wxc
               -> (Entity key_a2Wxa) value_a2Wxb {userEmail = x_a2Wxc})
      fieldLens UserAvatar
        = (lensPTH (userAvatar . entityVal))
            (\ Entity key_a2Wxa value_a2Wxb x_a2Wxc
               -> (Entity key_a2Wxa) value_a2Wxb {userAvatar = x_a2Wxc})
      fieldLens UserFirstName
        = (lensPTH (userFirstName . entityVal))
            (\ Entity key_a2Wxa value_a2Wxb x_a2Wxc
               -> (Entity key_a2Wxa) value_a2Wxb {userFirstName = x_a2Wxc})
      fieldLens UserSecondName
        = (lensPTH (userSecondName . entityVal))
            (\ Entity key_a2Wxa value_a2Wxb x_a2Wxc
               -> (Entity key_a2Wxa) value_a2Wxb {userSecondName = x_a2Wxc})
      fieldLens UserBirthDay
        = (lensPTH (userBirthDay . entityVal))
            (\ Entity key_a2Wxa value_a2Wxb x_a2Wxc
               -> (Entity key_a2Wxa) value_a2Wxb {userBirthDay = x_a2Wxc})
      fieldLens UserSex
        = (lensPTH (userSex . entityVal))
            (\ Entity key_a2Wxa value_a2Wxb x_a2Wxc
               -> (Entity key_a2Wxa) value_a2Wxb {userSex = x_a2Wxc})
      fieldLens UserCreatedTests
        = (lensPTH (userCreatedTests . entityVal))
            (\ Entity key_a2Wxa value_a2Wxb x_a2Wxc
               -> (Entity key_a2Wxa) value_a2Wxb {userCreatedTests = x_a2Wxc})
      fieldLens UserPassedTests
        = (lensPTH (userPassedTests . entityVal))
            (\ Entity key_a2Wxa value_a2Wxb x_a2Wxc
               -> (Entity key_a2Wxa) value_a2Wxb {userPassedTests = x_a2Wxc})
    instance ToBackendKey MongoContext User where
      toBackendKey = unUserKey
      fromBackendKey = UserKey
/home/nikita/Projects/labs/Databases/Course-Project/Server/src/Model/User.hs:(27,79)-(47,2): Splicing expression
    Language.Haskell.TH.Quote.quoteExp
      persistLowerCase
      "\n\
      \TestResult\n\
      \  testKey       Text\n\
      \  result        Text\n\
      \  passingDate   UTCTime\n\
      \  deriving      Eq Read Show Generic\n\
      \User\n\
      \  username      Text\n\
      \  password      Text\n\
      \  email         Text\n\
      \  avatar        Text\n\
      \  firstName     Text Maybe\n\
      \  secondName    Text Maybe\n\
      \  birthDay      UTCTime Maybe\n\
      \  sex           Int Maybe\n\
      \  createdTests  [ObjectId]\n\
      \  passedTests   [TestResult]\n\
      \  Email         email\n\
      \  Username      username\n\
      \  deriving      Eq Read Show Generic\n"
  ======>
    [(((((((((EntityDef (HaskellName (packPTH "TestResult")))
               (DBName (packPTH "test_result")))
              (((((((FieldDef (HaskellName (packPTH "Id")))
                      (DBName (packPTH "id")))
                     ((FTTypeCon Nothing) (packPTH "TestResultId")))
                    SqlInt64)
                   [])
                  True)
                 ((ForeignRef (HaskellName (packPTH "TestResult")))
                    ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
             [])
            [((((((FieldDef (HaskellName (packPTH "testKey")))
                    (DBName (packPTH "test_key")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for testKey")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "result")))
                    (DBName (packPTH "result")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for result")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "passingDate")))
                    (DBName (packPTH "passing_date")))
                   ((FTTypeCon Nothing) (packPTH "UTCTime")))
                  (SqlOther (packPTH "SqlType unset for passingDate")))
                 [])
                True)
               NoReference])
           [])
          [])
         [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
        (Data.Map.Internal.fromList []))
       False
       {entityFields = [((((((FieldDef (HaskellName (packPTH "testKey")))
                               (DBName (packPTH "test_key")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "result")))
                               (DBName (packPTH "result")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "passingDate")))
                               (DBName (packPTH "passing_date")))
                              ((FTTypeCon Nothing) (packPTH "UTCTime")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy UTCTime)))
                            [])
                           True)
                          NoReference],
        entityId = ((((((FieldDef (HaskellName (packPTH "Id")))
                          (DBName (packPTH "id")))
                         ((FTTypeCon Nothing) (packPTH "TestResultId")))
                        (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                           (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                       [])
                      True)
                     ((ForeignRef (HaskellName (packPTH "TestResult")))
                        ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))},
     (((((((((EntityDef (HaskellName (packPTH "User")))
               (DBName (packPTH "user")))
              (((((((FieldDef (HaskellName (packPTH "Id")))
                      (DBName (packPTH "id")))
                     ((FTTypeCon Nothing) (packPTH "UserId")))
                    SqlInt64)
                   [])
                  True)
                 ((ForeignRef (HaskellName (packPTH "User")))
                    ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
             [])
            [((((((FieldDef (HaskellName (packPTH "username")))
                    (DBName (packPTH "username")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for username")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "password")))
                    (DBName (packPTH "password")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for password")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "email")))
                    (DBName (packPTH "email")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for email")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "avatar")))
                    (DBName (packPTH "avatar")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for avatar")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "firstName")))
                    (DBName (packPTH "first_name")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for firstName")))
                 [packPTH "Maybe"])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "secondName")))
                    (DBName (packPTH "second_name")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for secondName")))
                 [packPTH "Maybe"])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "birthDay")))
                    (DBName (packPTH "birth_day")))
                   ((FTTypeCon Nothing) (packPTH "UTCTime")))
                  (SqlOther (packPTH "SqlType unset for birthDay")))
                 [packPTH "Maybe"])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "sex")))
                    (DBName (packPTH "sex")))
                   ((FTTypeCon Nothing) (packPTH "Int")))
                  (SqlOther (packPTH "SqlType unset for sex")))
                 [packPTH "Maybe"])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "createdTests")))
                    (DBName (packPTH "created_tests")))
                   (FTList ((FTTypeCon Nothing) (packPTH "ObjectId"))))
                  (SqlOther (packPTH "SqlType unset for createdTests")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "passedTests")))
                    (DBName (packPTH "passed_tests")))
                   (FTList ((FTTypeCon Nothing) (packPTH "TestResult"))))
                  (SqlOther (packPTH "SqlType unset for passedTests")))
                 [])
                True)
               (EmbedRef
                  ((EmbedEntityDef (HaskellName (packPTH "TestResult")))
                     [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing) Nothing,
                      ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                      ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                        Nothing]))])
           [(((UniqueDef (HaskellName (packPTH "Email")))
                (DBName (packPTH "email")))
               [(HaskellName (packPTH "email"), DBName (packPTH "email"))])
              [],
            (((UniqueDef (HaskellName (packPTH "Username")))
                (DBName (packPTH "username")))
               [(HaskellName (packPTH "username"), DBName (packPTH "username"))])
              []])
          [])
         [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
        (Data.Map.Internal.fromList []))
       False
       {entityFields = [((((((FieldDef (HaskellName (packPTH "username")))
                               (DBName (packPTH "username")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "password")))
                               (DBName (packPTH "password")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "email")))
                               (DBName (packPTH "email")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "avatar")))
                               (DBName (packPTH "avatar")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "firstName")))
                               (DBName (packPTH "first_name")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [packPTH "Maybe"])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "secondName")))
                               (DBName (packPTH "second_name")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [packPTH "Maybe"])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "birthDay")))
                               (DBName (packPTH "birth_day")))
                              ((FTTypeCon Nothing) (packPTH "UTCTime")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy UTCTime)))
                            [packPTH "Maybe"])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "sex")))
                               (DBName (packPTH "sex")))
                              ((FTTypeCon Nothing) (packPTH "Int")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Int)))
                            [packPTH "Maybe"])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "createdTests")))
                               (DBName (packPTH "created_tests")))
                              (FTList ((FTTypeCon Nothing) (packPTH "ObjectId"))))
                             SqlString)
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "passedTests")))
                               (DBName (packPTH "passed_tests")))
                              (FTList ((FTTypeCon Nothing) (packPTH "TestResult"))))
                             SqlString)
                            [])
                           True)
                          (EmbedRef
                             ((EmbedEntityDef (HaskellName (packPTH "TestResult")))
                                [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing) Nothing,
                                 ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                                 ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                                   Nothing]))],
        entityId = ((((((FieldDef (HaskellName (packPTH "Id")))
                          (DBName (packPTH "id")))
                         ((FTTypeCon Nothing) (packPTH "UserId")))
                        (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                           (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                       [])
                      True)
                     ((ForeignRef (HaskellName (packPTH "User")))
                        ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))}]
/home/nikita/Projects/labs/Databases/Course-Project/Server/src/Model/User.hs:(27,1)-(47,2): Splicing declarations
    share
      [mkPersist (mkPersistSettings (ConT ''MongoContext))]
      ([(((((((((EntityDef (HaskellName (packPTH "TestResult")))
                  (DBName (packPTH "test_result")))
                 (((((((FieldDef (HaskellName (packPTH "Id")))
                         (DBName (packPTH "id")))
                        ((FTTypeCon Nothing) (packPTH "TestResultId")))
                       SqlInt64)
                      [])
                     True)
                    ((ForeignRef (HaskellName (packPTH "TestResult")))
                       ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                [])
               [((((((FieldDef (HaskellName (packPTH "testKey")))
                       (DBName (packPTH "test_key")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for testKey")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "result")))
                       (DBName (packPTH "result")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for result")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "passingDate")))
                       (DBName (packPTH "passing_date")))
                      ((FTTypeCon Nothing) (packPTH "UTCTime")))
                     (SqlOther (packPTH "SqlType unset for passingDate")))
                    [])
                   True)
                  NoReference])
              [])
             [])
            [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
           (Data.Map.Internal.fromList []))
          False
          {entityFields = [((((((FieldDef (HaskellName (packPTH "testKey")))
                                  (DBName (packPTH "test_key")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "result")))
                                  (DBName (packPTH "result")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "passingDate")))
                                  (DBName (packPTH "passing_date")))
                                 ((FTTypeCon Nothing) (packPTH "UTCTime")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy UTCTime)))
                               [])
                              True)
                             NoReference],
           entityId = ((((((FieldDef (HaskellName (packPTH "Id")))
                             (DBName (packPTH "id")))
                            ((FTTypeCon Nothing) (packPTH "TestResultId")))
                           (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                              (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                          [])
                         True)
                        ((ForeignRef (HaskellName (packPTH "TestResult")))
                           ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))},
        (((((((((EntityDef (HaskellName (packPTH "User")))
                  (DBName (packPTH "user")))
                 (((((((FieldDef (HaskellName (packPTH "Id")))
                         (DBName (packPTH "id")))
                        ((FTTypeCon Nothing) (packPTH "UserId")))
                       SqlInt64)
                      [])
                     True)
                    ((ForeignRef (HaskellName (packPTH "User")))
                       ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                [])
               [((((((FieldDef (HaskellName (packPTH "username")))
                       (DBName (packPTH "username")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for username")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "password")))
                       (DBName (packPTH "password")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for password")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "email")))
                       (DBName (packPTH "email")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for email")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "avatar")))
                       (DBName (packPTH "avatar")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for avatar")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "firstName")))
                       (DBName (packPTH "first_name")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for firstName")))
                    [packPTH "Maybe"])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "secondName")))
                       (DBName (packPTH "second_name")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for secondName")))
                    [packPTH "Maybe"])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "birthDay")))
                       (DBName (packPTH "birth_day")))
                      ((FTTypeCon Nothing) (packPTH "UTCTime")))
                     (SqlOther (packPTH "SqlType unset for birthDay")))
                    [packPTH "Maybe"])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "sex")))
                       (DBName (packPTH "sex")))
                      ((FTTypeCon Nothing) (packPTH "Int")))
                     (SqlOther (packPTH "SqlType unset for sex")))
                    [packPTH "Maybe"])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "createdTests")))
                       (DBName (packPTH "created_tests")))
                      (FTList ((FTTypeCon Nothing) (packPTH "ObjectId"))))
                     (SqlOther (packPTH "SqlType unset for createdTests")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "passedTests")))
                       (DBName (packPTH "passed_tests")))
                      (FTList ((FTTypeCon Nothing) (packPTH "TestResult"))))
                     (SqlOther (packPTH "SqlType unset for passedTests")))
                    [])
                   True)
                  (EmbedRef
                     ((EmbedEntityDef (HaskellName (packPTH "TestResult")))
                        [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing) Nothing,
                         ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                         ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                           Nothing]))])
              [(((UniqueDef (HaskellName (packPTH "Email")))
                   (DBName (packPTH "email")))
                  [(HaskellName (packPTH "email"), DBName (packPTH "email"))])
                 [],
               (((UniqueDef (HaskellName (packPTH "Username")))
                   (DBName (packPTH "username")))
                  [(HaskellName (packPTH "username"), DBName (packPTH "username"))])
                 []])
             [])
            [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
           (Data.Map.Internal.fromList []))
          False
          {entityFields = [((((((FieldDef (HaskellName (packPTH "username")))
                                  (DBName (packPTH "username")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "password")))
                                  (DBName (packPTH "password")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "email")))
                                  (DBName (packPTH "email")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "avatar")))
                                  (DBName (packPTH "avatar")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "firstName")))
                                  (DBName (packPTH "first_name")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [packPTH "Maybe"])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "secondName")))
                                  (DBName (packPTH "second_name")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [packPTH "Maybe"])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "birthDay")))
                                  (DBName (packPTH "birth_day")))
                                 ((FTTypeCon Nothing) (packPTH "UTCTime")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy UTCTime)))
                               [packPTH "Maybe"])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "sex")))
                                  (DBName (packPTH "sex")))
                                 ((FTTypeCon Nothing) (packPTH "Int")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Int)))
                               [packPTH "Maybe"])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "createdTests")))
                                  (DBName (packPTH "created_tests")))
                                 (FTList ((FTTypeCon Nothing) (packPTH "ObjectId"))))
                                SqlString)
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "passedTests")))
                                  (DBName (packPTH "passed_tests")))
                                 (FTList ((FTTypeCon Nothing) (packPTH "TestResult"))))
                                SqlString)
                               [])
                              True)
                             (EmbedRef
                                ((EmbedEntityDef (HaskellName (packPTH "TestResult")))
                                   [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing) Nothing,
                                    ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                                    ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                                      Nothing]))],
           entityId = ((((((FieldDef (HaskellName (packPTH "Id")))
                             (DBName (packPTH "id")))
                            ((FTTypeCon Nothing) (packPTH "UserId")))
                           (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                              (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                          [])
                         True)
                        ((ForeignRef (HaskellName (packPTH "User")))
                           ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))}])
  ======>
    instance PersistField TestResult where
      toPersistValue
        = \ ent_a32uV
            -> (PersistMap
                  $ ((Prelude.zip
                        ((Prelude.map pack) ["testKey", "result", "passingDate"]))
                       ((Prelude.map toPersistValue) $ (toPersistFields ent_a32uV))))
      fromPersistValue
        = ((\ x_a32uW
              -> let
                   columns_a32uX
                     = unordered-containers-0.2.9.0:Data.HashMap.Strict.fromList x_a32uW
                 in
                   (fromPersistValues
                      $ ((Prelude.map
                            (\ name_a32uY
                               -> case
                                      (unordered-containers-0.2.9.0:Data.HashMap.Base.lookup
                                         (pack name_a32uY))
                                        columns_a32uX
                                  of
                                    Just v_a32uZ -> v_a32uZ
                                    Nothing -> PersistNull))
                           $ ["testKey", "result", "passingDate"])))
             <=< getPersistMap)
    instance persistent-2.8.1:Database.Persist.Sql.Class.PersistFieldSql TestResult where
      persistent-2.8.1:Database.Persist.Sql.Class.sqlType _ = SqlString
    instance PersistField User where
      toPersistValue
        = \ ent_a32v0
            -> (PersistMap
                  $ ((Prelude.zip
                        ((Prelude.map pack)
                           ["username", "password", "email", "avatar", "firstName",
                            "secondName", "birthDay", "sex", "createdTests", "passedTests"]))
                       ((Prelude.map toPersistValue) $ (toPersistFields ent_a32v0))))
      fromPersistValue
        = ((\ x_a32v1
              -> let
                   columns_a32v2
                     = unordered-containers-0.2.9.0:Data.HashMap.Strict.fromList x_a32v1
                 in
                   (fromPersistValues
                      $ ((Prelude.map
                            (\ name_a32v3
                               -> case
                                      (unordered-containers-0.2.9.0:Data.HashMap.Base.lookup
                                         (pack name_a32v3))
                                        columns_a32v2
                                  of
                                    Just v_a32v4 -> v_a32v4
                                    Nothing -> PersistNull))
                           $ ["username", "password", "email", "avatar", "firstName",
                              "secondName", "birthDay", "sex", "createdTests", "passedTests"])))
             <=< getPersistMap)
    instance persistent-2.8.1:Database.Persist.Sql.Class.PersistFieldSql User where
      persistent-2.8.1:Database.Persist.Sql.Class.sqlType _ = SqlString
    data TestResult
      = TestResult {testResultTestKey :: !Text,
                    testResultResult :: !Text,
                    testResultPassingDate :: !UTCTime}
      deriving (Eq, Read, Show, Generic)
    type TestResultId = Key TestResult
    instance PersistEntity TestResult where
      type PersistEntityBackend TestResult = MongoContext
      data Unique TestResult
      newtype Key TestResult
        = TestResultKey {unTestResultKey :: (BackendKey MongoContext)}
        deriving (Show,
                  Read,
                  Eq,
                  Ord,
                  path-pieces-0.2.1:Web.PathPieces.PathPiece,
                  http-api-data-0.3.7.2:Web.Internal.HttpApiData.ToHttpApiData,
                  http-api-data-0.3.7.2:Web.Internal.HttpApiData.FromHttpApiData,
                  PersistField,
                  persistent-2.8.1:Database.Persist.Sql.Class.PersistFieldSql,
                  Aeson.ToJSON,
                  Aeson.FromJSON)
      data EntityField TestResult typ
        = typ ~ Key TestResult => TestResultId |
          typ ~ Text => TestResultTestKey |
          typ ~ Text => TestResultResult |
          typ ~ UTCTime => TestResultPassingDate
      keyToValues
        = ((ghc-prim-0.5.1.1:GHC.Types.: [])
             . (toPersistValue . unTestResultKey))
      keyFromValues
        = ((fmap TestResultKey)
             . (fromPersistValue . Database.Persist.TH.headNote))
      entityDef _
        = (((((((((EntityDef (HaskellName (packPTH "TestResult")))
                    (DBName (packPTH "test_result")))
                   (((((((FieldDef (HaskellName (packPTH "Id")))
                           (DBName (packPTH "id")))
                          ((FTTypeCon Nothing) (packPTH "TestResultId")))
                         SqlInt64)
                        [])
                       True)
                      ((ForeignRef (HaskellName (packPTH "TestResult")))
                         ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                  [])
                 [((((((FieldDef (HaskellName (packPTH "testKey")))
                         (DBName (packPTH "test_key")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "result")))
                         (DBName (packPTH "result")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "passingDate")))
                         (DBName (packPTH "passing_date")))
                        ((FTTypeCon Nothing) (packPTH "UTCTime")))
                       SqlDayTime)
                      [])
                     True)
                    NoReference])
                [])
               [])
              [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
             (Data.Map.Internal.fromList []))
            False
      toPersistFields (TestResult x_a32v5 x_a32v6 x_a32v7)
        = [SomePersistField x_a32v5, SomePersistField x_a32v6,
           SomePersistField x_a32v7]
      fromPersistValues [x1_a32v9, x2_a32va, x3_a32vb]
        = TestResult
            <$>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "testKey")))
                 . fromPersistValue)
                x1_a32v9
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "result")))
                 . fromPersistValue)
                x2_a32va
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "passingDate")))
                 . fromPersistValue)
                x3_a32vb
      fromPersistValues x_a32v8
        = (Left
             $ ((mappend (packPTH "TestResult: fromPersistValues failed on: "))
                  (pack $ (show x_a32v8))))
      persistUniqueToFieldNames _
        = error "Degenerate case, should never happen"
      persistUniqueToValues _
        = error "Degenerate case, should never happen"
      persistUniqueKeys
        (TestResult _testKey_a32vc _result_a32vd _passingDate_a32ve)
        = []
      persistFieldDef TestResultId
        = ((((((FieldDef (HaskellName (packPTH "Id")))
                 (DBName (packPTH "id")))
                ((FTTypeCon Nothing) (packPTH "TestResultId")))
               SqlInt64)
              [])
             True)
            ((ForeignRef (HaskellName (packPTH "TestResult")))
               ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))
      persistFieldDef TestResultTestKey
        = ((((((FieldDef (HaskellName (packPTH "testKey")))
                 (DBName (packPTH "test_key")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef TestResultResult
        = ((((((FieldDef (HaskellName (packPTH "result")))
                 (DBName (packPTH "result")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef TestResultPassingDate
        = ((((((FieldDef (HaskellName (packPTH "passingDate")))
                 (DBName (packPTH "passing_date")))
                ((FTTypeCon Nothing) (packPTH "UTCTime")))
               SqlDayTime)
              [])
             True)
            NoReference
      persistIdField = TestResultId
      fieldLens TestResultId
        = (lensPTH entityKey)
            (\ Entity _ value_a32vf key_a32vg
               -> (Entity key_a32vg) value_a32vf)
      fieldLens TestResultTestKey
        = (lensPTH (testResultTestKey . entityVal))
            (\ Entity key_a32vh value_a32vi x_a32vj
               -> (Entity key_a32vh) value_a32vi {testResultTestKey = x_a32vj})
      fieldLens TestResultResult
        = (lensPTH (testResultResult . entityVal))
            (\ Entity key_a32vh value_a32vi x_a32vj
               -> (Entity key_a32vh) value_a32vi {testResultResult = x_a32vj})
      fieldLens TestResultPassingDate
        = (lensPTH (testResultPassingDate . entityVal))
            (\ Entity key_a32vh value_a32vi x_a32vj
               -> (Entity key_a32vh)
                    value_a32vi {testResultPassingDate = x_a32vj})
    instance ToBackendKey MongoContext TestResult where
      toBackendKey = unTestResultKey
      fromBackendKey = TestResultKey
    data User
      = User {userUsername :: !Text,
              userPassword :: !Text,
              userEmail :: !Text,
              userAvatar :: !Text,
              userFirstName :: !(Maybe Text),
              userSecondName :: !(Maybe Text),
              userBirthDay :: !(Maybe UTCTime),
              userSex :: !(Maybe Int),
              userCreatedTests :: ![ObjectId],
              userPassedTests :: ![TestResult]}
      deriving (Eq, Read, Show, Generic)
    type UserId = Key User
    instance PersistEntity User where
      type PersistEntityBackend User = MongoContext
      data Unique User = Email Text | Username Text
      newtype Key User
        = UserKey {unUserKey :: (BackendKey MongoContext)}
        deriving (Show,
                  Read,
                  Eq,
                  Ord,
                  path-pieces-0.2.1:Web.PathPieces.PathPiece,
                  http-api-data-0.3.7.2:Web.Internal.HttpApiData.ToHttpApiData,
                  http-api-data-0.3.7.2:Web.Internal.HttpApiData.FromHttpApiData,
                  PersistField,
                  persistent-2.8.1:Database.Persist.Sql.Class.PersistFieldSql,
                  Aeson.ToJSON,
                  Aeson.FromJSON)
      data EntityField User typ
        = typ ~ Key User => UserId |
          typ ~ Text => UserUsername |
          typ ~ Text => UserPassword |
          typ ~ Text => UserEmail |
          typ ~ Text => UserAvatar |
          typ ~ Maybe Text => UserFirstName |
          typ ~ Maybe Text => UserSecondName |
          typ ~ Maybe UTCTime => UserBirthDay |
          typ ~ Maybe Int => UserSex |
          typ ~ [ObjectId] => UserCreatedTests |
          typ ~ [TestResult] => UserPassedTests
      keyToValues
        = ((ghc-prim-0.5.1.1:GHC.Types.: [])
             . (toPersistValue . unUserKey))
      keyFromValues
        = ((fmap UserKey)
             . (fromPersistValue . Database.Persist.TH.headNote))
      entityDef _
        = (((((((((EntityDef (HaskellName (packPTH "User")))
                    (DBName (packPTH "user")))
                   (((((((FieldDef (HaskellName (packPTH "Id")))
                           (DBName (packPTH "id")))
                          ((FTTypeCon Nothing) (packPTH "UserId")))
                         SqlInt64)
                        [])
                       True)
                      ((ForeignRef (HaskellName (packPTH "User")))
                         ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                  [])
                 [((((((FieldDef (HaskellName (packPTH "username")))
                         (DBName (packPTH "username")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "password")))
                         (DBName (packPTH "password")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "email")))
                         (DBName (packPTH "email")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "avatar")))
                         (DBName (packPTH "avatar")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "firstName")))
                         (DBName (packPTH "first_name")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [packPTH "Maybe"])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "secondName")))
                         (DBName (packPTH "second_name")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [packPTH "Maybe"])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "birthDay")))
                         (DBName (packPTH "birth_day")))
                        ((FTTypeCon Nothing) (packPTH "UTCTime")))
                       SqlDayTime)
                      [packPTH "Maybe"])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "sex")))
                         (DBName (packPTH "sex")))
                        ((FTTypeCon Nothing) (packPTH "Int")))
                       SqlInt64)
                      [packPTH "Maybe"])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "createdTests")))
                         (DBName (packPTH "created_tests")))
                        (FTList ((FTTypeCon Nothing) (packPTH "ObjectId"))))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "passedTests")))
                         (DBName (packPTH "passed_tests")))
                        (FTList ((FTTypeCon Nothing) (packPTH "TestResult"))))
                       SqlString)
                      [])
                     True)
                    (EmbedRef
                       ((EmbedEntityDef (HaskellName (packPTH "TestResult")))
                          [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing) Nothing,
                           ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                           ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                             Nothing]))])
                [(((UniqueDef (HaskellName (packPTH "Email")))
                     (DBName (packPTH "email")))
                    [(HaskellName (packPTH "email"), DBName (packPTH "email"))])
                   [],
                 (((UniqueDef (HaskellName (packPTH "Username")))
                     (DBName (packPTH "username")))
                    [(HaskellName (packPTH "username"), DBName (packPTH "username"))])
                   []])
               [])
              [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
             (Data.Map.Internal.fromList []))
            False
      toPersistFields
        (User x_a32vk
              x_a32vl
              x_a32vm
              x_a32vn
              x_a32vo
              x_a32vp
              x_a32vq
              x_a32vr
              x_a32vs
              x_a32vt)
        = [SomePersistField x_a32vk, SomePersistField x_a32vl,
           SomePersistField x_a32vm, SomePersistField x_a32vn,
           SomePersistField x_a32vo, SomePersistField x_a32vp,
           SomePersistField x_a32vq, SomePersistField x_a32vr,
           SomePersistField x_a32vs, SomePersistField x_a32vt]
      fromPersistValues
        [x1_a32vv,
         x2_a32vw,
         x3_a32vx,
         x4_a32vy,
         x5_a32vz,
         x6_a32vA,
         x7_a32vB,
         x8_a32vC,
         x9_a32vD,
         x10_a32vE]
        = User
            <$>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "username")))
                 . fromPersistValue)
                x1_a32vv
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "password")))
                 . fromPersistValue)
                x2_a32vw
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "email")))
                 . fromPersistValue)
                x3_a32vx
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "avatar")))
                 . fromPersistValue)
                x4_a32vy
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "firstName")))
                 . fromPersistValue)
                x5_a32vz
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "secondName")))
                 . fromPersistValue)
                x6_a32vA
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "birthDay")))
                 . fromPersistValue)
                x7_a32vB
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "sex")))
                 . fromPersistValue)
                x8_a32vC
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "createdTests")))
                 . fromPersistValue)
                x9_a32vD
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "passedTests")))
                 . fromPersistValue)
                x10_a32vE
      fromPersistValues x_a32vu
        = (Left
             $ ((mappend (packPTH "User: fromPersistValues failed on: "))
                  (pack $ (show x_a32vu))))
      persistUniqueToFieldNames Email {}
        = [(HaskellName (packPTH "email"), DBName (packPTH "email"))]
      persistUniqueToFieldNames Username {}
        = [(HaskellName (packPTH "username"), DBName (packPTH "username"))]
      persistUniqueToValues (Email x_a32vF) = [toPersistValue x_a32vF]
      persistUniqueToValues (Username x_a32vG) = [toPersistValue x_a32vG]
      persistUniqueKeys
        (User _username_a32vH
              _password_a32vI
              _email_a32vJ
              _avatar_a32vK
              _firstName_a32vL
              _secondName_a32vM
              _birthDay_a32vN
              _sex_a32vO
              _createdTests_a32vP
              _passedTests_a32vQ)
        = [Email _email_a32vJ, Username _username_a32vH]
      persistFieldDef UserId
        = ((((((FieldDef (HaskellName (packPTH "Id")))
                 (DBName (packPTH "id")))
                ((FTTypeCon Nothing) (packPTH "UserId")))
               SqlInt64)
              [])
             True)
            ((ForeignRef (HaskellName (packPTH "User")))
               ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))
      persistFieldDef UserUsername
        = ((((((FieldDef (HaskellName (packPTH "username")))
                 (DBName (packPTH "username")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef UserPassword
        = ((((((FieldDef (HaskellName (packPTH "password")))
                 (DBName (packPTH "password")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef UserEmail
        = ((((((FieldDef (HaskellName (packPTH "email")))
                 (DBName (packPTH "email")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef UserAvatar
        = ((((((FieldDef (HaskellName (packPTH "avatar")))
                 (DBName (packPTH "avatar")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef UserFirstName
        = ((((((FieldDef (HaskellName (packPTH "firstName")))
                 (DBName (packPTH "first_name")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [packPTH "Maybe"])
             True)
            NoReference
      persistFieldDef UserSecondName
        = ((((((FieldDef (HaskellName (packPTH "secondName")))
                 (DBName (packPTH "second_name")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [packPTH "Maybe"])
             True)
            NoReference
      persistFieldDef UserBirthDay
        = ((((((FieldDef (HaskellName (packPTH "birthDay")))
                 (DBName (packPTH "birth_day")))
                ((FTTypeCon Nothing) (packPTH "UTCTime")))
               SqlDayTime)
              [packPTH "Maybe"])
             True)
            NoReference
      persistFieldDef UserSex
        = ((((((FieldDef (HaskellName (packPTH "sex")))
                 (DBName (packPTH "sex")))
                ((FTTypeCon Nothing) (packPTH "Int")))
               SqlInt64)
              [packPTH "Maybe"])
             True)
            NoReference
      persistFieldDef UserCreatedTests
        = ((((((FieldDef (HaskellName (packPTH "createdTests")))
                 (DBName (packPTH "created_tests")))
                (FTList ((FTTypeCon Nothing) (packPTH "ObjectId"))))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef UserPassedTests
        = ((((((FieldDef (HaskellName (packPTH "passedTests")))
                 (DBName (packPTH "passed_tests")))
                (FTList ((FTTypeCon Nothing) (packPTH "TestResult"))))
               SqlString)
              [])
             True)
            (EmbedRef
               ((EmbedEntityDef (HaskellName (packPTH "TestResult")))
                  [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing) Nothing,
                   ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                   ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                     Nothing]))
      persistIdField = UserId
      fieldLens UserId
        = (lensPTH entityKey)
            (\ Entity _ value_a32vR key_a32vS
               -> (Entity key_a32vS) value_a32vR)
      fieldLens UserUsername
        = (lensPTH (userUsername . entityVal))
            (\ Entity key_a32vT value_a32vU x_a32vV
               -> (Entity key_a32vT) value_a32vU {userUsername = x_a32vV})
      fieldLens UserPassword
        = (lensPTH (userPassword . entityVal))
            (\ Entity key_a32vT value_a32vU x_a32vV
               -> (Entity key_a32vT) value_a32vU {userPassword = x_a32vV})
      fieldLens UserEmail
        = (lensPTH (userEmail . entityVal))
            (\ Entity key_a32vT value_a32vU x_a32vV
               -> (Entity key_a32vT) value_a32vU {userEmail = x_a32vV})
      fieldLens UserAvatar
        = (lensPTH (userAvatar . entityVal))
            (\ Entity key_a32vT value_a32vU x_a32vV
               -> (Entity key_a32vT) value_a32vU {userAvatar = x_a32vV})
      fieldLens UserFirstName
        = (lensPTH (userFirstName . entityVal))
            (\ Entity key_a32vT value_a32vU x_a32vV
               -> (Entity key_a32vT) value_a32vU {userFirstName = x_a32vV})
      fieldLens UserSecondName
        = (lensPTH (userSecondName . entityVal))
            (\ Entity key_a32vT value_a32vU x_a32vV
               -> (Entity key_a32vT) value_a32vU {userSecondName = x_a32vV})
      fieldLens UserBirthDay
        = (lensPTH (userBirthDay . entityVal))
            (\ Entity key_a32vT value_a32vU x_a32vV
               -> (Entity key_a32vT) value_a32vU {userBirthDay = x_a32vV})
      fieldLens UserSex
        = (lensPTH (userSex . entityVal))
            (\ Entity key_a32vT value_a32vU x_a32vV
               -> (Entity key_a32vT) value_a32vU {userSex = x_a32vV})
      fieldLens UserCreatedTests
        = (lensPTH (userCreatedTests . entityVal))
            (\ Entity key_a32vT value_a32vU x_a32vV
               -> (Entity key_a32vT) value_a32vU {userCreatedTests = x_a32vV})
      fieldLens UserPassedTests
        = (lensPTH (userPassedTests . entityVal))
            (\ Entity key_a32vT value_a32vU x_a32vV
               -> (Entity key_a32vT) value_a32vU {userPassedTests = x_a32vV})
    instance ToBackendKey MongoContext User where
      toBackendKey = unUserKey
      fromBackendKey = UserKey
/home/nikita/Projects/labs/Databases/Course-Project/Server/src/Model/User.hs:(27,79)-(47,2): Splicing expression
    Language.Haskell.TH.Quote.quoteExp
      persistLowerCase
      "\n\
      \TestResult\n\
      \  testKey       Text\n\
      \  result        Text\n\
      \  passingDate   UTCTime\n\
      \  deriving      Eq Read Show Generic\n\
      \User\n\
      \  username      Text\n\
      \  password      Text\n\
      \  email         Text\n\
      \  avatar        Text\n\
      \  firstName     Text Maybe\n\
      \  secondName    Text Maybe\n\
      \  birthDay      UTCTime Maybe\n\
      \  sex           Int Maybe\n\
      \  createdTests  [ObjectId]\n\
      \  passedTests   [TestResult]\n\
      \  Email         email\n\
      \  Username      username\n\
      \  deriving      Eq Read Show Generic\n"
  ======>
    [(((((((((EntityDef (HaskellName (packPTH "TestResult")))
               (DBName (packPTH "test_result")))
              (((((((FieldDef (HaskellName (packPTH "Id")))
                      (DBName (packPTH "id")))
                     ((FTTypeCon Nothing) (packPTH "TestResultId")))
                    SqlInt64)
                   [])
                  True)
                 ((ForeignRef (HaskellName (packPTH "TestResult")))
                    ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
             [])
            [((((((FieldDef (HaskellName (packPTH "testKey")))
                    (DBName (packPTH "test_key")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for testKey")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "result")))
                    (DBName (packPTH "result")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for result")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "passingDate")))
                    (DBName (packPTH "passing_date")))
                   ((FTTypeCon Nothing) (packPTH "UTCTime")))
                  (SqlOther (packPTH "SqlType unset for passingDate")))
                 [])
                True)
               NoReference])
           [])
          [])
         [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
        (Data.Map.Internal.fromList []))
       False
       {entityFields = [((((((FieldDef (HaskellName (packPTH "testKey")))
                               (DBName (packPTH "test_key")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "result")))
                               (DBName (packPTH "result")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "passingDate")))
                               (DBName (packPTH "passing_date")))
                              ((FTTypeCon Nothing) (packPTH "UTCTime")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy UTCTime)))
                            [])
                           True)
                          NoReference],
        entityId = ((((((FieldDef (HaskellName (packPTH "Id")))
                          (DBName (packPTH "id")))
                         ((FTTypeCon Nothing) (packPTH "TestResultId")))
                        (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                           (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                       [])
                      True)
                     ((ForeignRef (HaskellName (packPTH "TestResult")))
                        ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))},
     (((((((((EntityDef (HaskellName (packPTH "User")))
               (DBName (packPTH "user")))
              (((((((FieldDef (HaskellName (packPTH "Id")))
                      (DBName (packPTH "id")))
                     ((FTTypeCon Nothing) (packPTH "UserId")))
                    SqlInt64)
                   [])
                  True)
                 ((ForeignRef (HaskellName (packPTH "User")))
                    ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
             [])
            [((((((FieldDef (HaskellName (packPTH "username")))
                    (DBName (packPTH "username")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for username")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "password")))
                    (DBName (packPTH "password")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for password")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "email")))
                    (DBName (packPTH "email")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for email")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "avatar")))
                    (DBName (packPTH "avatar")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for avatar")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "firstName")))
                    (DBName (packPTH "first_name")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for firstName")))
                 [packPTH "Maybe"])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "secondName")))
                    (DBName (packPTH "second_name")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for secondName")))
                 [packPTH "Maybe"])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "birthDay")))
                    (DBName (packPTH "birth_day")))
                   ((FTTypeCon Nothing) (packPTH "UTCTime")))
                  (SqlOther (packPTH "SqlType unset for birthDay")))
                 [packPTH "Maybe"])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "sex")))
                    (DBName (packPTH "sex")))
                   ((FTTypeCon Nothing) (packPTH "Int")))
                  (SqlOther (packPTH "SqlType unset for sex")))
                 [packPTH "Maybe"])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "createdTests")))
                    (DBName (packPTH "created_tests")))
                   (FTList ((FTTypeCon Nothing) (packPTH "ObjectId"))))
                  (SqlOther (packPTH "SqlType unset for createdTests")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "passedTests")))
                    (DBName (packPTH "passed_tests")))
                   (FTList ((FTTypeCon Nothing) (packPTH "TestResult"))))
                  (SqlOther (packPTH "SqlType unset for passedTests")))
                 [])
                True)
               (EmbedRef
                  ((EmbedEntityDef (HaskellName (packPTH "TestResult")))
                     [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing) Nothing,
                      ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                      ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                        Nothing]))])
           [(((UniqueDef (HaskellName (packPTH "Email")))
                (DBName (packPTH "email")))
               [(HaskellName (packPTH "email"), DBName (packPTH "email"))])
              [],
            (((UniqueDef (HaskellName (packPTH "Username")))
                (DBName (packPTH "username")))
               [(HaskellName (packPTH "username"), DBName (packPTH "username"))])
              []])
          [])
         [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
        (Data.Map.Internal.fromList []))
       False
       {entityFields = [((((((FieldDef (HaskellName (packPTH "username")))
                               (DBName (packPTH "username")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "password")))
                               (DBName (packPTH "password")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "email")))
                               (DBName (packPTH "email")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "avatar")))
                               (DBName (packPTH "avatar")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "firstName")))
                               (DBName (packPTH "first_name")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [packPTH "Maybe"])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "secondName")))
                               (DBName (packPTH "second_name")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [packPTH "Maybe"])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "birthDay")))
                               (DBName (packPTH "birth_day")))
                              ((FTTypeCon Nothing) (packPTH "UTCTime")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy UTCTime)))
                            [packPTH "Maybe"])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "sex")))
                               (DBName (packPTH "sex")))
                              ((FTTypeCon Nothing) (packPTH "Int")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Int)))
                            [packPTH "Maybe"])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "createdTests")))
                               (DBName (packPTH "created_tests")))
                              (FTList ((FTTypeCon Nothing) (packPTH "ObjectId"))))
                             SqlString)
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "passedTests")))
                               (DBName (packPTH "passed_tests")))
                              (FTList ((FTTypeCon Nothing) (packPTH "TestResult"))))
                             SqlString)
                            [])
                           True)
                          (EmbedRef
                             ((EmbedEntityDef (HaskellName (packPTH "TestResult")))
                                [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing) Nothing,
                                 ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                                 ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                                   Nothing]))],
        entityId = ((((((FieldDef (HaskellName (packPTH "Id")))
                          (DBName (packPTH "id")))
                         ((FTTypeCon Nothing) (packPTH "UserId")))
                        (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                           (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                       [])
                      True)
                     ((ForeignRef (HaskellName (packPTH "User")))
                        ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))}]
/home/nikita/Projects/labs/Databases/Course-Project/Server/src/Model/User.hs:(27,1)-(47,2): Splicing declarations
    share
      [mkPersist (mkPersistSettings (ConT ''MongoContext))]
      ([(((((((((EntityDef (HaskellName (packPTH "TestResult")))
                  (DBName (packPTH "test_result")))
                 (((((((FieldDef (HaskellName (packPTH "Id")))
                         (DBName (packPTH "id")))
                        ((FTTypeCon Nothing) (packPTH "TestResultId")))
                       SqlInt64)
                      [])
                     True)
                    ((ForeignRef (HaskellName (packPTH "TestResult")))
                       ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                [])
               [((((((FieldDef (HaskellName (packPTH "testKey")))
                       (DBName (packPTH "test_key")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for testKey")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "result")))
                       (DBName (packPTH "result")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for result")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "passingDate")))
                       (DBName (packPTH "passing_date")))
                      ((FTTypeCon Nothing) (packPTH "UTCTime")))
                     (SqlOther (packPTH "SqlType unset for passingDate")))
                    [])
                   True)
                  NoReference])
              [])
             [])
            [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
           (Data.Map.Internal.fromList []))
          False
          {entityFields = [((((((FieldDef (HaskellName (packPTH "testKey")))
                                  (DBName (packPTH "test_key")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "result")))
                                  (DBName (packPTH "result")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "passingDate")))
                                  (DBName (packPTH "passing_date")))
                                 ((FTTypeCon Nothing) (packPTH "UTCTime")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy UTCTime)))
                               [])
                              True)
                             NoReference],
           entityId = ((((((FieldDef (HaskellName (packPTH "Id")))
                             (DBName (packPTH "id")))
                            ((FTTypeCon Nothing) (packPTH "TestResultId")))
                           (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                              (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                          [])
                         True)
                        ((ForeignRef (HaskellName (packPTH "TestResult")))
                           ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))},
        (((((((((EntityDef (HaskellName (packPTH "User")))
                  (DBName (packPTH "user")))
                 (((((((FieldDef (HaskellName (packPTH "Id")))
                         (DBName (packPTH "id")))
                        ((FTTypeCon Nothing) (packPTH "UserId")))
                       SqlInt64)
                      [])
                     True)
                    ((ForeignRef (HaskellName (packPTH "User")))
                       ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                [])
               [((((((FieldDef (HaskellName (packPTH "username")))
                       (DBName (packPTH "username")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for username")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "password")))
                       (DBName (packPTH "password")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for password")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "email")))
                       (DBName (packPTH "email")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for email")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "avatar")))
                       (DBName (packPTH "avatar")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for avatar")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "firstName")))
                       (DBName (packPTH "first_name")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for firstName")))
                    [packPTH "Maybe"])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "secondName")))
                       (DBName (packPTH "second_name")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for secondName")))
                    [packPTH "Maybe"])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "birthDay")))
                       (DBName (packPTH "birth_day")))
                      ((FTTypeCon Nothing) (packPTH "UTCTime")))
                     (SqlOther (packPTH "SqlType unset for birthDay")))
                    [packPTH "Maybe"])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "sex")))
                       (DBName (packPTH "sex")))
                      ((FTTypeCon Nothing) (packPTH "Int")))
                     (SqlOther (packPTH "SqlType unset for sex")))
                    [packPTH "Maybe"])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "createdTests")))
                       (DBName (packPTH "created_tests")))
                      (FTList ((FTTypeCon Nothing) (packPTH "ObjectId"))))
                     (SqlOther (packPTH "SqlType unset for createdTests")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "passedTests")))
                       (DBName (packPTH "passed_tests")))
                      (FTList ((FTTypeCon Nothing) (packPTH "TestResult"))))
                     (SqlOther (packPTH "SqlType unset for passedTests")))
                    [])
                   True)
                  (EmbedRef
                     ((EmbedEntityDef (HaskellName (packPTH "TestResult")))
                        [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing) Nothing,
                         ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                         ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                           Nothing]))])
              [(((UniqueDef (HaskellName (packPTH "Email")))
                   (DBName (packPTH "email")))
                  [(HaskellName (packPTH "email"), DBName (packPTH "email"))])
                 [],
               (((UniqueDef (HaskellName (packPTH "Username")))
                   (DBName (packPTH "username")))
                  [(HaskellName (packPTH "username"), DBName (packPTH "username"))])
                 []])
             [])
            [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
           (Data.Map.Internal.fromList []))
          False
          {entityFields = [((((((FieldDef (HaskellName (packPTH "username")))
                                  (DBName (packPTH "username")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "password")))
                                  (DBName (packPTH "password")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "email")))
                                  (DBName (packPTH "email")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "avatar")))
                                  (DBName (packPTH "avatar")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "firstName")))
                                  (DBName (packPTH "first_name")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [packPTH "Maybe"])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "secondName")))
                                  (DBName (packPTH "second_name")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [packPTH "Maybe"])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "birthDay")))
                                  (DBName (packPTH "birth_day")))
                                 ((FTTypeCon Nothing) (packPTH "UTCTime")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy UTCTime)))
                               [packPTH "Maybe"])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "sex")))
                                  (DBName (packPTH "sex")))
                                 ((FTTypeCon Nothing) (packPTH "Int")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Int)))
                               [packPTH "Maybe"])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "createdTests")))
                                  (DBName (packPTH "created_tests")))
                                 (FTList ((FTTypeCon Nothing) (packPTH "ObjectId"))))
                                SqlString)
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "passedTests")))
                                  (DBName (packPTH "passed_tests")))
                                 (FTList ((FTTypeCon Nothing) (packPTH "TestResult"))))
                                SqlString)
                               [])
                              True)
                             (EmbedRef
                                ((EmbedEntityDef (HaskellName (packPTH "TestResult")))
                                   [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing) Nothing,
                                    ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                                    ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                                      Nothing]))],
           entityId = ((((((FieldDef (HaskellName (packPTH "Id")))
                             (DBName (packPTH "id")))
                            ((FTTypeCon Nothing) (packPTH "UserId")))
                           (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                              (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                          [])
                         True)
                        ((ForeignRef (HaskellName (packPTH "User")))
                           ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))}])
  ======>
    instance PersistField TestResult where
      toPersistValue
        = \ ent_a35yd
            -> (PersistMap
                  $ ((Prelude.zip
                        ((Prelude.map pack) ["testKey", "result", "passingDate"]))
                       ((Prelude.map toPersistValue) $ (toPersistFields ent_a35yd))))
      fromPersistValue
        = ((\ x_a35ye
              -> let
                   columns_a35yf
                     = unordered-containers-0.2.9.0:Data.HashMap.Strict.fromList x_a35ye
                 in
                   (fromPersistValues
                      $ ((Prelude.map
                            (\ name_a35yg
                               -> case
                                      (unordered-containers-0.2.9.0:Data.HashMap.Base.lookup
                                         (pack name_a35yg))
                                        columns_a35yf
                                  of
                                    Just v_a35yh -> v_a35yh
                                    Nothing -> PersistNull))
                           $ ["testKey", "result", "passingDate"])))
             <=< getPersistMap)
    instance persistent-2.8.1:Database.Persist.Sql.Class.PersistFieldSql TestResult where
      persistent-2.8.1:Database.Persist.Sql.Class.sqlType _ = SqlString
    instance PersistField User where
      toPersistValue
        = \ ent_a35yi
            -> (PersistMap
                  $ ((Prelude.zip
                        ((Prelude.map pack)
                           ["username", "password", "email", "avatar", "firstName",
                            "secondName", "birthDay", "sex", "createdTests", "passedTests"]))
                       ((Prelude.map toPersistValue) $ (toPersistFields ent_a35yi))))
      fromPersistValue
        = ((\ x_a35yj
              -> let
                   columns_a35yk
                     = unordered-containers-0.2.9.0:Data.HashMap.Strict.fromList x_a35yj
                 in
                   (fromPersistValues
                      $ ((Prelude.map
                            (\ name_a35yl
                               -> case
                                      (unordered-containers-0.2.9.0:Data.HashMap.Base.lookup
                                         (pack name_a35yl))
                                        columns_a35yk
                                  of
                                    Just v_a35ym -> v_a35ym
                                    Nothing -> PersistNull))
                           $ ["username", "password", "email", "avatar", "firstName",
                              "secondName", "birthDay", "sex", "createdTests", "passedTests"])))
             <=< getPersistMap)
    instance persistent-2.8.1:Database.Persist.Sql.Class.PersistFieldSql User where
      persistent-2.8.1:Database.Persist.Sql.Class.sqlType _ = SqlString
    data TestResult
      = TestResult {testResultTestKey :: !Text,
                    testResultResult :: !Text,
                    testResultPassingDate :: !UTCTime}
      deriving (Eq, Read, Show, Generic)
    type TestResultId = Key TestResult
    instance PersistEntity TestResult where
      type PersistEntityBackend TestResult = MongoContext
      data Unique TestResult
      newtype Key TestResult
        = TestResultKey {unTestResultKey :: (BackendKey MongoContext)}
        deriving (Show,
                  Read,
                  Eq,
                  Ord,
                  path-pieces-0.2.1:Web.PathPieces.PathPiece,
                  http-api-data-0.3.7.2:Web.Internal.HttpApiData.ToHttpApiData,
                  http-api-data-0.3.7.2:Web.Internal.HttpApiData.FromHttpApiData,
                  PersistField,
                  persistent-2.8.1:Database.Persist.Sql.Class.PersistFieldSql,
                  Aeson.ToJSON,
                  Aeson.FromJSON)
      data EntityField TestResult typ
        = typ ~ Key TestResult => TestResultId |
          typ ~ Text => TestResultTestKey |
          typ ~ Text => TestResultResult |
          typ ~ UTCTime => TestResultPassingDate
      keyToValues
        = ((ghc-prim-0.5.1.1:GHC.Types.: [])
             . (toPersistValue . unTestResultKey))
      keyFromValues
        = ((fmap TestResultKey)
             . (fromPersistValue . Database.Persist.TH.headNote))
      entityDef _
        = (((((((((EntityDef (HaskellName (packPTH "TestResult")))
                    (DBName (packPTH "test_result")))
                   (((((((FieldDef (HaskellName (packPTH "Id")))
                           (DBName (packPTH "id")))
                          ((FTTypeCon Nothing) (packPTH "TestResultId")))
                         SqlInt64)
                        [])
                       True)
                      ((ForeignRef (HaskellName (packPTH "TestResult")))
                         ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                  [])
                 [((((((FieldDef (HaskellName (packPTH "testKey")))
                         (DBName (packPTH "test_key")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "result")))
                         (DBName (packPTH "result")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "passingDate")))
                         (DBName (packPTH "passing_date")))
                        ((FTTypeCon Nothing) (packPTH "UTCTime")))
                       SqlDayTime)
                      [])
                     True)
                    NoReference])
                [])
               [])
              [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
             (Data.Map.Internal.fromList []))
            False
      toPersistFields (TestResult x_a35yn x_a35yo x_a35yp)
        = [SomePersistField x_a35yn, SomePersistField x_a35yo,
           SomePersistField x_a35yp]
      fromPersistValues [x1_a35yr, x2_a35ys, x3_a35yt]
        = TestResult
            <$>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "testKey")))
                 . fromPersistValue)
                x1_a35yr
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "result")))
                 . fromPersistValue)
                x2_a35ys
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "passingDate")))
                 . fromPersistValue)
                x3_a35yt
      fromPersistValues x_a35yq
        = (Left
             $ ((mappend (packPTH "TestResult: fromPersistValues failed on: "))
                  (pack $ (show x_a35yq))))
      persistUniqueToFieldNames _
        = error "Degenerate case, should never happen"
      persistUniqueToValues _
        = error "Degenerate case, should never happen"
      persistUniqueKeys
        (TestResult _testKey_a35yu _result_a35yv _passingDate_a35yw)
        = []
      persistFieldDef TestResultId
        = ((((((FieldDef (HaskellName (packPTH "Id")))
                 (DBName (packPTH "id")))
                ((FTTypeCon Nothing) (packPTH "TestResultId")))
               SqlInt64)
              [])
             True)
            ((ForeignRef (HaskellName (packPTH "TestResult")))
               ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))
      persistFieldDef TestResultTestKey
        = ((((((FieldDef (HaskellName (packPTH "testKey")))
                 (DBName (packPTH "test_key")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef TestResultResult
        = ((((((FieldDef (HaskellName (packPTH "result")))
                 (DBName (packPTH "result")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef TestResultPassingDate
        = ((((((FieldDef (HaskellName (packPTH "passingDate")))
                 (DBName (packPTH "passing_date")))
                ((FTTypeCon Nothing) (packPTH "UTCTime")))
               SqlDayTime)
              [])
             True)
            NoReference
      persistIdField = TestResultId
      fieldLens TestResultId
        = (lensPTH entityKey)
            (\ Entity _ value_a35yx key_a35yy
               -> (Entity key_a35yy) value_a35yx)
      fieldLens TestResultTestKey
        = (lensPTH (testResultTestKey . entityVal))
            (\ Entity key_a35yz value_a35yA x_a35yB
               -> (Entity key_a35yz) value_a35yA {testResultTestKey = x_a35yB})
      fieldLens TestResultResult
        = (lensPTH (testResultResult . entityVal))
            (\ Entity key_a35yz value_a35yA x_a35yB
               -> (Entity key_a35yz) value_a35yA {testResultResult = x_a35yB})
      fieldLens TestResultPassingDate
        = (lensPTH (testResultPassingDate . entityVal))
            (\ Entity key_a35yz value_a35yA x_a35yB
               -> (Entity key_a35yz)
                    value_a35yA {testResultPassingDate = x_a35yB})
    instance ToBackendKey MongoContext TestResult where
      toBackendKey = unTestResultKey
      fromBackendKey = TestResultKey
    data User
      = User {userUsername :: !Text,
              userPassword :: !Text,
              userEmail :: !Text,
              userAvatar :: !Text,
              userFirstName :: !(Maybe Text),
              userSecondName :: !(Maybe Text),
              userBirthDay :: !(Maybe UTCTime),
              userSex :: !(Maybe Int),
              userCreatedTests :: ![ObjectId],
              userPassedTests :: ![TestResult]}
      deriving (Eq, Read, Show, Generic)
    type UserId = Key User
    instance PersistEntity User where
      type PersistEntityBackend User = MongoContext
      data Unique User = Email Text | Username Text
      newtype Key User
        = UserKey {unUserKey :: (BackendKey MongoContext)}
        deriving (Show,
                  Read,
                  Eq,
                  Ord,
                  path-pieces-0.2.1:Web.PathPieces.PathPiece,
                  http-api-data-0.3.7.2:Web.Internal.HttpApiData.ToHttpApiData,
                  http-api-data-0.3.7.2:Web.Internal.HttpApiData.FromHttpApiData,
                  PersistField,
                  persistent-2.8.1:Database.Persist.Sql.Class.PersistFieldSql,
                  Aeson.ToJSON,
                  Aeson.FromJSON)
      data EntityField User typ
        = typ ~ Key User => UserId |
          typ ~ Text => UserUsername |
          typ ~ Text => UserPassword |
          typ ~ Text => UserEmail |
          typ ~ Text => UserAvatar |
          typ ~ Maybe Text => UserFirstName |
          typ ~ Maybe Text => UserSecondName |
          typ ~ Maybe UTCTime => UserBirthDay |
          typ ~ Maybe Int => UserSex |
          typ ~ [ObjectId] => UserCreatedTests |
          typ ~ [TestResult] => UserPassedTests
      keyToValues
        = ((ghc-prim-0.5.1.1:GHC.Types.: [])
             . (toPersistValue . unUserKey))
      keyFromValues
        = ((fmap UserKey)
             . (fromPersistValue . Database.Persist.TH.headNote))
      entityDef _
        = (((((((((EntityDef (HaskellName (packPTH "User")))
                    (DBName (packPTH "user")))
                   (((((((FieldDef (HaskellName (packPTH "Id")))
                           (DBName (packPTH "id")))
                          ((FTTypeCon Nothing) (packPTH "UserId")))
                         SqlInt64)
                        [])
                       True)
                      ((ForeignRef (HaskellName (packPTH "User")))
                         ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                  [])
                 [((((((FieldDef (HaskellName (packPTH "username")))
                         (DBName (packPTH "username")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "password")))
                         (DBName (packPTH "password")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "email")))
                         (DBName (packPTH "email")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "avatar")))
                         (DBName (packPTH "avatar")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "firstName")))
                         (DBName (packPTH "first_name")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [packPTH "Maybe"])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "secondName")))
                         (DBName (packPTH "second_name")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [packPTH "Maybe"])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "birthDay")))
                         (DBName (packPTH "birth_day")))
                        ((FTTypeCon Nothing) (packPTH "UTCTime")))
                       SqlDayTime)
                      [packPTH "Maybe"])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "sex")))
                         (DBName (packPTH "sex")))
                        ((FTTypeCon Nothing) (packPTH "Int")))
                       SqlInt64)
                      [packPTH "Maybe"])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "createdTests")))
                         (DBName (packPTH "created_tests")))
                        (FTList ((FTTypeCon Nothing) (packPTH "ObjectId"))))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "passedTests")))
                         (DBName (packPTH "passed_tests")))
                        (FTList ((FTTypeCon Nothing) (packPTH "TestResult"))))
                       SqlString)
                      [])
                     True)
                    (EmbedRef
                       ((EmbedEntityDef (HaskellName (packPTH "TestResult")))
                          [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing) Nothing,
                           ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                           ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                             Nothing]))])
                [(((UniqueDef (HaskellName (packPTH "Email")))
                     (DBName (packPTH "email")))
                    [(HaskellName (packPTH "email"), DBName (packPTH "email"))])
                   [],
                 (((UniqueDef (HaskellName (packPTH "Username")))
                     (DBName (packPTH "username")))
                    [(HaskellName (packPTH "username"), DBName (packPTH "username"))])
                   []])
               [])
              [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
             (Data.Map.Internal.fromList []))
            False
      toPersistFields
        (User x_a35yC
              x_a35yD
              x_a35yE
              x_a35yF
              x_a35yG
              x_a35yH
              x_a35yI
              x_a35yJ
              x_a35yK
              x_a35yL)
        = [SomePersistField x_a35yC, SomePersistField x_a35yD,
           SomePersistField x_a35yE, SomePersistField x_a35yF,
           SomePersistField x_a35yG, SomePersistField x_a35yH,
           SomePersistField x_a35yI, SomePersistField x_a35yJ,
           SomePersistField x_a35yK, SomePersistField x_a35yL]
      fromPersistValues
        [x1_a35yN,
         x2_a35yO,
         x3_a35yP,
         x4_a35yQ,
         x5_a35yR,
         x6_a35yS,
         x7_a35yT,
         x8_a35yU,
         x9_a35yV,
         x10_a35yW]
        = User
            <$>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "username")))
                 . fromPersistValue)
                x1_a35yN
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "password")))
                 . fromPersistValue)
                x2_a35yO
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "email")))
                 . fromPersistValue)
                x3_a35yP
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "avatar")))
                 . fromPersistValue)
                x4_a35yQ
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "firstName")))
                 . fromPersistValue)
                x5_a35yR
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "secondName")))
                 . fromPersistValue)
                x6_a35yS
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "birthDay")))
                 . fromPersistValue)
                x7_a35yT
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "sex")))
                 . fromPersistValue)
                x8_a35yU
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "createdTests")))
                 . fromPersistValue)
                x9_a35yV
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "passedTests")))
                 . fromPersistValue)
                x10_a35yW
      fromPersistValues x_a35yM
        = (Left
             $ ((mappend (packPTH "User: fromPersistValues failed on: "))
                  (pack $ (show x_a35yM))))
      persistUniqueToFieldNames Email {}
        = [(HaskellName (packPTH "email"), DBName (packPTH "email"))]
      persistUniqueToFieldNames Username {}
        = [(HaskellName (packPTH "username"), DBName (packPTH "username"))]
      persistUniqueToValues (Email x_a35yX) = [toPersistValue x_a35yX]
      persistUniqueToValues (Username x_a35yY) = [toPersistValue x_a35yY]
      persistUniqueKeys
        (User _username_a35yZ
              _password_a35z0
              _email_a35z1
              _avatar_a35z2
              _firstName_a35z3
              _secondName_a35z4
              _birthDay_a35z5
              _sex_a35z6
              _createdTests_a35z7
              _passedTests_a35z8)
        = [Email _email_a35z1, Username _username_a35yZ]
      persistFieldDef UserId
        = ((((((FieldDef (HaskellName (packPTH "Id")))
                 (DBName (packPTH "id")))
                ((FTTypeCon Nothing) (packPTH "UserId")))
               SqlInt64)
              [])
             True)
            ((ForeignRef (HaskellName (packPTH "User")))
               ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))
      persistFieldDef UserUsername
        = ((((((FieldDef (HaskellName (packPTH "username")))
                 (DBName (packPTH "username")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef UserPassword
        = ((((((FieldDef (HaskellName (packPTH "password")))
                 (DBName (packPTH "password")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef UserEmail
        = ((((((FieldDef (HaskellName (packPTH "email")))
                 (DBName (packPTH "email")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef UserAvatar
        = ((((((FieldDef (HaskellName (packPTH "avatar")))
                 (DBName (packPTH "avatar")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef UserFirstName
        = ((((((FieldDef (HaskellName (packPTH "firstName")))
                 (DBName (packPTH "first_name")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [packPTH "Maybe"])
             True)
            NoReference
      persistFieldDef UserSecondName
        = ((((((FieldDef (HaskellName (packPTH "secondName")))
                 (DBName (packPTH "second_name")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [packPTH "Maybe"])
             True)
            NoReference
      persistFieldDef UserBirthDay
        = ((((((FieldDef (HaskellName (packPTH "birthDay")))
                 (DBName (packPTH "birth_day")))
                ((FTTypeCon Nothing) (packPTH "UTCTime")))
               SqlDayTime)
              [packPTH "Maybe"])
             True)
            NoReference
      persistFieldDef UserSex
        = ((((((FieldDef (HaskellName (packPTH "sex")))
                 (DBName (packPTH "sex")))
                ((FTTypeCon Nothing) (packPTH "Int")))
               SqlInt64)
              [packPTH "Maybe"])
             True)
            NoReference
      persistFieldDef UserCreatedTests
        = ((((((FieldDef (HaskellName (packPTH "createdTests")))
                 (DBName (packPTH "created_tests")))
                (FTList ((FTTypeCon Nothing) (packPTH "ObjectId"))))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef UserPassedTests
        = ((((((FieldDef (HaskellName (packPTH "passedTests")))
                 (DBName (packPTH "passed_tests")))
                (FTList ((FTTypeCon Nothing) (packPTH "TestResult"))))
               SqlString)
              [])
             True)
            (EmbedRef
               ((EmbedEntityDef (HaskellName (packPTH "TestResult")))
                  [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing) Nothing,
                   ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                   ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                     Nothing]))
      persistIdField = UserId
      fieldLens UserId
        = (lensPTH entityKey)
            (\ Entity _ value_a35z9 key_a35za
               -> (Entity key_a35za) value_a35z9)
      fieldLens UserUsername
        = (lensPTH (userUsername . entityVal))
            (\ Entity key_a35zb value_a35zc x_a35zd
               -> (Entity key_a35zb) value_a35zc {userUsername = x_a35zd})
      fieldLens UserPassword
        = (lensPTH (userPassword . entityVal))
            (\ Entity key_a35zb value_a35zc x_a35zd
               -> (Entity key_a35zb) value_a35zc {userPassword = x_a35zd})
      fieldLens UserEmail
        = (lensPTH (userEmail . entityVal))
            (\ Entity key_a35zb value_a35zc x_a35zd
               -> (Entity key_a35zb) value_a35zc {userEmail = x_a35zd})
      fieldLens UserAvatar
        = (lensPTH (userAvatar . entityVal))
            (\ Entity key_a35zb value_a35zc x_a35zd
               -> (Entity key_a35zb) value_a35zc {userAvatar = x_a35zd})
      fieldLens UserFirstName
        = (lensPTH (userFirstName . entityVal))
            (\ Entity key_a35zb value_a35zc x_a35zd
               -> (Entity key_a35zb) value_a35zc {userFirstName = x_a35zd})
      fieldLens UserSecondName
        = (lensPTH (userSecondName . entityVal))
            (\ Entity key_a35zb value_a35zc x_a35zd
               -> (Entity key_a35zb) value_a35zc {userSecondName = x_a35zd})
      fieldLens UserBirthDay
        = (lensPTH (userBirthDay . entityVal))
            (\ Entity key_a35zb value_a35zc x_a35zd
               -> (Entity key_a35zb) value_a35zc {userBirthDay = x_a35zd})
      fieldLens UserSex
        = (lensPTH (userSex . entityVal))
            (\ Entity key_a35zb value_a35zc x_a35zd
               -> (Entity key_a35zb) value_a35zc {userSex = x_a35zd})
      fieldLens UserCreatedTests
        = (lensPTH (userCreatedTests . entityVal))
            (\ Entity key_a35zb value_a35zc x_a35zd
               -> (Entity key_a35zb) value_a35zc {userCreatedTests = x_a35zd})
      fieldLens UserPassedTests
        = (lensPTH (userPassedTests . entityVal))
            (\ Entity key_a35zb value_a35zc x_a35zd
               -> (Entity key_a35zb) value_a35zc {userPassedTests = x_a35zd})
    instance ToBackendKey MongoContext User where
      toBackendKey = unUserKey
      fromBackendKey = UserKey
