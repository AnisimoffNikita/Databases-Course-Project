/home/nikita/Projects/labs/Databases/Course-Project/Server/src/Model/User.hs:(27,78)-(57,2): Splicing expression
    Language.Haskell.TH.Quote.quoteExp
      persistLowerCase
      "\n\
      \Question json\n\
      \  text    Text\n\
      \  option  QuestionOptions\n\
      \  answer  QuestionAnswer\n\
      \  deriving Eq Read Show Generic\n\
      \Quiz json\n\
      \  name            Text\n\
      \  description     Text\n\
      \  creationDate    UTCTime\n\
      \  passingNumber   Int\n\
      \  question        Question\n\
      \  deriving Eq Read Show Generic\n\
      \QuizResult json\n\
      \  testKey         Text\n\
      \  result          Text\n\
      \  passingDate     UTCTime\n\
      \  deriving        Eq Read Show Generic\n\
      \User json\n\
      \  username        Text\n\
      \  password        Text\n\
      \  email           Text\n\
      \  avatar          Text\n\
      \  firstName       Text Maybe\n\
      \  secondName      Text Maybe\n\
      \  birthDay        UTCTime Maybe\n\
      \  sex             Gender Maybe\n\
      \  createdQuizzes  [QuizId]\n\
      \  passedQuizzes   [QuizResult]\n\
      \  deriving        Eq Read Show Generic\n"
  ======>
    [(((((((((EntityDef (HaskellName (packPTH "Question")))
               (DBName (packPTH "question")))
              (((((((FieldDef (HaskellName (packPTH "Id")))
                      (DBName (packPTH "id")))
                     ((FTTypeCon Nothing) (packPTH "QuestionId")))
                    SqlInt64)
                   [])
                  True)
                 ((ForeignRef (HaskellName (packPTH "Question")))
                    ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
             [packPTH "json"])
            [((((((FieldDef (HaskellName (packPTH "text")))
                    (DBName (packPTH "text")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for text")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "option")))
                    (DBName (packPTH "option")))
                   ((FTTypeCon Nothing) (packPTH "QuestionOptions")))
                  (SqlOther (packPTH "SqlType unset for option")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "answer")))
                    (DBName (packPTH "answer")))
                   ((FTTypeCon Nothing) (packPTH "QuestionAnswer")))
                  (SqlOther (packPTH "SqlType unset for answer")))
                 [])
                True)
               NoReference])
           [])
          [])
         [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
        (Data.Map.Internal.fromList []))
       False
       {entityFields = [((((((FieldDef (HaskellName (packPTH "text")))
                               (DBName (packPTH "text")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "option")))
                               (DBName (packPTH "option")))
                              ((FTTypeCon Nothing) (packPTH "QuestionOptions")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy QuestionOptions)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "answer")))
                               (DBName (packPTH "answer")))
                              ((FTTypeCon Nothing) (packPTH "QuestionAnswer")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy QuestionAnswer)))
                            [])
                           True)
                          NoReference],
        entityId = ((((((FieldDef (HaskellName (packPTH "Id")))
                          (DBName (packPTH "id")))
                         ((FTTypeCon Nothing) (packPTH "QuestionId")))
                        (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                           (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                       [])
                      True)
                     ((ForeignRef (HaskellName (packPTH "Question")))
                        ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))},
     (((((((((EntityDef (HaskellName (packPTH "Quiz")))
               (DBName (packPTH "quiz")))
              (((((((FieldDef (HaskellName (packPTH "Id")))
                      (DBName (packPTH "id")))
                     ((FTTypeCon Nothing) (packPTH "QuizId")))
                    SqlInt64)
                   [])
                  True)
                 ((ForeignRef (HaskellName (packPTH "Quiz")))
                    ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
             [packPTH "json"])
            [((((((FieldDef (HaskellName (packPTH "name")))
                    (DBName (packPTH "name")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for name")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "description")))
                    (DBName (packPTH "description")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for description")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "creationDate")))
                    (DBName (packPTH "creation_date")))
                   ((FTTypeCon Nothing) (packPTH "UTCTime")))
                  (SqlOther (packPTH "SqlType unset for creationDate")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "passingNumber")))
                    (DBName (packPTH "passing_number")))
                   ((FTTypeCon Nothing) (packPTH "Int")))
                  (SqlOther (packPTH "SqlType unset for passingNumber")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "question")))
                    (DBName (packPTH "question")))
                   ((FTTypeCon Nothing) (packPTH "Question")))
                  (SqlOther (packPTH "SqlType unset for question")))
                 [])
                True)
               (EmbedRef
                  ((EmbedEntityDef (HaskellName (packPTH "Question")))
                     [((EmbedFieldDef (DBName (packPTH "text"))) Nothing) Nothing,
                      ((EmbedFieldDef (DBName (packPTH "option"))) Nothing) Nothing,
                      ((EmbedFieldDef (DBName (packPTH "answer"))) Nothing) Nothing]))])
           [])
          [])
         [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
        (Data.Map.Internal.fromList []))
       False
       {entityFields = [((((((FieldDef (HaskellName (packPTH "name")))
                               (DBName (packPTH "name")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "description")))
                               (DBName (packPTH "description")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "creationDate")))
                               (DBName (packPTH "creation_date")))
                              ((FTTypeCon Nothing) (packPTH "UTCTime")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy UTCTime)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "passingNumber")))
                               (DBName (packPTH "passing_number")))
                              ((FTTypeCon Nothing) (packPTH "Int")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Int)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "question")))
                               (DBName (packPTH "question")))
                              ((FTTypeCon Nothing) (packPTH "Question")))
                             SqlString)
                            [])
                           True)
                          (EmbedRef
                             ((EmbedEntityDef (HaskellName (packPTH "Question")))
                                [((EmbedFieldDef (DBName (packPTH "text"))) Nothing) Nothing,
                                 ((EmbedFieldDef (DBName (packPTH "option"))) Nothing) Nothing,
                                 ((EmbedFieldDef (DBName (packPTH "answer"))) Nothing) Nothing]))],
        entityId = ((((((FieldDef (HaskellName (packPTH "Id")))
                          (DBName (packPTH "id")))
                         ((FTTypeCon Nothing) (packPTH "QuizId")))
                        (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                           (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                       [])
                      True)
                     ((ForeignRef (HaskellName (packPTH "Quiz")))
                        ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))},
     (((((((((EntityDef (HaskellName (packPTH "QuizResult")))
               (DBName (packPTH "quiz_result")))
              (((((((FieldDef (HaskellName (packPTH "Id")))
                      (DBName (packPTH "id")))
                     ((FTTypeCon Nothing) (packPTH "QuizResultId")))
                    SqlInt64)
                   [])
                  True)
                 ((ForeignRef (HaskellName (packPTH "QuizResult")))
                    ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
             [packPTH "json"])
            [((((((FieldDef (HaskellName (packPTH "testKey")))
                    (DBName (packPTH "test_key")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for testKey")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "result")))
                    (DBName (packPTH "result")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for result")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "passingDate")))
                    (DBName (packPTH "passing_date")))
                   ((FTTypeCon Nothing) (packPTH "UTCTime")))
                  (SqlOther (packPTH "SqlType unset for passingDate")))
                 [])
                True)
               NoReference])
           [])
          [])
         [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
        (Data.Map.Internal.fromList []))
       False
       {entityFields = [((((((FieldDef (HaskellName (packPTH "testKey")))
                               (DBName (packPTH "test_key")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "result")))
                               (DBName (packPTH "result")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "passingDate")))
                               (DBName (packPTH "passing_date")))
                              ((FTTypeCon Nothing) (packPTH "UTCTime")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy UTCTime)))
                            [])
                           True)
                          NoReference],
        entityId = ((((((FieldDef (HaskellName (packPTH "Id")))
                          (DBName (packPTH "id")))
                         ((FTTypeCon Nothing) (packPTH "QuizResultId")))
                        (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                           (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                       [])
                      True)
                     ((ForeignRef (HaskellName (packPTH "QuizResult")))
                        ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))},
     (((((((((EntityDef (HaskellName (packPTH "User")))
               (DBName (packPTH "user")))
              (((((((FieldDef (HaskellName (packPTH "Id")))
                      (DBName (packPTH "id")))
                     ((FTTypeCon Nothing) (packPTH "UserId")))
                    SqlInt64)
                   [])
                  True)
                 ((ForeignRef (HaskellName (packPTH "User")))
                    ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
             [packPTH "json"])
            [((((((FieldDef (HaskellName (packPTH "username")))
                    (DBName (packPTH "username")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for username")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "password")))
                    (DBName (packPTH "password")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for password")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "email")))
                    (DBName (packPTH "email")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for email")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "avatar")))
                    (DBName (packPTH "avatar")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for avatar")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "firstName")))
                    (DBName (packPTH "first_name")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for firstName")))
                 [packPTH "Maybe"])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "secondName")))
                    (DBName (packPTH "second_name")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for secondName")))
                 [packPTH "Maybe"])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "birthDay")))
                    (DBName (packPTH "birth_day")))
                   ((FTTypeCon Nothing) (packPTH "UTCTime")))
                  (SqlOther (packPTH "SqlType unset for birthDay")))
                 [packPTH "Maybe"])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "sex")))
                    (DBName (packPTH "sex")))
                   ((FTTypeCon Nothing) (packPTH "Gender")))
                  (SqlOther (packPTH "SqlType unset for sex")))
                 [packPTH "Maybe"])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "createdQuizzes")))
                    (DBName (packPTH "created_quizzes")))
                   (FTList ((FTTypeCon Nothing) (packPTH "QuizId"))))
                  (SqlOther (packPTH "SqlType unset for createdQuizzes")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "passedQuizzes")))
                    (DBName (packPTH "passed_quizzes")))
                   (FTList ((FTTypeCon Nothing) (packPTH "QuizResult"))))
                  (SqlOther (packPTH "SqlType unset for passedQuizzes")))
                 [])
                True)
               (EmbedRef
                  ((EmbedEntityDef (HaskellName (packPTH "QuizResult")))
                     [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing) Nothing,
                      ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                      ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                        Nothing]))])
           [])
          [])
         [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
        (Data.Map.Internal.fromList []))
       False
       {entityFields = [((((((FieldDef (HaskellName (packPTH "username")))
                               (DBName (packPTH "username")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "password")))
                               (DBName (packPTH "password")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "email")))
                               (DBName (packPTH "email")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "avatar")))
                               (DBName (packPTH "avatar")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "firstName")))
                               (DBName (packPTH "first_name")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [packPTH "Maybe"])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "secondName")))
                               (DBName (packPTH "second_name")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [packPTH "Maybe"])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "birthDay")))
                               (DBName (packPTH "birth_day")))
                              ((FTTypeCon Nothing) (packPTH "UTCTime")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy UTCTime)))
                            [packPTH "Maybe"])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "sex")))
                               (DBName (packPTH "sex")))
                              ((FTTypeCon Nothing) (packPTH "Gender")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Gender)))
                            [packPTH "Maybe"])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "createdQuizzes")))
                               (DBName (packPTH "created_quizzes")))
                              (FTList ((FTTypeCon Nothing) (packPTH "QuizId"))))
                             SqlString)
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "passedQuizzes")))
                               (DBName (packPTH "passed_quizzes")))
                              (FTList ((FTTypeCon Nothing) (packPTH "QuizResult"))))
                             SqlString)
                            [])
                           True)
                          (EmbedRef
                             ((EmbedEntityDef (HaskellName (packPTH "QuizResult")))
                                [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing) Nothing,
                                 ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                                 ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                                   Nothing]))],
        entityId = ((((((FieldDef (HaskellName (packPTH "Id")))
                          (DBName (packPTH "id")))
                         ((FTTypeCon Nothing) (packPTH "UserId")))
                        (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                           (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                       [])
                      True)
                     ((ForeignRef (HaskellName (packPTH "User")))
                        ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))}]
/home/nikita/Projects/labs/Databases/Course-Project/Server/src/Model/User.hs:(27,1)-(57,2): Splicing declarations
    share
      [mkPersist (mkPersistSettings (ConT ''MongoContext))]
      ([(((((((((EntityDef (HaskellName (packPTH "Question")))
                  (DBName (packPTH "question")))
                 (((((((FieldDef (HaskellName (packPTH "Id")))
                         (DBName (packPTH "id")))
                        ((FTTypeCon Nothing) (packPTH "QuestionId")))
                       SqlInt64)
                      [])
                     True)
                    ((ForeignRef (HaskellName (packPTH "Question")))
                       ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                [packPTH "json"])
               [((((((FieldDef (HaskellName (packPTH "text")))
                       (DBName (packPTH "text")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for text")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "option")))
                       (DBName (packPTH "option")))
                      ((FTTypeCon Nothing) (packPTH "QuestionOptions")))
                     (SqlOther (packPTH "SqlType unset for option")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "answer")))
                       (DBName (packPTH "answer")))
                      ((FTTypeCon Nothing) (packPTH "QuestionAnswer")))
                     (SqlOther (packPTH "SqlType unset for answer")))
                    [])
                   True)
                  NoReference])
              [])
             [])
            [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
           (Data.Map.Internal.fromList []))
          False
          {entityFields = [((((((FieldDef (HaskellName (packPTH "text")))
                                  (DBName (packPTH "text")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "option")))
                                  (DBName (packPTH "option")))
                                 ((FTTypeCon Nothing) (packPTH "QuestionOptions")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy QuestionOptions)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "answer")))
                                  (DBName (packPTH "answer")))
                                 ((FTTypeCon Nothing) (packPTH "QuestionAnswer")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy QuestionAnswer)))
                               [])
                              True)
                             NoReference],
           entityId = ((((((FieldDef (HaskellName (packPTH "Id")))
                             (DBName (packPTH "id")))
                            ((FTTypeCon Nothing) (packPTH "QuestionId")))
                           (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                              (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                          [])
                         True)
                        ((ForeignRef (HaskellName (packPTH "Question")))
                           ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))},
        (((((((((EntityDef (HaskellName (packPTH "Quiz")))
                  (DBName (packPTH "quiz")))
                 (((((((FieldDef (HaskellName (packPTH "Id")))
                         (DBName (packPTH "id")))
                        ((FTTypeCon Nothing) (packPTH "QuizId")))
                       SqlInt64)
                      [])
                     True)
                    ((ForeignRef (HaskellName (packPTH "Quiz")))
                       ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                [packPTH "json"])
               [((((((FieldDef (HaskellName (packPTH "name")))
                       (DBName (packPTH "name")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for name")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "description")))
                       (DBName (packPTH "description")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for description")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "creationDate")))
                       (DBName (packPTH "creation_date")))
                      ((FTTypeCon Nothing) (packPTH "UTCTime")))
                     (SqlOther (packPTH "SqlType unset for creationDate")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "passingNumber")))
                       (DBName (packPTH "passing_number")))
                      ((FTTypeCon Nothing) (packPTH "Int")))
                     (SqlOther (packPTH "SqlType unset for passingNumber")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "question")))
                       (DBName (packPTH "question")))
                      ((FTTypeCon Nothing) (packPTH "Question")))
                     (SqlOther (packPTH "SqlType unset for question")))
                    [])
                   True)
                  (EmbedRef
                     ((EmbedEntityDef (HaskellName (packPTH "Question")))
                        [((EmbedFieldDef (DBName (packPTH "text"))) Nothing) Nothing,
                         ((EmbedFieldDef (DBName (packPTH "option"))) Nothing) Nothing,
                         ((EmbedFieldDef (DBName (packPTH "answer"))) Nothing) Nothing]))])
              [])
             [])
            [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
           (Data.Map.Internal.fromList []))
          False
          {entityFields = [((((((FieldDef (HaskellName (packPTH "name")))
                                  (DBName (packPTH "name")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "description")))
                                  (DBName (packPTH "description")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "creationDate")))
                                  (DBName (packPTH "creation_date")))
                                 ((FTTypeCon Nothing) (packPTH "UTCTime")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy UTCTime)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "passingNumber")))
                                  (DBName (packPTH "passing_number")))
                                 ((FTTypeCon Nothing) (packPTH "Int")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Int)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "question")))
                                  (DBName (packPTH "question")))
                                 ((FTTypeCon Nothing) (packPTH "Question")))
                                SqlString)
                               [])
                              True)
                             (EmbedRef
                                ((EmbedEntityDef (HaskellName (packPTH "Question")))
                                   [((EmbedFieldDef (DBName (packPTH "text"))) Nothing) Nothing,
                                    ((EmbedFieldDef (DBName (packPTH "option"))) Nothing) Nothing,
                                    ((EmbedFieldDef (DBName (packPTH "answer"))) Nothing)
                                      Nothing]))],
           entityId = ((((((FieldDef (HaskellName (packPTH "Id")))
                             (DBName (packPTH "id")))
                            ((FTTypeCon Nothing) (packPTH "QuizId")))
                           (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                              (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                          [])
                         True)
                        ((ForeignRef (HaskellName (packPTH "Quiz")))
                           ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))},
        (((((((((EntityDef (HaskellName (packPTH "QuizResult")))
                  (DBName (packPTH "quiz_result")))
                 (((((((FieldDef (HaskellName (packPTH "Id")))
                         (DBName (packPTH "id")))
                        ((FTTypeCon Nothing) (packPTH "QuizResultId")))
                       SqlInt64)
                      [])
                     True)
                    ((ForeignRef (HaskellName (packPTH "QuizResult")))
                       ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                [packPTH "json"])
               [((((((FieldDef (HaskellName (packPTH "testKey")))
                       (DBName (packPTH "test_key")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for testKey")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "result")))
                       (DBName (packPTH "result")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for result")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "passingDate")))
                       (DBName (packPTH "passing_date")))
                      ((FTTypeCon Nothing) (packPTH "UTCTime")))
                     (SqlOther (packPTH "SqlType unset for passingDate")))
                    [])
                   True)
                  NoReference])
              [])
             [])
            [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
           (Data.Map.Internal.fromList []))
          False
          {entityFields = [((((((FieldDef (HaskellName (packPTH "testKey")))
                                  (DBName (packPTH "test_key")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "result")))
                                  (DBName (packPTH "result")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "passingDate")))
                                  (DBName (packPTH "passing_date")))
                                 ((FTTypeCon Nothing) (packPTH "UTCTime")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy UTCTime)))
                               [])
                              True)
                             NoReference],
           entityId = ((((((FieldDef (HaskellName (packPTH "Id")))
                             (DBName (packPTH "id")))
                            ((FTTypeCon Nothing) (packPTH "QuizResultId")))
                           (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                              (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                          [])
                         True)
                        ((ForeignRef (HaskellName (packPTH "QuizResult")))
                           ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))},
        (((((((((EntityDef (HaskellName (packPTH "User")))
                  (DBName (packPTH "user")))
                 (((((((FieldDef (HaskellName (packPTH "Id")))
                         (DBName (packPTH "id")))
                        ((FTTypeCon Nothing) (packPTH "UserId")))
                       SqlInt64)
                      [])
                     True)
                    ((ForeignRef (HaskellName (packPTH "User")))
                       ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                [packPTH "json"])
               [((((((FieldDef (HaskellName (packPTH "username")))
                       (DBName (packPTH "username")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for username")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "password")))
                       (DBName (packPTH "password")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for password")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "email")))
                       (DBName (packPTH "email")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for email")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "avatar")))
                       (DBName (packPTH "avatar")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for avatar")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "firstName")))
                       (DBName (packPTH "first_name")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for firstName")))
                    [packPTH "Maybe"])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "secondName")))
                       (DBName (packPTH "second_name")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for secondName")))
                    [packPTH "Maybe"])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "birthDay")))
                       (DBName (packPTH "birth_day")))
                      ((FTTypeCon Nothing) (packPTH "UTCTime")))
                     (SqlOther (packPTH "SqlType unset for birthDay")))
                    [packPTH "Maybe"])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "sex")))
                       (DBName (packPTH "sex")))
                      ((FTTypeCon Nothing) (packPTH "Gender")))
                     (SqlOther (packPTH "SqlType unset for sex")))
                    [packPTH "Maybe"])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "createdQuizzes")))
                       (DBName (packPTH "created_quizzes")))
                      (FTList ((FTTypeCon Nothing) (packPTH "QuizId"))))
                     (SqlOther (packPTH "SqlType unset for createdQuizzes")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "passedQuizzes")))
                       (DBName (packPTH "passed_quizzes")))
                      (FTList ((FTTypeCon Nothing) (packPTH "QuizResult"))))
                     (SqlOther (packPTH "SqlType unset for passedQuizzes")))
                    [])
                   True)
                  (EmbedRef
                     ((EmbedEntityDef (HaskellName (packPTH "QuizResult")))
                        [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing) Nothing,
                         ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                         ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                           Nothing]))])
              [])
             [])
            [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
           (Data.Map.Internal.fromList []))
          False
          {entityFields = [((((((FieldDef (HaskellName (packPTH "username")))
                                  (DBName (packPTH "username")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "password")))
                                  (DBName (packPTH "password")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "email")))
                                  (DBName (packPTH "email")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "avatar")))
                                  (DBName (packPTH "avatar")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "firstName")))
                                  (DBName (packPTH "first_name")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [packPTH "Maybe"])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "secondName")))
                                  (DBName (packPTH "second_name")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [packPTH "Maybe"])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "birthDay")))
                                  (DBName (packPTH "birth_day")))
                                 ((FTTypeCon Nothing) (packPTH "UTCTime")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy UTCTime)))
                               [packPTH "Maybe"])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "sex")))
                                  (DBName (packPTH "sex")))
                                 ((FTTypeCon Nothing) (packPTH "Gender")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Gender)))
                               [packPTH "Maybe"])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "createdQuizzes")))
                                  (DBName (packPTH "created_quizzes")))
                                 (FTList ((FTTypeCon Nothing) (packPTH "QuizId"))))
                                SqlString)
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "passedQuizzes")))
                                  (DBName (packPTH "passed_quizzes")))
                                 (FTList ((FTTypeCon Nothing) (packPTH "QuizResult"))))
                                SqlString)
                               [])
                              True)
                             (EmbedRef
                                ((EmbedEntityDef (HaskellName (packPTH "QuizResult")))
                                   [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing) Nothing,
                                    ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                                    ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                                      Nothing]))],
           entityId = ((((((FieldDef (HaskellName (packPTH "Id")))
                             (DBName (packPTH "id")))
                            ((FTTypeCon Nothing) (packPTH "UserId")))
                           (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                              (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                          [])
                         True)
                        ((ForeignRef (HaskellName (packPTH "User")))
                           ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))}])
  ======>
    instance PersistField Question where
      toPersistValue
        = \ ent_awxg
            -> (PersistMap
                  $ ((zip ((map Data.Text.pack) ["text", "option", "answer"]))
                       ((map toPersistValue) $ (toPersistFields ent_awxg))))
      fromPersistValue
        = ((\ x_awxh
              -> let
                   columns_awxi
                     = unordered-containers-0.2.9.0:Data.HashMap.Strict.fromList x_awxh
                 in
                   (fromPersistValues
                      $ ((map
                            (\ name_awxj
                               -> case
                                      (unordered-containers-0.2.9.0:Data.HashMap.Base.lookup
                                         (Data.Text.pack name_awxj))
                                        columns_awxi
                                  of
                                    Just v_awxk -> v_awxk
                                    Nothing -> PersistNull))
                           $ ["text", "option", "answer"])))
             Control.Monad.<=< getPersistMap)
    instance persistent-2.8.1:Database.Persist.Sql.Class.PersistFieldSql Question where
      persistent-2.8.1:Database.Persist.Sql.Class.sqlType _ = SqlString
    instance PersistField Quiz where
      toPersistValue
        = \ ent_awxl
            -> (PersistMap
                  $ ((zip
                        ((map Data.Text.pack)
                           ["name", "description", "creationDate", "passingNumber",
                            "question"]))
                       ((map toPersistValue) $ (toPersistFields ent_awxl))))
      fromPersistValue
        = ((\ x_awxm
              -> let
                   columns_awxn
                     = unordered-containers-0.2.9.0:Data.HashMap.Strict.fromList x_awxm
                 in
                   (fromPersistValues
                      $ ((map
                            (\ name_awxo
                               -> case
                                      (unordered-containers-0.2.9.0:Data.HashMap.Base.lookup
                                         (Data.Text.pack name_awxo))
                                        columns_awxn
                                  of
                                    Just v_awxp -> v_awxp
                                    Nothing -> PersistNull))
                           $ ["name", "description", "creationDate", "passingNumber",
                              "question"])))
             Control.Monad.<=< getPersistMap)
    instance persistent-2.8.1:Database.Persist.Sql.Class.PersistFieldSql Quiz where
      persistent-2.8.1:Database.Persist.Sql.Class.sqlType _ = SqlString
    instance PersistField QuizResult where
      toPersistValue
        = \ ent_awxq
            -> (PersistMap
                  $ ((zip
                        ((map Data.Text.pack) ["testKey", "result", "passingDate"]))
                       ((map toPersistValue) $ (toPersistFields ent_awxq))))
      fromPersistValue
        = ((\ x_awxr
              -> let
                   columns_awxs
                     = unordered-containers-0.2.9.0:Data.HashMap.Strict.fromList x_awxr
                 in
                   (fromPersistValues
                      $ ((map
                            (\ name_awxt
                               -> case
                                      (unordered-containers-0.2.9.0:Data.HashMap.Base.lookup
                                         (Data.Text.pack name_awxt))
                                        columns_awxs
                                  of
                                    Just v_awxu -> v_awxu
                                    Nothing -> PersistNull))
                           $ ["testKey", "result", "passingDate"])))
             Control.Monad.<=< getPersistMap)
    instance persistent-2.8.1:Database.Persist.Sql.Class.PersistFieldSql QuizResult where
      persistent-2.8.1:Database.Persist.Sql.Class.sqlType _ = SqlString
    instance PersistField User where
      toPersistValue
        = \ ent_awxv
            -> (PersistMap
                  $ ((zip
                        ((map Data.Text.pack)
                           ["username", "password", "email", "avatar", "firstName",
                            "secondName", "birthDay", "sex", "createdQuizzes",
                            "passedQuizzes"]))
                       ((map toPersistValue) $ (toPersistFields ent_awxv))))
      fromPersistValue
        = ((\ x_awxw
              -> let
                   columns_awxx
                     = unordered-containers-0.2.9.0:Data.HashMap.Strict.fromList x_awxw
                 in
                   (fromPersistValues
                      $ ((map
                            (\ name_awxy
                               -> case
                                      (unordered-containers-0.2.9.0:Data.HashMap.Base.lookup
                                         (Data.Text.pack name_awxy))
                                        columns_awxx
                                  of
                                    Just v_awxz -> v_awxz
                                    Nothing -> PersistNull))
                           $ ["username", "password", "email", "avatar", "firstName",
                              "secondName", "birthDay", "sex", "createdQuizzes",
                              "passedQuizzes"])))
             Control.Monad.<=< getPersistMap)
    instance persistent-2.8.1:Database.Persist.Sql.Class.PersistFieldSql User where
      persistent-2.8.1:Database.Persist.Sql.Class.sqlType _ = SqlString
    data Question
      = Question {questionText :: !Text,
                  questionOption :: !QuestionOptions,
                  questionAnswer :: !QuestionAnswer}
      deriving (Eq, Read, Show, Generic)
    type QuestionId = Key Question
    instance PersistEntity Question where
      type PersistEntityBackend Question = MongoContext
      data Unique Question
      newtype Key Question
        = QuestionKey {unQuestionKey :: (BackendKey MongoContext)}
        deriving (Show,
                  Read,
                  Eq,
                  Ord,
                  path-pieces-0.2.1:Web.PathPieces.PathPiece,
                  http-api-data-0.3.7.2:Web.Internal.HttpApiData.ToHttpApiData,
                  http-api-data-0.3.7.2:Web.Internal.HttpApiData.FromHttpApiData,
                  PersistField,
                  persistent-2.8.1:Database.Persist.Sql.Class.PersistFieldSql,
                  ToJSON,
                  FromJSON)
      data EntityField Question typ
        = typ ~ Key Question => QuestionId |
          typ ~ Text => QuestionText |
          typ ~ QuestionOptions => QuestionOption |
          typ ~ QuestionAnswer => QuestionAnswer
      keyToValues
        = ((ghc-prim-0.5.1.1:GHC.Types.: [])
             . (toPersistValue . unQuestionKey))
      keyFromValues
        = ((fmap QuestionKey)
             . (fromPersistValue . Database.Persist.TH.headNote))
      entityDef _
        = (((((((((EntityDef (HaskellName (packPTH "Question")))
                    (DBName (packPTH "question")))
                   (((((((FieldDef (HaskellName (packPTH "Id")))
                           (DBName (packPTH "id")))
                          ((FTTypeCon Nothing) (packPTH "QuestionId")))
                         SqlInt64)
                        [])
                       True)
                      ((ForeignRef (HaskellName (packPTH "Question")))
                         ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                  [packPTH "json"])
                 [((((((FieldDef (HaskellName (packPTH "text")))
                         (DBName (packPTH "text")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "option")))
                         (DBName (packPTH "option")))
                        ((FTTypeCon Nothing) (packPTH "QuestionOptions")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "answer")))
                         (DBName (packPTH "answer")))
                        ((FTTypeCon Nothing) (packPTH "QuestionAnswer")))
                       SqlString)
                      [])
                     True)
                    NoReference])
                [])
               [])
              [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
             (Data.Map.Internal.fromList []))
            False
      toPersistFields (Question x_awxA x_awxB x_awxC)
        = [SomePersistField x_awxA, SomePersistField x_awxB,
           SomePersistField x_awxC]
      fromPersistValues [x1_awxE, x2_awxF, x3_awxG]
        = Question
            <$>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "text")))
                 . fromPersistValue)
                x1_awxE
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "option")))
                 . fromPersistValue)
                x2_awxF
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "answer")))
                 . fromPersistValue)
                x3_awxG
      fromPersistValues x_awxD
        = (Left
             $ ((mappend (packPTH "Question: fromPersistValues failed on: "))
                  (Data.Text.pack $ (show x_awxD))))
      persistUniqueToFieldNames _
        = error "Degenerate case, should never happen"
      persistUniqueToValues _
        = error "Degenerate case, should never happen"
      persistUniqueKeys (Question _text_awxH _option_awxI _answer_awxJ)
        = []
      persistFieldDef QuestionId
        = ((((((FieldDef (HaskellName (packPTH "Id")))
                 (DBName (packPTH "id")))
                ((FTTypeCon Nothing) (packPTH "QuestionId")))
               SqlInt64)
              [])
             True)
            ((ForeignRef (HaskellName (packPTH "Question")))
               ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))
      persistFieldDef QuestionText
        = ((((((FieldDef (HaskellName (packPTH "text")))
                 (DBName (packPTH "text")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef QuestionOption
        = ((((((FieldDef (HaskellName (packPTH "option")))
                 (DBName (packPTH "option")))
                ((FTTypeCon Nothing) (packPTH "QuestionOptions")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef QuestionAnswer
        = ((((((FieldDef (HaskellName (packPTH "answer")))
                 (DBName (packPTH "answer")))
                ((FTTypeCon Nothing) (packPTH "QuestionAnswer")))
               SqlString)
              [])
             True)
            NoReference
      persistIdField = QuestionId
      fieldLens QuestionId
        = (lensPTH entityKey)
            (\ Entity _ value_awxK key_awxL -> (Entity key_awxL) value_awxK)
      fieldLens QuestionText
        = (lensPTH (questionText . entityVal))
            (\ Entity key_awxM value_awxN x_awxO
               -> (Entity key_awxM) value_awxN {questionText = x_awxO})
      fieldLens QuestionOption
        = (lensPTH (questionOption . entityVal))
            (\ Entity key_awxM value_awxN x_awxO
               -> (Entity key_awxM) value_awxN {questionOption = x_awxO})
      fieldLens QuestionAnswer
        = (lensPTH (questionAnswer . entityVal))
            (\ Entity key_awxM value_awxN x_awxO
               -> (Entity key_awxM) value_awxN {questionAnswer = x_awxO})
    instance ToBackendKey MongoContext Question where
      toBackendKey = unQuestionKey
      fromBackendKey = QuestionKey
    data Quiz
      = Quiz {quizName :: !Text,
              quizDescription :: !Text,
              quizCreationDate :: !UTCTime,
              quizPassingNumber :: !Int,
              quizQuestion :: !Question}
      deriving (Eq, Read, Show, Generic)
    type QuizId = Key Quiz
    instance PersistEntity Quiz where
      type PersistEntityBackend Quiz = MongoContext
      data Unique Quiz
      newtype Key Quiz
        = QuizKey {unQuizKey :: (BackendKey MongoContext)}
        deriving (Show,
                  Read,
                  Eq,
                  Ord,
                  path-pieces-0.2.1:Web.PathPieces.PathPiece,
                  http-api-data-0.3.7.2:Web.Internal.HttpApiData.ToHttpApiData,
                  http-api-data-0.3.7.2:Web.Internal.HttpApiData.FromHttpApiData,
                  PersistField,
                  persistent-2.8.1:Database.Persist.Sql.Class.PersistFieldSql,
                  ToJSON,
                  FromJSON)
      data EntityField Quiz typ
        = typ ~ Key Quiz => QuizId |
          typ ~ Text => QuizName |
          typ ~ Text => QuizDescription |
          typ ~ UTCTime => QuizCreationDate |
          typ ~ Int => QuizPassingNumber |
          typ ~ Question => QuizQuestion
      keyToValues
        = ((ghc-prim-0.5.1.1:GHC.Types.: [])
             . (toPersistValue . unQuizKey))
      keyFromValues
        = ((fmap QuizKey)
             . (fromPersistValue . Database.Persist.TH.headNote))
      entityDef _
        = (((((((((EntityDef (HaskellName (packPTH "Quiz")))
                    (DBName (packPTH "quiz")))
                   (((((((FieldDef (HaskellName (packPTH "Id")))
                           (DBName (packPTH "id")))
                          ((FTTypeCon Nothing) (packPTH "QuizId")))
                         SqlInt64)
                        [])
                       True)
                      ((ForeignRef (HaskellName (packPTH "Quiz")))
                         ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                  [packPTH "json"])
                 [((((((FieldDef (HaskellName (packPTH "name")))
                         (DBName (packPTH "name")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "description")))
                         (DBName (packPTH "description")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "creationDate")))
                         (DBName (packPTH "creation_date")))
                        ((FTTypeCon Nothing) (packPTH "UTCTime")))
                       SqlDayTime)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "passingNumber")))
                         (DBName (packPTH "passing_number")))
                        ((FTTypeCon Nothing) (packPTH "Int")))
                       SqlInt64)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "question")))
                         (DBName (packPTH "question")))
                        ((FTTypeCon Nothing) (packPTH "Question")))
                       SqlString)
                      [])
                     True)
                    (EmbedRef
                       ((EmbedEntityDef (HaskellName (packPTH "Question")))
                          [((EmbedFieldDef (DBName (packPTH "text"))) Nothing) Nothing,
                           ((EmbedFieldDef (DBName (packPTH "option"))) Nothing) Nothing,
                           ((EmbedFieldDef (DBName (packPTH "answer"))) Nothing) Nothing]))])
                [])
               [])
              [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
             (Data.Map.Internal.fromList []))
            False
      toPersistFields (Quiz x_awxP x_awxQ x_awxR x_awxS x_awxT)
        = [SomePersistField x_awxP, SomePersistField x_awxQ,
           SomePersistField x_awxR, SomePersistField x_awxS,
           SomePersistField x_awxT]
      fromPersistValues [x1_awxV, x2_awxW, x3_awxX, x4_awxY, x5_awxZ]
        = Quiz
            <$>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "name")))
                 . fromPersistValue)
                x1_awxV
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "description")))
                 . fromPersistValue)
                x2_awxW
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "creationDate")))
                 . fromPersistValue)
                x3_awxX
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "passingNumber")))
                 . fromPersistValue)
                x4_awxY
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "question")))
                 . fromPersistValue)
                x5_awxZ
      fromPersistValues x_awxU
        = (Left
             $ ((mappend (packPTH "Quiz: fromPersistValues failed on: "))
                  (Data.Text.pack $ (show x_awxU))))
      persistUniqueToFieldNames _
        = error "Degenerate case, should never happen"
      persistUniqueToValues _
        = error "Degenerate case, should never happen"
      persistUniqueKeys
        (Quiz _name_awy0
              _description_awy1
              _creationDate_awy2
              _passingNumber_awy3
              _question_awy4)
        = []
      persistFieldDef QuizId
        = ((((((FieldDef (HaskellName (packPTH "Id")))
                 (DBName (packPTH "id")))
                ((FTTypeCon Nothing) (packPTH "QuizId")))
               SqlInt64)
              [])
             True)
            ((ForeignRef (HaskellName (packPTH "Quiz")))
               ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))
      persistFieldDef QuizName
        = ((((((FieldDef (HaskellName (packPTH "name")))
                 (DBName (packPTH "name")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef QuizDescription
        = ((((((FieldDef (HaskellName (packPTH "description")))
                 (DBName (packPTH "description")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef QuizCreationDate
        = ((((((FieldDef (HaskellName (packPTH "creationDate")))
                 (DBName (packPTH "creation_date")))
                ((FTTypeCon Nothing) (packPTH "UTCTime")))
               SqlDayTime)
              [])
             True)
            NoReference
      persistFieldDef QuizPassingNumber
        = ((((((FieldDef (HaskellName (packPTH "passingNumber")))
                 (DBName (packPTH "passing_number")))
                ((FTTypeCon Nothing) (packPTH "Int")))
               SqlInt64)
              [])
             True)
            NoReference
      persistFieldDef QuizQuestion
        = ((((((FieldDef (HaskellName (packPTH "question")))
                 (DBName (packPTH "question")))
                ((FTTypeCon Nothing) (packPTH "Question")))
               SqlString)
              [])
             True)
            (EmbedRef
               ((EmbedEntityDef (HaskellName (packPTH "Question")))
                  [((EmbedFieldDef (DBName (packPTH "text"))) Nothing) Nothing,
                   ((EmbedFieldDef (DBName (packPTH "option"))) Nothing) Nothing,
                   ((EmbedFieldDef (DBName (packPTH "answer"))) Nothing) Nothing]))
      persistIdField = QuizId
      fieldLens QuizId
        = (lensPTH entityKey)
            (\ Entity _ value_awy5 key_awy6 -> (Entity key_awy6) value_awy5)
      fieldLens QuizName
        = (lensPTH (quizName . entityVal))
            (\ Entity key_awy7 value_awy8 x_awy9
               -> (Entity key_awy7) value_awy8 {quizName = x_awy9})
      fieldLens QuizDescription
        = (lensPTH (quizDescription . entityVal))
            (\ Entity key_awy7 value_awy8 x_awy9
               -> (Entity key_awy7) value_awy8 {quizDescription = x_awy9})
      fieldLens QuizCreationDate
        = (lensPTH (quizCreationDate . entityVal))
            (\ Entity key_awy7 value_awy8 x_awy9
               -> (Entity key_awy7) value_awy8 {quizCreationDate = x_awy9})
      fieldLens QuizPassingNumber
        = (lensPTH (quizPassingNumber . entityVal))
            (\ Entity key_awy7 value_awy8 x_awy9
               -> (Entity key_awy7) value_awy8 {quizPassingNumber = x_awy9})
      fieldLens QuizQuestion
        = (lensPTH (quizQuestion . entityVal))
            (\ Entity key_awy7 value_awy8 x_awy9
               -> (Entity key_awy7) value_awy8 {quizQuestion = x_awy9})
    instance ToBackendKey MongoContext Quiz where
      toBackendKey = unQuizKey
      fromBackendKey = QuizKey
    data QuizResult
      = QuizResult {quizResultTestKey :: !Text,
                    quizResultResult :: !Text,
                    quizResultPassingDate :: !UTCTime}
      deriving (Eq, Read, Show, Generic)
    type QuizResultId = Key QuizResult
    instance PersistEntity QuizResult where
      type PersistEntityBackend QuizResult = MongoContext
      data Unique QuizResult
      newtype Key QuizResult
        = QuizResultKey {unQuizResultKey :: (BackendKey MongoContext)}
        deriving (Show,
                  Read,
                  Eq,
                  Ord,
                  path-pieces-0.2.1:Web.PathPieces.PathPiece,
                  http-api-data-0.3.7.2:Web.Internal.HttpApiData.ToHttpApiData,
                  http-api-data-0.3.7.2:Web.Internal.HttpApiData.FromHttpApiData,
                  PersistField,
                  persistent-2.8.1:Database.Persist.Sql.Class.PersistFieldSql,
                  ToJSON,
                  FromJSON)
      data EntityField QuizResult typ
        = typ ~ Key QuizResult => QuizResultId |
          typ ~ Text => QuizResultTestKey |
          typ ~ Text => QuizResultResult |
          typ ~ UTCTime => QuizResultPassingDate
      keyToValues
        = ((ghc-prim-0.5.1.1:GHC.Types.: [])
             . (toPersistValue . unQuizResultKey))
      keyFromValues
        = ((fmap QuizResultKey)
             . (fromPersistValue . Database.Persist.TH.headNote))
      entityDef _
        = (((((((((EntityDef (HaskellName (packPTH "QuizResult")))
                    (DBName (packPTH "quiz_result")))
                   (((((((FieldDef (HaskellName (packPTH "Id")))
                           (DBName (packPTH "id")))
                          ((FTTypeCon Nothing) (packPTH "QuizResultId")))
                         SqlInt64)
                        [])
                       True)
                      ((ForeignRef (HaskellName (packPTH "QuizResult")))
                         ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                  [packPTH "json"])
                 [((((((FieldDef (HaskellName (packPTH "testKey")))
                         (DBName (packPTH "test_key")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "result")))
                         (DBName (packPTH "result")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "passingDate")))
                         (DBName (packPTH "passing_date")))
                        ((FTTypeCon Nothing) (packPTH "UTCTime")))
                       SqlDayTime)
                      [])
                     True)
                    NoReference])
                [])
               [])
              [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
             (Data.Map.Internal.fromList []))
            False
      toPersistFields (QuizResult x_awya x_awyb x_awyc)
        = [SomePersistField x_awya, SomePersistField x_awyb,
           SomePersistField x_awyc]
      fromPersistValues [x1_awye, x2_awyf, x3_awyg]
        = QuizResult
            <$>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "testKey")))
                 . fromPersistValue)
                x1_awye
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "result")))
                 . fromPersistValue)
                x2_awyf
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "passingDate")))
                 . fromPersistValue)
                x3_awyg
      fromPersistValues x_awyd
        = (Left
             $ ((mappend (packPTH "QuizResult: fromPersistValues failed on: "))
                  (Data.Text.pack $ (show x_awyd))))
      persistUniqueToFieldNames _
        = error "Degenerate case, should never happen"
      persistUniqueToValues _
        = error "Degenerate case, should never happen"
      persistUniqueKeys
        (QuizResult _testKey_awyh _result_awyi _passingDate_awyj)
        = []
      persistFieldDef QuizResultId
        = ((((((FieldDef (HaskellName (packPTH "Id")))
                 (DBName (packPTH "id")))
                ((FTTypeCon Nothing) (packPTH "QuizResultId")))
               SqlInt64)
              [])
             True)
            ((ForeignRef (HaskellName (packPTH "QuizResult")))
               ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))
      persistFieldDef QuizResultTestKey
        = ((((((FieldDef (HaskellName (packPTH "testKey")))
                 (DBName (packPTH "test_key")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef QuizResultResult
        = ((((((FieldDef (HaskellName (packPTH "result")))
                 (DBName (packPTH "result")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef QuizResultPassingDate
        = ((((((FieldDef (HaskellName (packPTH "passingDate")))
                 (DBName (packPTH "passing_date")))
                ((FTTypeCon Nothing) (packPTH "UTCTime")))
               SqlDayTime)
              [])
             True)
            NoReference
      persistIdField = QuizResultId
      fieldLens QuizResultId
        = (lensPTH entityKey)
            (\ Entity _ value_awyk key_awyl -> (Entity key_awyl) value_awyk)
      fieldLens QuizResultTestKey
        = (lensPTH (quizResultTestKey . entityVal))
            (\ Entity key_awym value_awyn x_awyo
               -> (Entity key_awym) value_awyn {quizResultTestKey = x_awyo})
      fieldLens QuizResultResult
        = (lensPTH (quizResultResult . entityVal))
            (\ Entity key_awym value_awyn x_awyo
               -> (Entity key_awym) value_awyn {quizResultResult = x_awyo})
      fieldLens QuizResultPassingDate
        = (lensPTH (quizResultPassingDate . entityVal))
            (\ Entity key_awym value_awyn x_awyo
               -> (Entity key_awym) value_awyn {quizResultPassingDate = x_awyo})
    instance ToBackendKey MongoContext QuizResult where
      toBackendKey = unQuizResultKey
      fromBackendKey = QuizResultKey
    data User
      = User {userUsername :: !Text,
              userPassword :: !Text,
              userEmail :: !Text,
              userAvatar :: !Text,
              userFirstName :: !(Maybe Text),
              userSecondName :: !(Maybe Text),
              userBirthDay :: !(Maybe UTCTime),
              userSex :: !(Maybe Gender),
              userCreatedQuizzes :: ![QuizId],
              userPassedQuizzes :: ![QuizResult]}
      deriving (Eq, Read, Show, Generic)
    type UserId = Key User
    instance PersistEntity User where
      type PersistEntityBackend User = MongoContext
      data Unique User
      newtype Key User
        = UserKey {unUserKey :: (BackendKey MongoContext)}
        deriving (Show,
                  Read,
                  Eq,
                  Ord,
                  path-pieces-0.2.1:Web.PathPieces.PathPiece,
                  http-api-data-0.3.7.2:Web.Internal.HttpApiData.ToHttpApiData,
                  http-api-data-0.3.7.2:Web.Internal.HttpApiData.FromHttpApiData,
                  PersistField,
                  persistent-2.8.1:Database.Persist.Sql.Class.PersistFieldSql,
                  ToJSON,
                  FromJSON)
      data EntityField User typ
        = typ ~ Key User => UserId |
          typ ~ Text => UserUsername |
          typ ~ Text => UserPassword |
          typ ~ Text => UserEmail |
          typ ~ Text => UserAvatar |
          typ ~ Maybe Text => UserFirstName |
          typ ~ Maybe Text => UserSecondName |
          typ ~ Maybe UTCTime => UserBirthDay |
          typ ~ Maybe Gender => UserSex |
          typ ~ [QuizId] => UserCreatedQuizzes |
          typ ~ [QuizResult] => UserPassedQuizzes
      keyToValues
        = ((ghc-prim-0.5.1.1:GHC.Types.: [])
             . (toPersistValue . unUserKey))
      keyFromValues
        = ((fmap UserKey)
             . (fromPersistValue . Database.Persist.TH.headNote))
      entityDef _
        = (((((((((EntityDef (HaskellName (packPTH "User")))
                    (DBName (packPTH "user")))
                   (((((((FieldDef (HaskellName (packPTH "Id")))
                           (DBName (packPTH "id")))
                          ((FTTypeCon Nothing) (packPTH "UserId")))
                         SqlInt64)
                        [])
                       True)
                      ((ForeignRef (HaskellName (packPTH "User")))
                         ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                  [packPTH "json"])
                 [((((((FieldDef (HaskellName (packPTH "username")))
                         (DBName (packPTH "username")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "password")))
                         (DBName (packPTH "password")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "email")))
                         (DBName (packPTH "email")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "avatar")))
                         (DBName (packPTH "avatar")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "firstName")))
                         (DBName (packPTH "first_name")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [packPTH "Maybe"])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "secondName")))
                         (DBName (packPTH "second_name")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [packPTH "Maybe"])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "birthDay")))
                         (DBName (packPTH "birth_day")))
                        ((FTTypeCon Nothing) (packPTH "UTCTime")))
                       SqlDayTime)
                      [packPTH "Maybe"])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "sex")))
                         (DBName (packPTH "sex")))
                        ((FTTypeCon Nothing) (packPTH "Gender")))
                       SqlString)
                      [packPTH "Maybe"])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "createdQuizzes")))
                         (DBName (packPTH "created_quizzes")))
                        (FTList ((FTTypeCon Nothing) (packPTH "QuizId"))))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "passedQuizzes")))
                         (DBName (packPTH "passed_quizzes")))
                        (FTList ((FTTypeCon Nothing) (packPTH "QuizResult"))))
                       SqlString)
                      [])
                     True)
                    (EmbedRef
                       ((EmbedEntityDef (HaskellName (packPTH "QuizResult")))
                          [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing) Nothing,
                           ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                           ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                             Nothing]))])
                [])
               [])
              [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
             (Data.Map.Internal.fromList []))
            False
      toPersistFields
        (User x_awyp
              x_awyq
              x_awyr
              x_awys
              x_awyt
              x_awyu
              x_awyv
              x_awyw
              x_awyx
              x_awyy)
        = [SomePersistField x_awyp, SomePersistField x_awyq,
           SomePersistField x_awyr, SomePersistField x_awys,
           SomePersistField x_awyt, SomePersistField x_awyu,
           SomePersistField x_awyv, SomePersistField x_awyw,
           SomePersistField x_awyx, SomePersistField x_awyy]
      fromPersistValues
        [x1_awyA,
         x2_awyB,
         x3_awyC,
         x4_awyD,
         x5_awyE,
         x6_awyF,
         x7_awyG,
         x8_awyH,
         x9_awyI,
         x10_awyJ]
        = User
            <$>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "username")))
                 . fromPersistValue)
                x1_awyA
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "password")))
                 . fromPersistValue)
                x2_awyB
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "email")))
                 . fromPersistValue)
                x3_awyC
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "avatar")))
                 . fromPersistValue)
                x4_awyD
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "firstName")))
                 . fromPersistValue)
                x5_awyE
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "secondName")))
                 . fromPersistValue)
                x6_awyF
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "birthDay")))
                 . fromPersistValue)
                x7_awyG
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "sex")))
                 . fromPersistValue)
                x8_awyH
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "createdQuizzes")))
                 . fromPersistValue)
                x9_awyI
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "passedQuizzes")))
                 . fromPersistValue)
                x10_awyJ
      fromPersistValues x_awyz
        = (Left
             $ ((mappend (packPTH "User: fromPersistValues failed on: "))
                  (Data.Text.pack $ (show x_awyz))))
      persistUniqueToFieldNames _
        = error "Degenerate case, should never happen"
      persistUniqueToValues _
        = error "Degenerate case, should never happen"
      persistUniqueKeys
        (User _username_awyK
              _password_awyL
              _email_awyM
              _avatar_awyN
              _firstName_awyO
              _secondName_awyP
              _birthDay_awyQ
              _sex_awyR
              _createdQuizzes_awyS
              _passedQuizzes_awyT)
        = []
      persistFieldDef UserId
        = ((((((FieldDef (HaskellName (packPTH "Id")))
                 (DBName (packPTH "id")))
                ((FTTypeCon Nothing) (packPTH "UserId")))
               SqlInt64)
              [])
             True)
            ((ForeignRef (HaskellName (packPTH "User")))
               ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))
      persistFieldDef UserUsername
        = ((((((FieldDef (HaskellName (packPTH "username")))
                 (DBName (packPTH "username")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef UserPassword
        = ((((((FieldDef (HaskellName (packPTH "password")))
                 (DBName (packPTH "password")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef UserEmail
        = ((((((FieldDef (HaskellName (packPTH "email")))
                 (DBName (packPTH "email")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef UserAvatar
        = ((((((FieldDef (HaskellName (packPTH "avatar")))
                 (DBName (packPTH "avatar")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef UserFirstName
        = ((((((FieldDef (HaskellName (packPTH "firstName")))
                 (DBName (packPTH "first_name")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [packPTH "Maybe"])
             True)
            NoReference
      persistFieldDef UserSecondName
        = ((((((FieldDef (HaskellName (packPTH "secondName")))
                 (DBName (packPTH "second_name")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [packPTH "Maybe"])
             True)
            NoReference
      persistFieldDef UserBirthDay
        = ((((((FieldDef (HaskellName (packPTH "birthDay")))
                 (DBName (packPTH "birth_day")))
                ((FTTypeCon Nothing) (packPTH "UTCTime")))
               SqlDayTime)
              [packPTH "Maybe"])
             True)
            NoReference
      persistFieldDef UserSex
        = ((((((FieldDef (HaskellName (packPTH "sex")))
                 (DBName (packPTH "sex")))
                ((FTTypeCon Nothing) (packPTH "Gender")))
               SqlString)
              [packPTH "Maybe"])
             True)
            NoReference
      persistFieldDef UserCreatedQuizzes
        = ((((((FieldDef (HaskellName (packPTH "createdQuizzes")))
                 (DBName (packPTH "created_quizzes")))
                (FTList ((FTTypeCon Nothing) (packPTH "QuizId"))))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef UserPassedQuizzes
        = ((((((FieldDef (HaskellName (packPTH "passedQuizzes")))
                 (DBName (packPTH "passed_quizzes")))
                (FTList ((FTTypeCon Nothing) (packPTH "QuizResult"))))
               SqlString)
              [])
             True)
            (EmbedRef
               ((EmbedEntityDef (HaskellName (packPTH "QuizResult")))
                  [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing) Nothing,
                   ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                   ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                     Nothing]))
      persistIdField = UserId
      fieldLens UserId
        = (lensPTH entityKey)
            (\ Entity _ value_awyU key_awyV -> (Entity key_awyV) value_awyU)
      fieldLens UserUsername
        = (lensPTH (userUsername . entityVal))
            (\ Entity key_awyW value_awyX x_awyY
               -> (Entity key_awyW) value_awyX {userUsername = x_awyY})
      fieldLens UserPassword
        = (lensPTH (userPassword . entityVal))
            (\ Entity key_awyW value_awyX x_awyY
               -> (Entity key_awyW) value_awyX {userPassword = x_awyY})
      fieldLens UserEmail
        = (lensPTH (userEmail . entityVal))
            (\ Entity key_awyW value_awyX x_awyY
               -> (Entity key_awyW) value_awyX {userEmail = x_awyY})
      fieldLens UserAvatar
        = (lensPTH (userAvatar . entityVal))
            (\ Entity key_awyW value_awyX x_awyY
               -> (Entity key_awyW) value_awyX {userAvatar = x_awyY})
      fieldLens UserFirstName
        = (lensPTH (userFirstName . entityVal))
            (\ Entity key_awyW value_awyX x_awyY
               -> (Entity key_awyW) value_awyX {userFirstName = x_awyY})
      fieldLens UserSecondName
        = (lensPTH (userSecondName . entityVal))
            (\ Entity key_awyW value_awyX x_awyY
               -> (Entity key_awyW) value_awyX {userSecondName = x_awyY})
      fieldLens UserBirthDay
        = (lensPTH (userBirthDay . entityVal))
            (\ Entity key_awyW value_awyX x_awyY
               -> (Entity key_awyW) value_awyX {userBirthDay = x_awyY})
      fieldLens UserSex
        = (lensPTH (userSex . entityVal))
            (\ Entity key_awyW value_awyX x_awyY
               -> (Entity key_awyW) value_awyX {userSex = x_awyY})
      fieldLens UserCreatedQuizzes
        = (lensPTH (userCreatedQuizzes . entityVal))
            (\ Entity key_awyW value_awyX x_awyY
               -> (Entity key_awyW) value_awyX {userCreatedQuizzes = x_awyY})
      fieldLens UserPassedQuizzes
        = (lensPTH (userPassedQuizzes . entityVal))
            (\ Entity key_awyW value_awyX x_awyY
               -> (Entity key_awyW) value_awyX {userPassedQuizzes = x_awyY})
    instance ToBackendKey MongoContext User where
      toBackendKey = unUserKey
      fromBackendKey = UserKey
    instance ToJSON Question where
      aeson-1.2.4.0:Data.Aeson.Types.ToJSON.toJSON
        (Question text_awz0 option_awz1 answer_awz2)
        = aeson-1.2.4.0:Data.Aeson.Types.Internal.object
            [((Data.Text.pack "text")
                aeson-1.2.4.0:Data.Aeson.Types.ToJSON..= text_awz0),
             ((Data.Text.pack "option")
                aeson-1.2.4.0:Data.Aeson.Types.ToJSON..= option_awz1),
             ((Data.Text.pack "answer")
                aeson-1.2.4.0:Data.Aeson.Types.ToJSON..= answer_awz2)]
    instance FromJSON Question where
      aeson-1.2.4.0:Data.Aeson.Types.FromJSON.parseJSON
        (aeson-1.2.4.0:Data.Aeson.Types.Internal.Object obj_awyZ)
        = ((((pure Question)
               <*>
                 (obj_awyZ
                    aeson-1.2.4.0:Data.Aeson.Types.FromJSON..:
                      (Data.Text.pack "text")))
              <*>
                (obj_awyZ
                   aeson-1.2.4.0:Data.Aeson.Types.FromJSON..:
                     (Data.Text.pack "option")))
             <*>
               (obj_awyZ
                  aeson-1.2.4.0:Data.Aeson.Types.FromJSON..:
                    (Data.Text.pack "answer")))
      aeson-1.2.4.0:Data.Aeson.Types.FromJSON.parseJSON _
        = GHC.Base.mzero
    instance ToJSON (Entity Question) where
      aeson-1.2.4.0:Data.Aeson.Types.ToJSON.toJSON = entityIdToJSON
    instance FromJSON (Entity Question) where
      aeson-1.2.4.0:Data.Aeson.Types.FromJSON.parseJSON
        = entityIdFromJSON
    instance ToJSON Quiz where
      aeson-1.2.4.0:Data.Aeson.Types.ToJSON.toJSON
        (Quiz name_awz4
              description_awz5
              creationDate_awz6
              passingNumber_awz7
              question_awz8)
        = aeson-1.2.4.0:Data.Aeson.Types.Internal.object
            [((Data.Text.pack "name")
                aeson-1.2.4.0:Data.Aeson.Types.ToJSON..= name_awz4),
             ((Data.Text.pack "description")
                aeson-1.2.4.0:Data.Aeson.Types.ToJSON..= description_awz5),
             ((Data.Text.pack "creationDate")
                aeson-1.2.4.0:Data.Aeson.Types.ToJSON..= creationDate_awz6),
             ((Data.Text.pack "passingNumber")
                aeson-1.2.4.0:Data.Aeson.Types.ToJSON..= passingNumber_awz7),
             ((Data.Text.pack "question")
                aeson-1.2.4.0:Data.Aeson.Types.ToJSON..= question_awz8)]
    instance FromJSON Quiz where
      aeson-1.2.4.0:Data.Aeson.Types.FromJSON.parseJSON
        (aeson-1.2.4.0:Data.Aeson.Types.Internal.Object obj_awz3)
        = ((((((pure Quiz)
                 <*>
                   (obj_awz3
                      aeson-1.2.4.0:Data.Aeson.Types.FromJSON..:
                        (Data.Text.pack "name")))
                <*>
                  (obj_awz3
                     aeson-1.2.4.0:Data.Aeson.Types.FromJSON..:
                       (Data.Text.pack "description")))
               <*>
                 (obj_awz3
                    aeson-1.2.4.0:Data.Aeson.Types.FromJSON..:
                      (Data.Text.pack "creationDate")))
              <*>
                (obj_awz3
                   aeson-1.2.4.0:Data.Aeson.Types.FromJSON..:
                     (Data.Text.pack "passingNumber")))
             <*>
               (obj_awz3
                  aeson-1.2.4.0:Data.Aeson.Types.FromJSON..:
                    (Data.Text.pack "question")))
      aeson-1.2.4.0:Data.Aeson.Types.FromJSON.parseJSON _
        = GHC.Base.mzero
    instance ToJSON (Entity Quiz) where
      aeson-1.2.4.0:Data.Aeson.Types.ToJSON.toJSON = entityIdToJSON
    instance FromJSON (Entity Quiz) where
      aeson-1.2.4.0:Data.Aeson.Types.FromJSON.parseJSON
        = entityIdFromJSON
    instance ToJSON QuizResult where
      aeson-1.2.4.0:Data.Aeson.Types.ToJSON.toJSON
        (QuizResult testKey_awza result_awzb passingDate_awzc)
        = aeson-1.2.4.0:Data.Aeson.Types.Internal.object
            [((Data.Text.pack "testKey")
                aeson-1.2.4.0:Data.Aeson.Types.ToJSON..= testKey_awza),
             ((Data.Text.pack "result")
                aeson-1.2.4.0:Data.Aeson.Types.ToJSON..= result_awzb),
             ((Data.Text.pack "passingDate")
                aeson-1.2.4.0:Data.Aeson.Types.ToJSON..= passingDate_awzc)]
    instance FromJSON QuizResult where
      aeson-1.2.4.0:Data.Aeson.Types.FromJSON.parseJSON
        (aeson-1.2.4.0:Data.Aeson.Types.Internal.Object obj_awz9)
        = ((((pure QuizResult)
               <*>
                 (obj_awz9
                    aeson-1.2.4.0:Data.Aeson.Types.FromJSON..:
                      (Data.Text.pack "testKey")))
              <*>
                (obj_awz9
                   aeson-1.2.4.0:Data.Aeson.Types.FromJSON..:
                     (Data.Text.pack "result")))
             <*>
               (obj_awz9
                  aeson-1.2.4.0:Data.Aeson.Types.FromJSON..:
                    (Data.Text.pack "passingDate")))
      aeson-1.2.4.0:Data.Aeson.Types.FromJSON.parseJSON _
        = GHC.Base.mzero
    instance ToJSON (Entity QuizResult) where
      aeson-1.2.4.0:Data.Aeson.Types.ToJSON.toJSON = entityIdToJSON
    instance FromJSON (Entity QuizResult) where
      aeson-1.2.4.0:Data.Aeson.Types.FromJSON.parseJSON
        = entityIdFromJSON
    instance ToJSON User where
      aeson-1.2.4.0:Data.Aeson.Types.ToJSON.toJSON
        (User username_awze
              password_awzf
              email_awzg
              avatar_awzh
              firstName_awzi
              secondName_awzj
              birthDay_awzk
              sex_awzl
              createdQuizzes_awzm
              passedQuizzes_awzn)
        = aeson-1.2.4.0:Data.Aeson.Types.Internal.object
            [((Data.Text.pack "username")
                aeson-1.2.4.0:Data.Aeson.Types.ToJSON..= username_awze),
             ((Data.Text.pack "password")
                aeson-1.2.4.0:Data.Aeson.Types.ToJSON..= password_awzf),
             ((Data.Text.pack "email")
                aeson-1.2.4.0:Data.Aeson.Types.ToJSON..= email_awzg),
             ((Data.Text.pack "avatar")
                aeson-1.2.4.0:Data.Aeson.Types.ToJSON..= avatar_awzh),
             ((Data.Text.pack "firstName")
                aeson-1.2.4.0:Data.Aeson.Types.ToJSON..= firstName_awzi),
             ((Data.Text.pack "secondName")
                aeson-1.2.4.0:Data.Aeson.Types.ToJSON..= secondName_awzj),
             ((Data.Text.pack "birthDay")
                aeson-1.2.4.0:Data.Aeson.Types.ToJSON..= birthDay_awzk),
             ((Data.Text.pack "sex")
                aeson-1.2.4.0:Data.Aeson.Types.ToJSON..= sex_awzl),
             ((Data.Text.pack "createdQuizzes")
                aeson-1.2.4.0:Data.Aeson.Types.ToJSON..= createdQuizzes_awzm),
             ((Data.Text.pack "passedQuizzes")
                aeson-1.2.4.0:Data.Aeson.Types.ToJSON..= passedQuizzes_awzn)]
    instance FromJSON User where
      aeson-1.2.4.0:Data.Aeson.Types.FromJSON.parseJSON
        (aeson-1.2.4.0:Data.Aeson.Types.Internal.Object obj_awzd)
        = (((((((((((pure User)
                      <*>
                        (obj_awzd
                           aeson-1.2.4.0:Data.Aeson.Types.FromJSON..:
                             (Data.Text.pack "username")))
                     <*>
                       (obj_awzd
                          aeson-1.2.4.0:Data.Aeson.Types.FromJSON..:
                            (Data.Text.pack "password")))
                    <*>
                      (obj_awzd
                         aeson-1.2.4.0:Data.Aeson.Types.FromJSON..:
                           (Data.Text.pack "email")))
                   <*>
                     (obj_awzd
                        aeson-1.2.4.0:Data.Aeson.Types.FromJSON..:
                          (Data.Text.pack "avatar")))
                  <*>
                    (obj_awzd
                       aeson-compat-0.3.7.1:Data.Aeson.Compat..:?
                         (Data.Text.pack "firstName")))
                 <*>
                   (obj_awzd
                      aeson-compat-0.3.7.1:Data.Aeson.Compat..:?
                        (Data.Text.pack "secondName")))
                <*>
                  (obj_awzd
                     aeson-compat-0.3.7.1:Data.Aeson.Compat..:?
                       (Data.Text.pack "birthDay")))
               <*>
                 (obj_awzd
                    aeson-compat-0.3.7.1:Data.Aeson.Compat..:? (Data.Text.pack "sex")))
              <*>
                (obj_awzd
                   aeson-1.2.4.0:Data.Aeson.Types.FromJSON..:
                     (Data.Text.pack "createdQuizzes")))
             <*>
               (obj_awzd
                  aeson-1.2.4.0:Data.Aeson.Types.FromJSON..:
                    (Data.Text.pack "passedQuizzes")))
      aeson-1.2.4.0:Data.Aeson.Types.FromJSON.parseJSON _
        = GHC.Base.mzero
    instance ToJSON (Entity User) where
      aeson-1.2.4.0:Data.Aeson.Types.ToJSON.toJSON = entityIdToJSON
    instance FromJSON (Entity User) where
      aeson-1.2.4.0:Data.Aeson.Types.FromJSON.parseJSON
        = entityIdFromJSON
/home/nikita/Projects/labs/Databases/Course-Project/Server/src/Model/User.hs:(27,78)-(57,2): Splicing expression
    Language.Haskell.TH.Quote.quoteExp
      persistLowerCase
      "\n\
      \Question json\n\
      \  text    Text\n\
      \  option  QuestionOptions\n\
      \  answer  QuestionAnswer\n\
      \  deriving Eq Read Show Generic\n\
      \Quiz json\n\
      \  name            Text\n\
      \  description     Text\n\
      \  creationDate    UTCTime\n\
      \  passingNumber   Int\n\
      \  question        Question\n\
      \  deriving Eq Read Show Generic\n\
      \QuizResult json\n\
      \  testKey         Text\n\
      \  result          Text\n\
      \  passingDate     UTCTime\n\
      \  deriving        Eq Read Show Generic\n\
      \User json\n\
      \  username        Text\n\
      \  password        Text\n\
      \  email           Text\n\
      \  avatar          Text\n\
      \  firstName       Text Maybe\n\
      \  secondName      Text Maybe\n\
      \  birthDay        UTCTime Maybe\n\
      \  sex             Gender Maybe\n\
      \  createdQuizzes  [QuizId]\n\
      \  passedQuizzes   [QuizResult]\n\
      \  deriving        Eq Read Show Generic\n"
  ======>
    [(((((((((EntityDef (HaskellName (packPTH "Question")))
               (DBName (packPTH "question")))
              (((((((FieldDef (HaskellName (packPTH "Id")))
                      (DBName (packPTH "id")))
                     ((FTTypeCon Nothing) (packPTH "QuestionId")))
                    SqlInt64)
                   [])
                  True)
                 ((ForeignRef (HaskellName (packPTH "Question")))
                    ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
             [packPTH "json"])
            [((((((FieldDef (HaskellName (packPTH "text")))
                    (DBName (packPTH "text")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for text")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "option")))
                    (DBName (packPTH "option")))
                   ((FTTypeCon Nothing) (packPTH "QuestionOptions")))
                  (SqlOther (packPTH "SqlType unset for option")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "answer")))
                    (DBName (packPTH "answer")))
                   ((FTTypeCon Nothing) (packPTH "QuestionAnswer")))
                  (SqlOther (packPTH "SqlType unset for answer")))
                 [])
                True)
               NoReference])
           [])
          [])
         [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
        (Data.Map.Internal.fromList []))
       False
       {entityFields = [((((((FieldDef (HaskellName (packPTH "text")))
                               (DBName (packPTH "text")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "option")))
                               (DBName (packPTH "option")))
                              ((FTTypeCon Nothing) (packPTH "QuestionOptions")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy QuestionOptions)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "answer")))
                               (DBName (packPTH "answer")))
                              ((FTTypeCon Nothing) (packPTH "QuestionAnswer")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy QuestionAnswer)))
                            [])
                           True)
                          NoReference],
        entityId = ((((((FieldDef (HaskellName (packPTH "Id")))
                          (DBName (packPTH "id")))
                         ((FTTypeCon Nothing) (packPTH "QuestionId")))
                        (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                           (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                       [])
                      True)
                     ((ForeignRef (HaskellName (packPTH "Question")))
                        ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))},
     (((((((((EntityDef (HaskellName (packPTH "Quiz")))
               (DBName (packPTH "quiz")))
              (((((((FieldDef (HaskellName (packPTH "Id")))
                      (DBName (packPTH "id")))
                     ((FTTypeCon Nothing) (packPTH "QuizId")))
                    SqlInt64)
                   [])
                  True)
                 ((ForeignRef (HaskellName (packPTH "Quiz")))
                    ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
             [packPTH "json"])
            [((((((FieldDef (HaskellName (packPTH "name")))
                    (DBName (packPTH "name")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for name")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "description")))
                    (DBName (packPTH "description")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for description")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "creationDate")))
                    (DBName (packPTH "creation_date")))
                   ((FTTypeCon Nothing) (packPTH "UTCTime")))
                  (SqlOther (packPTH "SqlType unset for creationDate")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "passingNumber")))
                    (DBName (packPTH "passing_number")))
                   ((FTTypeCon Nothing) (packPTH "Int")))
                  (SqlOther (packPTH "SqlType unset for passingNumber")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "question")))
                    (DBName (packPTH "question")))
                   ((FTTypeCon Nothing) (packPTH "Question")))
                  (SqlOther (packPTH "SqlType unset for question")))
                 [])
                True)
               (EmbedRef
                  ((EmbedEntityDef (HaskellName (packPTH "Question")))
                     [((EmbedFieldDef (DBName (packPTH "text"))) Nothing) Nothing,
                      ((EmbedFieldDef (DBName (packPTH "option"))) Nothing) Nothing,
                      ((EmbedFieldDef (DBName (packPTH "answer"))) Nothing) Nothing]))])
           [])
          [])
         [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
        (Data.Map.Internal.fromList []))
       False
       {entityFields = [((((((FieldDef (HaskellName (packPTH "name")))
                               (DBName (packPTH "name")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "description")))
                               (DBName (packPTH "description")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "creationDate")))
                               (DBName (packPTH "creation_date")))
                              ((FTTypeCon Nothing) (packPTH "UTCTime")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy UTCTime)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "passingNumber")))
                               (DBName (packPTH "passing_number")))
                              ((FTTypeCon Nothing) (packPTH "Int")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Int)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "question")))
                               (DBName (packPTH "question")))
                              ((FTTypeCon Nothing) (packPTH "Question")))
                             SqlString)
                            [])
                           True)
                          (EmbedRef
                             ((EmbedEntityDef (HaskellName (packPTH "Question")))
                                [((EmbedFieldDef (DBName (packPTH "text"))) Nothing) Nothing,
                                 ((EmbedFieldDef (DBName (packPTH "option"))) Nothing) Nothing,
                                 ((EmbedFieldDef (DBName (packPTH "answer"))) Nothing) Nothing]))],
        entityId = ((((((FieldDef (HaskellName (packPTH "Id")))
                          (DBName (packPTH "id")))
                         ((FTTypeCon Nothing) (packPTH "QuizId")))
                        (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                           (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                       [])
                      True)
                     ((ForeignRef (HaskellName (packPTH "Quiz")))
                        ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))},
     (((((((((EntityDef (HaskellName (packPTH "QuizResult")))
               (DBName (packPTH "quiz_result")))
              (((((((FieldDef (HaskellName (packPTH "Id")))
                      (DBName (packPTH "id")))
                     ((FTTypeCon Nothing) (packPTH "QuizResultId")))
                    SqlInt64)
                   [])
                  True)
                 ((ForeignRef (HaskellName (packPTH "QuizResult")))
                    ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
             [packPTH "json"])
            [((((((FieldDef (HaskellName (packPTH "testKey")))
                    (DBName (packPTH "test_key")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for testKey")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "result")))
                    (DBName (packPTH "result")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for result")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "passingDate")))
                    (DBName (packPTH "passing_date")))
                   ((FTTypeCon Nothing) (packPTH "UTCTime")))
                  (SqlOther (packPTH "SqlType unset for passingDate")))
                 [])
                True)
               NoReference])
           [])
          [])
         [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
        (Data.Map.Internal.fromList []))
       False
       {entityFields = [((((((FieldDef (HaskellName (packPTH "testKey")))
                               (DBName (packPTH "test_key")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "result")))
                               (DBName (packPTH "result")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "passingDate")))
                               (DBName (packPTH "passing_date")))
                              ((FTTypeCon Nothing) (packPTH "UTCTime")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy UTCTime)))
                            [])
                           True)
                          NoReference],
        entityId = ((((((FieldDef (HaskellName (packPTH "Id")))
                          (DBName (packPTH "id")))
                         ((FTTypeCon Nothing) (packPTH "QuizResultId")))
                        (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                           (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                       [])
                      True)
                     ((ForeignRef (HaskellName (packPTH "QuizResult")))
                        ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))},
     (((((((((EntityDef (HaskellName (packPTH "User")))
               (DBName (packPTH "user")))
              (((((((FieldDef (HaskellName (packPTH "Id")))
                      (DBName (packPTH "id")))
                     ((FTTypeCon Nothing) (packPTH "UserId")))
                    SqlInt64)
                   [])
                  True)
                 ((ForeignRef (HaskellName (packPTH "User")))
                    ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
             [packPTH "json"])
            [((((((FieldDef (HaskellName (packPTH "username")))
                    (DBName (packPTH "username")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for username")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "password")))
                    (DBName (packPTH "password")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for password")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "email")))
                    (DBName (packPTH "email")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for email")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "avatar")))
                    (DBName (packPTH "avatar")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for avatar")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "firstName")))
                    (DBName (packPTH "first_name")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for firstName")))
                 [packPTH "Maybe"])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "secondName")))
                    (DBName (packPTH "second_name")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for secondName")))
                 [packPTH "Maybe"])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "birthDay")))
                    (DBName (packPTH "birth_day")))
                   ((FTTypeCon Nothing) (packPTH "UTCTime")))
                  (SqlOther (packPTH "SqlType unset for birthDay")))
                 [packPTH "Maybe"])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "sex")))
                    (DBName (packPTH "sex")))
                   ((FTTypeCon Nothing) (packPTH "Gender")))
                  (SqlOther (packPTH "SqlType unset for sex")))
                 [packPTH "Maybe"])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "createdQuizzes")))
                    (DBName (packPTH "created_quizzes")))
                   (FTList ((FTTypeCon Nothing) (packPTH "QuizId"))))
                  (SqlOther (packPTH "SqlType unset for createdQuizzes")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "passedQuizzes")))
                    (DBName (packPTH "passed_quizzes")))
                   (FTList ((FTTypeCon Nothing) (packPTH "QuizResult"))))
                  (SqlOther (packPTH "SqlType unset for passedQuizzes")))
                 [])
                True)
               (EmbedRef
                  ((EmbedEntityDef (HaskellName (packPTH "QuizResult")))
                     [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing) Nothing,
                      ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                      ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                        Nothing]))])
           [])
          [])
         [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
        (Data.Map.Internal.fromList []))
       False
       {entityFields = [((((((FieldDef (HaskellName (packPTH "username")))
                               (DBName (packPTH "username")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "password")))
                               (DBName (packPTH "password")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "email")))
                               (DBName (packPTH "email")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "avatar")))
                               (DBName (packPTH "avatar")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "firstName")))
                               (DBName (packPTH "first_name")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [packPTH "Maybe"])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "secondName")))
                               (DBName (packPTH "second_name")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [packPTH "Maybe"])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "birthDay")))
                               (DBName (packPTH "birth_day")))
                              ((FTTypeCon Nothing) (packPTH "UTCTime")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy UTCTime)))
                            [packPTH "Maybe"])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "sex")))
                               (DBName (packPTH "sex")))
                              ((FTTypeCon Nothing) (packPTH "Gender")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Gender)))
                            [packPTH "Maybe"])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "createdQuizzes")))
                               (DBName (packPTH "created_quizzes")))
                              (FTList ((FTTypeCon Nothing) (packPTH "QuizId"))))
                             SqlString)
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "passedQuizzes")))
                               (DBName (packPTH "passed_quizzes")))
                              (FTList ((FTTypeCon Nothing) (packPTH "QuizResult"))))
                             SqlString)
                            [])
                           True)
                          (EmbedRef
                             ((EmbedEntityDef (HaskellName (packPTH "QuizResult")))
                                [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing) Nothing,
                                 ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                                 ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                                   Nothing]))],
        entityId = ((((((FieldDef (HaskellName (packPTH "Id")))
                          (DBName (packPTH "id")))
                         ((FTTypeCon Nothing) (packPTH "UserId")))
                        (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                           (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                       [])
                      True)
                     ((ForeignRef (HaskellName (packPTH "User")))
                        ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))}]
/home/nikita/Projects/labs/Databases/Course-Project/Server/src/Model/User.hs:(27,1)-(57,2): Splicing declarations
    share
      [mkPersist (mkPersistSettings (ConT ''MongoContext))]
      ([(((((((((EntityDef (HaskellName (packPTH "Question")))
                  (DBName (packPTH "question")))
                 (((((((FieldDef (HaskellName (packPTH "Id")))
                         (DBName (packPTH "id")))
                        ((FTTypeCon Nothing) (packPTH "QuestionId")))
                       SqlInt64)
                      [])
                     True)
                    ((ForeignRef (HaskellName (packPTH "Question")))
                       ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                [packPTH "json"])
               [((((((FieldDef (HaskellName (packPTH "text")))
                       (DBName (packPTH "text")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for text")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "option")))
                       (DBName (packPTH "option")))
                      ((FTTypeCon Nothing) (packPTH "QuestionOptions")))
                     (SqlOther (packPTH "SqlType unset for option")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "answer")))
                       (DBName (packPTH "answer")))
                      ((FTTypeCon Nothing) (packPTH "QuestionAnswer")))
                     (SqlOther (packPTH "SqlType unset for answer")))
                    [])
                   True)
                  NoReference])
              [])
             [])
            [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
           (Data.Map.Internal.fromList []))
          False
          {entityFields = [((((((FieldDef (HaskellName (packPTH "text")))
                                  (DBName (packPTH "text")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "option")))
                                  (DBName (packPTH "option")))
                                 ((FTTypeCon Nothing) (packPTH "QuestionOptions")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy QuestionOptions)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "answer")))
                                  (DBName (packPTH "answer")))
                                 ((FTTypeCon Nothing) (packPTH "QuestionAnswer")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy QuestionAnswer)))
                               [])
                              True)
                             NoReference],
           entityId = ((((((FieldDef (HaskellName (packPTH "Id")))
                             (DBName (packPTH "id")))
                            ((FTTypeCon Nothing) (packPTH "QuestionId")))
                           (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                              (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                          [])
                         True)
                        ((ForeignRef (HaskellName (packPTH "Question")))
                           ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))},
        (((((((((EntityDef (HaskellName (packPTH "Quiz")))
                  (DBName (packPTH "quiz")))
                 (((((((FieldDef (HaskellName (packPTH "Id")))
                         (DBName (packPTH "id")))
                        ((FTTypeCon Nothing) (packPTH "QuizId")))
                       SqlInt64)
                      [])
                     True)
                    ((ForeignRef (HaskellName (packPTH "Quiz")))
                       ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                [packPTH "json"])
               [((((((FieldDef (HaskellName (packPTH "name")))
                       (DBName (packPTH "name")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for name")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "description")))
                       (DBName (packPTH "description")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for description")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "creationDate")))
                       (DBName (packPTH "creation_date")))
                      ((FTTypeCon Nothing) (packPTH "UTCTime")))
                     (SqlOther (packPTH "SqlType unset for creationDate")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "passingNumber")))
                       (DBName (packPTH "passing_number")))
                      ((FTTypeCon Nothing) (packPTH "Int")))
                     (SqlOther (packPTH "SqlType unset for passingNumber")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "question")))
                       (DBName (packPTH "question")))
                      ((FTTypeCon Nothing) (packPTH "Question")))
                     (SqlOther (packPTH "SqlType unset for question")))
                    [])
                   True)
                  (EmbedRef
                     ((EmbedEntityDef (HaskellName (packPTH "Question")))
                        [((EmbedFieldDef (DBName (packPTH "text"))) Nothing) Nothing,
                         ((EmbedFieldDef (DBName (packPTH "option"))) Nothing) Nothing,
                         ((EmbedFieldDef (DBName (packPTH "answer"))) Nothing) Nothing]))])
              [])
             [])
            [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
           (Data.Map.Internal.fromList []))
          False
          {entityFields = [((((((FieldDef (HaskellName (packPTH "name")))
                                  (DBName (packPTH "name")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "description")))
                                  (DBName (packPTH "description")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "creationDate")))
                                  (DBName (packPTH "creation_date")))
                                 ((FTTypeCon Nothing) (packPTH "UTCTime")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy UTCTime)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "passingNumber")))
                                  (DBName (packPTH "passing_number")))
                                 ((FTTypeCon Nothing) (packPTH "Int")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Int)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "question")))
                                  (DBName (packPTH "question")))
                                 ((FTTypeCon Nothing) (packPTH "Question")))
                                SqlString)
                               [])
                              True)
                             (EmbedRef
                                ((EmbedEntityDef (HaskellName (packPTH "Question")))
                                   [((EmbedFieldDef (DBName (packPTH "text"))) Nothing) Nothing,
                                    ((EmbedFieldDef (DBName (packPTH "option"))) Nothing) Nothing,
                                    ((EmbedFieldDef (DBName (packPTH "answer"))) Nothing)
                                      Nothing]))],
           entityId = ((((((FieldDef (HaskellName (packPTH "Id")))
                             (DBName (packPTH "id")))
                            ((FTTypeCon Nothing) (packPTH "QuizId")))
                           (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                              (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                          [])
                         True)
                        ((ForeignRef (HaskellName (packPTH "Quiz")))
                           ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))},
        (((((((((EntityDef (HaskellName (packPTH "QuizResult")))
                  (DBName (packPTH "quiz_result")))
                 (((((((FieldDef (HaskellName (packPTH "Id")))
                         (DBName (packPTH "id")))
                        ((FTTypeCon Nothing) (packPTH "QuizResultId")))
                       SqlInt64)
                      [])
                     True)
                    ((ForeignRef (HaskellName (packPTH "QuizResult")))
                       ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                [packPTH "json"])
               [((((((FieldDef (HaskellName (packPTH "testKey")))
                       (DBName (packPTH "test_key")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for testKey")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "result")))
                       (DBName (packPTH "result")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for result")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "passingDate")))
                       (DBName (packPTH "passing_date")))
                      ((FTTypeCon Nothing) (packPTH "UTCTime")))
                     (SqlOther (packPTH "SqlType unset for passingDate")))
                    [])
                   True)
                  NoReference])
              [])
             [])
            [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
           (Data.Map.Internal.fromList []))
          False
          {entityFields = [((((((FieldDef (HaskellName (packPTH "testKey")))
                                  (DBName (packPTH "test_key")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "result")))
                                  (DBName (packPTH "result")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "passingDate")))
                                  (DBName (packPTH "passing_date")))
                                 ((FTTypeCon Nothing) (packPTH "UTCTime")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy UTCTime)))
                               [])
                              True)
                             NoReference],
           entityId = ((((((FieldDef (HaskellName (packPTH "Id")))
                             (DBName (packPTH "id")))
                            ((FTTypeCon Nothing) (packPTH "QuizResultId")))
                           (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                              (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                          [])
                         True)
                        ((ForeignRef (HaskellName (packPTH "QuizResult")))
                           ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))},
        (((((((((EntityDef (HaskellName (packPTH "User")))
                  (DBName (packPTH "user")))
                 (((((((FieldDef (HaskellName (packPTH "Id")))
                         (DBName (packPTH "id")))
                        ((FTTypeCon Nothing) (packPTH "UserId")))
                       SqlInt64)
                      [])
                     True)
                    ((ForeignRef (HaskellName (packPTH "User")))
                       ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                [packPTH "json"])
               [((((((FieldDef (HaskellName (packPTH "username")))
                       (DBName (packPTH "username")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for username")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "password")))
                       (DBName (packPTH "password")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for password")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "email")))
                       (DBName (packPTH "email")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for email")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "avatar")))
                       (DBName (packPTH "avatar")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for avatar")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "firstName")))
                       (DBName (packPTH "first_name")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for firstName")))
                    [packPTH "Maybe"])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "secondName")))
                       (DBName (packPTH "second_name")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for secondName")))
                    [packPTH "Maybe"])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "birthDay")))
                       (DBName (packPTH "birth_day")))
                      ((FTTypeCon Nothing) (packPTH "UTCTime")))
                     (SqlOther (packPTH "SqlType unset for birthDay")))
                    [packPTH "Maybe"])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "sex")))
                       (DBName (packPTH "sex")))
                      ((FTTypeCon Nothing) (packPTH "Gender")))
                     (SqlOther (packPTH "SqlType unset for sex")))
                    [packPTH "Maybe"])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "createdQuizzes")))
                       (DBName (packPTH "created_quizzes")))
                      (FTList ((FTTypeCon Nothing) (packPTH "QuizId"))))
                     (SqlOther (packPTH "SqlType unset for createdQuizzes")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "passedQuizzes")))
                       (DBName (packPTH "passed_quizzes")))
                      (FTList ((FTTypeCon Nothing) (packPTH "QuizResult"))))
                     (SqlOther (packPTH "SqlType unset for passedQuizzes")))
                    [])
                   True)
                  (EmbedRef
                     ((EmbedEntityDef (HaskellName (packPTH "QuizResult")))
                        [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing) Nothing,
                         ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                         ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                           Nothing]))])
              [])
             [])
            [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
           (Data.Map.Internal.fromList []))
          False
          {entityFields = [((((((FieldDef (HaskellName (packPTH "username")))
                                  (DBName (packPTH "username")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "password")))
                                  (DBName (packPTH "password")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "email")))
                                  (DBName (packPTH "email")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "avatar")))
                                  (DBName (packPTH "avatar")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "firstName")))
                                  (DBName (packPTH "first_name")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [packPTH "Maybe"])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "secondName")))
                                  (DBName (packPTH "second_name")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [packPTH "Maybe"])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "birthDay")))
                                  (DBName (packPTH "birth_day")))
                                 ((FTTypeCon Nothing) (packPTH "UTCTime")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy UTCTime)))
                               [packPTH "Maybe"])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "sex")))
                                  (DBName (packPTH "sex")))
                                 ((FTTypeCon Nothing) (packPTH "Gender")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Gender)))
                               [packPTH "Maybe"])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "createdQuizzes")))
                                  (DBName (packPTH "created_quizzes")))
                                 (FTList ((FTTypeCon Nothing) (packPTH "QuizId"))))
                                SqlString)
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "passedQuizzes")))
                                  (DBName (packPTH "passed_quizzes")))
                                 (FTList ((FTTypeCon Nothing) (packPTH "QuizResult"))))
                                SqlString)
                               [])
                              True)
                             (EmbedRef
                                ((EmbedEntityDef (HaskellName (packPTH "QuizResult")))
                                   [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing) Nothing,
                                    ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                                    ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                                      Nothing]))],
           entityId = ((((((FieldDef (HaskellName (packPTH "Id")))
                             (DBName (packPTH "id")))
                            ((FTTypeCon Nothing) (packPTH "UserId")))
                           (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                              (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                          [])
                         True)
                        ((ForeignRef (HaskellName (packPTH "User")))
                           ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))}])
  ======>
    instance PersistField Question where
      toPersistValue
        = \ ent_aOw2
            -> (PersistMap
                  $ ((zip ((map Data.Text.pack) ["text", "option", "answer"]))
                       ((map toPersistValue) $ (toPersistFields ent_aOw2))))
      fromPersistValue
        = ((\ x_aOw3
              -> let
                   columns_aOw4
                     = unordered-containers-0.2.9.0:Data.HashMap.Strict.fromList x_aOw3
                 in
                   (fromPersistValues
                      $ ((map
                            (\ name_aOw5
                               -> case
                                      (unordered-containers-0.2.9.0:Data.HashMap.Base.lookup
                                         (Data.Text.pack name_aOw5))
                                        columns_aOw4
                                  of
                                    Just v_aOw6 -> v_aOw6
                                    Nothing -> PersistNull))
                           $ ["text", "option", "answer"])))
             Control.Monad.<=< getPersistMap)
    instance persistent-2.8.1:Database.Persist.Sql.Class.PersistFieldSql Question where
      persistent-2.8.1:Database.Persist.Sql.Class.sqlType _ = SqlString
    instance PersistField Quiz where
      toPersistValue
        = \ ent_aOw7
            -> (PersistMap
                  $ ((zip
                        ((map Data.Text.pack)
                           ["name", "description", "creationDate", "passingNumber",
                            "question"]))
                       ((map toPersistValue) $ (toPersistFields ent_aOw7))))
      fromPersistValue
        = ((\ x_aOw8
              -> let
                   columns_aOw9
                     = unordered-containers-0.2.9.0:Data.HashMap.Strict.fromList x_aOw8
                 in
                   (fromPersistValues
                      $ ((map
                            (\ name_aOwa
                               -> case
                                      (unordered-containers-0.2.9.0:Data.HashMap.Base.lookup
                                         (Data.Text.pack name_aOwa))
                                        columns_aOw9
                                  of
                                    Just v_aOwb -> v_aOwb
                                    Nothing -> PersistNull))
                           $ ["name", "description", "creationDate", "passingNumber",
                              "question"])))
             Control.Monad.<=< getPersistMap)
    instance persistent-2.8.1:Database.Persist.Sql.Class.PersistFieldSql Quiz where
      persistent-2.8.1:Database.Persist.Sql.Class.sqlType _ = SqlString
    instance PersistField QuizResult where
      toPersistValue
        = \ ent_aOwc
            -> (PersistMap
                  $ ((zip
                        ((map Data.Text.pack) ["testKey", "result", "passingDate"]))
                       ((map toPersistValue) $ (toPersistFields ent_aOwc))))
      fromPersistValue
        = ((\ x_aOwd
              -> let
                   columns_aOwe
                     = unordered-containers-0.2.9.0:Data.HashMap.Strict.fromList x_aOwd
                 in
                   (fromPersistValues
                      $ ((map
                            (\ name_aOwf
                               -> case
                                      (unordered-containers-0.2.9.0:Data.HashMap.Base.lookup
                                         (Data.Text.pack name_aOwf))
                                        columns_aOwe
                                  of
                                    Just v_aOwg -> v_aOwg
                                    Nothing -> PersistNull))
                           $ ["testKey", "result", "passingDate"])))
             Control.Monad.<=< getPersistMap)
    instance persistent-2.8.1:Database.Persist.Sql.Class.PersistFieldSql QuizResult where
      persistent-2.8.1:Database.Persist.Sql.Class.sqlType _ = SqlString
    instance PersistField User where
      toPersistValue
        = \ ent_aOwh
            -> (PersistMap
                  $ ((zip
                        ((map Data.Text.pack)
                           ["username", "password", "email", "avatar", "firstName",
                            "secondName", "birthDay", "sex", "createdQuizzes",
                            "passedQuizzes"]))
                       ((map toPersistValue) $ (toPersistFields ent_aOwh))))
      fromPersistValue
        = ((\ x_aOwi
              -> let
                   columns_aOwj
                     = unordered-containers-0.2.9.0:Data.HashMap.Strict.fromList x_aOwi
                 in
                   (fromPersistValues
                      $ ((map
                            (\ name_aOwk
                               -> case
                                      (unordered-containers-0.2.9.0:Data.HashMap.Base.lookup
                                         (Data.Text.pack name_aOwk))
                                        columns_aOwj
                                  of
                                    Just v_aOwl -> v_aOwl
                                    Nothing -> PersistNull))
                           $ ["username", "password", "email", "avatar", "firstName",
                              "secondName", "birthDay", "sex", "createdQuizzes",
                              "passedQuizzes"])))
             Control.Monad.<=< getPersistMap)
    instance persistent-2.8.1:Database.Persist.Sql.Class.PersistFieldSql User where
      persistent-2.8.1:Database.Persist.Sql.Class.sqlType _ = SqlString
    data Question
      = Question {questionText :: !Text,
                  questionOption :: !QuestionOptions,
                  questionAnswer :: !QuestionAnswer}
      deriving (Eq, Read, Show, Generic)
    type QuestionId = Key Question
    instance PersistEntity Question where
      type PersistEntityBackend Question = MongoContext
      data Unique Question
      newtype Key Question
        = QuestionKey {unQuestionKey :: (BackendKey MongoContext)}
        deriving (Show,
                  Read,
                  Eq,
                  Ord,
                  path-pieces-0.2.1:Web.PathPieces.PathPiece,
                  http-api-data-0.3.7.2:Web.Internal.HttpApiData.ToHttpApiData,
                  http-api-data-0.3.7.2:Web.Internal.HttpApiData.FromHttpApiData,
                  PersistField,
                  persistent-2.8.1:Database.Persist.Sql.Class.PersistFieldSql,
                  ToJSON,
                  FromJSON)
      data EntityField Question typ
        = typ ~ Key Question => QuestionId |
          typ ~ Text => QuestionText |
          typ ~ QuestionOptions => QuestionOption |
          typ ~ QuestionAnswer => QuestionAnswer
      keyToValues
        = ((ghc-prim-0.5.1.1:GHC.Types.: [])
             . (toPersistValue . unQuestionKey))
      keyFromValues
        = ((fmap QuestionKey)
             . (fromPersistValue . Database.Persist.TH.headNote))
      entityDef _
        = (((((((((EntityDef (HaskellName (packPTH "Question")))
                    (DBName (packPTH "question")))
                   (((((((FieldDef (HaskellName (packPTH "Id")))
                           (DBName (packPTH "id")))
                          ((FTTypeCon Nothing) (packPTH "QuestionId")))
                         SqlInt64)
                        [])
                       True)
                      ((ForeignRef (HaskellName (packPTH "Question")))
                         ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                  [packPTH "json"])
                 [((((((FieldDef (HaskellName (packPTH "text")))
                         (DBName (packPTH "text")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "option")))
                         (DBName (packPTH "option")))
                        ((FTTypeCon Nothing) (packPTH "QuestionOptions")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "answer")))
                         (DBName (packPTH "answer")))
                        ((FTTypeCon Nothing) (packPTH "QuestionAnswer")))
                       SqlString)
                      [])
                     True)
                    NoReference])
                [])
               [])
              [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
             (Data.Map.Internal.fromList []))
            False
      toPersistFields (Question x_aOwm x_aOwn x_aOwo)
        = [SomePersistField x_aOwm, SomePersistField x_aOwn,
           SomePersistField x_aOwo]
      fromPersistValues [x1_aOwq, x2_aOwr, x3_aOws]
        = Question
            <$>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "text")))
                 . fromPersistValue)
                x1_aOwq
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "option")))
                 . fromPersistValue)
                x2_aOwr
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "answer")))
                 . fromPersistValue)
                x3_aOws
      fromPersistValues x_aOwp
        = (Left
             $ ((mappend (packPTH "Question: fromPersistValues failed on: "))
                  (Data.Text.pack $ (show x_aOwp))))
      persistUniqueToFieldNames _
        = error "Degenerate case, should never happen"
      persistUniqueToValues _
        = error "Degenerate case, should never happen"
      persistUniqueKeys (Question _text_aOwt _option_aOwu _answer_aOwv)
        = []
      persistFieldDef QuestionId
        = ((((((FieldDef (HaskellName (packPTH "Id")))
                 (DBName (packPTH "id")))
                ((FTTypeCon Nothing) (packPTH "QuestionId")))
               SqlInt64)
              [])
             True)
            ((ForeignRef (HaskellName (packPTH "Question")))
               ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))
      persistFieldDef QuestionText
        = ((((((FieldDef (HaskellName (packPTH "text")))
                 (DBName (packPTH "text")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef QuestionOption
        = ((((((FieldDef (HaskellName (packPTH "option")))
                 (DBName (packPTH "option")))
                ((FTTypeCon Nothing) (packPTH "QuestionOptions")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef QuestionAnswer
        = ((((((FieldDef (HaskellName (packPTH "answer")))
                 (DBName (packPTH "answer")))
                ((FTTypeCon Nothing) (packPTH "QuestionAnswer")))
               SqlString)
              [])
             True)
            NoReference
      persistIdField = QuestionId
      fieldLens QuestionId
        = (lensPTH entityKey)
            (\ Entity _ value_aOww key_aOwx -> (Entity key_aOwx) value_aOww)
      fieldLens QuestionText
        = (lensPTH (questionText . entityVal))
            (\ Entity key_aOwy value_aOwz x_aOwA
               -> (Entity key_aOwy) value_aOwz {questionText = x_aOwA})
      fieldLens QuestionOption
        = (lensPTH (questionOption . entityVal))
            (\ Entity key_aOwy value_aOwz x_aOwA
               -> (Entity key_aOwy) value_aOwz {questionOption = x_aOwA})
      fieldLens QuestionAnswer
        = (lensPTH (questionAnswer . entityVal))
            (\ Entity key_aOwy value_aOwz x_aOwA
               -> (Entity key_aOwy) value_aOwz {questionAnswer = x_aOwA})
    instance ToBackendKey MongoContext Question where
      toBackendKey = unQuestionKey
      fromBackendKey = QuestionKey
    data Quiz
      = Quiz {quizName :: !Text,
              quizDescription :: !Text,
              quizCreationDate :: !UTCTime,
              quizPassingNumber :: !Int,
              quizQuestion :: !Question}
      deriving (Eq, Read, Show, Generic)
    type QuizId = Key Quiz
    instance PersistEntity Quiz where
      type PersistEntityBackend Quiz = MongoContext
      data Unique Quiz
      newtype Key Quiz
        = QuizKey {unQuizKey :: (BackendKey MongoContext)}
        deriving (Show,
                  Read,
                  Eq,
                  Ord,
                  path-pieces-0.2.1:Web.PathPieces.PathPiece,
                  http-api-data-0.3.7.2:Web.Internal.HttpApiData.ToHttpApiData,
                  http-api-data-0.3.7.2:Web.Internal.HttpApiData.FromHttpApiData,
                  PersistField,
                  persistent-2.8.1:Database.Persist.Sql.Class.PersistFieldSql,
                  ToJSON,
                  FromJSON)
      data EntityField Quiz typ
        = typ ~ Key Quiz => QuizId |
          typ ~ Text => QuizName |
          typ ~ Text => QuizDescription |
          typ ~ UTCTime => QuizCreationDate |
          typ ~ Int => QuizPassingNumber |
          typ ~ Question => QuizQuestion
      keyToValues
        = ((ghc-prim-0.5.1.1:GHC.Types.: [])
             . (toPersistValue . unQuizKey))
      keyFromValues
        = ((fmap QuizKey)
             . (fromPersistValue . Database.Persist.TH.headNote))
      entityDef _
        = (((((((((EntityDef (HaskellName (packPTH "Quiz")))
                    (DBName (packPTH "quiz")))
                   (((((((FieldDef (HaskellName (packPTH "Id")))
                           (DBName (packPTH "id")))
                          ((FTTypeCon Nothing) (packPTH "QuizId")))
                         SqlInt64)
                        [])
                       True)
                      ((ForeignRef (HaskellName (packPTH "Quiz")))
                         ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                  [packPTH "json"])
                 [((((((FieldDef (HaskellName (packPTH "name")))
                         (DBName (packPTH "name")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "description")))
                         (DBName (packPTH "description")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "creationDate")))
                         (DBName (packPTH "creation_date")))
                        ((FTTypeCon Nothing) (packPTH "UTCTime")))
                       SqlDayTime)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "passingNumber")))
                         (DBName (packPTH "passing_number")))
                        ((FTTypeCon Nothing) (packPTH "Int")))
                       SqlInt64)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "question")))
                         (DBName (packPTH "question")))
                        ((FTTypeCon Nothing) (packPTH "Question")))
                       SqlString)
                      [])
                     True)
                    (EmbedRef
                       ((EmbedEntityDef (HaskellName (packPTH "Question")))
                          [((EmbedFieldDef (DBName (packPTH "text"))) Nothing) Nothing,
                           ((EmbedFieldDef (DBName (packPTH "option"))) Nothing) Nothing,
                           ((EmbedFieldDef (DBName (packPTH "answer"))) Nothing) Nothing]))])
                [])
               [])
              [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
             (Data.Map.Internal.fromList []))
            False
      toPersistFields (Quiz x_aOwB x_aOwC x_aOwD x_aOwE x_aOwF)
        = [SomePersistField x_aOwB, SomePersistField x_aOwC,
           SomePersistField x_aOwD, SomePersistField x_aOwE,
           SomePersistField x_aOwF]
      fromPersistValues [x1_aOwH, x2_aOwI, x3_aOwJ, x4_aOwK, x5_aOwL]
        = Quiz
            <$>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "name")))
                 . fromPersistValue)
                x1_aOwH
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "description")))
                 . fromPersistValue)
                x2_aOwI
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "creationDate")))
                 . fromPersistValue)
                x3_aOwJ
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "passingNumber")))
                 . fromPersistValue)
                x4_aOwK
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "question")))
                 . fromPersistValue)
                x5_aOwL
      fromPersistValues x_aOwG
        = (Left
             $ ((mappend (packPTH "Quiz: fromPersistValues failed on: "))
                  (Data.Text.pack $ (show x_aOwG))))
      persistUniqueToFieldNames _
        = error "Degenerate case, should never happen"
      persistUniqueToValues _
        = error "Degenerate case, should never happen"
      persistUniqueKeys
        (Quiz _name_aOwM
              _description_aOwN
              _creationDate_aOwO
              _passingNumber_aOwP
              _question_aOwQ)
        = []
      persistFieldDef QuizId
        = ((((((FieldDef (HaskellName (packPTH "Id")))
                 (DBName (packPTH "id")))
                ((FTTypeCon Nothing) (packPTH "QuizId")))
               SqlInt64)
              [])
             True)
            ((ForeignRef (HaskellName (packPTH "Quiz")))
               ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))
      persistFieldDef QuizName
        = ((((((FieldDef (HaskellName (packPTH "name")))
                 (DBName (packPTH "name")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef QuizDescription
        = ((((((FieldDef (HaskellName (packPTH "description")))
                 (DBName (packPTH "description")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef QuizCreationDate
        = ((((((FieldDef (HaskellName (packPTH "creationDate")))
                 (DBName (packPTH "creation_date")))
                ((FTTypeCon Nothing) (packPTH "UTCTime")))
               SqlDayTime)
              [])
             True)
            NoReference
      persistFieldDef QuizPassingNumber
        = ((((((FieldDef (HaskellName (packPTH "passingNumber")))
                 (DBName (packPTH "passing_number")))
                ((FTTypeCon Nothing) (packPTH "Int")))
               SqlInt64)
              [])
             True)
            NoReference
      persistFieldDef QuizQuestion
        = ((((((FieldDef (HaskellName (packPTH "question")))
                 (DBName (packPTH "question")))
                ((FTTypeCon Nothing) (packPTH "Question")))
               SqlString)
              [])
             True)
            (EmbedRef
               ((EmbedEntityDef (HaskellName (packPTH "Question")))
                  [((EmbedFieldDef (DBName (packPTH "text"))) Nothing) Nothing,
                   ((EmbedFieldDef (DBName (packPTH "option"))) Nothing) Nothing,
                   ((EmbedFieldDef (DBName (packPTH "answer"))) Nothing) Nothing]))
      persistIdField = QuizId
      fieldLens QuizId
        = (lensPTH entityKey)
            (\ Entity _ value_aOwR key_aOwS -> (Entity key_aOwS) value_aOwR)
      fieldLens QuizName
        = (lensPTH (quizName . entityVal))
            (\ Entity key_aOwT value_aOwU x_aOwV
               -> (Entity key_aOwT) value_aOwU {quizName = x_aOwV})
      fieldLens QuizDescription
        = (lensPTH (quizDescription . entityVal))
            (\ Entity key_aOwT value_aOwU x_aOwV
               -> (Entity key_aOwT) value_aOwU {quizDescription = x_aOwV})
      fieldLens QuizCreationDate
        = (lensPTH (quizCreationDate . entityVal))
            (\ Entity key_aOwT value_aOwU x_aOwV
               -> (Entity key_aOwT) value_aOwU {quizCreationDate = x_aOwV})
      fieldLens QuizPassingNumber
        = (lensPTH (quizPassingNumber . entityVal))
            (\ Entity key_aOwT value_aOwU x_aOwV
               -> (Entity key_aOwT) value_aOwU {quizPassingNumber = x_aOwV})
      fieldLens QuizQuestion
        = (lensPTH (quizQuestion . entityVal))
            (\ Entity key_aOwT value_aOwU x_aOwV
               -> (Entity key_aOwT) value_aOwU {quizQuestion = x_aOwV})
    instance ToBackendKey MongoContext Quiz where
      toBackendKey = unQuizKey
      fromBackendKey = QuizKey
    data QuizResult
      = QuizResult {quizResultTestKey :: !Text,
                    quizResultResult :: !Text,
                    quizResultPassingDate :: !UTCTime}
      deriving (Eq, Read, Show, Generic)
    type QuizResultId = Key QuizResult
    instance PersistEntity QuizResult where
      type PersistEntityBackend QuizResult = MongoContext
      data Unique QuizResult
      newtype Key QuizResult
        = QuizResultKey {unQuizResultKey :: (BackendKey MongoContext)}
        deriving (Show,
                  Read,
                  Eq,
                  Ord,
                  path-pieces-0.2.1:Web.PathPieces.PathPiece,
                  http-api-data-0.3.7.2:Web.Internal.HttpApiData.ToHttpApiData,
                  http-api-data-0.3.7.2:Web.Internal.HttpApiData.FromHttpApiData,
                  PersistField,
                  persistent-2.8.1:Database.Persist.Sql.Class.PersistFieldSql,
                  ToJSON,
                  FromJSON)
      data EntityField QuizResult typ
        = typ ~ Key QuizResult => QuizResultId |
          typ ~ Text => QuizResultTestKey |
          typ ~ Text => QuizResultResult |
          typ ~ UTCTime => QuizResultPassingDate
      keyToValues
        = ((ghc-prim-0.5.1.1:GHC.Types.: [])
             . (toPersistValue . unQuizResultKey))
      keyFromValues
        = ((fmap QuizResultKey)
             . (fromPersistValue . Database.Persist.TH.headNote))
      entityDef _
        = (((((((((EntityDef (HaskellName (packPTH "QuizResult")))
                    (DBName (packPTH "quiz_result")))
                   (((((((FieldDef (HaskellName (packPTH "Id")))
                           (DBName (packPTH "id")))
                          ((FTTypeCon Nothing) (packPTH "QuizResultId")))
                         SqlInt64)
                        [])
                       True)
                      ((ForeignRef (HaskellName (packPTH "QuizResult")))
                         ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                  [packPTH "json"])
                 [((((((FieldDef (HaskellName (packPTH "testKey")))
                         (DBName (packPTH "test_key")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "result")))
                         (DBName (packPTH "result")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "passingDate")))
                         (DBName (packPTH "passing_date")))
                        ((FTTypeCon Nothing) (packPTH "UTCTime")))
                       SqlDayTime)
                      [])
                     True)
                    NoReference])
                [])
               [])
              [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
             (Data.Map.Internal.fromList []))
            False
      toPersistFields (QuizResult x_aOwW x_aOwX x_aOwY)
        = [SomePersistField x_aOwW, SomePersistField x_aOwX,
           SomePersistField x_aOwY]
      fromPersistValues [x1_aOx0, x2_aOx1, x3_aOx2]
        = QuizResult
            <$>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "testKey")))
                 . fromPersistValue)
                x1_aOx0
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "result")))
                 . fromPersistValue)
                x2_aOx1
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "passingDate")))
                 . fromPersistValue)
                x3_aOx2
      fromPersistValues x_aOwZ
        = (Left
             $ ((mappend (packPTH "QuizResult: fromPersistValues failed on: "))
                  (Data.Text.pack $ (show x_aOwZ))))
      persistUniqueToFieldNames _
        = error "Degenerate case, should never happen"
      persistUniqueToValues _
        = error "Degenerate case, should never happen"
      persistUniqueKeys
        (QuizResult _testKey_aOx3 _result_aOx4 _passingDate_aOx5)
        = []
      persistFieldDef QuizResultId
        = ((((((FieldDef (HaskellName (packPTH "Id")))
                 (DBName (packPTH "id")))
                ((FTTypeCon Nothing) (packPTH "QuizResultId")))
               SqlInt64)
              [])
             True)
            ((ForeignRef (HaskellName (packPTH "QuizResult")))
               ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))
      persistFieldDef QuizResultTestKey
        = ((((((FieldDef (HaskellName (packPTH "testKey")))
                 (DBName (packPTH "test_key")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef QuizResultResult
        = ((((((FieldDef (HaskellName (packPTH "result")))
                 (DBName (packPTH "result")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef QuizResultPassingDate
        = ((((((FieldDef (HaskellName (packPTH "passingDate")))
                 (DBName (packPTH "passing_date")))
                ((FTTypeCon Nothing) (packPTH "UTCTime")))
               SqlDayTime)
              [])
             True)
            NoReference
      persistIdField = QuizResultId
      fieldLens QuizResultId
        = (lensPTH entityKey)
            (\ Entity _ value_aOx6 key_aOx7 -> (Entity key_aOx7) value_aOx6)
      fieldLens QuizResultTestKey
        = (lensPTH (quizResultTestKey . entityVal))
            (\ Entity key_aOx8 value_aOx9 x_aOxa
               -> (Entity key_aOx8) value_aOx9 {quizResultTestKey = x_aOxa})
      fieldLens QuizResultResult
        = (lensPTH (quizResultResult . entityVal))
            (\ Entity key_aOx8 value_aOx9 x_aOxa
               -> (Entity key_aOx8) value_aOx9 {quizResultResult = x_aOxa})
      fieldLens QuizResultPassingDate
        = (lensPTH (quizResultPassingDate . entityVal))
            (\ Entity key_aOx8 value_aOx9 x_aOxa
               -> (Entity key_aOx8) value_aOx9 {quizResultPassingDate = x_aOxa})
    instance ToBackendKey MongoContext QuizResult where
      toBackendKey = unQuizResultKey
      fromBackendKey = QuizResultKey
    data User
      = User {userUsername :: !Text,
              userPassword :: !Text,
              userEmail :: !Text,
              userAvatar :: !Text,
              userFirstName :: !(Maybe Text),
              userSecondName :: !(Maybe Text),
              userBirthDay :: !(Maybe UTCTime),
              userSex :: !(Maybe Gender),
              userCreatedQuizzes :: ![QuizId],
              userPassedQuizzes :: ![QuizResult]}
      deriving (Eq, Read, Show, Generic)
    type UserId = Key User
    instance PersistEntity User where
      type PersistEntityBackend User = MongoContext
      data Unique User
      newtype Key User
        = UserKey {unUserKey :: (BackendKey MongoContext)}
        deriving (Show,
                  Read,
                  Eq,
                  Ord,
                  path-pieces-0.2.1:Web.PathPieces.PathPiece,
                  http-api-data-0.3.7.2:Web.Internal.HttpApiData.ToHttpApiData,
                  http-api-data-0.3.7.2:Web.Internal.HttpApiData.FromHttpApiData,
                  PersistField,
                  persistent-2.8.1:Database.Persist.Sql.Class.PersistFieldSql,
                  ToJSON,
                  FromJSON)
      data EntityField User typ
        = typ ~ Key User => UserId |
          typ ~ Text => UserUsername |
          typ ~ Text => UserPassword |
          typ ~ Text => UserEmail |
          typ ~ Text => UserAvatar |
          typ ~ Maybe Text => UserFirstName |
          typ ~ Maybe Text => UserSecondName |
          typ ~ Maybe UTCTime => UserBirthDay |
          typ ~ Maybe Gender => UserSex |
          typ ~ [QuizId] => UserCreatedQuizzes |
          typ ~ [QuizResult] => UserPassedQuizzes
      keyToValues
        = ((ghc-prim-0.5.1.1:GHC.Types.: [])
             . (toPersistValue . unUserKey))
      keyFromValues
        = ((fmap UserKey)
             . (fromPersistValue . Database.Persist.TH.headNote))
      entityDef _
        = (((((((((EntityDef (HaskellName (packPTH "User")))
                    (DBName (packPTH "user")))
                   (((((((FieldDef (HaskellName (packPTH "Id")))
                           (DBName (packPTH "id")))
                          ((FTTypeCon Nothing) (packPTH "UserId")))
                         SqlInt64)
                        [])
                       True)
                      ((ForeignRef (HaskellName (packPTH "User")))
                         ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                  [packPTH "json"])
                 [((((((FieldDef (HaskellName (packPTH "username")))
                         (DBName (packPTH "username")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "password")))
                         (DBName (packPTH "password")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "email")))
                         (DBName (packPTH "email")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "avatar")))
                         (DBName (packPTH "avatar")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "firstName")))
                         (DBName (packPTH "first_name")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [packPTH "Maybe"])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "secondName")))
                         (DBName (packPTH "second_name")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [packPTH "Maybe"])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "birthDay")))
                         (DBName (packPTH "birth_day")))
                        ((FTTypeCon Nothing) (packPTH "UTCTime")))
                       SqlDayTime)
                      [packPTH "Maybe"])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "sex")))
                         (DBName (packPTH "sex")))
                        ((FTTypeCon Nothing) (packPTH "Gender")))
                       SqlString)
                      [packPTH "Maybe"])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "createdQuizzes")))
                         (DBName (packPTH "created_quizzes")))
                        (FTList ((FTTypeCon Nothing) (packPTH "QuizId"))))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "passedQuizzes")))
                         (DBName (packPTH "passed_quizzes")))
                        (FTList ((FTTypeCon Nothing) (packPTH "QuizResult"))))
                       SqlString)
                      [])
                     True)
                    (EmbedRef
                       ((EmbedEntityDef (HaskellName (packPTH "QuizResult")))
                          [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing) Nothing,
                           ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                           ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                             Nothing]))])
                [])
               [])
              [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
             (Data.Map.Internal.fromList []))
            False
      toPersistFields
        (User x_aOxb
              x_aOxc
              x_aOxd
              x_aOxe
              x_aOxf
              x_aOxg
              x_aOxh
              x_aOxi
              x_aOxj
              x_aOxk)
        = [SomePersistField x_aOxb, SomePersistField x_aOxc,
           SomePersistField x_aOxd, SomePersistField x_aOxe,
           SomePersistField x_aOxf, SomePersistField x_aOxg,
           SomePersistField x_aOxh, SomePersistField x_aOxi,
           SomePersistField x_aOxj, SomePersistField x_aOxk]
      fromPersistValues
        [x1_aOxm,
         x2_aOxn,
         x3_aOxo,
         x4_aOxp,
         x5_aOxq,
         x6_aOxr,
         x7_aOxs,
         x8_aOxt,
         x9_aOxu,
         x10_aOxv]
        = User
            <$>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "username")))
                 . fromPersistValue)
                x1_aOxm
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "password")))
                 . fromPersistValue)
                x2_aOxn
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "email")))
                 . fromPersistValue)
                x3_aOxo
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "avatar")))
                 . fromPersistValue)
                x4_aOxp
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "firstName")))
                 . fromPersistValue)
                x5_aOxq
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "secondName")))
                 . fromPersistValue)
                x6_aOxr
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "birthDay")))
                 . fromPersistValue)
                x7_aOxs
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "sex")))
                 . fromPersistValue)
                x8_aOxt
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "createdQuizzes")))
                 . fromPersistValue)
                x9_aOxu
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "passedQuizzes")))
                 . fromPersistValue)
                x10_aOxv
      fromPersistValues x_aOxl
        = (Left
             $ ((mappend (packPTH "User: fromPersistValues failed on: "))
                  (Data.Text.pack $ (show x_aOxl))))
      persistUniqueToFieldNames _
        = error "Degenerate case, should never happen"
      persistUniqueToValues _
        = error "Degenerate case, should never happen"
      persistUniqueKeys
        (User _username_aOxw
              _password_aOxx
              _email_aOxy
              _avatar_aOxz
              _firstName_aOxA
              _secondName_aOxB
              _birthDay_aOxC
              _sex_aOxD
              _createdQuizzes_aOxE
              _passedQuizzes_aOxF)
        = []
      persistFieldDef UserId
        = ((((((FieldDef (HaskellName (packPTH "Id")))
                 (DBName (packPTH "id")))
                ((FTTypeCon Nothing) (packPTH "UserId")))
               SqlInt64)
              [])
             True)
            ((ForeignRef (HaskellName (packPTH "User")))
               ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))
      persistFieldDef UserUsername
        = ((((((FieldDef (HaskellName (packPTH "username")))
                 (DBName (packPTH "username")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef UserPassword
        = ((((((FieldDef (HaskellName (packPTH "password")))
                 (DBName (packPTH "password")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef UserEmail
        = ((((((FieldDef (HaskellName (packPTH "email")))
                 (DBName (packPTH "email")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef UserAvatar
        = ((((((FieldDef (HaskellName (packPTH "avatar")))
                 (DBName (packPTH "avatar")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef UserFirstName
        = ((((((FieldDef (HaskellName (packPTH "firstName")))
                 (DBName (packPTH "first_name")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [packPTH "Maybe"])
             True)
            NoReference
      persistFieldDef UserSecondName
        = ((((((FieldDef (HaskellName (packPTH "secondName")))
                 (DBName (packPTH "second_name")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [packPTH "Maybe"])
             True)
            NoReference
      persistFieldDef UserBirthDay
        = ((((((FieldDef (HaskellName (packPTH "birthDay")))
                 (DBName (packPTH "birth_day")))
                ((FTTypeCon Nothing) (packPTH "UTCTime")))
               SqlDayTime)
              [packPTH "Maybe"])
             True)
            NoReference
      persistFieldDef UserSex
        = ((((((FieldDef (HaskellName (packPTH "sex")))
                 (DBName (packPTH "sex")))
                ((FTTypeCon Nothing) (packPTH "Gender")))
               SqlString)
              [packPTH "Maybe"])
             True)
            NoReference
      persistFieldDef UserCreatedQuizzes
        = ((((((FieldDef (HaskellName (packPTH "createdQuizzes")))
                 (DBName (packPTH "created_quizzes")))
                (FTList ((FTTypeCon Nothing) (packPTH "QuizId"))))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef UserPassedQuizzes
        = ((((((FieldDef (HaskellName (packPTH "passedQuizzes")))
                 (DBName (packPTH "passed_quizzes")))
                (FTList ((FTTypeCon Nothing) (packPTH "QuizResult"))))
               SqlString)
              [])
             True)
            (EmbedRef
               ((EmbedEntityDef (HaskellName (packPTH "QuizResult")))
                  [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing) Nothing,
                   ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                   ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                     Nothing]))
      persistIdField = UserId
      fieldLens UserId
        = (lensPTH entityKey)
            (\ Entity _ value_aOxG key_aOxH -> (Entity key_aOxH) value_aOxG)
      fieldLens UserUsername
        = (lensPTH (userUsername . entityVal))
            (\ Entity key_aOxI value_aOxJ x_aOxK
               -> (Entity key_aOxI) value_aOxJ {userUsername = x_aOxK})
      fieldLens UserPassword
        = (lensPTH (userPassword . entityVal))
            (\ Entity key_aOxI value_aOxJ x_aOxK
               -> (Entity key_aOxI) value_aOxJ {userPassword = x_aOxK})
      fieldLens UserEmail
        = (lensPTH (userEmail . entityVal))
            (\ Entity key_aOxI value_aOxJ x_aOxK
               -> (Entity key_aOxI) value_aOxJ {userEmail = x_aOxK})
      fieldLens UserAvatar
        = (lensPTH (userAvatar . entityVal))
            (\ Entity key_aOxI value_aOxJ x_aOxK
               -> (Entity key_aOxI) value_aOxJ {userAvatar = x_aOxK})
      fieldLens UserFirstName
        = (lensPTH (userFirstName . entityVal))
            (\ Entity key_aOxI value_aOxJ x_aOxK
               -> (Entity key_aOxI) value_aOxJ {userFirstName = x_aOxK})
      fieldLens UserSecondName
        = (lensPTH (userSecondName . entityVal))
            (\ Entity key_aOxI value_aOxJ x_aOxK
               -> (Entity key_aOxI) value_aOxJ {userSecondName = x_aOxK})
      fieldLens UserBirthDay
        = (lensPTH (userBirthDay . entityVal))
            (\ Entity key_aOxI value_aOxJ x_aOxK
               -> (Entity key_aOxI) value_aOxJ {userBirthDay = x_aOxK})
      fieldLens UserSex
        = (lensPTH (userSex . entityVal))
            (\ Entity key_aOxI value_aOxJ x_aOxK
               -> (Entity key_aOxI) value_aOxJ {userSex = x_aOxK})
      fieldLens UserCreatedQuizzes
        = (lensPTH (userCreatedQuizzes . entityVal))
            (\ Entity key_aOxI value_aOxJ x_aOxK
               -> (Entity key_aOxI) value_aOxJ {userCreatedQuizzes = x_aOxK})
      fieldLens UserPassedQuizzes
        = (lensPTH (userPassedQuizzes . entityVal))
            (\ Entity key_aOxI value_aOxJ x_aOxK
               -> (Entity key_aOxI) value_aOxJ {userPassedQuizzes = x_aOxK})
    instance ToBackendKey MongoContext User where
      toBackendKey = unUserKey
      fromBackendKey = UserKey
    instance ToJSON Question where
      aeson-1.2.4.0:Data.Aeson.Types.ToJSON.toJSON
        (Question text_aOxM option_aOxN answer_aOxO)
        = aeson-1.2.4.0:Data.Aeson.Types.Internal.object
            [((Data.Text.pack "text")
                aeson-1.2.4.0:Data.Aeson.Types.ToJSON..= text_aOxM),
             ((Data.Text.pack "option")
                aeson-1.2.4.0:Data.Aeson.Types.ToJSON..= option_aOxN),
             ((Data.Text.pack "answer")
                aeson-1.2.4.0:Data.Aeson.Types.ToJSON..= answer_aOxO)]
    instance FromJSON Question where
      aeson-1.2.4.0:Data.Aeson.Types.FromJSON.parseJSON
        (aeson-1.2.4.0:Data.Aeson.Types.Internal.Object obj_aOxL)
        = ((((pure Question)
               <*>
                 (obj_aOxL
                    aeson-1.2.4.0:Data.Aeson.Types.FromJSON..:
                      (Data.Text.pack "text")))
              <*>
                (obj_aOxL
                   aeson-1.2.4.0:Data.Aeson.Types.FromJSON..:
                     (Data.Text.pack "option")))
             <*>
               (obj_aOxL
                  aeson-1.2.4.0:Data.Aeson.Types.FromJSON..:
                    (Data.Text.pack "answer")))
      aeson-1.2.4.0:Data.Aeson.Types.FromJSON.parseJSON _
        = GHC.Base.mzero
    instance ToJSON (Entity Question) where
      aeson-1.2.4.0:Data.Aeson.Types.ToJSON.toJSON = entityIdToJSON
    instance FromJSON (Entity Question) where
      aeson-1.2.4.0:Data.Aeson.Types.FromJSON.parseJSON
        = entityIdFromJSON
    instance ToJSON Quiz where
      aeson-1.2.4.0:Data.Aeson.Types.ToJSON.toJSON
        (Quiz name_aOxQ
              description_aOxR
              creationDate_aOxS
              passingNumber_aOxT
              question_aOxU)
        = aeson-1.2.4.0:Data.Aeson.Types.Internal.object
            [((Data.Text.pack "name")
                aeson-1.2.4.0:Data.Aeson.Types.ToJSON..= name_aOxQ),
             ((Data.Text.pack "description")
                aeson-1.2.4.0:Data.Aeson.Types.ToJSON..= description_aOxR),
             ((Data.Text.pack "creationDate")
                aeson-1.2.4.0:Data.Aeson.Types.ToJSON..= creationDate_aOxS),
             ((Data.Text.pack "passingNumber")
                aeson-1.2.4.0:Data.Aeson.Types.ToJSON..= passingNumber_aOxT),
             ((Data.Text.pack "question")
                aeson-1.2.4.0:Data.Aeson.Types.ToJSON..= question_aOxU)]
    instance FromJSON Quiz where
      aeson-1.2.4.0:Data.Aeson.Types.FromJSON.parseJSON
        (aeson-1.2.4.0:Data.Aeson.Types.Internal.Object obj_aOxP)
        = ((((((pure Quiz)
                 <*>
                   (obj_aOxP
                      aeson-1.2.4.0:Data.Aeson.Types.FromJSON..:
                        (Data.Text.pack "name")))
                <*>
                  (obj_aOxP
                     aeson-1.2.4.0:Data.Aeson.Types.FromJSON..:
                       (Data.Text.pack "description")))
               <*>
                 (obj_aOxP
                    aeson-1.2.4.0:Data.Aeson.Types.FromJSON..:
                      (Data.Text.pack "creationDate")))
              <*>
                (obj_aOxP
                   aeson-1.2.4.0:Data.Aeson.Types.FromJSON..:
                     (Data.Text.pack "passingNumber")))
             <*>
               (obj_aOxP
                  aeson-1.2.4.0:Data.Aeson.Types.FromJSON..:
                    (Data.Text.pack "question")))
      aeson-1.2.4.0:Data.Aeson.Types.FromJSON.parseJSON _
        = GHC.Base.mzero
    instance ToJSON (Entity Quiz) where
      aeson-1.2.4.0:Data.Aeson.Types.ToJSON.toJSON = entityIdToJSON
    instance FromJSON (Entity Quiz) where
      aeson-1.2.4.0:Data.Aeson.Types.FromJSON.parseJSON
        = entityIdFromJSON
    instance ToJSON QuizResult where
      aeson-1.2.4.0:Data.Aeson.Types.ToJSON.toJSON
        (QuizResult testKey_aOxW result_aOxX passingDate_aOxY)
        = aeson-1.2.4.0:Data.Aeson.Types.Internal.object
            [((Data.Text.pack "testKey")
                aeson-1.2.4.0:Data.Aeson.Types.ToJSON..= testKey_aOxW),
             ((Data.Text.pack "result")
                aeson-1.2.4.0:Data.Aeson.Types.ToJSON..= result_aOxX),
             ((Data.Text.pack "passingDate")
                aeson-1.2.4.0:Data.Aeson.Types.ToJSON..= passingDate_aOxY)]
    instance FromJSON QuizResult where
      aeson-1.2.4.0:Data.Aeson.Types.FromJSON.parseJSON
        (aeson-1.2.4.0:Data.Aeson.Types.Internal.Object obj_aOxV)
        = ((((pure QuizResult)
               <*>
                 (obj_aOxV
                    aeson-1.2.4.0:Data.Aeson.Types.FromJSON..:
                      (Data.Text.pack "testKey")))
              <*>
                (obj_aOxV
                   aeson-1.2.4.0:Data.Aeson.Types.FromJSON..:
                     (Data.Text.pack "result")))
             <*>
               (obj_aOxV
                  aeson-1.2.4.0:Data.Aeson.Types.FromJSON..:
                    (Data.Text.pack "passingDate")))
      aeson-1.2.4.0:Data.Aeson.Types.FromJSON.parseJSON _
        = GHC.Base.mzero
    instance ToJSON (Entity QuizResult) where
      aeson-1.2.4.0:Data.Aeson.Types.ToJSON.toJSON = entityIdToJSON
    instance FromJSON (Entity QuizResult) where
      aeson-1.2.4.0:Data.Aeson.Types.FromJSON.parseJSON
        = entityIdFromJSON
    instance ToJSON User where
      aeson-1.2.4.0:Data.Aeson.Types.ToJSON.toJSON
        (User username_aOy0
              password_aOy1
              email_aOy2
              avatar_aOy3
              firstName_aOy4
              secondName_aOy5
              birthDay_aOy6
              sex_aOy7
              createdQuizzes_aOy8
              passedQuizzes_aOy9)
        = aeson-1.2.4.0:Data.Aeson.Types.Internal.object
            [((Data.Text.pack "username")
                aeson-1.2.4.0:Data.Aeson.Types.ToJSON..= username_aOy0),
             ((Data.Text.pack "password")
                aeson-1.2.4.0:Data.Aeson.Types.ToJSON..= password_aOy1),
             ((Data.Text.pack "email")
                aeson-1.2.4.0:Data.Aeson.Types.ToJSON..= email_aOy2),
             ((Data.Text.pack "avatar")
                aeson-1.2.4.0:Data.Aeson.Types.ToJSON..= avatar_aOy3),
             ((Data.Text.pack "firstName")
                aeson-1.2.4.0:Data.Aeson.Types.ToJSON..= firstName_aOy4),
             ((Data.Text.pack "secondName")
                aeson-1.2.4.0:Data.Aeson.Types.ToJSON..= secondName_aOy5),
             ((Data.Text.pack "birthDay")
                aeson-1.2.4.0:Data.Aeson.Types.ToJSON..= birthDay_aOy6),
             ((Data.Text.pack "sex")
                aeson-1.2.4.0:Data.Aeson.Types.ToJSON..= sex_aOy7),
             ((Data.Text.pack "createdQuizzes")
                aeson-1.2.4.0:Data.Aeson.Types.ToJSON..= createdQuizzes_aOy8),
             ((Data.Text.pack "passedQuizzes")
                aeson-1.2.4.0:Data.Aeson.Types.ToJSON..= passedQuizzes_aOy9)]
    instance FromJSON User where
      aeson-1.2.4.0:Data.Aeson.Types.FromJSON.parseJSON
        (aeson-1.2.4.0:Data.Aeson.Types.Internal.Object obj_aOxZ)
        = (((((((((((pure User)
                      <*>
                        (obj_aOxZ
                           aeson-1.2.4.0:Data.Aeson.Types.FromJSON..:
                             (Data.Text.pack "username")))
                     <*>
                       (obj_aOxZ
                          aeson-1.2.4.0:Data.Aeson.Types.FromJSON..:
                            (Data.Text.pack "password")))
                    <*>
                      (obj_aOxZ
                         aeson-1.2.4.0:Data.Aeson.Types.FromJSON..:
                           (Data.Text.pack "email")))
                   <*>
                     (obj_aOxZ
                        aeson-1.2.4.0:Data.Aeson.Types.FromJSON..:
                          (Data.Text.pack "avatar")))
                  <*>
                    (obj_aOxZ
                       aeson-compat-0.3.7.1:Data.Aeson.Compat..:?
                         (Data.Text.pack "firstName")))
                 <*>
                   (obj_aOxZ
                      aeson-compat-0.3.7.1:Data.Aeson.Compat..:?
                        (Data.Text.pack "secondName")))
                <*>
                  (obj_aOxZ
                     aeson-compat-0.3.7.1:Data.Aeson.Compat..:?
                       (Data.Text.pack "birthDay")))
               <*>
                 (obj_aOxZ
                    aeson-compat-0.3.7.1:Data.Aeson.Compat..:? (Data.Text.pack "sex")))
              <*>
                (obj_aOxZ
                   aeson-1.2.4.0:Data.Aeson.Types.FromJSON..:
                     (Data.Text.pack "createdQuizzes")))
             <*>
               (obj_aOxZ
                  aeson-1.2.4.0:Data.Aeson.Types.FromJSON..:
                    (Data.Text.pack "passedQuizzes")))
      aeson-1.2.4.0:Data.Aeson.Types.FromJSON.parseJSON _
        = GHC.Base.mzero
    instance ToJSON (Entity User) where
      aeson-1.2.4.0:Data.Aeson.Types.ToJSON.toJSON = entityIdToJSON
    instance FromJSON (Entity User) where
      aeson-1.2.4.0:Data.Aeson.Types.FromJSON.parseJSON
        = entityIdFromJSON
/home/nikita/Projects/labs/Databases/Course-Project/Server/src/Model/User.hs:(27,78)-(57,2): Splicing expression
    Language.Haskell.TH.Quote.quoteExp
      persistLowerCase
      "\n\
      \Question json\n\
      \  text    Text\n\
      \  option  QuestionOptions\n\
      \  answer  QuestionAnswer\n\
      \  deriving Eq Read Show Generic\n\
      \Quiz json\n\
      \  name            Text\n\
      \  description     Text\n\
      \  creationDate    UTCTime\n\
      \  passingNumber   Int\n\
      \  question        Question\n\
      \  deriving Eq Read Show Generic\n\
      \QuizResult json\n\
      \  testKey         Text\n\
      \  result          Text\n\
      \  passingDate     UTCTime\n\
      \  deriving        Eq Read Show Generic\n\
      \User json\n\
      \  username        Text\n\
      \  password        Text\n\
      \  email           Text\n\
      \  avatar          Text\n\
      \  firstName       Text Maybe\n\
      \  secondName      Text Maybe\n\
      \  birthDay        UTCTime Maybe\n\
      \  sex             Gender Maybe\n\
      \  createdQuizzes  [QuizId]\n\
      \  passedQuizzes   [QuizResult]\n\
      \  deriving        Eq Read Show Generic\n"
  ======>
    [(((((((((EntityDef (HaskellName (packPTH "Question")))
               (DBName (packPTH "question")))
              (((((((FieldDef (HaskellName (packPTH "Id")))
                      (DBName (packPTH "id")))
                     ((FTTypeCon Nothing) (packPTH "QuestionId")))
                    SqlInt64)
                   [])
                  True)
                 ((ForeignRef (HaskellName (packPTH "Question")))
                    ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
             [packPTH "json"])
            [((((((FieldDef (HaskellName (packPTH "text")))
                    (DBName (packPTH "text")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for text")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "option")))
                    (DBName (packPTH "option")))
                   ((FTTypeCon Nothing) (packPTH "QuestionOptions")))
                  (SqlOther (packPTH "SqlType unset for option")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "answer")))
                    (DBName (packPTH "answer")))
                   ((FTTypeCon Nothing) (packPTH "QuestionAnswer")))
                  (SqlOther (packPTH "SqlType unset for answer")))
                 [])
                True)
               NoReference])
           [])
          [])
         [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
        (Data.Map.Internal.fromList []))
       False
       {entityFields = [((((((FieldDef (HaskellName (packPTH "text")))
                               (DBName (packPTH "text")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "option")))
                               (DBName (packPTH "option")))
                              ((FTTypeCon Nothing) (packPTH "QuestionOptions")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy QuestionOptions)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "answer")))
                               (DBName (packPTH "answer")))
                              ((FTTypeCon Nothing) (packPTH "QuestionAnswer")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy QuestionAnswer)))
                            [])
                           True)
                          NoReference],
        entityId = ((((((FieldDef (HaskellName (packPTH "Id")))
                          (DBName (packPTH "id")))
                         ((FTTypeCon Nothing) (packPTH "QuestionId")))
                        (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                           (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                       [])
                      True)
                     ((ForeignRef (HaskellName (packPTH "Question")))
                        ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))},
     (((((((((EntityDef (HaskellName (packPTH "Quiz")))
               (DBName (packPTH "quiz")))
              (((((((FieldDef (HaskellName (packPTH "Id")))
                      (DBName (packPTH "id")))
                     ((FTTypeCon Nothing) (packPTH "QuizId")))
                    SqlInt64)
                   [])
                  True)
                 ((ForeignRef (HaskellName (packPTH "Quiz")))
                    ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
             [packPTH "json"])
            [((((((FieldDef (HaskellName (packPTH "name")))
                    (DBName (packPTH "name")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for name")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "description")))
                    (DBName (packPTH "description")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for description")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "creationDate")))
                    (DBName (packPTH "creation_date")))
                   ((FTTypeCon Nothing) (packPTH "UTCTime")))
                  (SqlOther (packPTH "SqlType unset for creationDate")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "passingNumber")))
                    (DBName (packPTH "passing_number")))
                   ((FTTypeCon Nothing) (packPTH "Int")))
                  (SqlOther (packPTH "SqlType unset for passingNumber")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "question")))
                    (DBName (packPTH "question")))
                   ((FTTypeCon Nothing) (packPTH "Question")))
                  (SqlOther (packPTH "SqlType unset for question")))
                 [])
                True)
               (EmbedRef
                  ((EmbedEntityDef (HaskellName (packPTH "Question")))
                     [((EmbedFieldDef (DBName (packPTH "text"))) Nothing) Nothing,
                      ((EmbedFieldDef (DBName (packPTH "option"))) Nothing) Nothing,
                      ((EmbedFieldDef (DBName (packPTH "answer"))) Nothing) Nothing]))])
           [])
          [])
         [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
        (Data.Map.Internal.fromList []))
       False
       {entityFields = [((((((FieldDef (HaskellName (packPTH "name")))
                               (DBName (packPTH "name")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "description")))
                               (DBName (packPTH "description")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "creationDate")))
                               (DBName (packPTH "creation_date")))
                              ((FTTypeCon Nothing) (packPTH "UTCTime")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy UTCTime)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "passingNumber")))
                               (DBName (packPTH "passing_number")))
                              ((FTTypeCon Nothing) (packPTH "Int")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Int)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "question")))
                               (DBName (packPTH "question")))
                              ((FTTypeCon Nothing) (packPTH "Question")))
                             SqlString)
                            [])
                           True)
                          (EmbedRef
                             ((EmbedEntityDef (HaskellName (packPTH "Question")))
                                [((EmbedFieldDef (DBName (packPTH "text"))) Nothing) Nothing,
                                 ((EmbedFieldDef (DBName (packPTH "option"))) Nothing) Nothing,
                                 ((EmbedFieldDef (DBName (packPTH "answer"))) Nothing) Nothing]))],
        entityId = ((((((FieldDef (HaskellName (packPTH "Id")))
                          (DBName (packPTH "id")))
                         ((FTTypeCon Nothing) (packPTH "QuizId")))
                        (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                           (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                       [])
                      True)
                     ((ForeignRef (HaskellName (packPTH "Quiz")))
                        ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))},
     (((((((((EntityDef (HaskellName (packPTH "QuizResult")))
               (DBName (packPTH "quiz_result")))
              (((((((FieldDef (HaskellName (packPTH "Id")))
                      (DBName (packPTH "id")))
                     ((FTTypeCon Nothing) (packPTH "QuizResultId")))
                    SqlInt64)
                   [])
                  True)
                 ((ForeignRef (HaskellName (packPTH "QuizResult")))
                    ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
             [packPTH "json"])
            [((((((FieldDef (HaskellName (packPTH "testKey")))
                    (DBName (packPTH "test_key")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for testKey")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "result")))
                    (DBName (packPTH "result")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for result")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "passingDate")))
                    (DBName (packPTH "passing_date")))
                   ((FTTypeCon Nothing) (packPTH "UTCTime")))
                  (SqlOther (packPTH "SqlType unset for passingDate")))
                 [])
                True)
               NoReference])
           [])
          [])
         [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
        (Data.Map.Internal.fromList []))
       False
       {entityFields = [((((((FieldDef (HaskellName (packPTH "testKey")))
                               (DBName (packPTH "test_key")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "result")))
                               (DBName (packPTH "result")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "passingDate")))
                               (DBName (packPTH "passing_date")))
                              ((FTTypeCon Nothing) (packPTH "UTCTime")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy UTCTime)))
                            [])
                           True)
                          NoReference],
        entityId = ((((((FieldDef (HaskellName (packPTH "Id")))
                          (DBName (packPTH "id")))
                         ((FTTypeCon Nothing) (packPTH "QuizResultId")))
                        (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                           (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                       [])
                      True)
                     ((ForeignRef (HaskellName (packPTH "QuizResult")))
                        ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))},
     (((((((((EntityDef (HaskellName (packPTH "User")))
               (DBName (packPTH "user")))
              (((((((FieldDef (HaskellName (packPTH "Id")))
                      (DBName (packPTH "id")))
                     ((FTTypeCon Nothing) (packPTH "UserId")))
                    SqlInt64)
                   [])
                  True)
                 ((ForeignRef (HaskellName (packPTH "User")))
                    ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
             [packPTH "json"])
            [((((((FieldDef (HaskellName (packPTH "username")))
                    (DBName (packPTH "username")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for username")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "password")))
                    (DBName (packPTH "password")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for password")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "email")))
                    (DBName (packPTH "email")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for email")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "avatar")))
                    (DBName (packPTH "avatar")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for avatar")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "firstName")))
                    (DBName (packPTH "first_name")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for firstName")))
                 [packPTH "Maybe"])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "secondName")))
                    (DBName (packPTH "second_name")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for secondName")))
                 [packPTH "Maybe"])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "birthDay")))
                    (DBName (packPTH "birth_day")))
                   ((FTTypeCon Nothing) (packPTH "UTCTime")))
                  (SqlOther (packPTH "SqlType unset for birthDay")))
                 [packPTH "Maybe"])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "sex")))
                    (DBName (packPTH "sex")))
                   ((FTTypeCon Nothing) (packPTH "Gender")))
                  (SqlOther (packPTH "SqlType unset for sex")))
                 [packPTH "Maybe"])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "createdQuizzes")))
                    (DBName (packPTH "created_quizzes")))
                   (FTList ((FTTypeCon Nothing) (packPTH "QuizId"))))
                  (SqlOther (packPTH "SqlType unset for createdQuizzes")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "passedQuizzes")))
                    (DBName (packPTH "passed_quizzes")))
                   (FTList ((FTTypeCon Nothing) (packPTH "QuizResult"))))
                  (SqlOther (packPTH "SqlType unset for passedQuizzes")))
                 [])
                True)
               (EmbedRef
                  ((EmbedEntityDef (HaskellName (packPTH "QuizResult")))
                     [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing) Nothing,
                      ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                      ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                        Nothing]))])
           [])
          [])
         [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
        (Data.Map.Internal.fromList []))
       False
       {entityFields = [((((((FieldDef (HaskellName (packPTH "username")))
                               (DBName (packPTH "username")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "password")))
                               (DBName (packPTH "password")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "email")))
                               (DBName (packPTH "email")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "avatar")))
                               (DBName (packPTH "avatar")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "firstName")))
                               (DBName (packPTH "first_name")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [packPTH "Maybe"])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "secondName")))
                               (DBName (packPTH "second_name")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [packPTH "Maybe"])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "birthDay")))
                               (DBName (packPTH "birth_day")))
                              ((FTTypeCon Nothing) (packPTH "UTCTime")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy UTCTime)))
                            [packPTH "Maybe"])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "sex")))
                               (DBName (packPTH "sex")))
                              ((FTTypeCon Nothing) (packPTH "Gender")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Gender)))
                            [packPTH "Maybe"])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "createdQuizzes")))
                               (DBName (packPTH "created_quizzes")))
                              (FTList ((FTTypeCon Nothing) (packPTH "QuizId"))))
                             SqlString)
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "passedQuizzes")))
                               (DBName (packPTH "passed_quizzes")))
                              (FTList ((FTTypeCon Nothing) (packPTH "QuizResult"))))
                             SqlString)
                            [])
                           True)
                          (EmbedRef
                             ((EmbedEntityDef (HaskellName (packPTH "QuizResult")))
                                [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing) Nothing,
                                 ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                                 ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                                   Nothing]))],
        entityId = ((((((FieldDef (HaskellName (packPTH "Id")))
                          (DBName (packPTH "id")))
                         ((FTTypeCon Nothing) (packPTH "UserId")))
                        (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                           (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                       [])
                      True)
                     ((ForeignRef (HaskellName (packPTH "User")))
                        ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))}]
/home/nikita/Projects/labs/Databases/Course-Project/Server/src/Model/User.hs:(27,1)-(57,2): Splicing declarations
    share
      [mkPersist (mkPersistSettings (ConT ''MongoContext))]
      ([(((((((((EntityDef (HaskellName (packPTH "Question")))
                  (DBName (packPTH "question")))
                 (((((((FieldDef (HaskellName (packPTH "Id")))
                         (DBName (packPTH "id")))
                        ((FTTypeCon Nothing) (packPTH "QuestionId")))
                       SqlInt64)
                      [])
                     True)
                    ((ForeignRef (HaskellName (packPTH "Question")))
                       ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                [packPTH "json"])
               [((((((FieldDef (HaskellName (packPTH "text")))
                       (DBName (packPTH "text")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for text")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "option")))
                       (DBName (packPTH "option")))
                      ((FTTypeCon Nothing) (packPTH "QuestionOptions")))
                     (SqlOther (packPTH "SqlType unset for option")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "answer")))
                       (DBName (packPTH "answer")))
                      ((FTTypeCon Nothing) (packPTH "QuestionAnswer")))
                     (SqlOther (packPTH "SqlType unset for answer")))
                    [])
                   True)
                  NoReference])
              [])
             [])
            [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
           (Data.Map.Internal.fromList []))
          False
          {entityFields = [((((((FieldDef (HaskellName (packPTH "text")))
                                  (DBName (packPTH "text")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "option")))
                                  (DBName (packPTH "option")))
                                 ((FTTypeCon Nothing) (packPTH "QuestionOptions")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy QuestionOptions)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "answer")))
                                  (DBName (packPTH "answer")))
                                 ((FTTypeCon Nothing) (packPTH "QuestionAnswer")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy QuestionAnswer)))
                               [])
                              True)
                             NoReference],
           entityId = ((((((FieldDef (HaskellName (packPTH "Id")))
                             (DBName (packPTH "id")))
                            ((FTTypeCon Nothing) (packPTH "QuestionId")))
                           (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                              (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                          [])
                         True)
                        ((ForeignRef (HaskellName (packPTH "Question")))
                           ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))},
        (((((((((EntityDef (HaskellName (packPTH "Quiz")))
                  (DBName (packPTH "quiz")))
                 (((((((FieldDef (HaskellName (packPTH "Id")))
                         (DBName (packPTH "id")))
                        ((FTTypeCon Nothing) (packPTH "QuizId")))
                       SqlInt64)
                      [])
                     True)
                    ((ForeignRef (HaskellName (packPTH "Quiz")))
                       ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                [packPTH "json"])
               [((((((FieldDef (HaskellName (packPTH "name")))
                       (DBName (packPTH "name")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for name")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "description")))
                       (DBName (packPTH "description")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for description")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "creationDate")))
                       (DBName (packPTH "creation_date")))
                      ((FTTypeCon Nothing) (packPTH "UTCTime")))
                     (SqlOther (packPTH "SqlType unset for creationDate")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "passingNumber")))
                       (DBName (packPTH "passing_number")))
                      ((FTTypeCon Nothing) (packPTH "Int")))
                     (SqlOther (packPTH "SqlType unset for passingNumber")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "question")))
                       (DBName (packPTH "question")))
                      ((FTTypeCon Nothing) (packPTH "Question")))
                     (SqlOther (packPTH "SqlType unset for question")))
                    [])
                   True)
                  (EmbedRef
                     ((EmbedEntityDef (HaskellName (packPTH "Question")))
                        [((EmbedFieldDef (DBName (packPTH "text"))) Nothing) Nothing,
                         ((EmbedFieldDef (DBName (packPTH "option"))) Nothing) Nothing,
                         ((EmbedFieldDef (DBName (packPTH "answer"))) Nothing) Nothing]))])
              [])
             [])
            [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
           (Data.Map.Internal.fromList []))
          False
          {entityFields = [((((((FieldDef (HaskellName (packPTH "name")))
                                  (DBName (packPTH "name")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "description")))
                                  (DBName (packPTH "description")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "creationDate")))
                                  (DBName (packPTH "creation_date")))
                                 ((FTTypeCon Nothing) (packPTH "UTCTime")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy UTCTime)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "passingNumber")))
                                  (DBName (packPTH "passing_number")))
                                 ((FTTypeCon Nothing) (packPTH "Int")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Int)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "question")))
                                  (DBName (packPTH "question")))
                                 ((FTTypeCon Nothing) (packPTH "Question")))
                                SqlString)
                               [])
                              True)
                             (EmbedRef
                                ((EmbedEntityDef (HaskellName (packPTH "Question")))
                                   [((EmbedFieldDef (DBName (packPTH "text"))) Nothing) Nothing,
                                    ((EmbedFieldDef (DBName (packPTH "option"))) Nothing) Nothing,
                                    ((EmbedFieldDef (DBName (packPTH "answer"))) Nothing)
                                      Nothing]))],
           entityId = ((((((FieldDef (HaskellName (packPTH "Id")))
                             (DBName (packPTH "id")))
                            ((FTTypeCon Nothing) (packPTH "QuizId")))
                           (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                              (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                          [])
                         True)
                        ((ForeignRef (HaskellName (packPTH "Quiz")))
                           ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))},
        (((((((((EntityDef (HaskellName (packPTH "QuizResult")))
                  (DBName (packPTH "quiz_result")))
                 (((((((FieldDef (HaskellName (packPTH "Id")))
                         (DBName (packPTH "id")))
                        ((FTTypeCon Nothing) (packPTH "QuizResultId")))
                       SqlInt64)
                      [])
                     True)
                    ((ForeignRef (HaskellName (packPTH "QuizResult")))
                       ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                [packPTH "json"])
               [((((((FieldDef (HaskellName (packPTH "testKey")))
                       (DBName (packPTH "test_key")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for testKey")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "result")))
                       (DBName (packPTH "result")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for result")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "passingDate")))
                       (DBName (packPTH "passing_date")))
                      ((FTTypeCon Nothing) (packPTH "UTCTime")))
                     (SqlOther (packPTH "SqlType unset for passingDate")))
                    [])
                   True)
                  NoReference])
              [])
             [])
            [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
           (Data.Map.Internal.fromList []))
          False
          {entityFields = [((((((FieldDef (HaskellName (packPTH "testKey")))
                                  (DBName (packPTH "test_key")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "result")))
                                  (DBName (packPTH "result")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "passingDate")))
                                  (DBName (packPTH "passing_date")))
                                 ((FTTypeCon Nothing) (packPTH "UTCTime")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy UTCTime)))
                               [])
                              True)
                             NoReference],
           entityId = ((((((FieldDef (HaskellName (packPTH "Id")))
                             (DBName (packPTH "id")))
                            ((FTTypeCon Nothing) (packPTH "QuizResultId")))
                           (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                              (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                          [])
                         True)
                        ((ForeignRef (HaskellName (packPTH "QuizResult")))
                           ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))},
        (((((((((EntityDef (HaskellName (packPTH "User")))
                  (DBName (packPTH "user")))
                 (((((((FieldDef (HaskellName (packPTH "Id")))
                         (DBName (packPTH "id")))
                        ((FTTypeCon Nothing) (packPTH "UserId")))
                       SqlInt64)
                      [])
                     True)
                    ((ForeignRef (HaskellName (packPTH "User")))
                       ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                [packPTH "json"])
               [((((((FieldDef (HaskellName (packPTH "username")))
                       (DBName (packPTH "username")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for username")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "password")))
                       (DBName (packPTH "password")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for password")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "email")))
                       (DBName (packPTH "email")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for email")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "avatar")))
                       (DBName (packPTH "avatar")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for avatar")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "firstName")))
                       (DBName (packPTH "first_name")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for firstName")))
                    [packPTH "Maybe"])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "secondName")))
                       (DBName (packPTH "second_name")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for secondName")))
                    [packPTH "Maybe"])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "birthDay")))
                       (DBName (packPTH "birth_day")))
                      ((FTTypeCon Nothing) (packPTH "UTCTime")))
                     (SqlOther (packPTH "SqlType unset for birthDay")))
                    [packPTH "Maybe"])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "sex")))
                       (DBName (packPTH "sex")))
                      ((FTTypeCon Nothing) (packPTH "Gender")))
                     (SqlOther (packPTH "SqlType unset for sex")))
                    [packPTH "Maybe"])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "createdQuizzes")))
                       (DBName (packPTH "created_quizzes")))
                      (FTList ((FTTypeCon Nothing) (packPTH "QuizId"))))
                     (SqlOther (packPTH "SqlType unset for createdQuizzes")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "passedQuizzes")))
                       (DBName (packPTH "passed_quizzes")))
                      (FTList ((FTTypeCon Nothing) (packPTH "QuizResult"))))
                     (SqlOther (packPTH "SqlType unset for passedQuizzes")))
                    [])
                   True)
                  (EmbedRef
                     ((EmbedEntityDef (HaskellName (packPTH "QuizResult")))
                        [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing) Nothing,
                         ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                         ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                           Nothing]))])
              [])
             [])
            [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
           (Data.Map.Internal.fromList []))
          False
          {entityFields = [((((((FieldDef (HaskellName (packPTH "username")))
                                  (DBName (packPTH "username")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "password")))
                                  (DBName (packPTH "password")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "email")))
                                  (DBName (packPTH "email")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "avatar")))
                                  (DBName (packPTH "avatar")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "firstName")))
                                  (DBName (packPTH "first_name")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [packPTH "Maybe"])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "secondName")))
                                  (DBName (packPTH "second_name")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [packPTH "Maybe"])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "birthDay")))
                                  (DBName (packPTH "birth_day")))
                                 ((FTTypeCon Nothing) (packPTH "UTCTime")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy UTCTime)))
                               [packPTH "Maybe"])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "sex")))
                                  (DBName (packPTH "sex")))
                                 ((FTTypeCon Nothing) (packPTH "Gender")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Gender)))
                               [packPTH "Maybe"])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "createdQuizzes")))
                                  (DBName (packPTH "created_quizzes")))
                                 (FTList ((FTTypeCon Nothing) (packPTH "QuizId"))))
                                SqlString)
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "passedQuizzes")))
                                  (DBName (packPTH "passed_quizzes")))
                                 (FTList ((FTTypeCon Nothing) (packPTH "QuizResult"))))
                                SqlString)
                               [])
                              True)
                             (EmbedRef
                                ((EmbedEntityDef (HaskellName (packPTH "QuizResult")))
                                   [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing) Nothing,
                                    ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                                    ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                                      Nothing]))],
           entityId = ((((((FieldDef (HaskellName (packPTH "Id")))
                             (DBName (packPTH "id")))
                            ((FTTypeCon Nothing) (packPTH "UserId")))
                           (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                              (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                          [])
                         True)
                        ((ForeignRef (HaskellName (packPTH "User")))
                           ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))}])
  ======>
    instance PersistField Question where
      toPersistValue
        = \ ent_aUq0
            -> (PersistMap
                  $ ((zip ((map Data.Text.pack) ["text", "option", "answer"]))
                       ((map toPersistValue) $ (toPersistFields ent_aUq0))))
      fromPersistValue
        = ((\ x_aUq1
              -> let
                   columns_aUq2
                     = unordered-containers-0.2.9.0:Data.HashMap.Strict.fromList x_aUq1
                 in
                   (fromPersistValues
                      $ ((map
                            (\ name_aUq3
                               -> case
                                      (unordered-containers-0.2.9.0:Data.HashMap.Base.lookup
                                         (Data.Text.pack name_aUq3))
                                        columns_aUq2
                                  of
                                    Just v_aUq4 -> v_aUq4
                                    Nothing -> PersistNull))
                           $ ["text", "option", "answer"])))
             Control.Monad.<=< getPersistMap)
    instance persistent-2.8.1:Database.Persist.Sql.Class.PersistFieldSql Question where
      persistent-2.8.1:Database.Persist.Sql.Class.sqlType _ = SqlString
    instance PersistField Quiz where
      toPersistValue
        = \ ent_aUq5
            -> (PersistMap
                  $ ((zip
                        ((map Data.Text.pack)
                           ["name", "description", "creationDate", "passingNumber",
                            "question"]))
                       ((map toPersistValue) $ (toPersistFields ent_aUq5))))
      fromPersistValue
        = ((\ x_aUq6
              -> let
                   columns_aUq7
                     = unordered-containers-0.2.9.0:Data.HashMap.Strict.fromList x_aUq6
                 in
                   (fromPersistValues
                      $ ((map
                            (\ name_aUq8
                               -> case
                                      (unordered-containers-0.2.9.0:Data.HashMap.Base.lookup
                                         (Data.Text.pack name_aUq8))
                                        columns_aUq7
                                  of
                                    Just v_aUq9 -> v_aUq9
                                    Nothing -> PersistNull))
                           $ ["name", "description", "creationDate", "passingNumber",
                              "question"])))
             Control.Monad.<=< getPersistMap)
    instance persistent-2.8.1:Database.Persist.Sql.Class.PersistFieldSql Quiz where
      persistent-2.8.1:Database.Persist.Sql.Class.sqlType _ = SqlString
    instance PersistField QuizResult where
      toPersistValue
        = \ ent_aUqa
            -> (PersistMap
                  $ ((zip
                        ((map Data.Text.pack) ["testKey", "result", "passingDate"]))
                       ((map toPersistValue) $ (toPersistFields ent_aUqa))))
      fromPersistValue
        = ((\ x_aUqb
              -> let
                   columns_aUqc
                     = unordered-containers-0.2.9.0:Data.HashMap.Strict.fromList x_aUqb
                 in
                   (fromPersistValues
                      $ ((map
                            (\ name_aUqd
                               -> case
                                      (unordered-containers-0.2.9.0:Data.HashMap.Base.lookup
                                         (Data.Text.pack name_aUqd))
                                        columns_aUqc
                                  of
                                    Just v_aUqe -> v_aUqe
                                    Nothing -> PersistNull))
                           $ ["testKey", "result", "passingDate"])))
             Control.Monad.<=< getPersistMap)
    instance persistent-2.8.1:Database.Persist.Sql.Class.PersistFieldSql QuizResult where
      persistent-2.8.1:Database.Persist.Sql.Class.sqlType _ = SqlString
    instance PersistField User where
      toPersistValue
        = \ ent_aUqf
            -> (PersistMap
                  $ ((zip
                        ((map Data.Text.pack)
                           ["username", "password", "email", "avatar", "firstName",
                            "secondName", "birthDay", "sex", "createdQuizzes",
                            "passedQuizzes"]))
                       ((map toPersistValue) $ (toPersistFields ent_aUqf))))
      fromPersistValue
        = ((\ x_aUqg
              -> let
                   columns_aUqh
                     = unordered-containers-0.2.9.0:Data.HashMap.Strict.fromList x_aUqg
                 in
                   (fromPersistValues
                      $ ((map
                            (\ name_aUqi
                               -> case
                                      (unordered-containers-0.2.9.0:Data.HashMap.Base.lookup
                                         (Data.Text.pack name_aUqi))
                                        columns_aUqh
                                  of
                                    Just v_aUqj -> v_aUqj
                                    Nothing -> PersistNull))
                           $ ["username", "password", "email", "avatar", "firstName",
                              "secondName", "birthDay", "sex", "createdQuizzes",
                              "passedQuizzes"])))
             Control.Monad.<=< getPersistMap)
    instance persistent-2.8.1:Database.Persist.Sql.Class.PersistFieldSql User where
      persistent-2.8.1:Database.Persist.Sql.Class.sqlType _ = SqlString
    data Question
      = Question {questionText :: !Text,
                  questionOption :: !QuestionOptions,
                  questionAnswer :: !QuestionAnswer}
      deriving (Eq, Read, Show, Generic)
    type QuestionId = Key Question
    instance PersistEntity Question where
      type PersistEntityBackend Question = MongoContext
      data Unique Question
      newtype Key Question
        = QuestionKey {unQuestionKey :: (BackendKey MongoContext)}
        deriving (Show,
                  Read,
                  Eq,
                  Ord,
                  path-pieces-0.2.1:Web.PathPieces.PathPiece,
                  http-api-data-0.3.7.2:Web.Internal.HttpApiData.ToHttpApiData,
                  http-api-data-0.3.7.2:Web.Internal.HttpApiData.FromHttpApiData,
                  PersistField,
                  persistent-2.8.1:Database.Persist.Sql.Class.PersistFieldSql,
                  ToJSON,
                  FromJSON)
      data EntityField Question typ
        = typ ~ Key Question => QuestionId |
          typ ~ Text => QuestionText |
          typ ~ QuestionOptions => QuestionOption |
          typ ~ QuestionAnswer => QuestionAnswer
      keyToValues
        = ((ghc-prim-0.5.1.1:GHC.Types.: [])
             . (toPersistValue . unQuestionKey))
      keyFromValues
        = ((fmap QuestionKey)
             . (fromPersistValue . Database.Persist.TH.headNote))
      entityDef _
        = (((((((((EntityDef (HaskellName (packPTH "Question")))
                    (DBName (packPTH "question")))
                   (((((((FieldDef (HaskellName (packPTH "Id")))
                           (DBName (packPTH "id")))
                          ((FTTypeCon Nothing) (packPTH "QuestionId")))
                         SqlInt64)
                        [])
                       True)
                      ((ForeignRef (HaskellName (packPTH "Question")))
                         ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                  [packPTH "json"])
                 [((((((FieldDef (HaskellName (packPTH "text")))
                         (DBName (packPTH "text")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "option")))
                         (DBName (packPTH "option")))
                        ((FTTypeCon Nothing) (packPTH "QuestionOptions")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "answer")))
                         (DBName (packPTH "answer")))
                        ((FTTypeCon Nothing) (packPTH "QuestionAnswer")))
                       SqlString)
                      [])
                     True)
                    NoReference])
                [])
               [])
              [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
             (Data.Map.Internal.fromList []))
            False
      toPersistFields (Question x_aUqk x_aUql x_aUqm)
        = [SomePersistField x_aUqk, SomePersistField x_aUql,
           SomePersistField x_aUqm]
      fromPersistValues [x1_aUqo, x2_aUqp, x3_aUqq]
        = Question
            <$>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "text")))
                 . fromPersistValue)
                x1_aUqo
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "option")))
                 . fromPersistValue)
                x2_aUqp
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "answer")))
                 . fromPersistValue)
                x3_aUqq
      fromPersistValues x_aUqn
        = (Left
             $ ((mappend (packPTH "Question: fromPersistValues failed on: "))
                  (Data.Text.pack $ (show x_aUqn))))
      persistUniqueToFieldNames _
        = error "Degenerate case, should never happen"
      persistUniqueToValues _
        = error "Degenerate case, should never happen"
      persistUniqueKeys (Question _text_aUqr _option_aUqs _answer_aUqt)
        = []
      persistFieldDef QuestionId
        = ((((((FieldDef (HaskellName (packPTH "Id")))
                 (DBName (packPTH "id")))
                ((FTTypeCon Nothing) (packPTH "QuestionId")))
               SqlInt64)
              [])
             True)
            ((ForeignRef (HaskellName (packPTH "Question")))
               ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))
      persistFieldDef QuestionText
        = ((((((FieldDef (HaskellName (packPTH "text")))
                 (DBName (packPTH "text")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef QuestionOption
        = ((((((FieldDef (HaskellName (packPTH "option")))
                 (DBName (packPTH "option")))
                ((FTTypeCon Nothing) (packPTH "QuestionOptions")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef QuestionAnswer
        = ((((((FieldDef (HaskellName (packPTH "answer")))
                 (DBName (packPTH "answer")))
                ((FTTypeCon Nothing) (packPTH "QuestionAnswer")))
               SqlString)
              [])
             True)
            NoReference
      persistIdField = QuestionId
      fieldLens QuestionId
        = (lensPTH entityKey)
            (\ Entity _ value_aUqu key_aUqv -> (Entity key_aUqv) value_aUqu)
      fieldLens QuestionText
        = (lensPTH (questionText . entityVal))
            (\ Entity key_aUqw value_aUqx x_aUqy
               -> (Entity key_aUqw) value_aUqx {questionText = x_aUqy})
      fieldLens QuestionOption
        = (lensPTH (questionOption . entityVal))
            (\ Entity key_aUqw value_aUqx x_aUqy
               -> (Entity key_aUqw) value_aUqx {questionOption = x_aUqy})
      fieldLens QuestionAnswer
        = (lensPTH (questionAnswer . entityVal))
            (\ Entity key_aUqw value_aUqx x_aUqy
               -> (Entity key_aUqw) value_aUqx {questionAnswer = x_aUqy})
    instance ToBackendKey MongoContext Question where
      toBackendKey = unQuestionKey
      fromBackendKey = QuestionKey
    data Quiz
      = Quiz {quizName :: !Text,
              quizDescription :: !Text,
              quizCreationDate :: !UTCTime,
              quizPassingNumber :: !Int,
              quizQuestion :: !Question}
      deriving (Eq, Read, Show, Generic)
    type QuizId = Key Quiz
    instance PersistEntity Quiz where
      type PersistEntityBackend Quiz = MongoContext
      data Unique Quiz
      newtype Key Quiz
        = QuizKey {unQuizKey :: (BackendKey MongoContext)}
        deriving (Show,
                  Read,
                  Eq,
                  Ord,
                  path-pieces-0.2.1:Web.PathPieces.PathPiece,
                  http-api-data-0.3.7.2:Web.Internal.HttpApiData.ToHttpApiData,
                  http-api-data-0.3.7.2:Web.Internal.HttpApiData.FromHttpApiData,
                  PersistField,
                  persistent-2.8.1:Database.Persist.Sql.Class.PersistFieldSql,
                  ToJSON,
                  FromJSON)
      data EntityField Quiz typ
        = typ ~ Key Quiz => QuizId |
          typ ~ Text => QuizName |
          typ ~ Text => QuizDescription |
          typ ~ UTCTime => QuizCreationDate |
          typ ~ Int => QuizPassingNumber |
          typ ~ Question => QuizQuestion
      keyToValues
        = ((ghc-prim-0.5.1.1:GHC.Types.: [])
             . (toPersistValue . unQuizKey))
      keyFromValues
        = ((fmap QuizKey)
             . (fromPersistValue . Database.Persist.TH.headNote))
      entityDef _
        = (((((((((EntityDef (HaskellName (packPTH "Quiz")))
                    (DBName (packPTH "quiz")))
                   (((((((FieldDef (HaskellName (packPTH "Id")))
                           (DBName (packPTH "id")))
                          ((FTTypeCon Nothing) (packPTH "QuizId")))
                         SqlInt64)
                        [])
                       True)
                      ((ForeignRef (HaskellName (packPTH "Quiz")))
                         ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                  [packPTH "json"])
                 [((((((FieldDef (HaskellName (packPTH "name")))
                         (DBName (packPTH "name")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "description")))
                         (DBName (packPTH "description")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "creationDate")))
                         (DBName (packPTH "creation_date")))
                        ((FTTypeCon Nothing) (packPTH "UTCTime")))
                       SqlDayTime)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "passingNumber")))
                         (DBName (packPTH "passing_number")))
                        ((FTTypeCon Nothing) (packPTH "Int")))
                       SqlInt64)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "question")))
                         (DBName (packPTH "question")))
                        ((FTTypeCon Nothing) (packPTH "Question")))
                       SqlString)
                      [])
                     True)
                    (EmbedRef
                       ((EmbedEntityDef (HaskellName (packPTH "Question")))
                          [((EmbedFieldDef (DBName (packPTH "text"))) Nothing) Nothing,
                           ((EmbedFieldDef (DBName (packPTH "option"))) Nothing) Nothing,
                           ((EmbedFieldDef (DBName (packPTH "answer"))) Nothing) Nothing]))])
                [])
               [])
              [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
             (Data.Map.Internal.fromList []))
            False
      toPersistFields (Quiz x_aUqz x_aUqA x_aUqB x_aUqC x_aUqD)
        = [SomePersistField x_aUqz, SomePersistField x_aUqA,
           SomePersistField x_aUqB, SomePersistField x_aUqC,
           SomePersistField x_aUqD]
      fromPersistValues [x1_aUqF, x2_aUqG, x3_aUqH, x4_aUqI, x5_aUqJ]
        = Quiz
            <$>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "name")))
                 . fromPersistValue)
                x1_aUqF
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "description")))
                 . fromPersistValue)
                x2_aUqG
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "creationDate")))
                 . fromPersistValue)
                x3_aUqH
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "passingNumber")))
                 . fromPersistValue)
                x4_aUqI
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "question")))
                 . fromPersistValue)
                x5_aUqJ
      fromPersistValues x_aUqE
        = (Left
             $ ((mappend (packPTH "Quiz: fromPersistValues failed on: "))
                  (Data.Text.pack $ (show x_aUqE))))
      persistUniqueToFieldNames _
        = error "Degenerate case, should never happen"
      persistUniqueToValues _
        = error "Degenerate case, should never happen"
      persistUniqueKeys
        (Quiz _name_aUqK
              _description_aUqL
              _creationDate_aUqM
              _passingNumber_aUqN
              _question_aUqO)
        = []
      persistFieldDef QuizId
        = ((((((FieldDef (HaskellName (packPTH "Id")))
                 (DBName (packPTH "id")))
                ((FTTypeCon Nothing) (packPTH "QuizId")))
               SqlInt64)
              [])
             True)
            ((ForeignRef (HaskellName (packPTH "Quiz")))
               ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))
      persistFieldDef QuizName
        = ((((((FieldDef (HaskellName (packPTH "name")))
                 (DBName (packPTH "name")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef QuizDescription
        = ((((((FieldDef (HaskellName (packPTH "description")))
                 (DBName (packPTH "description")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef QuizCreationDate
        = ((((((FieldDef (HaskellName (packPTH "creationDate")))
                 (DBName (packPTH "creation_date")))
                ((FTTypeCon Nothing) (packPTH "UTCTime")))
               SqlDayTime)
              [])
             True)
            NoReference
      persistFieldDef QuizPassingNumber
        = ((((((FieldDef (HaskellName (packPTH "passingNumber")))
                 (DBName (packPTH "passing_number")))
                ((FTTypeCon Nothing) (packPTH "Int")))
               SqlInt64)
              [])
             True)
            NoReference
      persistFieldDef QuizQuestion
        = ((((((FieldDef (HaskellName (packPTH "question")))
                 (DBName (packPTH "question")))
                ((FTTypeCon Nothing) (packPTH "Question")))
               SqlString)
              [])
             True)
            (EmbedRef
               ((EmbedEntityDef (HaskellName (packPTH "Question")))
                  [((EmbedFieldDef (DBName (packPTH "text"))) Nothing) Nothing,
                   ((EmbedFieldDef (DBName (packPTH "option"))) Nothing) Nothing,
                   ((EmbedFieldDef (DBName (packPTH "answer"))) Nothing) Nothing]))
      persistIdField = QuizId
      fieldLens QuizId
        = (lensPTH entityKey)
            (\ Entity _ value_aUqP key_aUqQ -> (Entity key_aUqQ) value_aUqP)
      fieldLens QuizName
        = (lensPTH (quizName . entityVal))
            (\ Entity key_aUqR value_aUqS x_aUqT
               -> (Entity key_aUqR) value_aUqS {quizName = x_aUqT})
      fieldLens QuizDescription
        = (lensPTH (quizDescription . entityVal))
            (\ Entity key_aUqR value_aUqS x_aUqT
               -> (Entity key_aUqR) value_aUqS {quizDescription = x_aUqT})
      fieldLens QuizCreationDate
        = (lensPTH (quizCreationDate . entityVal))
            (\ Entity key_aUqR value_aUqS x_aUqT
               -> (Entity key_aUqR) value_aUqS {quizCreationDate = x_aUqT})
      fieldLens QuizPassingNumber
        = (lensPTH (quizPassingNumber . entityVal))
            (\ Entity key_aUqR value_aUqS x_aUqT
               -> (Entity key_aUqR) value_aUqS {quizPassingNumber = x_aUqT})
      fieldLens QuizQuestion
        = (lensPTH (quizQuestion . entityVal))
            (\ Entity key_aUqR value_aUqS x_aUqT
               -> (Entity key_aUqR) value_aUqS {quizQuestion = x_aUqT})
    instance ToBackendKey MongoContext Quiz where
      toBackendKey = unQuizKey
      fromBackendKey = QuizKey
    data QuizResult
      = QuizResult {quizResultTestKey :: !Text,
                    quizResultResult :: !Text,
                    quizResultPassingDate :: !UTCTime}
      deriving (Eq, Read, Show, Generic)
    type QuizResultId = Key QuizResult
    instance PersistEntity QuizResult where
      type PersistEntityBackend QuizResult = MongoContext
      data Unique QuizResult
      newtype Key QuizResult
        = QuizResultKey {unQuizResultKey :: (BackendKey MongoContext)}
        deriving (Show,
                  Read,
                  Eq,
                  Ord,
                  path-pieces-0.2.1:Web.PathPieces.PathPiece,
                  http-api-data-0.3.7.2:Web.Internal.HttpApiData.ToHttpApiData,
                  http-api-data-0.3.7.2:Web.Internal.HttpApiData.FromHttpApiData,
                  PersistField,
                  persistent-2.8.1:Database.Persist.Sql.Class.PersistFieldSql,
                  ToJSON,
                  FromJSON)
      data EntityField QuizResult typ
        = typ ~ Key QuizResult => QuizResultId |
          typ ~ Text => QuizResultTestKey |
          typ ~ Text => QuizResultResult |
          typ ~ UTCTime => QuizResultPassingDate
      keyToValues
        = ((ghc-prim-0.5.1.1:GHC.Types.: [])
             . (toPersistValue . unQuizResultKey))
      keyFromValues
        = ((fmap QuizResultKey)
             . (fromPersistValue . Database.Persist.TH.headNote))
      entityDef _
        = (((((((((EntityDef (HaskellName (packPTH "QuizResult")))
                    (DBName (packPTH "quiz_result")))
                   (((((((FieldDef (HaskellName (packPTH "Id")))
                           (DBName (packPTH "id")))
                          ((FTTypeCon Nothing) (packPTH "QuizResultId")))
                         SqlInt64)
                        [])
                       True)
                      ((ForeignRef (HaskellName (packPTH "QuizResult")))
                         ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                  [packPTH "json"])
                 [((((((FieldDef (HaskellName (packPTH "testKey")))
                         (DBName (packPTH "test_key")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "result")))
                         (DBName (packPTH "result")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "passingDate")))
                         (DBName (packPTH "passing_date")))
                        ((FTTypeCon Nothing) (packPTH "UTCTime")))
                       SqlDayTime)
                      [])
                     True)
                    NoReference])
                [])
               [])
              [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
             (Data.Map.Internal.fromList []))
            False
      toPersistFields (QuizResult x_aUqU x_aUqV x_aUqW)
        = [SomePersistField x_aUqU, SomePersistField x_aUqV,
           SomePersistField x_aUqW]
      fromPersistValues [x1_aUqY, x2_aUqZ, x3_aUr0]
        = QuizResult
            <$>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "testKey")))
                 . fromPersistValue)
                x1_aUqY
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "result")))
                 . fromPersistValue)
                x2_aUqZ
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "passingDate")))
                 . fromPersistValue)
                x3_aUr0
      fromPersistValues x_aUqX
        = (Left
             $ ((mappend (packPTH "QuizResult: fromPersistValues failed on: "))
                  (Data.Text.pack $ (show x_aUqX))))
      persistUniqueToFieldNames _
        = error "Degenerate case, should never happen"
      persistUniqueToValues _
        = error "Degenerate case, should never happen"
      persistUniqueKeys
        (QuizResult _testKey_aUr1 _result_aUr2 _passingDate_aUr3)
        = []
      persistFieldDef QuizResultId
        = ((((((FieldDef (HaskellName (packPTH "Id")))
                 (DBName (packPTH "id")))
                ((FTTypeCon Nothing) (packPTH "QuizResultId")))
               SqlInt64)
              [])
             True)
            ((ForeignRef (HaskellName (packPTH "QuizResult")))
               ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))
      persistFieldDef QuizResultTestKey
        = ((((((FieldDef (HaskellName (packPTH "testKey")))
                 (DBName (packPTH "test_key")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef QuizResultResult
        = ((((((FieldDef (HaskellName (packPTH "result")))
                 (DBName (packPTH "result")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef QuizResultPassingDate
        = ((((((FieldDef (HaskellName (packPTH "passingDate")))
                 (DBName (packPTH "passing_date")))
                ((FTTypeCon Nothing) (packPTH "UTCTime")))
               SqlDayTime)
              [])
             True)
            NoReference
      persistIdField = QuizResultId
      fieldLens QuizResultId
        = (lensPTH entityKey)
            (\ Entity _ value_aUr4 key_aUr5 -> (Entity key_aUr5) value_aUr4)
      fieldLens QuizResultTestKey
        = (lensPTH (quizResultTestKey . entityVal))
            (\ Entity key_aUr6 value_aUr7 x_aUr8
               -> (Entity key_aUr6) value_aUr7 {quizResultTestKey = x_aUr8})
      fieldLens QuizResultResult
        = (lensPTH (quizResultResult . entityVal))
            (\ Entity key_aUr6 value_aUr7 x_aUr8
               -> (Entity key_aUr6) value_aUr7 {quizResultResult = x_aUr8})
      fieldLens QuizResultPassingDate
        = (lensPTH (quizResultPassingDate . entityVal))
            (\ Entity key_aUr6 value_aUr7 x_aUr8
               -> (Entity key_aUr6) value_aUr7 {quizResultPassingDate = x_aUr8})
    instance ToBackendKey MongoContext QuizResult where
      toBackendKey = unQuizResultKey
      fromBackendKey = QuizResultKey
    data User
      = User {userUsername :: !Text,
              userPassword :: !Text,
              userEmail :: !Text,
              userAvatar :: !Text,
              userFirstName :: !(Maybe Text),
              userSecondName :: !(Maybe Text),
              userBirthDay :: !(Maybe UTCTime),
              userSex :: !(Maybe Gender),
              userCreatedQuizzes :: ![QuizId],
              userPassedQuizzes :: ![QuizResult]}
      deriving (Eq, Read, Show, Generic)
    type UserId = Key User
    instance PersistEntity User where
      type PersistEntityBackend User = MongoContext
      data Unique User
      newtype Key User
        = UserKey {unUserKey :: (BackendKey MongoContext)}
        deriving (Show,
                  Read,
                  Eq,
                  Ord,
                  path-pieces-0.2.1:Web.PathPieces.PathPiece,
                  http-api-data-0.3.7.2:Web.Internal.HttpApiData.ToHttpApiData,
                  http-api-data-0.3.7.2:Web.Internal.HttpApiData.FromHttpApiData,
                  PersistField,
                  persistent-2.8.1:Database.Persist.Sql.Class.PersistFieldSql,
                  ToJSON,
                  FromJSON)
      data EntityField User typ
        = typ ~ Key User => UserId |
          typ ~ Text => UserUsername |
          typ ~ Text => UserPassword |
          typ ~ Text => UserEmail |
          typ ~ Text => UserAvatar |
          typ ~ Maybe Text => UserFirstName |
          typ ~ Maybe Text => UserSecondName |
          typ ~ Maybe UTCTime => UserBirthDay |
          typ ~ Maybe Gender => UserSex |
          typ ~ [QuizId] => UserCreatedQuizzes |
          typ ~ [QuizResult] => UserPassedQuizzes
      keyToValues
        = ((ghc-prim-0.5.1.1:GHC.Types.: [])
             . (toPersistValue . unUserKey))
      keyFromValues
        = ((fmap UserKey)
             . (fromPersistValue . Database.Persist.TH.headNote))
      entityDef _
        = (((((((((EntityDef (HaskellName (packPTH "User")))
                    (DBName (packPTH "user")))
                   (((((((FieldDef (HaskellName (packPTH "Id")))
                           (DBName (packPTH "id")))
                          ((FTTypeCon Nothing) (packPTH "UserId")))
                         SqlInt64)
                        [])
                       True)
                      ((ForeignRef (HaskellName (packPTH "User")))
                         ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                  [packPTH "json"])
                 [((((((FieldDef (HaskellName (packPTH "username")))
                         (DBName (packPTH "username")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "password")))
                         (DBName (packPTH "password")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "email")))
                         (DBName (packPTH "email")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "avatar")))
                         (DBName (packPTH "avatar")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "firstName")))
                         (DBName (packPTH "first_name")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [packPTH "Maybe"])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "secondName")))
                         (DBName (packPTH "second_name")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [packPTH "Maybe"])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "birthDay")))
                         (DBName (packPTH "birth_day")))
                        ((FTTypeCon Nothing) (packPTH "UTCTime")))
                       SqlDayTime)
                      [packPTH "Maybe"])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "sex")))
                         (DBName (packPTH "sex")))
                        ((FTTypeCon Nothing) (packPTH "Gender")))
                       SqlString)
                      [packPTH "Maybe"])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "createdQuizzes")))
                         (DBName (packPTH "created_quizzes")))
                        (FTList ((FTTypeCon Nothing) (packPTH "QuizId"))))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "passedQuizzes")))
                         (DBName (packPTH "passed_quizzes")))
                        (FTList ((FTTypeCon Nothing) (packPTH "QuizResult"))))
                       SqlString)
                      [])
                     True)
                    (EmbedRef
                       ((EmbedEntityDef (HaskellName (packPTH "QuizResult")))
                          [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing) Nothing,
                           ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                           ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                             Nothing]))])
                [])
               [])
              [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
             (Data.Map.Internal.fromList []))
            False
      toPersistFields
        (User x_aUr9
              x_aUra
              x_aUrb
              x_aUrc
              x_aUrd
              x_aUre
              x_aUrf
              x_aUrg
              x_aUrh
              x_aUri)
        = [SomePersistField x_aUr9, SomePersistField x_aUra,
           SomePersistField x_aUrb, SomePersistField x_aUrc,
           SomePersistField x_aUrd, SomePersistField x_aUre,
           SomePersistField x_aUrf, SomePersistField x_aUrg,
           SomePersistField x_aUrh, SomePersistField x_aUri]
      fromPersistValues
        [x1_aUrk,
         x2_aUrl,
         x3_aUrm,
         x4_aUrn,
         x5_aUro,
         x6_aUrp,
         x7_aUrq,
         x8_aUrr,
         x9_aUrs,
         x10_aUrt]
        = User
            <$>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "username")))
                 . fromPersistValue)
                x1_aUrk
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "password")))
                 . fromPersistValue)
                x2_aUrl
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "email")))
                 . fromPersistValue)
                x3_aUrm
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "avatar")))
                 . fromPersistValue)
                x4_aUrn
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "firstName")))
                 . fromPersistValue)
                x5_aUro
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "secondName")))
                 . fromPersistValue)
                x6_aUrp
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "birthDay")))
                 . fromPersistValue)
                x7_aUrq
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "sex")))
                 . fromPersistValue)
                x8_aUrr
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "createdQuizzes")))
                 . fromPersistValue)
                x9_aUrs
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "passedQuizzes")))
                 . fromPersistValue)
                x10_aUrt
      fromPersistValues x_aUrj
        = (Left
             $ ((mappend (packPTH "User: fromPersistValues failed on: "))
                  (Data.Text.pack $ (show x_aUrj))))
      persistUniqueToFieldNames _
        = error "Degenerate case, should never happen"
      persistUniqueToValues _
        = error "Degenerate case, should never happen"
      persistUniqueKeys
        (User _username_aUru
              _password_aUrv
              _email_aUrw
              _avatar_aUrx
              _firstName_aUry
              _secondName_aUrz
              _birthDay_aUrA
              _sex_aUrB
              _createdQuizzes_aUrC
              _passedQuizzes_aUrD)
        = []
      persistFieldDef UserId
        = ((((((FieldDef (HaskellName (packPTH "Id")))
                 (DBName (packPTH "id")))
                ((FTTypeCon Nothing) (packPTH "UserId")))
               SqlInt64)
              [])
             True)
            ((ForeignRef (HaskellName (packPTH "User")))
               ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))
      persistFieldDef UserUsername
        = ((((((FieldDef (HaskellName (packPTH "username")))
                 (DBName (packPTH "username")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef UserPassword
        = ((((((FieldDef (HaskellName (packPTH "password")))
                 (DBName (packPTH "password")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef UserEmail
        = ((((((FieldDef (HaskellName (packPTH "email")))
                 (DBName (packPTH "email")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef UserAvatar
        = ((((((FieldDef (HaskellName (packPTH "avatar")))
                 (DBName (packPTH "avatar")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef UserFirstName
        = ((((((FieldDef (HaskellName (packPTH "firstName")))
                 (DBName (packPTH "first_name")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [packPTH "Maybe"])
             True)
            NoReference
      persistFieldDef UserSecondName
        = ((((((FieldDef (HaskellName (packPTH "secondName")))
                 (DBName (packPTH "second_name")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [packPTH "Maybe"])
             True)
            NoReference
      persistFieldDef UserBirthDay
        = ((((((FieldDef (HaskellName (packPTH "birthDay")))
                 (DBName (packPTH "birth_day")))
                ((FTTypeCon Nothing) (packPTH "UTCTime")))
               SqlDayTime)
              [packPTH "Maybe"])
             True)
            NoReference
      persistFieldDef UserSex
        = ((((((FieldDef (HaskellName (packPTH "sex")))
                 (DBName (packPTH "sex")))
                ((FTTypeCon Nothing) (packPTH "Gender")))
               SqlString)
              [packPTH "Maybe"])
             True)
            NoReference
      persistFieldDef UserCreatedQuizzes
        = ((((((FieldDef (HaskellName (packPTH "createdQuizzes")))
                 (DBName (packPTH "created_quizzes")))
                (FTList ((FTTypeCon Nothing) (packPTH "QuizId"))))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef UserPassedQuizzes
        = ((((((FieldDef (HaskellName (packPTH "passedQuizzes")))
                 (DBName (packPTH "passed_quizzes")))
                (FTList ((FTTypeCon Nothing) (packPTH "QuizResult"))))
               SqlString)
              [])
             True)
            (EmbedRef
               ((EmbedEntityDef (HaskellName (packPTH "QuizResult")))
                  [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing) Nothing,
                   ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                   ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                     Nothing]))
      persistIdField = UserId
      fieldLens UserId
        = (lensPTH entityKey)
            (\ Entity _ value_aUrE key_aUrF -> (Entity key_aUrF) value_aUrE)
      fieldLens UserUsername
        = (lensPTH (userUsername . entityVal))
            (\ Entity key_aUrG value_aUrH x_aUrI
               -> (Entity key_aUrG) value_aUrH {userUsername = x_aUrI})
      fieldLens UserPassword
        = (lensPTH (userPassword . entityVal))
            (\ Entity key_aUrG value_aUrH x_aUrI
               -> (Entity key_aUrG) value_aUrH {userPassword = x_aUrI})
      fieldLens UserEmail
        = (lensPTH (userEmail . entityVal))
            (\ Entity key_aUrG value_aUrH x_aUrI
               -> (Entity key_aUrG) value_aUrH {userEmail = x_aUrI})
      fieldLens UserAvatar
        = (lensPTH (userAvatar . entityVal))
            (\ Entity key_aUrG value_aUrH x_aUrI
               -> (Entity key_aUrG) value_aUrH {userAvatar = x_aUrI})
      fieldLens UserFirstName
        = (lensPTH (userFirstName . entityVal))
            (\ Entity key_aUrG value_aUrH x_aUrI
               -> (Entity key_aUrG) value_aUrH {userFirstName = x_aUrI})
      fieldLens UserSecondName
        = (lensPTH (userSecondName . entityVal))
            (\ Entity key_aUrG value_aUrH x_aUrI
               -> (Entity key_aUrG) value_aUrH {userSecondName = x_aUrI})
      fieldLens UserBirthDay
        = (lensPTH (userBirthDay . entityVal))
            (\ Entity key_aUrG value_aUrH x_aUrI
               -> (Entity key_aUrG) value_aUrH {userBirthDay = x_aUrI})
      fieldLens UserSex
        = (lensPTH (userSex . entityVal))
            (\ Entity key_aUrG value_aUrH x_aUrI
               -> (Entity key_aUrG) value_aUrH {userSex = x_aUrI})
      fieldLens UserCreatedQuizzes
        = (lensPTH (userCreatedQuizzes . entityVal))
            (\ Entity key_aUrG value_aUrH x_aUrI
               -> (Entity key_aUrG) value_aUrH {userCreatedQuizzes = x_aUrI})
      fieldLens UserPassedQuizzes
        = (lensPTH (userPassedQuizzes . entityVal))
            (\ Entity key_aUrG value_aUrH x_aUrI
               -> (Entity key_aUrG) value_aUrH {userPassedQuizzes = x_aUrI})
    instance ToBackendKey MongoContext User where
      toBackendKey = unUserKey
      fromBackendKey = UserKey
    instance ToJSON Question where
      aeson-1.2.4.0:Data.Aeson.Types.ToJSON.toJSON
        (Question text_aUrK option_aUrL answer_aUrM)
        = aeson-1.2.4.0:Data.Aeson.Types.Internal.object
            [((Data.Text.pack "text")
                aeson-1.2.4.0:Data.Aeson.Types.ToJSON..= text_aUrK),
             ((Data.Text.pack "option")
                aeson-1.2.4.0:Data.Aeson.Types.ToJSON..= option_aUrL),
             ((Data.Text.pack "answer")
                aeson-1.2.4.0:Data.Aeson.Types.ToJSON..= answer_aUrM)]
    instance FromJSON Question where
      aeson-1.2.4.0:Data.Aeson.Types.FromJSON.parseJSON
        (aeson-1.2.4.0:Data.Aeson.Types.Internal.Object obj_aUrJ)
        = ((((pure Question)
               <*>
                 (obj_aUrJ
                    aeson-1.2.4.0:Data.Aeson.Types.FromJSON..:
                      (Data.Text.pack "text")))
              <*>
                (obj_aUrJ
                   aeson-1.2.4.0:Data.Aeson.Types.FromJSON..:
                     (Data.Text.pack "option")))
             <*>
               (obj_aUrJ
                  aeson-1.2.4.0:Data.Aeson.Types.FromJSON..:
                    (Data.Text.pack "answer")))
      aeson-1.2.4.0:Data.Aeson.Types.FromJSON.parseJSON _
        = GHC.Base.mzero
    instance ToJSON (Entity Question) where
      aeson-1.2.4.0:Data.Aeson.Types.ToJSON.toJSON = entityIdToJSON
    instance FromJSON (Entity Question) where
      aeson-1.2.4.0:Data.Aeson.Types.FromJSON.parseJSON
        = entityIdFromJSON
    instance ToJSON Quiz where
      aeson-1.2.4.0:Data.Aeson.Types.ToJSON.toJSON
        (Quiz name_aUrO
              description_aUrP
              creationDate_aUrQ
              passingNumber_aUrR
              question_aUrS)
        = aeson-1.2.4.0:Data.Aeson.Types.Internal.object
            [((Data.Text.pack "name")
                aeson-1.2.4.0:Data.Aeson.Types.ToJSON..= name_aUrO),
             ((Data.Text.pack "description")
                aeson-1.2.4.0:Data.Aeson.Types.ToJSON..= description_aUrP),
             ((Data.Text.pack "creationDate")
                aeson-1.2.4.0:Data.Aeson.Types.ToJSON..= creationDate_aUrQ),
             ((Data.Text.pack "passingNumber")
                aeson-1.2.4.0:Data.Aeson.Types.ToJSON..= passingNumber_aUrR),
             ((Data.Text.pack "question")
                aeson-1.2.4.0:Data.Aeson.Types.ToJSON..= question_aUrS)]
    instance FromJSON Quiz where
      aeson-1.2.4.0:Data.Aeson.Types.FromJSON.parseJSON
        (aeson-1.2.4.0:Data.Aeson.Types.Internal.Object obj_aUrN)
        = ((((((pure Quiz)
                 <*>
                   (obj_aUrN
                      aeson-1.2.4.0:Data.Aeson.Types.FromJSON..:
                        (Data.Text.pack "name")))
                <*>
                  (obj_aUrN
                     aeson-1.2.4.0:Data.Aeson.Types.FromJSON..:
                       (Data.Text.pack "description")))
               <*>
                 (obj_aUrN
                    aeson-1.2.4.0:Data.Aeson.Types.FromJSON..:
                      (Data.Text.pack "creationDate")))
              <*>
                (obj_aUrN
                   aeson-1.2.4.0:Data.Aeson.Types.FromJSON..:
                     (Data.Text.pack "passingNumber")))
             <*>
               (obj_aUrN
                  aeson-1.2.4.0:Data.Aeson.Types.FromJSON..:
                    (Data.Text.pack "question")))
      aeson-1.2.4.0:Data.Aeson.Types.FromJSON.parseJSON _
        = GHC.Base.mzero
    instance ToJSON (Entity Quiz) where
      aeson-1.2.4.0:Data.Aeson.Types.ToJSON.toJSON = entityIdToJSON
    instance FromJSON (Entity Quiz) where
      aeson-1.2.4.0:Data.Aeson.Types.FromJSON.parseJSON
        = entityIdFromJSON
    instance ToJSON QuizResult where
      aeson-1.2.4.0:Data.Aeson.Types.ToJSON.toJSON
        (QuizResult testKey_aUrU result_aUrV passingDate_aUrW)
        = aeson-1.2.4.0:Data.Aeson.Types.Internal.object
            [((Data.Text.pack "testKey")
                aeson-1.2.4.0:Data.Aeson.Types.ToJSON..= testKey_aUrU),
             ((Data.Text.pack "result")
                aeson-1.2.4.0:Data.Aeson.Types.ToJSON..= result_aUrV),
             ((Data.Text.pack "passingDate")
                aeson-1.2.4.0:Data.Aeson.Types.ToJSON..= passingDate_aUrW)]
    instance FromJSON QuizResult where
      aeson-1.2.4.0:Data.Aeson.Types.FromJSON.parseJSON
        (aeson-1.2.4.0:Data.Aeson.Types.Internal.Object obj_aUrT)
        = ((((pure QuizResult)
               <*>
                 (obj_aUrT
                    aeson-1.2.4.0:Data.Aeson.Types.FromJSON..:
                      (Data.Text.pack "testKey")))
              <*>
                (obj_aUrT
                   aeson-1.2.4.0:Data.Aeson.Types.FromJSON..:
                     (Data.Text.pack "result")))
             <*>
               (obj_aUrT
                  aeson-1.2.4.0:Data.Aeson.Types.FromJSON..:
                    (Data.Text.pack "passingDate")))
      aeson-1.2.4.0:Data.Aeson.Types.FromJSON.parseJSON _
        = GHC.Base.mzero
    instance ToJSON (Entity QuizResult) where
      aeson-1.2.4.0:Data.Aeson.Types.ToJSON.toJSON = entityIdToJSON
    instance FromJSON (Entity QuizResult) where
      aeson-1.2.4.0:Data.Aeson.Types.FromJSON.parseJSON
        = entityIdFromJSON
    instance ToJSON User where
      aeson-1.2.4.0:Data.Aeson.Types.ToJSON.toJSON
        (User username_aUrY
              password_aUrZ
              email_aUs0
              avatar_aUs1
              firstName_aUs2
              secondName_aUs3
              birthDay_aUs4
              sex_aUs5
              createdQuizzes_aUs6
              passedQuizzes_aUs7)
        = aeson-1.2.4.0:Data.Aeson.Types.Internal.object
            [((Data.Text.pack "username")
                aeson-1.2.4.0:Data.Aeson.Types.ToJSON..= username_aUrY),
             ((Data.Text.pack "password")
                aeson-1.2.4.0:Data.Aeson.Types.ToJSON..= password_aUrZ),
             ((Data.Text.pack "email")
                aeson-1.2.4.0:Data.Aeson.Types.ToJSON..= email_aUs0),
             ((Data.Text.pack "avatar")
                aeson-1.2.4.0:Data.Aeson.Types.ToJSON..= avatar_aUs1),
             ((Data.Text.pack "firstName")
                aeson-1.2.4.0:Data.Aeson.Types.ToJSON..= firstName_aUs2),
             ((Data.Text.pack "secondName")
                aeson-1.2.4.0:Data.Aeson.Types.ToJSON..= secondName_aUs3),
             ((Data.Text.pack "birthDay")
                aeson-1.2.4.0:Data.Aeson.Types.ToJSON..= birthDay_aUs4),
             ((Data.Text.pack "sex")
                aeson-1.2.4.0:Data.Aeson.Types.ToJSON..= sex_aUs5),
             ((Data.Text.pack "createdQuizzes")
                aeson-1.2.4.0:Data.Aeson.Types.ToJSON..= createdQuizzes_aUs6),
             ((Data.Text.pack "passedQuizzes")
                aeson-1.2.4.0:Data.Aeson.Types.ToJSON..= passedQuizzes_aUs7)]
    instance FromJSON User where
      aeson-1.2.4.0:Data.Aeson.Types.FromJSON.parseJSON
        (aeson-1.2.4.0:Data.Aeson.Types.Internal.Object obj_aUrX)
        = (((((((((((pure User)
                      <*>
                        (obj_aUrX
                           aeson-1.2.4.0:Data.Aeson.Types.FromJSON..:
                             (Data.Text.pack "username")))
                     <*>
                       (obj_aUrX
                          aeson-1.2.4.0:Data.Aeson.Types.FromJSON..:
                            (Data.Text.pack "password")))
                    <*>
                      (obj_aUrX
                         aeson-1.2.4.0:Data.Aeson.Types.FromJSON..:
                           (Data.Text.pack "email")))
                   <*>
                     (obj_aUrX
                        aeson-1.2.4.0:Data.Aeson.Types.FromJSON..:
                          (Data.Text.pack "avatar")))
                  <*>
                    (obj_aUrX
                       aeson-compat-0.3.7.1:Data.Aeson.Compat..:?
                         (Data.Text.pack "firstName")))
                 <*>
                   (obj_aUrX
                      aeson-compat-0.3.7.1:Data.Aeson.Compat..:?
                        (Data.Text.pack "secondName")))
                <*>
                  (obj_aUrX
                     aeson-compat-0.3.7.1:Data.Aeson.Compat..:?
                       (Data.Text.pack "birthDay")))
               <*>
                 (obj_aUrX
                    aeson-compat-0.3.7.1:Data.Aeson.Compat..:? (Data.Text.pack "sex")))
              <*>
                (obj_aUrX
                   aeson-1.2.4.0:Data.Aeson.Types.FromJSON..:
                     (Data.Text.pack "createdQuizzes")))
             <*>
               (obj_aUrX
                  aeson-1.2.4.0:Data.Aeson.Types.FromJSON..:
                    (Data.Text.pack "passedQuizzes")))
      aeson-1.2.4.0:Data.Aeson.Types.FromJSON.parseJSON _
        = GHC.Base.mzero
    instance ToJSON (Entity User) where
      aeson-1.2.4.0:Data.Aeson.Types.ToJSON.toJSON = entityIdToJSON
    instance FromJSON (Entity User) where
      aeson-1.2.4.0:Data.Aeson.Types.FromJSON.parseJSON
        = entityIdFromJSON
/home/nikita/Projects/labs/Databases/Course-Project/Server/src/Model/User.hs:(27,78)-(57,2): Splicing expression
    Language.Haskell.TH.Quote.quoteExp
      persistLowerCase
      "\n\
      \Question json\n\
      \  text    Text\n\
      \  option  QuestionOptions\n\
      \  answer  QuestionAnswer\n\
      \  deriving Eq Read Show Generic\n\
      \Quiz json\n\
      \  name            Text\n\
      \  description     Text\n\
      \  creationDate    UTCTime\n\
      \  passingNumber   Int\n\
      \  question        Question\n\
      \  deriving Eq Read Show Generic\n\
      \QuizResult json\n\
      \  testKey         Text\n\
      \  result          Text\n\
      \  passingDate     UTCTime\n\
      \  deriving        Eq Read Show Generic\n\
      \User json\n\
      \  username        Text\n\
      \  password        Text\n\
      \  email           Text\n\
      \  avatar          Text\n\
      \  firstName       Text Maybe\n\
      \  secondName      Text Maybe\n\
      \  birthDay        UTCTime Maybe\n\
      \  sex             Gender Maybe\n\
      \  createdQuizzes  [QuizId]\n\
      \  passedQuizzes   [QuizResult]\n\
      \  deriving        Eq Read Show Generic\n"
  ======>
    [(((((((((EntityDef (HaskellName (packPTH "Question")))
               (DBName (packPTH "question")))
              (((((((FieldDef (HaskellName (packPTH "Id")))
                      (DBName (packPTH "id")))
                     ((FTTypeCon Nothing) (packPTH "QuestionId")))
                    SqlInt64)
                   [])
                  True)
                 ((ForeignRef (HaskellName (packPTH "Question")))
                    ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
             [packPTH "json"])
            [((((((FieldDef (HaskellName (packPTH "text")))
                    (DBName (packPTH "text")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for text")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "option")))
                    (DBName (packPTH "option")))
                   ((FTTypeCon Nothing) (packPTH "QuestionOptions")))
                  (SqlOther (packPTH "SqlType unset for option")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "answer")))
                    (DBName (packPTH "answer")))
                   ((FTTypeCon Nothing) (packPTH "QuestionAnswer")))
                  (SqlOther (packPTH "SqlType unset for answer")))
                 [])
                True)
               NoReference])
           [])
          [])
         [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
        (Data.Map.Internal.fromList []))
       False
       {entityFields = [((((((FieldDef (HaskellName (packPTH "text")))
                               (DBName (packPTH "text")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "option")))
                               (DBName (packPTH "option")))
                              ((FTTypeCon Nothing) (packPTH "QuestionOptions")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy QuestionOptions)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "answer")))
                               (DBName (packPTH "answer")))
                              ((FTTypeCon Nothing) (packPTH "QuestionAnswer")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy QuestionAnswer)))
                            [])
                           True)
                          NoReference],
        entityId = ((((((FieldDef (HaskellName (packPTH "Id")))
                          (DBName (packPTH "id")))
                         ((FTTypeCon Nothing) (packPTH "QuestionId")))
                        (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                           (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                       [])
                      True)
                     ((ForeignRef (HaskellName (packPTH "Question")))
                        ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))},
     (((((((((EntityDef (HaskellName (packPTH "Quiz")))
               (DBName (packPTH "quiz")))
              (((((((FieldDef (HaskellName (packPTH "Id")))
                      (DBName (packPTH "id")))
                     ((FTTypeCon Nothing) (packPTH "QuizId")))
                    SqlInt64)
                   [])
                  True)
                 ((ForeignRef (HaskellName (packPTH "Quiz")))
                    ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
             [packPTH "json"])
            [((((((FieldDef (HaskellName (packPTH "name")))
                    (DBName (packPTH "name")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for name")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "description")))
                    (DBName (packPTH "description")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for description")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "creationDate")))
                    (DBName (packPTH "creation_date")))
                   ((FTTypeCon Nothing) (packPTH "UTCTime")))
                  (SqlOther (packPTH "SqlType unset for creationDate")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "passingNumber")))
                    (DBName (packPTH "passing_number")))
                   ((FTTypeCon Nothing) (packPTH "Int")))
                  (SqlOther (packPTH "SqlType unset for passingNumber")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "question")))
                    (DBName (packPTH "question")))
                   ((FTTypeCon Nothing) (packPTH "Question")))
                  (SqlOther (packPTH "SqlType unset for question")))
                 [])
                True)
               (EmbedRef
                  ((EmbedEntityDef (HaskellName (packPTH "Question")))
                     [((EmbedFieldDef (DBName (packPTH "text"))) Nothing) Nothing,
                      ((EmbedFieldDef (DBName (packPTH "option"))) Nothing) Nothing,
                      ((EmbedFieldDef (DBName (packPTH "answer"))) Nothing) Nothing]))])
           [])
          [])
         [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
        (Data.Map.Internal.fromList []))
       False
       {entityFields = [((((((FieldDef (HaskellName (packPTH "name")))
                               (DBName (packPTH "name")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "description")))
                               (DBName (packPTH "description")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "creationDate")))
                               (DBName (packPTH "creation_date")))
                              ((FTTypeCon Nothing) (packPTH "UTCTime")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy UTCTime)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "passingNumber")))
                               (DBName (packPTH "passing_number")))
                              ((FTTypeCon Nothing) (packPTH "Int")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Int)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "question")))
                               (DBName (packPTH "question")))
                              ((FTTypeCon Nothing) (packPTH "Question")))
                             SqlString)
                            [])
                           True)
                          (EmbedRef
                             ((EmbedEntityDef (HaskellName (packPTH "Question")))
                                [((EmbedFieldDef (DBName (packPTH "text"))) Nothing) Nothing,
                                 ((EmbedFieldDef (DBName (packPTH "option"))) Nothing) Nothing,
                                 ((EmbedFieldDef (DBName (packPTH "answer"))) Nothing) Nothing]))],
        entityId = ((((((FieldDef (HaskellName (packPTH "Id")))
                          (DBName (packPTH "id")))
                         ((FTTypeCon Nothing) (packPTH "QuizId")))
                        (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                           (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                       [])
                      True)
                     ((ForeignRef (HaskellName (packPTH "Quiz")))
                        ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))},
     (((((((((EntityDef (HaskellName (packPTH "QuizResult")))
               (DBName (packPTH "quiz_result")))
              (((((((FieldDef (HaskellName (packPTH "Id")))
                      (DBName (packPTH "id")))
                     ((FTTypeCon Nothing) (packPTH "QuizResultId")))
                    SqlInt64)
                   [])
                  True)
                 ((ForeignRef (HaskellName (packPTH "QuizResult")))
                    ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
             [packPTH "json"])
            [((((((FieldDef (HaskellName (packPTH "testKey")))
                    (DBName (packPTH "test_key")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for testKey")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "result")))
                    (DBName (packPTH "result")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for result")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "passingDate")))
                    (DBName (packPTH "passing_date")))
                   ((FTTypeCon Nothing) (packPTH "UTCTime")))
                  (SqlOther (packPTH "SqlType unset for passingDate")))
                 [])
                True)
               NoReference])
           [])
          [])
         [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
        (Data.Map.Internal.fromList []))
       False
       {entityFields = [((((((FieldDef (HaskellName (packPTH "testKey")))
                               (DBName (packPTH "test_key")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "result")))
                               (DBName (packPTH "result")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "passingDate")))
                               (DBName (packPTH "passing_date")))
                              ((FTTypeCon Nothing) (packPTH "UTCTime")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy UTCTime)))
                            [])
                           True)
                          NoReference],
        entityId = ((((((FieldDef (HaskellName (packPTH "Id")))
                          (DBName (packPTH "id")))
                         ((FTTypeCon Nothing) (packPTH "QuizResultId")))
                        (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                           (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                       [])
                      True)
                     ((ForeignRef (HaskellName (packPTH "QuizResult")))
                        ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))},
     (((((((((EntityDef (HaskellName (packPTH "User")))
               (DBName (packPTH "user")))
              (((((((FieldDef (HaskellName (packPTH "Id")))
                      (DBName (packPTH "id")))
                     ((FTTypeCon Nothing) (packPTH "UserId")))
                    SqlInt64)
                   [])
                  True)
                 ((ForeignRef (HaskellName (packPTH "User")))
                    ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
             [packPTH "json"])
            [((((((FieldDef (HaskellName (packPTH "username")))
                    (DBName (packPTH "username")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for username")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "password")))
                    (DBName (packPTH "password")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for password")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "email")))
                    (DBName (packPTH "email")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for email")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "avatar")))
                    (DBName (packPTH "avatar")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for avatar")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "firstName")))
                    (DBName (packPTH "first_name")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for firstName")))
                 [packPTH "Maybe"])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "secondName")))
                    (DBName (packPTH "second_name")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for secondName")))
                 [packPTH "Maybe"])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "birthDay")))
                    (DBName (packPTH "birth_day")))
                   ((FTTypeCon Nothing) (packPTH "UTCTime")))
                  (SqlOther (packPTH "SqlType unset for birthDay")))
                 [packPTH "Maybe"])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "sex")))
                    (DBName (packPTH "sex")))
                   ((FTTypeCon Nothing) (packPTH "Gender")))
                  (SqlOther (packPTH "SqlType unset for sex")))
                 [packPTH "Maybe"])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "createdQuizzes")))
                    (DBName (packPTH "created_quizzes")))
                   (FTList ((FTTypeCon Nothing) (packPTH "QuizId"))))
                  (SqlOther (packPTH "SqlType unset for createdQuizzes")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "passedQuizzes")))
                    (DBName (packPTH "passed_quizzes")))
                   (FTList ((FTTypeCon Nothing) (packPTH "QuizResult"))))
                  (SqlOther (packPTH "SqlType unset for passedQuizzes")))
                 [])
                True)
               (EmbedRef
                  ((EmbedEntityDef (HaskellName (packPTH "QuizResult")))
                     [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing) Nothing,
                      ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                      ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                        Nothing]))])
           [])
          [])
         [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
        (Data.Map.Internal.fromList []))
       False
       {entityFields = [((((((FieldDef (HaskellName (packPTH "username")))
                               (DBName (packPTH "username")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "password")))
                               (DBName (packPTH "password")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "email")))
                               (DBName (packPTH "email")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "avatar")))
                               (DBName (packPTH "avatar")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "firstName")))
                               (DBName (packPTH "first_name")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [packPTH "Maybe"])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "secondName")))
                               (DBName (packPTH "second_name")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [packPTH "Maybe"])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "birthDay")))
                               (DBName (packPTH "birth_day")))
                              ((FTTypeCon Nothing) (packPTH "UTCTime")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy UTCTime)))
                            [packPTH "Maybe"])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "sex")))
                               (DBName (packPTH "sex")))
                              ((FTTypeCon Nothing) (packPTH "Gender")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Gender)))
                            [packPTH "Maybe"])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "createdQuizzes")))
                               (DBName (packPTH "created_quizzes")))
                              (FTList ((FTTypeCon Nothing) (packPTH "QuizId"))))
                             SqlString)
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "passedQuizzes")))
                               (DBName (packPTH "passed_quizzes")))
                              (FTList ((FTTypeCon Nothing) (packPTH "QuizResult"))))
                             SqlString)
                            [])
                           True)
                          (EmbedRef
                             ((EmbedEntityDef (HaskellName (packPTH "QuizResult")))
                                [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing) Nothing,
                                 ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                                 ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                                   Nothing]))],
        entityId = ((((((FieldDef (HaskellName (packPTH "Id")))
                          (DBName (packPTH "id")))
                         ((FTTypeCon Nothing) (packPTH "UserId")))
                        (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                           (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                       [])
                      True)
                     ((ForeignRef (HaskellName (packPTH "User")))
                        ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))}]
/home/nikita/Projects/labs/Databases/Course-Project/Server/src/Model/User.hs:(27,1)-(57,2): Splicing declarations
    share
      [mkPersist (mkPersistSettings (ConT ''MongoContext))]
      ([(((((((((EntityDef (HaskellName (packPTH "Question")))
                  (DBName (packPTH "question")))
                 (((((((FieldDef (HaskellName (packPTH "Id")))
                         (DBName (packPTH "id")))
                        ((FTTypeCon Nothing) (packPTH "QuestionId")))
                       SqlInt64)
                      [])
                     True)
                    ((ForeignRef (HaskellName (packPTH "Question")))
                       ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                [packPTH "json"])
               [((((((FieldDef (HaskellName (packPTH "text")))
                       (DBName (packPTH "text")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for text")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "option")))
                       (DBName (packPTH "option")))
                      ((FTTypeCon Nothing) (packPTH "QuestionOptions")))
                     (SqlOther (packPTH "SqlType unset for option")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "answer")))
                       (DBName (packPTH "answer")))
                      ((FTTypeCon Nothing) (packPTH "QuestionAnswer")))
                     (SqlOther (packPTH "SqlType unset for answer")))
                    [])
                   True)
                  NoReference])
              [])
             [])
            [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
           (Data.Map.Internal.fromList []))
          False
          {entityFields = [((((((FieldDef (HaskellName (packPTH "text")))
                                  (DBName (packPTH "text")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "option")))
                                  (DBName (packPTH "option")))
                                 ((FTTypeCon Nothing) (packPTH "QuestionOptions")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy QuestionOptions)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "answer")))
                                  (DBName (packPTH "answer")))
                                 ((FTTypeCon Nothing) (packPTH "QuestionAnswer")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy QuestionAnswer)))
                               [])
                              True)
                             NoReference],
           entityId = ((((((FieldDef (HaskellName (packPTH "Id")))
                             (DBName (packPTH "id")))
                            ((FTTypeCon Nothing) (packPTH "QuestionId")))
                           (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                              (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                          [])
                         True)
                        ((ForeignRef (HaskellName (packPTH "Question")))
                           ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))},
        (((((((((EntityDef (HaskellName (packPTH "Quiz")))
                  (DBName (packPTH "quiz")))
                 (((((((FieldDef (HaskellName (packPTH "Id")))
                         (DBName (packPTH "id")))
                        ((FTTypeCon Nothing) (packPTH "QuizId")))
                       SqlInt64)
                      [])
                     True)
                    ((ForeignRef (HaskellName (packPTH "Quiz")))
                       ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                [packPTH "json"])
               [((((((FieldDef (HaskellName (packPTH "name")))
                       (DBName (packPTH "name")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for name")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "description")))
                       (DBName (packPTH "description")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for description")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "creationDate")))
                       (DBName (packPTH "creation_date")))
                      ((FTTypeCon Nothing) (packPTH "UTCTime")))
                     (SqlOther (packPTH "SqlType unset for creationDate")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "passingNumber")))
                       (DBName (packPTH "passing_number")))
                      ((FTTypeCon Nothing) (packPTH "Int")))
                     (SqlOther (packPTH "SqlType unset for passingNumber")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "question")))
                       (DBName (packPTH "question")))
                      ((FTTypeCon Nothing) (packPTH "Question")))
                     (SqlOther (packPTH "SqlType unset for question")))
                    [])
                   True)
                  (EmbedRef
                     ((EmbedEntityDef (HaskellName (packPTH "Question")))
                        [((EmbedFieldDef (DBName (packPTH "text"))) Nothing) Nothing,
                         ((EmbedFieldDef (DBName (packPTH "option"))) Nothing) Nothing,
                         ((EmbedFieldDef (DBName (packPTH "answer"))) Nothing) Nothing]))])
              [])
             [])
            [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
           (Data.Map.Internal.fromList []))
          False
          {entityFields = [((((((FieldDef (HaskellName (packPTH "name")))
                                  (DBName (packPTH "name")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "description")))
                                  (DBName (packPTH "description")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "creationDate")))
                                  (DBName (packPTH "creation_date")))
                                 ((FTTypeCon Nothing) (packPTH "UTCTime")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy UTCTime)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "passingNumber")))
                                  (DBName (packPTH "passing_number")))
                                 ((FTTypeCon Nothing) (packPTH "Int")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Int)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "question")))
                                  (DBName (packPTH "question")))
                                 ((FTTypeCon Nothing) (packPTH "Question")))
                                SqlString)
                               [])
                              True)
                             (EmbedRef
                                ((EmbedEntityDef (HaskellName (packPTH "Question")))
                                   [((EmbedFieldDef (DBName (packPTH "text"))) Nothing) Nothing,
                                    ((EmbedFieldDef (DBName (packPTH "option"))) Nothing) Nothing,
                                    ((EmbedFieldDef (DBName (packPTH "answer"))) Nothing)
                                      Nothing]))],
           entityId = ((((((FieldDef (HaskellName (packPTH "Id")))
                             (DBName (packPTH "id")))
                            ((FTTypeCon Nothing) (packPTH "QuizId")))
                           (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                              (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                          [])
                         True)
                        ((ForeignRef (HaskellName (packPTH "Quiz")))
                           ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))},
        (((((((((EntityDef (HaskellName (packPTH "QuizResult")))
                  (DBName (packPTH "quiz_result")))
                 (((((((FieldDef (HaskellName (packPTH "Id")))
                         (DBName (packPTH "id")))
                        ((FTTypeCon Nothing) (packPTH "QuizResultId")))
                       SqlInt64)
                      [])
                     True)
                    ((ForeignRef (HaskellName (packPTH "QuizResult")))
                       ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                [packPTH "json"])
               [((((((FieldDef (HaskellName (packPTH "testKey")))
                       (DBName (packPTH "test_key")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for testKey")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "result")))
                       (DBName (packPTH "result")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for result")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "passingDate")))
                       (DBName (packPTH "passing_date")))
                      ((FTTypeCon Nothing) (packPTH "UTCTime")))
                     (SqlOther (packPTH "SqlType unset for passingDate")))
                    [])
                   True)
                  NoReference])
              [])
             [])
            [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
           (Data.Map.Internal.fromList []))
          False
          {entityFields = [((((((FieldDef (HaskellName (packPTH "testKey")))
                                  (DBName (packPTH "test_key")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "result")))
                                  (DBName (packPTH "result")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "passingDate")))
                                  (DBName (packPTH "passing_date")))
                                 ((FTTypeCon Nothing) (packPTH "UTCTime")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy UTCTime)))
                               [])
                              True)
                             NoReference],
           entityId = ((((((FieldDef (HaskellName (packPTH "Id")))
                             (DBName (packPTH "id")))
                            ((FTTypeCon Nothing) (packPTH "QuizResultId")))
                           (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                              (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                          [])
                         True)
                        ((ForeignRef (HaskellName (packPTH "QuizResult")))
                           ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))},
        (((((((((EntityDef (HaskellName (packPTH "User")))
                  (DBName (packPTH "user")))
                 (((((((FieldDef (HaskellName (packPTH "Id")))
                         (DBName (packPTH "id")))
                        ((FTTypeCon Nothing) (packPTH "UserId")))
                       SqlInt64)
                      [])
                     True)
                    ((ForeignRef (HaskellName (packPTH "User")))
                       ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                [packPTH "json"])
               [((((((FieldDef (HaskellName (packPTH "username")))
                       (DBName (packPTH "username")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for username")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "password")))
                       (DBName (packPTH "password")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for password")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "email")))
                       (DBName (packPTH "email")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for email")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "avatar")))
                       (DBName (packPTH "avatar")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for avatar")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "firstName")))
                       (DBName (packPTH "first_name")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for firstName")))
                    [packPTH "Maybe"])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "secondName")))
                       (DBName (packPTH "second_name")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for secondName")))
                    [packPTH "Maybe"])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "birthDay")))
                       (DBName (packPTH "birth_day")))
                      ((FTTypeCon Nothing) (packPTH "UTCTime")))
                     (SqlOther (packPTH "SqlType unset for birthDay")))
                    [packPTH "Maybe"])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "sex")))
                       (DBName (packPTH "sex")))
                      ((FTTypeCon Nothing) (packPTH "Gender")))
                     (SqlOther (packPTH "SqlType unset for sex")))
                    [packPTH "Maybe"])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "createdQuizzes")))
                       (DBName (packPTH "created_quizzes")))
                      (FTList ((FTTypeCon Nothing) (packPTH "QuizId"))))
                     (SqlOther (packPTH "SqlType unset for createdQuizzes")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "passedQuizzes")))
                       (DBName (packPTH "passed_quizzes")))
                      (FTList ((FTTypeCon Nothing) (packPTH "QuizResult"))))
                     (SqlOther (packPTH "SqlType unset for passedQuizzes")))
                    [])
                   True)
                  (EmbedRef
                     ((EmbedEntityDef (HaskellName (packPTH "QuizResult")))
                        [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing) Nothing,
                         ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                         ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                           Nothing]))])
              [])
             [])
            [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
           (Data.Map.Internal.fromList []))
          False
          {entityFields = [((((((FieldDef (HaskellName (packPTH "username")))
                                  (DBName (packPTH "username")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "password")))
                                  (DBName (packPTH "password")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "email")))
                                  (DBName (packPTH "email")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "avatar")))
                                  (DBName (packPTH "avatar")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "firstName")))
                                  (DBName (packPTH "first_name")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [packPTH "Maybe"])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "secondName")))
                                  (DBName (packPTH "second_name")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [packPTH "Maybe"])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "birthDay")))
                                  (DBName (packPTH "birth_day")))
                                 ((FTTypeCon Nothing) (packPTH "UTCTime")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy UTCTime)))
                               [packPTH "Maybe"])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "sex")))
                                  (DBName (packPTH "sex")))
                                 ((FTTypeCon Nothing) (packPTH "Gender")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Gender)))
                               [packPTH "Maybe"])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "createdQuizzes")))
                                  (DBName (packPTH "created_quizzes")))
                                 (FTList ((FTTypeCon Nothing) (packPTH "QuizId"))))
                                SqlString)
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "passedQuizzes")))
                                  (DBName (packPTH "passed_quizzes")))
                                 (FTList ((FTTypeCon Nothing) (packPTH "QuizResult"))))
                                SqlString)
                               [])
                              True)
                             (EmbedRef
                                ((EmbedEntityDef (HaskellName (packPTH "QuizResult")))
                                   [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing) Nothing,
                                    ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                                    ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                                      Nothing]))],
           entityId = ((((((FieldDef (HaskellName (packPTH "Id")))
                             (DBName (packPTH "id")))
                            ((FTTypeCon Nothing) (packPTH "UserId")))
                           (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                              (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                          [])
                         True)
                        ((ForeignRef (HaskellName (packPTH "User")))
                           ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))}])
  ======>
    instance PersistField Question where
      toPersistValue
        = \ ent_a109g
            -> (PersistMap
                  $ ((zip ((map Data.Text.pack) ["text", "option", "answer"]))
                       ((map toPersistValue) $ (toPersistFields ent_a109g))))
      fromPersistValue
        = ((\ x_a109h
              -> let
                   columns_a109i
                     = unordered-containers-0.2.9.0:Data.HashMap.Strict.fromList x_a109h
                 in
                   (fromPersistValues
                      $ ((map
                            (\ name_a109j
                               -> case
                                      (unordered-containers-0.2.9.0:Data.HashMap.Base.lookup
                                         (Data.Text.pack name_a109j))
                                        columns_a109i
                                  of
                                    Just v_a109k -> v_a109k
                                    Nothing -> PersistNull))
                           $ ["text", "option", "answer"])))
             Control.Monad.<=< getPersistMap)
    instance persistent-2.8.1:Database.Persist.Sql.Class.PersistFieldSql Question where
      persistent-2.8.1:Database.Persist.Sql.Class.sqlType _ = SqlString
    instance PersistField Quiz where
      toPersistValue
        = \ ent_a109l
            -> (PersistMap
                  $ ((zip
                        ((map Data.Text.pack)
                           ["name", "description", "creationDate", "passingNumber",
                            "question"]))
                       ((map toPersistValue) $ (toPersistFields ent_a109l))))
      fromPersistValue
        = ((\ x_a109m
              -> let
                   columns_a109n
                     = unordered-containers-0.2.9.0:Data.HashMap.Strict.fromList x_a109m
                 in
                   (fromPersistValues
                      $ ((map
                            (\ name_a109o
                               -> case
                                      (unordered-containers-0.2.9.0:Data.HashMap.Base.lookup
                                         (Data.Text.pack name_a109o))
                                        columns_a109n
                                  of
                                    Just v_a109p -> v_a109p
                                    Nothing -> PersistNull))
                           $ ["name", "description", "creationDate", "passingNumber",
                              "question"])))
             Control.Monad.<=< getPersistMap)
    instance persistent-2.8.1:Database.Persist.Sql.Class.PersistFieldSql Quiz where
      persistent-2.8.1:Database.Persist.Sql.Class.sqlType _ = SqlString
    instance PersistField QuizResult where
      toPersistValue
        = \ ent_a109q
            -> (PersistMap
                  $ ((zip
                        ((map Data.Text.pack) ["testKey", "result", "passingDate"]))
                       ((map toPersistValue) $ (toPersistFields ent_a109q))))
      fromPersistValue
        = ((\ x_a109r
              -> let
                   columns_a109s
                     = unordered-containers-0.2.9.0:Data.HashMap.Strict.fromList x_a109r
                 in
                   (fromPersistValues
                      $ ((map
                            (\ name_a109t
                               -> case
                                      (unordered-containers-0.2.9.0:Data.HashMap.Base.lookup
                                         (Data.Text.pack name_a109t))
                                        columns_a109s
                                  of
                                    Just v_a109u -> v_a109u
                                    Nothing -> PersistNull))
                           $ ["testKey", "result", "passingDate"])))
             Control.Monad.<=< getPersistMap)
    instance persistent-2.8.1:Database.Persist.Sql.Class.PersistFieldSql QuizResult where
      persistent-2.8.1:Database.Persist.Sql.Class.sqlType _ = SqlString
    instance PersistField User where
      toPersistValue
        = \ ent_a109v
            -> (PersistMap
                  $ ((zip
                        ((map Data.Text.pack)
                           ["username", "password", "email", "avatar", "firstName",
                            "secondName", "birthDay", "sex", "createdQuizzes",
                            "passedQuizzes"]))
                       ((map toPersistValue) $ (toPersistFields ent_a109v))))
      fromPersistValue
        = ((\ x_a109w
              -> let
                   columns_a109x
                     = unordered-containers-0.2.9.0:Data.HashMap.Strict.fromList x_a109w
                 in
                   (fromPersistValues
                      $ ((map
                            (\ name_a109y
                               -> case
                                      (unordered-containers-0.2.9.0:Data.HashMap.Base.lookup
                                         (Data.Text.pack name_a109y))
                                        columns_a109x
                                  of
                                    Just v_a109z -> v_a109z
                                    Nothing -> PersistNull))
                           $ ["username", "password", "email", "avatar", "firstName",
                              "secondName", "birthDay", "sex", "createdQuizzes",
                              "passedQuizzes"])))
             Control.Monad.<=< getPersistMap)
    instance persistent-2.8.1:Database.Persist.Sql.Class.PersistFieldSql User where
      persistent-2.8.1:Database.Persist.Sql.Class.sqlType _ = SqlString
    data Question
      = Question {questionText :: !Text,
                  questionOption :: !QuestionOptions,
                  questionAnswer :: !QuestionAnswer}
      deriving (Eq, Read, Show, Generic)
    type QuestionId = Key Question
    instance PersistEntity Question where
      type PersistEntityBackend Question = MongoContext
      data Unique Question
      newtype Key Question
        = QuestionKey {unQuestionKey :: (BackendKey MongoContext)}
        deriving (Show,
                  Read,
                  Eq,
                  Ord,
                  path-pieces-0.2.1:Web.PathPieces.PathPiece,
                  http-api-data-0.3.7.2:Web.Internal.HttpApiData.ToHttpApiData,
                  http-api-data-0.3.7.2:Web.Internal.HttpApiData.FromHttpApiData,
                  PersistField,
                  persistent-2.8.1:Database.Persist.Sql.Class.PersistFieldSql,
                  ToJSON,
                  FromJSON)
      data EntityField Question typ
        = typ ~ Key Question => QuestionId |
          typ ~ Text => QuestionText |
          typ ~ QuestionOptions => QuestionOption |
          typ ~ QuestionAnswer => QuestionAnswer
      keyToValues
        = ((ghc-prim-0.5.1.1:GHC.Types.: [])
             . (toPersistValue . unQuestionKey))
      keyFromValues
        = ((fmap QuestionKey)
             . (fromPersistValue . Database.Persist.TH.headNote))
      entityDef _
        = (((((((((EntityDef (HaskellName (packPTH "Question")))
                    (DBName (packPTH "question")))
                   (((((((FieldDef (HaskellName (packPTH "Id")))
                           (DBName (packPTH "id")))
                          ((FTTypeCon Nothing) (packPTH "QuestionId")))
                         SqlInt64)
                        [])
                       True)
                      ((ForeignRef (HaskellName (packPTH "Question")))
                         ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                  [packPTH "json"])
                 [((((((FieldDef (HaskellName (packPTH "text")))
                         (DBName (packPTH "text")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "option")))
                         (DBName (packPTH "option")))
                        ((FTTypeCon Nothing) (packPTH "QuestionOptions")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "answer")))
                         (DBName (packPTH "answer")))
                        ((FTTypeCon Nothing) (packPTH "QuestionAnswer")))
                       SqlString)
                      [])
                     True)
                    NoReference])
                [])
               [])
              [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
             (Data.Map.Internal.fromList []))
            False
      toPersistFields (Question x_a109A x_a109B x_a109C)
        = [SomePersistField x_a109A, SomePersistField x_a109B,
           SomePersistField x_a109C]
      fromPersistValues [x1_a109E, x2_a109F, x3_a109G]
        = Question
            <$>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "text")))
                 . fromPersistValue)
                x1_a109E
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "option")))
                 . fromPersistValue)
                x2_a109F
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "answer")))
                 . fromPersistValue)
                x3_a109G
      fromPersistValues x_a109D
        = (Left
             $ ((mappend (packPTH "Question: fromPersistValues failed on: "))
                  (Data.Text.pack $ (show x_a109D))))
      persistUniqueToFieldNames _
        = error "Degenerate case, should never happen"
      persistUniqueToValues _
        = error "Degenerate case, should never happen"
      persistUniqueKeys
        (Question _text_a109H _option_a109I _answer_a109J)
        = []
      persistFieldDef QuestionId
        = ((((((FieldDef (HaskellName (packPTH "Id")))
                 (DBName (packPTH "id")))
                ((FTTypeCon Nothing) (packPTH "QuestionId")))
               SqlInt64)
              [])
             True)
            ((ForeignRef (HaskellName (packPTH "Question")))
               ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))
      persistFieldDef QuestionText
        = ((((((FieldDef (HaskellName (packPTH "text")))
                 (DBName (packPTH "text")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef QuestionOption
        = ((((((FieldDef (HaskellName (packPTH "option")))
                 (DBName (packPTH "option")))
                ((FTTypeCon Nothing) (packPTH "QuestionOptions")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef QuestionAnswer
        = ((((((FieldDef (HaskellName (packPTH "answer")))
                 (DBName (packPTH "answer")))
                ((FTTypeCon Nothing) (packPTH "QuestionAnswer")))
               SqlString)
              [])
             True)
            NoReference
      persistIdField = QuestionId
      fieldLens QuestionId
        = (lensPTH entityKey)
            (\ Entity _ value_a109K key_a109L
               -> (Entity key_a109L) value_a109K)
      fieldLens QuestionText
        = (lensPTH (questionText . entityVal))
            (\ Entity key_a109M value_a109N x_a109O
               -> (Entity key_a109M) value_a109N {questionText = x_a109O})
      fieldLens QuestionOption
        = (lensPTH (questionOption . entityVal))
            (\ Entity key_a109M value_a109N x_a109O
               -> (Entity key_a109M) value_a109N {questionOption = x_a109O})
      fieldLens QuestionAnswer
        = (lensPTH (questionAnswer . entityVal))
            (\ Entity key_a109M value_a109N x_a109O
               -> (Entity key_a109M) value_a109N {questionAnswer = x_a109O})
    instance ToBackendKey MongoContext Question where
      toBackendKey = unQuestionKey
      fromBackendKey = QuestionKey
    data Quiz
      = Quiz {quizName :: !Text,
              quizDescription :: !Text,
              quizCreationDate :: !UTCTime,
              quizPassingNumber :: !Int,
              quizQuestion :: !Question}
      deriving (Eq, Read, Show, Generic)
    type QuizId = Key Quiz
    instance PersistEntity Quiz where
      type PersistEntityBackend Quiz = MongoContext
      data Unique Quiz
      newtype Key Quiz
        = QuizKey {unQuizKey :: (BackendKey MongoContext)}
        deriving (Show,
                  Read,
                  Eq,
                  Ord,
                  path-pieces-0.2.1:Web.PathPieces.PathPiece,
                  http-api-data-0.3.7.2:Web.Internal.HttpApiData.ToHttpApiData,
                  http-api-data-0.3.7.2:Web.Internal.HttpApiData.FromHttpApiData,
                  PersistField,
                  persistent-2.8.1:Database.Persist.Sql.Class.PersistFieldSql,
                  ToJSON,
                  FromJSON)
      data EntityField Quiz typ
        = typ ~ Key Quiz => QuizId |
          typ ~ Text => QuizName |
          typ ~ Text => QuizDescription |
          typ ~ UTCTime => QuizCreationDate |
          typ ~ Int => QuizPassingNumber |
          typ ~ Question => QuizQuestion
      keyToValues
        = ((ghc-prim-0.5.1.1:GHC.Types.: [])
             . (toPersistValue . unQuizKey))
      keyFromValues
        = ((fmap QuizKey)
             . (fromPersistValue . Database.Persist.TH.headNote))
      entityDef _
        = (((((((((EntityDef (HaskellName (packPTH "Quiz")))
                    (DBName (packPTH "quiz")))
                   (((((((FieldDef (HaskellName (packPTH "Id")))
                           (DBName (packPTH "id")))
                          ((FTTypeCon Nothing) (packPTH "QuizId")))
                         SqlInt64)
                        [])
                       True)
                      ((ForeignRef (HaskellName (packPTH "Quiz")))
                         ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                  [packPTH "json"])
                 [((((((FieldDef (HaskellName (packPTH "name")))
                         (DBName (packPTH "name")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "description")))
                         (DBName (packPTH "description")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "creationDate")))
                         (DBName (packPTH "creation_date")))
                        ((FTTypeCon Nothing) (packPTH "UTCTime")))
                       SqlDayTime)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "passingNumber")))
                         (DBName (packPTH "passing_number")))
                        ((FTTypeCon Nothing) (packPTH "Int")))
                       SqlInt64)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "question")))
                         (DBName (packPTH "question")))
                        ((FTTypeCon Nothing) (packPTH "Question")))
                       SqlString)
                      [])
                     True)
                    (EmbedRef
                       ((EmbedEntityDef (HaskellName (packPTH "Question")))
                          [((EmbedFieldDef (DBName (packPTH "text"))) Nothing) Nothing,
                           ((EmbedFieldDef (DBName (packPTH "option"))) Nothing) Nothing,
                           ((EmbedFieldDef (DBName (packPTH "answer"))) Nothing) Nothing]))])
                [])
               [])
              [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
             (Data.Map.Internal.fromList []))
            False
      toPersistFields (Quiz x_a109P x_a109Q x_a109R x_a109S x_a109T)
        = [SomePersistField x_a109P, SomePersistField x_a109Q,
           SomePersistField x_a109R, SomePersistField x_a109S,
           SomePersistField x_a109T]
      fromPersistValues
        [x1_a109V, x2_a109W, x3_a109X, x4_a109Y, x5_a109Z]
        = Quiz
            <$>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "name")))
                 . fromPersistValue)
                x1_a109V
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "description")))
                 . fromPersistValue)
                x2_a109W
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "creationDate")))
                 . fromPersistValue)
                x3_a109X
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "passingNumber")))
                 . fromPersistValue)
                x4_a109Y
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "question")))
                 . fromPersistValue)
                x5_a109Z
      fromPersistValues x_a109U
        = (Left
             $ ((mappend (packPTH "Quiz: fromPersistValues failed on: "))
                  (Data.Text.pack $ (show x_a109U))))
      persistUniqueToFieldNames _
        = error "Degenerate case, should never happen"
      persistUniqueToValues _
        = error "Degenerate case, should never happen"
      persistUniqueKeys
        (Quiz _name_a10a0
              _description_a10a1
              _creationDate_a10a2
              _passingNumber_a10a3
              _question_a10a4)
        = []
      persistFieldDef QuizId
        = ((((((FieldDef (HaskellName (packPTH "Id")))
                 (DBName (packPTH "id")))
                ((FTTypeCon Nothing) (packPTH "QuizId")))
               SqlInt64)
              [])
             True)
            ((ForeignRef (HaskellName (packPTH "Quiz")))
               ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))
      persistFieldDef QuizName
        = ((((((FieldDef (HaskellName (packPTH "name")))
                 (DBName (packPTH "name")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef QuizDescription
        = ((((((FieldDef (HaskellName (packPTH "description")))
                 (DBName (packPTH "description")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef QuizCreationDate
        = ((((((FieldDef (HaskellName (packPTH "creationDate")))
                 (DBName (packPTH "creation_date")))
                ((FTTypeCon Nothing) (packPTH "UTCTime")))
               SqlDayTime)
              [])
             True)
            NoReference
      persistFieldDef QuizPassingNumber
        = ((((((FieldDef (HaskellName (packPTH "passingNumber")))
                 (DBName (packPTH "passing_number")))
                ((FTTypeCon Nothing) (packPTH "Int")))
               SqlInt64)
              [])
             True)
            NoReference
      persistFieldDef QuizQuestion
        = ((((((FieldDef (HaskellName (packPTH "question")))
                 (DBName (packPTH "question")))
                ((FTTypeCon Nothing) (packPTH "Question")))
               SqlString)
              [])
             True)
            (EmbedRef
               ((EmbedEntityDef (HaskellName (packPTH "Question")))
                  [((EmbedFieldDef (DBName (packPTH "text"))) Nothing) Nothing,
                   ((EmbedFieldDef (DBName (packPTH "option"))) Nothing) Nothing,
                   ((EmbedFieldDef (DBName (packPTH "answer"))) Nothing) Nothing]))
      persistIdField = QuizId
      fieldLens QuizId
        = (lensPTH entityKey)
            (\ Entity _ value_a10a5 key_a10a6
               -> (Entity key_a10a6) value_a10a5)
      fieldLens QuizName
        = (lensPTH (quizName . entityVal))
            (\ Entity key_a10a7 value_a10a8 x_a10a9
               -> (Entity key_a10a7) value_a10a8 {quizName = x_a10a9})
      fieldLens QuizDescription
        = (lensPTH (quizDescription . entityVal))
            (\ Entity key_a10a7 value_a10a8 x_a10a9
               -> (Entity key_a10a7) value_a10a8 {quizDescription = x_a10a9})
      fieldLens QuizCreationDate
        = (lensPTH (quizCreationDate . entityVal))
            (\ Entity key_a10a7 value_a10a8 x_a10a9
               -> (Entity key_a10a7) value_a10a8 {quizCreationDate = x_a10a9})
      fieldLens QuizPassingNumber
        = (lensPTH (quizPassingNumber . entityVal))
            (\ Entity key_a10a7 value_a10a8 x_a10a9
               -> (Entity key_a10a7) value_a10a8 {quizPassingNumber = x_a10a9})
      fieldLens QuizQuestion
        = (lensPTH (quizQuestion . entityVal))
            (\ Entity key_a10a7 value_a10a8 x_a10a9
               -> (Entity key_a10a7) value_a10a8 {quizQuestion = x_a10a9})
    instance ToBackendKey MongoContext Quiz where
      toBackendKey = unQuizKey
      fromBackendKey = QuizKey
    data QuizResult
      = QuizResult {quizResultTestKey :: !Text,
                    quizResultResult :: !Text,
                    quizResultPassingDate :: !UTCTime}
      deriving (Eq, Read, Show, Generic)
    type QuizResultId = Key QuizResult
    instance PersistEntity QuizResult where
      type PersistEntityBackend QuizResult = MongoContext
      data Unique QuizResult
      newtype Key QuizResult
        = QuizResultKey {unQuizResultKey :: (BackendKey MongoContext)}
        deriving (Show,
                  Read,
                  Eq,
                  Ord,
                  path-pieces-0.2.1:Web.PathPieces.PathPiece,
                  http-api-data-0.3.7.2:Web.Internal.HttpApiData.ToHttpApiData,
                  http-api-data-0.3.7.2:Web.Internal.HttpApiData.FromHttpApiData,
                  PersistField,
                  persistent-2.8.1:Database.Persist.Sql.Class.PersistFieldSql,
                  ToJSON,
                  FromJSON)
      data EntityField QuizResult typ
        = typ ~ Key QuizResult => QuizResultId |
          typ ~ Text => QuizResultTestKey |
          typ ~ Text => QuizResultResult |
          typ ~ UTCTime => QuizResultPassingDate
      keyToValues
        = ((ghc-prim-0.5.1.1:GHC.Types.: [])
             . (toPersistValue . unQuizResultKey))
      keyFromValues
        = ((fmap QuizResultKey)
             . (fromPersistValue . Database.Persist.TH.headNote))
      entityDef _
        = (((((((((EntityDef (HaskellName (packPTH "QuizResult")))
                    (DBName (packPTH "quiz_result")))
                   (((((((FieldDef (HaskellName (packPTH "Id")))
                           (DBName (packPTH "id")))
                          ((FTTypeCon Nothing) (packPTH "QuizResultId")))
                         SqlInt64)
                        [])
                       True)
                      ((ForeignRef (HaskellName (packPTH "QuizResult")))
                         ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                  [packPTH "json"])
                 [((((((FieldDef (HaskellName (packPTH "testKey")))
                         (DBName (packPTH "test_key")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "result")))
                         (DBName (packPTH "result")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "passingDate")))
                         (DBName (packPTH "passing_date")))
                        ((FTTypeCon Nothing) (packPTH "UTCTime")))
                       SqlDayTime)
                      [])
                     True)
                    NoReference])
                [])
               [])
              [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
             (Data.Map.Internal.fromList []))
            False
      toPersistFields (QuizResult x_a10aa x_a10ab x_a10ac)
        = [SomePersistField x_a10aa, SomePersistField x_a10ab,
           SomePersistField x_a10ac]
      fromPersistValues [x1_a10ae, x2_a10af, x3_a10ag]
        = QuizResult
            <$>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "testKey")))
                 . fromPersistValue)
                x1_a10ae
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "result")))
                 . fromPersistValue)
                x2_a10af
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "passingDate")))
                 . fromPersistValue)
                x3_a10ag
      fromPersistValues x_a10ad
        = (Left
             $ ((mappend (packPTH "QuizResult: fromPersistValues failed on: "))
                  (Data.Text.pack $ (show x_a10ad))))
      persistUniqueToFieldNames _
        = error "Degenerate case, should never happen"
      persistUniqueToValues _
        = error "Degenerate case, should never happen"
      persistUniqueKeys
        (QuizResult _testKey_a10ah _result_a10ai _passingDate_a10aj)
        = []
      persistFieldDef QuizResultId
        = ((((((FieldDef (HaskellName (packPTH "Id")))
                 (DBName (packPTH "id")))
                ((FTTypeCon Nothing) (packPTH "QuizResultId")))
               SqlInt64)
              [])
             True)
            ((ForeignRef (HaskellName (packPTH "QuizResult")))
               ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))
      persistFieldDef QuizResultTestKey
        = ((((((FieldDef (HaskellName (packPTH "testKey")))
                 (DBName (packPTH "test_key")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef QuizResultResult
        = ((((((FieldDef (HaskellName (packPTH "result")))
                 (DBName (packPTH "result")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef QuizResultPassingDate
        = ((((((FieldDef (HaskellName (packPTH "passingDate")))
                 (DBName (packPTH "passing_date")))
                ((FTTypeCon Nothing) (packPTH "UTCTime")))
               SqlDayTime)
              [])
             True)
            NoReference
      persistIdField = QuizResultId
      fieldLens QuizResultId
        = (lensPTH entityKey)
            (\ Entity _ value_a10ak key_a10al
               -> (Entity key_a10al) value_a10ak)
      fieldLens QuizResultTestKey
        = (lensPTH (quizResultTestKey . entityVal))
            (\ Entity key_a10am value_a10an x_a10ao
               -> (Entity key_a10am) value_a10an {quizResultTestKey = x_a10ao})
      fieldLens QuizResultResult
        = (lensPTH (quizResultResult . entityVal))
            (\ Entity key_a10am value_a10an x_a10ao
               -> (Entity key_a10am) value_a10an {quizResultResult = x_a10ao})
      fieldLens QuizResultPassingDate
        = (lensPTH (quizResultPassingDate . entityVal))
            (\ Entity key_a10am value_a10an x_a10ao
               -> (Entity key_a10am)
                    value_a10an {quizResultPassingDate = x_a10ao})
    instance ToBackendKey MongoContext QuizResult where
      toBackendKey = unQuizResultKey
      fromBackendKey = QuizResultKey
    data User
      = User {userUsername :: !Text,
              userPassword :: !Text,
              userEmail :: !Text,
              userAvatar :: !Text,
              userFirstName :: !(Maybe Text),
              userSecondName :: !(Maybe Text),
              userBirthDay :: !(Maybe UTCTime),
              userSex :: !(Maybe Gender),
              userCreatedQuizzes :: ![QuizId],
              userPassedQuizzes :: ![QuizResult]}
      deriving (Eq, Read, Show, Generic)
    type UserId = Key User
    instance PersistEntity User where
      type PersistEntityBackend User = MongoContext
      data Unique User
      newtype Key User
        = UserKey {unUserKey :: (BackendKey MongoContext)}
        deriving (Show,
                  Read,
                  Eq,
                  Ord,
                  path-pieces-0.2.1:Web.PathPieces.PathPiece,
                  http-api-data-0.3.7.2:Web.Internal.HttpApiData.ToHttpApiData,
                  http-api-data-0.3.7.2:Web.Internal.HttpApiData.FromHttpApiData,
                  PersistField,
                  persistent-2.8.1:Database.Persist.Sql.Class.PersistFieldSql,
                  ToJSON,
                  FromJSON)
      data EntityField User typ
        = typ ~ Key User => UserId |
          typ ~ Text => UserUsername |
          typ ~ Text => UserPassword |
          typ ~ Text => UserEmail |
          typ ~ Text => UserAvatar |
          typ ~ Maybe Text => UserFirstName |
          typ ~ Maybe Text => UserSecondName |
          typ ~ Maybe UTCTime => UserBirthDay |
          typ ~ Maybe Gender => UserSex |
          typ ~ [QuizId] => UserCreatedQuizzes |
          typ ~ [QuizResult] => UserPassedQuizzes
      keyToValues
        = ((ghc-prim-0.5.1.1:GHC.Types.: [])
             . (toPersistValue . unUserKey))
      keyFromValues
        = ((fmap UserKey)
             . (fromPersistValue . Database.Persist.TH.headNote))
      entityDef _
        = (((((((((EntityDef (HaskellName (packPTH "User")))
                    (DBName (packPTH "user")))
                   (((((((FieldDef (HaskellName (packPTH "Id")))
                           (DBName (packPTH "id")))
                          ((FTTypeCon Nothing) (packPTH "UserId")))
                         SqlInt64)
                        [])
                       True)
                      ((ForeignRef (HaskellName (packPTH "User")))
                         ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                  [packPTH "json"])
                 [((((((FieldDef (HaskellName (packPTH "username")))
                         (DBName (packPTH "username")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "password")))
                         (DBName (packPTH "password")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "email")))
                         (DBName (packPTH "email")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "avatar")))
                         (DBName (packPTH "avatar")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "firstName")))
                         (DBName (packPTH "first_name")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [packPTH "Maybe"])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "secondName")))
                         (DBName (packPTH "second_name")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [packPTH "Maybe"])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "birthDay")))
                         (DBName (packPTH "birth_day")))
                        ((FTTypeCon Nothing) (packPTH "UTCTime")))
                       SqlDayTime)
                      [packPTH "Maybe"])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "sex")))
                         (DBName (packPTH "sex")))
                        ((FTTypeCon Nothing) (packPTH "Gender")))
                       SqlString)
                      [packPTH "Maybe"])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "createdQuizzes")))
                         (DBName (packPTH "created_quizzes")))
                        (FTList ((FTTypeCon Nothing) (packPTH "QuizId"))))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "passedQuizzes")))
                         (DBName (packPTH "passed_quizzes")))
                        (FTList ((FTTypeCon Nothing) (packPTH "QuizResult"))))
                       SqlString)
                      [])
                     True)
                    (EmbedRef
                       ((EmbedEntityDef (HaskellName (packPTH "QuizResult")))
                          [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing) Nothing,
                           ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                           ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                             Nothing]))])
                [])
               [])
              [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
             (Data.Map.Internal.fromList []))
            False
      toPersistFields
        (User x_a10ap
              x_a10aq
              x_a10ar
              x_a10as
              x_a10at
              x_a10au
              x_a10av
              x_a10aw
              x_a10ax
              x_a10ay)
        = [SomePersistField x_a10ap, SomePersistField x_a10aq,
           SomePersistField x_a10ar, SomePersistField x_a10as,
           SomePersistField x_a10at, SomePersistField x_a10au,
           SomePersistField x_a10av, SomePersistField x_a10aw,
           SomePersistField x_a10ax, SomePersistField x_a10ay]
      fromPersistValues
        [x1_a10aA,
         x2_a10aB,
         x3_a10aC,
         x4_a10aD,
         x5_a10aE,
         x6_a10aF,
         x7_a10aG,
         x8_a10aH,
         x9_a10aI,
         x10_a10aJ]
        = User
            <$>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "username")))
                 . fromPersistValue)
                x1_a10aA
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "password")))
                 . fromPersistValue)
                x2_a10aB
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "email")))
                 . fromPersistValue)
                x3_a10aC
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "avatar")))
                 . fromPersistValue)
                x4_a10aD
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "firstName")))
                 . fromPersistValue)
                x5_a10aE
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "secondName")))
                 . fromPersistValue)
                x6_a10aF
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "birthDay")))
                 . fromPersistValue)
                x7_a10aG
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "sex")))
                 . fromPersistValue)
                x8_a10aH
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "createdQuizzes")))
                 . fromPersistValue)
                x9_a10aI
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "passedQuizzes")))
                 . fromPersistValue)
                x10_a10aJ
      fromPersistValues x_a10az
        = (Left
             $ ((mappend (packPTH "User: fromPersistValues failed on: "))
                  (Data.Text.pack $ (show x_a10az))))
      persistUniqueToFieldNames _
        = error "Degenerate case, should never happen"
      persistUniqueToValues _
        = error "Degenerate case, should never happen"
      persistUniqueKeys
        (User _username_a10aK
              _password_a10aL
              _email_a10aM
              _avatar_a10aN
              _firstName_a10aO
              _secondName_a10aP
              _birthDay_a10aQ
              _sex_a10aR
              _createdQuizzes_a10aS
              _passedQuizzes_a10aT)
        = []
      persistFieldDef UserId
        = ((((((FieldDef (HaskellName (packPTH "Id")))
                 (DBName (packPTH "id")))
                ((FTTypeCon Nothing) (packPTH "UserId")))
               SqlInt64)
              [])
             True)
            ((ForeignRef (HaskellName (packPTH "User")))
               ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))
      persistFieldDef UserUsername
        = ((((((FieldDef (HaskellName (packPTH "username")))
                 (DBName (packPTH "username")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef UserPassword
        = ((((((FieldDef (HaskellName (packPTH "password")))
                 (DBName (packPTH "password")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef UserEmail
        = ((((((FieldDef (HaskellName (packPTH "email")))
                 (DBName (packPTH "email")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef UserAvatar
        = ((((((FieldDef (HaskellName (packPTH "avatar")))
                 (DBName (packPTH "avatar")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef UserFirstName
        = ((((((FieldDef (HaskellName (packPTH "firstName")))
                 (DBName (packPTH "first_name")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [packPTH "Maybe"])
             True)
            NoReference
      persistFieldDef UserSecondName
        = ((((((FieldDef (HaskellName (packPTH "secondName")))
                 (DBName (packPTH "second_name")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [packPTH "Maybe"])
             True)
            NoReference
      persistFieldDef UserBirthDay
        = ((((((FieldDef (HaskellName (packPTH "birthDay")))
                 (DBName (packPTH "birth_day")))
                ((FTTypeCon Nothing) (packPTH "UTCTime")))
               SqlDayTime)
              [packPTH "Maybe"])
             True)
            NoReference
      persistFieldDef UserSex
        = ((((((FieldDef (HaskellName (packPTH "sex")))
                 (DBName (packPTH "sex")))
                ((FTTypeCon Nothing) (packPTH "Gender")))
               SqlString)
              [packPTH "Maybe"])
             True)
            NoReference
      persistFieldDef UserCreatedQuizzes
        = ((((((FieldDef (HaskellName (packPTH "createdQuizzes")))
                 (DBName (packPTH "created_quizzes")))
                (FTList ((FTTypeCon Nothing) (packPTH "QuizId"))))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef UserPassedQuizzes
        = ((((((FieldDef (HaskellName (packPTH "passedQuizzes")))
                 (DBName (packPTH "passed_quizzes")))
                (FTList ((FTTypeCon Nothing) (packPTH "QuizResult"))))
               SqlString)
              [])
             True)
            (EmbedRef
               ((EmbedEntityDef (HaskellName (packPTH "QuizResult")))
                  [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing) Nothing,
                   ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                   ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                     Nothing]))
      persistIdField = UserId
      fieldLens UserId
        = (lensPTH entityKey)
            (\ Entity _ value_a10aU key_a10aV
               -> (Entity key_a10aV) value_a10aU)
      fieldLens UserUsername
        = (lensPTH (userUsername . entityVal))
            (\ Entity key_a10aW value_a10aX x_a10aY
               -> (Entity key_a10aW) value_a10aX {userUsername = x_a10aY})
      fieldLens UserPassword
        = (lensPTH (userPassword . entityVal))
            (\ Entity key_a10aW value_a10aX x_a10aY
               -> (Entity key_a10aW) value_a10aX {userPassword = x_a10aY})
      fieldLens UserEmail
        = (lensPTH (userEmail . entityVal))
            (\ Entity key_a10aW value_a10aX x_a10aY
               -> (Entity key_a10aW) value_a10aX {userEmail = x_a10aY})
      fieldLens UserAvatar
        = (lensPTH (userAvatar . entityVal))
            (\ Entity key_a10aW value_a10aX x_a10aY
               -> (Entity key_a10aW) value_a10aX {userAvatar = x_a10aY})
      fieldLens UserFirstName
        = (lensPTH (userFirstName . entityVal))
            (\ Entity key_a10aW value_a10aX x_a10aY
               -> (Entity key_a10aW) value_a10aX {userFirstName = x_a10aY})
      fieldLens UserSecondName
        = (lensPTH (userSecondName . entityVal))
            (\ Entity key_a10aW value_a10aX x_a10aY
               -> (Entity key_a10aW) value_a10aX {userSecondName = x_a10aY})
      fieldLens UserBirthDay
        = (lensPTH (userBirthDay . entityVal))
            (\ Entity key_a10aW value_a10aX x_a10aY
               -> (Entity key_a10aW) value_a10aX {userBirthDay = x_a10aY})
      fieldLens UserSex
        = (lensPTH (userSex . entityVal))
            (\ Entity key_a10aW value_a10aX x_a10aY
               -> (Entity key_a10aW) value_a10aX {userSex = x_a10aY})
      fieldLens UserCreatedQuizzes
        = (lensPTH (userCreatedQuizzes . entityVal))
            (\ Entity key_a10aW value_a10aX x_a10aY
               -> (Entity key_a10aW) value_a10aX {userCreatedQuizzes = x_a10aY})
      fieldLens UserPassedQuizzes
        = (lensPTH (userPassedQuizzes . entityVal))
            (\ Entity key_a10aW value_a10aX x_a10aY
               -> (Entity key_a10aW) value_a10aX {userPassedQuizzes = x_a10aY})
    instance ToBackendKey MongoContext User where
      toBackendKey = unUserKey
      fromBackendKey = UserKey
    instance ToJSON Question where
      aeson-1.2.4.0:Data.Aeson.Types.ToJSON.toJSON
        (Question text_a10b0 option_a10b1 answer_a10b2)
        = aeson-1.2.4.0:Data.Aeson.Types.Internal.object
            [((Data.Text.pack "text")
                aeson-1.2.4.0:Data.Aeson.Types.ToJSON..= text_a10b0),
             ((Data.Text.pack "option")
                aeson-1.2.4.0:Data.Aeson.Types.ToJSON..= option_a10b1),
             ((Data.Text.pack "answer")
                aeson-1.2.4.0:Data.Aeson.Types.ToJSON..= answer_a10b2)]
    instance FromJSON Question where
      aeson-1.2.4.0:Data.Aeson.Types.FromJSON.parseJSON
        (aeson-1.2.4.0:Data.Aeson.Types.Internal.Object obj_a10aZ)
        = ((((pure Question)
               <*>
                 (obj_a10aZ
                    aeson-1.2.4.0:Data.Aeson.Types.FromJSON..:
                      (Data.Text.pack "text")))
              <*>
                (obj_a10aZ
                   aeson-1.2.4.0:Data.Aeson.Types.FromJSON..:
                     (Data.Text.pack "option")))
             <*>
               (obj_a10aZ
                  aeson-1.2.4.0:Data.Aeson.Types.FromJSON..:
                    (Data.Text.pack "answer")))
      aeson-1.2.4.0:Data.Aeson.Types.FromJSON.parseJSON _
        = GHC.Base.mzero
    instance ToJSON (Entity Question) where
      aeson-1.2.4.0:Data.Aeson.Types.ToJSON.toJSON = entityIdToJSON
    instance FromJSON (Entity Question) where
      aeson-1.2.4.0:Data.Aeson.Types.FromJSON.parseJSON
        = entityIdFromJSON
    instance ToJSON Quiz where
      aeson-1.2.4.0:Data.Aeson.Types.ToJSON.toJSON
        (Quiz name_a10b4
              description_a10b5
              creationDate_a10b6
              passingNumber_a10b7
              question_a10b8)
        = aeson-1.2.4.0:Data.Aeson.Types.Internal.object
            [((Data.Text.pack "name")
                aeson-1.2.4.0:Data.Aeson.Types.ToJSON..= name_a10b4),
             ((Data.Text.pack "description")
                aeson-1.2.4.0:Data.Aeson.Types.ToJSON..= description_a10b5),
             ((Data.Text.pack "creationDate")
                aeson-1.2.4.0:Data.Aeson.Types.ToJSON..= creationDate_a10b6),
             ((Data.Text.pack "passingNumber")
                aeson-1.2.4.0:Data.Aeson.Types.ToJSON..= passingNumber_a10b7),
             ((Data.Text.pack "question")
                aeson-1.2.4.0:Data.Aeson.Types.ToJSON..= question_a10b8)]
    instance FromJSON Quiz where
      aeson-1.2.4.0:Data.Aeson.Types.FromJSON.parseJSON
        (aeson-1.2.4.0:Data.Aeson.Types.Internal.Object obj_a10b3)
        = ((((((pure Quiz)
                 <*>
                   (obj_a10b3
                      aeson-1.2.4.0:Data.Aeson.Types.FromJSON..:
                        (Data.Text.pack "name")))
                <*>
                  (obj_a10b3
                     aeson-1.2.4.0:Data.Aeson.Types.FromJSON..:
                       (Data.Text.pack "description")))
               <*>
                 (obj_a10b3
                    aeson-1.2.4.0:Data.Aeson.Types.FromJSON..:
                      (Data.Text.pack "creationDate")))
              <*>
                (obj_a10b3
                   aeson-1.2.4.0:Data.Aeson.Types.FromJSON..:
                     (Data.Text.pack "passingNumber")))
             <*>
               (obj_a10b3
                  aeson-1.2.4.0:Data.Aeson.Types.FromJSON..:
                    (Data.Text.pack "question")))
      aeson-1.2.4.0:Data.Aeson.Types.FromJSON.parseJSON _
        = GHC.Base.mzero
    instance ToJSON (Entity Quiz) where
      aeson-1.2.4.0:Data.Aeson.Types.ToJSON.toJSON = entityIdToJSON
    instance FromJSON (Entity Quiz) where
      aeson-1.2.4.0:Data.Aeson.Types.FromJSON.parseJSON
        = entityIdFromJSON
    instance ToJSON QuizResult where
      aeson-1.2.4.0:Data.Aeson.Types.ToJSON.toJSON
        (QuizResult testKey_a10ba result_a10bb passingDate_a10bc)
        = aeson-1.2.4.0:Data.Aeson.Types.Internal.object
            [((Data.Text.pack "testKey")
                aeson-1.2.4.0:Data.Aeson.Types.ToJSON..= testKey_a10ba),
             ((Data.Text.pack "result")
                aeson-1.2.4.0:Data.Aeson.Types.ToJSON..= result_a10bb),
             ((Data.Text.pack "passingDate")
                aeson-1.2.4.0:Data.Aeson.Types.ToJSON..= passingDate_a10bc)]
    instance FromJSON QuizResult where
      aeson-1.2.4.0:Data.Aeson.Types.FromJSON.parseJSON
        (aeson-1.2.4.0:Data.Aeson.Types.Internal.Object obj_a10b9)
        = ((((pure QuizResult)
               <*>
                 (obj_a10b9
                    aeson-1.2.4.0:Data.Aeson.Types.FromJSON..:
                      (Data.Text.pack "testKey")))
              <*>
                (obj_a10b9
                   aeson-1.2.4.0:Data.Aeson.Types.FromJSON..:
                     (Data.Text.pack "result")))
             <*>
               (obj_a10b9
                  aeson-1.2.4.0:Data.Aeson.Types.FromJSON..:
                    (Data.Text.pack "passingDate")))
      aeson-1.2.4.0:Data.Aeson.Types.FromJSON.parseJSON _
        = GHC.Base.mzero
    instance ToJSON (Entity QuizResult) where
      aeson-1.2.4.0:Data.Aeson.Types.ToJSON.toJSON = entityIdToJSON
    instance FromJSON (Entity QuizResult) where
      aeson-1.2.4.0:Data.Aeson.Types.FromJSON.parseJSON
        = entityIdFromJSON
    instance ToJSON User where
      aeson-1.2.4.0:Data.Aeson.Types.ToJSON.toJSON
        (User username_a10be
              password_a10bf
              email_a10bg
              avatar_a10bh
              firstName_a10bi
              secondName_a10bj
              birthDay_a10bk
              sex_a10bl
              createdQuizzes_a10bm
              passedQuizzes_a10bn)
        = aeson-1.2.4.0:Data.Aeson.Types.Internal.object
            [((Data.Text.pack "username")
                aeson-1.2.4.0:Data.Aeson.Types.ToJSON..= username_a10be),
             ((Data.Text.pack "password")
                aeson-1.2.4.0:Data.Aeson.Types.ToJSON..= password_a10bf),
             ((Data.Text.pack "email")
                aeson-1.2.4.0:Data.Aeson.Types.ToJSON..= email_a10bg),
             ((Data.Text.pack "avatar")
                aeson-1.2.4.0:Data.Aeson.Types.ToJSON..= avatar_a10bh),
             ((Data.Text.pack "firstName")
                aeson-1.2.4.0:Data.Aeson.Types.ToJSON..= firstName_a10bi),
             ((Data.Text.pack "secondName")
                aeson-1.2.4.0:Data.Aeson.Types.ToJSON..= secondName_a10bj),
             ((Data.Text.pack "birthDay")
                aeson-1.2.4.0:Data.Aeson.Types.ToJSON..= birthDay_a10bk),
             ((Data.Text.pack "sex")
                aeson-1.2.4.0:Data.Aeson.Types.ToJSON..= sex_a10bl),
             ((Data.Text.pack "createdQuizzes")
                aeson-1.2.4.0:Data.Aeson.Types.ToJSON..= createdQuizzes_a10bm),
             ((Data.Text.pack "passedQuizzes")
                aeson-1.2.4.0:Data.Aeson.Types.ToJSON..= passedQuizzes_a10bn)]
    instance FromJSON User where
      aeson-1.2.4.0:Data.Aeson.Types.FromJSON.parseJSON
        (aeson-1.2.4.0:Data.Aeson.Types.Internal.Object obj_a10bd)
        = (((((((((((pure User)
                      <*>
                        (obj_a10bd
                           aeson-1.2.4.0:Data.Aeson.Types.FromJSON..:
                             (Data.Text.pack "username")))
                     <*>
                       (obj_a10bd
                          aeson-1.2.4.0:Data.Aeson.Types.FromJSON..:
                            (Data.Text.pack "password")))
                    <*>
                      (obj_a10bd
                         aeson-1.2.4.0:Data.Aeson.Types.FromJSON..:
                           (Data.Text.pack "email")))
                   <*>
                     (obj_a10bd
                        aeson-1.2.4.0:Data.Aeson.Types.FromJSON..:
                          (Data.Text.pack "avatar")))
                  <*>
                    (obj_a10bd
                       aeson-compat-0.3.7.1:Data.Aeson.Compat..:?
                         (Data.Text.pack "firstName")))
                 <*>
                   (obj_a10bd
                      aeson-compat-0.3.7.1:Data.Aeson.Compat..:?
                        (Data.Text.pack "secondName")))
                <*>
                  (obj_a10bd
                     aeson-compat-0.3.7.1:Data.Aeson.Compat..:?
                       (Data.Text.pack "birthDay")))
               <*>
                 (obj_a10bd
                    aeson-compat-0.3.7.1:Data.Aeson.Compat..:? (Data.Text.pack "sex")))
              <*>
                (obj_a10bd
                   aeson-1.2.4.0:Data.Aeson.Types.FromJSON..:
                     (Data.Text.pack "createdQuizzes")))
             <*>
               (obj_a10bd
                  aeson-1.2.4.0:Data.Aeson.Types.FromJSON..:
                    (Data.Text.pack "passedQuizzes")))
      aeson-1.2.4.0:Data.Aeson.Types.FromJSON.parseJSON _
        = GHC.Base.mzero
    instance ToJSON (Entity User) where
      aeson-1.2.4.0:Data.Aeson.Types.ToJSON.toJSON = entityIdToJSON
    instance FromJSON (Entity User) where
      aeson-1.2.4.0:Data.Aeson.Types.FromJSON.parseJSON
        = entityIdFromJSON
/home/nikita/Projects/labs/Databases/Course-Project/Server/src/Model/User.hs:(27,78)-(57,2): Splicing expression
    Language.Haskell.TH.Quote.quoteExp
      persistLowerCase
      "\n\
      \Question json\n\
      \  text    Text\n\
      \  option  QuestionOptions\n\
      \  answer  QuestionAnswer\n\
      \  deriving Eq Read Show Generic\n\
      \Quiz json\n\
      \  name            Text\n\
      \  description     Text\n\
      \  creationDate    UTCTime\n\
      \  passingNumber   Int\n\
      \  question        Question\n\
      \  deriving Eq Read Show Generic\n\
      \QuizResult json\n\
      \  testKey         Text\n\
      \  result          Text\n\
      \  passingDate     UTCTime\n\
      \  deriving        Eq Read Show Generic\n\
      \User json\n\
      \  username        Text\n\
      \  password        Text\n\
      \  email           Text\n\
      \  avatar          Text\n\
      \  firstName       Text Maybe\n\
      \  secondName      Text Maybe\n\
      \  birthDay        UTCTime Maybe\n\
      \  sex             Gender Maybe\n\
      \  createdQuizzes  [QuizId]\n\
      \  passedQuizzes   [QuizResult]\n\
      \  deriving        Eq Read Show Generic\n"
  ======>
    [(((((((((EntityDef (HaskellName (packPTH "Question")))
               (DBName (packPTH "question")))
              (((((((FieldDef (HaskellName (packPTH "Id")))
                      (DBName (packPTH "id")))
                     ((FTTypeCon Nothing) (packPTH "QuestionId")))
                    SqlInt64)
                   [])
                  True)
                 ((ForeignRef (HaskellName (packPTH "Question")))
                    ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
             [packPTH "json"])
            [((((((FieldDef (HaskellName (packPTH "text")))
                    (DBName (packPTH "text")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for text")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "option")))
                    (DBName (packPTH "option")))
                   ((FTTypeCon Nothing) (packPTH "QuestionOptions")))
                  (SqlOther (packPTH "SqlType unset for option")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "answer")))
                    (DBName (packPTH "answer")))
                   ((FTTypeCon Nothing) (packPTH "QuestionAnswer")))
                  (SqlOther (packPTH "SqlType unset for answer")))
                 [])
                True)
               NoReference])
           [])
          [])
         [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
        (Data.Map.Internal.fromList []))
       False
       {entityFields = [((((((FieldDef (HaskellName (packPTH "text")))
                               (DBName (packPTH "text")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "option")))
                               (DBName (packPTH "option")))
                              ((FTTypeCon Nothing) (packPTH "QuestionOptions")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy QuestionOptions)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "answer")))
                               (DBName (packPTH "answer")))
                              ((FTTypeCon Nothing) (packPTH "QuestionAnswer")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy QuestionAnswer)))
                            [])
                           True)
                          NoReference],
        entityId = ((((((FieldDef (HaskellName (packPTH "Id")))
                          (DBName (packPTH "id")))
                         ((FTTypeCon Nothing) (packPTH "QuestionId")))
                        (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                           (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                       [])
                      True)
                     ((ForeignRef (HaskellName (packPTH "Question")))
                        ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))},
     (((((((((EntityDef (HaskellName (packPTH "Quiz")))
               (DBName (packPTH "quiz")))
              (((((((FieldDef (HaskellName (packPTH "Id")))
                      (DBName (packPTH "id")))
                     ((FTTypeCon Nothing) (packPTH "QuizId")))
                    SqlInt64)
                   [])
                  True)
                 ((ForeignRef (HaskellName (packPTH "Quiz")))
                    ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
             [packPTH "json"])
            [((((((FieldDef (HaskellName (packPTH "name")))
                    (DBName (packPTH "name")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for name")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "description")))
                    (DBName (packPTH "description")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for description")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "creationDate")))
                    (DBName (packPTH "creation_date")))
                   ((FTTypeCon Nothing) (packPTH "UTCTime")))
                  (SqlOther (packPTH "SqlType unset for creationDate")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "passingNumber")))
                    (DBName (packPTH "passing_number")))
                   ((FTTypeCon Nothing) (packPTH "Int")))
                  (SqlOther (packPTH "SqlType unset for passingNumber")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "question")))
                    (DBName (packPTH "question")))
                   ((FTTypeCon Nothing) (packPTH "Question")))
                  (SqlOther (packPTH "SqlType unset for question")))
                 [])
                True)
               (EmbedRef
                  ((EmbedEntityDef (HaskellName (packPTH "Question")))
                     [((EmbedFieldDef (DBName (packPTH "text"))) Nothing) Nothing,
                      ((EmbedFieldDef (DBName (packPTH "option"))) Nothing) Nothing,
                      ((EmbedFieldDef (DBName (packPTH "answer"))) Nothing) Nothing]))])
           [])
          [])
         [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
        (Data.Map.Internal.fromList []))
       False
       {entityFields = [((((((FieldDef (HaskellName (packPTH "name")))
                               (DBName (packPTH "name")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "description")))
                               (DBName (packPTH "description")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "creationDate")))
                               (DBName (packPTH "creation_date")))
                              ((FTTypeCon Nothing) (packPTH "UTCTime")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy UTCTime)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "passingNumber")))
                               (DBName (packPTH "passing_number")))
                              ((FTTypeCon Nothing) (packPTH "Int")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Int)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "question")))
                               (DBName (packPTH "question")))
                              ((FTTypeCon Nothing) (packPTH "Question")))
                             SqlString)
                            [])
                           True)
                          (EmbedRef
                             ((EmbedEntityDef (HaskellName (packPTH "Question")))
                                [((EmbedFieldDef (DBName (packPTH "text"))) Nothing) Nothing,
                                 ((EmbedFieldDef (DBName (packPTH "option"))) Nothing) Nothing,
                                 ((EmbedFieldDef (DBName (packPTH "answer"))) Nothing) Nothing]))],
        entityId = ((((((FieldDef (HaskellName (packPTH "Id")))
                          (DBName (packPTH "id")))
                         ((FTTypeCon Nothing) (packPTH "QuizId")))
                        (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                           (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                       [])
                      True)
                     ((ForeignRef (HaskellName (packPTH "Quiz")))
                        ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))},
     (((((((((EntityDef (HaskellName (packPTH "QuizResult")))
               (DBName (packPTH "quiz_result")))
              (((((((FieldDef (HaskellName (packPTH "Id")))
                      (DBName (packPTH "id")))
                     ((FTTypeCon Nothing) (packPTH "QuizResultId")))
                    SqlInt64)
                   [])
                  True)
                 ((ForeignRef (HaskellName (packPTH "QuizResult")))
                    ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
             [packPTH "json"])
            [((((((FieldDef (HaskellName (packPTH "testKey")))
                    (DBName (packPTH "test_key")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for testKey")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "result")))
                    (DBName (packPTH "result")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for result")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "passingDate")))
                    (DBName (packPTH "passing_date")))
                   ((FTTypeCon Nothing) (packPTH "UTCTime")))
                  (SqlOther (packPTH "SqlType unset for passingDate")))
                 [])
                True)
               NoReference])
           [])
          [])
         [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
        (Data.Map.Internal.fromList []))
       False
       {entityFields = [((((((FieldDef (HaskellName (packPTH "testKey")))
                               (DBName (packPTH "test_key")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "result")))
                               (DBName (packPTH "result")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "passingDate")))
                               (DBName (packPTH "passing_date")))
                              ((FTTypeCon Nothing) (packPTH "UTCTime")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy UTCTime)))
                            [])
                           True)
                          NoReference],
        entityId = ((((((FieldDef (HaskellName (packPTH "Id")))
                          (DBName (packPTH "id")))
                         ((FTTypeCon Nothing) (packPTH "QuizResultId")))
                        (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                           (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                       [])
                      True)
                     ((ForeignRef (HaskellName (packPTH "QuizResult")))
                        ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))},
     (((((((((EntityDef (HaskellName (packPTH "User")))
               (DBName (packPTH "user")))
              (((((((FieldDef (HaskellName (packPTH "Id")))
                      (DBName (packPTH "id")))
                     ((FTTypeCon Nothing) (packPTH "UserId")))
                    SqlInt64)
                   [])
                  True)
                 ((ForeignRef (HaskellName (packPTH "User")))
                    ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
             [packPTH "json"])
            [((((((FieldDef (HaskellName (packPTH "username")))
                    (DBName (packPTH "username")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for username")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "password")))
                    (DBName (packPTH "password")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for password")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "email")))
                    (DBName (packPTH "email")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for email")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "avatar")))
                    (DBName (packPTH "avatar")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for avatar")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "firstName")))
                    (DBName (packPTH "first_name")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for firstName")))
                 [packPTH "Maybe"])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "secondName")))
                    (DBName (packPTH "second_name")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for secondName")))
                 [packPTH "Maybe"])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "birthDay")))
                    (DBName (packPTH "birth_day")))
                   ((FTTypeCon Nothing) (packPTH "UTCTime")))
                  (SqlOther (packPTH "SqlType unset for birthDay")))
                 [packPTH "Maybe"])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "sex")))
                    (DBName (packPTH "sex")))
                   ((FTTypeCon Nothing) (packPTH "Gender")))
                  (SqlOther (packPTH "SqlType unset for sex")))
                 [packPTH "Maybe"])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "createdQuizzes")))
                    (DBName (packPTH "created_quizzes")))
                   (FTList ((FTTypeCon Nothing) (packPTH "QuizId"))))
                  (SqlOther (packPTH "SqlType unset for createdQuizzes")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "passedQuizzes")))
                    (DBName (packPTH "passed_quizzes")))
                   (FTList ((FTTypeCon Nothing) (packPTH "QuizResult"))))
                  (SqlOther (packPTH "SqlType unset for passedQuizzes")))
                 [])
                True)
               (EmbedRef
                  ((EmbedEntityDef (HaskellName (packPTH "QuizResult")))
                     [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing) Nothing,
                      ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                      ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                        Nothing]))])
           [])
          [])
         [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
        (Data.Map.Internal.fromList []))
       False
       {entityFields = [((((((FieldDef (HaskellName (packPTH "username")))
                               (DBName (packPTH "username")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "password")))
                               (DBName (packPTH "password")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "email")))
                               (DBName (packPTH "email")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "avatar")))
                               (DBName (packPTH "avatar")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "firstName")))
                               (DBName (packPTH "first_name")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [packPTH "Maybe"])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "secondName")))
                               (DBName (packPTH "second_name")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [packPTH "Maybe"])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "birthDay")))
                               (DBName (packPTH "birth_day")))
                              ((FTTypeCon Nothing) (packPTH "UTCTime")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy UTCTime)))
                            [packPTH "Maybe"])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "sex")))
                               (DBName (packPTH "sex")))
                              ((FTTypeCon Nothing) (packPTH "Gender")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Gender)))
                            [packPTH "Maybe"])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "createdQuizzes")))
                               (DBName (packPTH "created_quizzes")))
                              (FTList ((FTTypeCon Nothing) (packPTH "QuizId"))))
                             SqlString)
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "passedQuizzes")))
                               (DBName (packPTH "passed_quizzes")))
                              (FTList ((FTTypeCon Nothing) (packPTH "QuizResult"))))
                             SqlString)
                            [])
                           True)
                          (EmbedRef
                             ((EmbedEntityDef (HaskellName (packPTH "QuizResult")))
                                [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing) Nothing,
                                 ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                                 ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                                   Nothing]))],
        entityId = ((((((FieldDef (HaskellName (packPTH "Id")))
                          (DBName (packPTH "id")))
                         ((FTTypeCon Nothing) (packPTH "UserId")))
                        (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                           (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                       [])
                      True)
                     ((ForeignRef (HaskellName (packPTH "User")))
                        ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))}]
/home/nikita/Projects/labs/Databases/Course-Project/Server/src/Model/User.hs:(27,1)-(57,2): Splicing declarations
    share
      [mkPersist (mkPersistSettings (ConT ''MongoContext))]
      ([(((((((((EntityDef (HaskellName (packPTH "Question")))
                  (DBName (packPTH "question")))
                 (((((((FieldDef (HaskellName (packPTH "Id")))
                         (DBName (packPTH "id")))
                        ((FTTypeCon Nothing) (packPTH "QuestionId")))
                       SqlInt64)
                      [])
                     True)
                    ((ForeignRef (HaskellName (packPTH "Question")))
                       ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                [packPTH "json"])
               [((((((FieldDef (HaskellName (packPTH "text")))
                       (DBName (packPTH "text")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for text")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "option")))
                       (DBName (packPTH "option")))
                      ((FTTypeCon Nothing) (packPTH "QuestionOptions")))
                     (SqlOther (packPTH "SqlType unset for option")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "answer")))
                       (DBName (packPTH "answer")))
                      ((FTTypeCon Nothing) (packPTH "QuestionAnswer")))
                     (SqlOther (packPTH "SqlType unset for answer")))
                    [])
                   True)
                  NoReference])
              [])
             [])
            [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
           (Data.Map.Internal.fromList []))
          False
          {entityFields = [((((((FieldDef (HaskellName (packPTH "text")))
                                  (DBName (packPTH "text")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "option")))
                                  (DBName (packPTH "option")))
                                 ((FTTypeCon Nothing) (packPTH "QuestionOptions")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy QuestionOptions)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "answer")))
                                  (DBName (packPTH "answer")))
                                 ((FTTypeCon Nothing) (packPTH "QuestionAnswer")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy QuestionAnswer)))
                               [])
                              True)
                             NoReference],
           entityId = ((((((FieldDef (HaskellName (packPTH "Id")))
                             (DBName (packPTH "id")))
                            ((FTTypeCon Nothing) (packPTH "QuestionId")))
                           (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                              (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                          [])
                         True)
                        ((ForeignRef (HaskellName (packPTH "Question")))
                           ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))},
        (((((((((EntityDef (HaskellName (packPTH "Quiz")))
                  (DBName (packPTH "quiz")))
                 (((((((FieldDef (HaskellName (packPTH "Id")))
                         (DBName (packPTH "id")))
                        ((FTTypeCon Nothing) (packPTH "QuizId")))
                       SqlInt64)
                      [])
                     True)
                    ((ForeignRef (HaskellName (packPTH "Quiz")))
                       ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                [packPTH "json"])
               [((((((FieldDef (HaskellName (packPTH "name")))
                       (DBName (packPTH "name")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for name")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "description")))
                       (DBName (packPTH "description")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for description")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "creationDate")))
                       (DBName (packPTH "creation_date")))
                      ((FTTypeCon Nothing) (packPTH "UTCTime")))
                     (SqlOther (packPTH "SqlType unset for creationDate")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "passingNumber")))
                       (DBName (packPTH "passing_number")))
                      ((FTTypeCon Nothing) (packPTH "Int")))
                     (SqlOther (packPTH "SqlType unset for passingNumber")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "question")))
                       (DBName (packPTH "question")))
                      ((FTTypeCon Nothing) (packPTH "Question")))
                     (SqlOther (packPTH "SqlType unset for question")))
                    [])
                   True)
                  (EmbedRef
                     ((EmbedEntityDef (HaskellName (packPTH "Question")))
                        [((EmbedFieldDef (DBName (packPTH "text"))) Nothing) Nothing,
                         ((EmbedFieldDef (DBName (packPTH "option"))) Nothing) Nothing,
                         ((EmbedFieldDef (DBName (packPTH "answer"))) Nothing) Nothing]))])
              [])
             [])
            [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
           (Data.Map.Internal.fromList []))
          False
          {entityFields = [((((((FieldDef (HaskellName (packPTH "name")))
                                  (DBName (packPTH "name")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "description")))
                                  (DBName (packPTH "description")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "creationDate")))
                                  (DBName (packPTH "creation_date")))
                                 ((FTTypeCon Nothing) (packPTH "UTCTime")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy UTCTime)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "passingNumber")))
                                  (DBName (packPTH "passing_number")))
                                 ((FTTypeCon Nothing) (packPTH "Int")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Int)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "question")))
                                  (DBName (packPTH "question")))
                                 ((FTTypeCon Nothing) (packPTH "Question")))
                                SqlString)
                               [])
                              True)
                             (EmbedRef
                                ((EmbedEntityDef (HaskellName (packPTH "Question")))
                                   [((EmbedFieldDef (DBName (packPTH "text"))) Nothing) Nothing,
                                    ((EmbedFieldDef (DBName (packPTH "option"))) Nothing) Nothing,
                                    ((EmbedFieldDef (DBName (packPTH "answer"))) Nothing)
                                      Nothing]))],
           entityId = ((((((FieldDef (HaskellName (packPTH "Id")))
                             (DBName (packPTH "id")))
                            ((FTTypeCon Nothing) (packPTH "QuizId")))
                           (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                              (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                          [])
                         True)
                        ((ForeignRef (HaskellName (packPTH "Quiz")))
                           ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))},
        (((((((((EntityDef (HaskellName (packPTH "QuizResult")))
                  (DBName (packPTH "quiz_result")))
                 (((((((FieldDef (HaskellName (packPTH "Id")))
                         (DBName (packPTH "id")))
                        ((FTTypeCon Nothing) (packPTH "QuizResultId")))
                       SqlInt64)
                      [])
                     True)
                    ((ForeignRef (HaskellName (packPTH "QuizResult")))
                       ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                [packPTH "json"])
               [((((((FieldDef (HaskellName (packPTH "testKey")))
                       (DBName (packPTH "test_key")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for testKey")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "result")))
                       (DBName (packPTH "result")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for result")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "passingDate")))
                       (DBName (packPTH "passing_date")))
                      ((FTTypeCon Nothing) (packPTH "UTCTime")))
                     (SqlOther (packPTH "SqlType unset for passingDate")))
                    [])
                   True)
                  NoReference])
              [])
             [])
            [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
           (Data.Map.Internal.fromList []))
          False
          {entityFields = [((((((FieldDef (HaskellName (packPTH "testKey")))
                                  (DBName (packPTH "test_key")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "result")))
                                  (DBName (packPTH "result")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "passingDate")))
                                  (DBName (packPTH "passing_date")))
                                 ((FTTypeCon Nothing) (packPTH "UTCTime")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy UTCTime)))
                               [])
                              True)
                             NoReference],
           entityId = ((((((FieldDef (HaskellName (packPTH "Id")))
                             (DBName (packPTH "id")))
                            ((FTTypeCon Nothing) (packPTH "QuizResultId")))
                           (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                              (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                          [])
                         True)
                        ((ForeignRef (HaskellName (packPTH "QuizResult")))
                           ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))},
        (((((((((EntityDef (HaskellName (packPTH "User")))
                  (DBName (packPTH "user")))
                 (((((((FieldDef (HaskellName (packPTH "Id")))
                         (DBName (packPTH "id")))
                        ((FTTypeCon Nothing) (packPTH "UserId")))
                       SqlInt64)
                      [])
                     True)
                    ((ForeignRef (HaskellName (packPTH "User")))
                       ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                [packPTH "json"])
               [((((((FieldDef (HaskellName (packPTH "username")))
                       (DBName (packPTH "username")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for username")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "password")))
                       (DBName (packPTH "password")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for password")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "email")))
                       (DBName (packPTH "email")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for email")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "avatar")))
                       (DBName (packPTH "avatar")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for avatar")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "firstName")))
                       (DBName (packPTH "first_name")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for firstName")))
                    [packPTH "Maybe"])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "secondName")))
                       (DBName (packPTH "second_name")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for secondName")))
                    [packPTH "Maybe"])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "birthDay")))
                       (DBName (packPTH "birth_day")))
                      ((FTTypeCon Nothing) (packPTH "UTCTime")))
                     (SqlOther (packPTH "SqlType unset for birthDay")))
                    [packPTH "Maybe"])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "sex")))
                       (DBName (packPTH "sex")))
                      ((FTTypeCon Nothing) (packPTH "Gender")))
                     (SqlOther (packPTH "SqlType unset for sex")))
                    [packPTH "Maybe"])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "createdQuizzes")))
                       (DBName (packPTH "created_quizzes")))
                      (FTList ((FTTypeCon Nothing) (packPTH "QuizId"))))
                     (SqlOther (packPTH "SqlType unset for createdQuizzes")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "passedQuizzes")))
                       (DBName (packPTH "passed_quizzes")))
                      (FTList ((FTTypeCon Nothing) (packPTH "QuizResult"))))
                     (SqlOther (packPTH "SqlType unset for passedQuizzes")))
                    [])
                   True)
                  (EmbedRef
                     ((EmbedEntityDef (HaskellName (packPTH "QuizResult")))
                        [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing) Nothing,
                         ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                         ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                           Nothing]))])
              [])
             [])
            [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
           (Data.Map.Internal.fromList []))
          False
          {entityFields = [((((((FieldDef (HaskellName (packPTH "username")))
                                  (DBName (packPTH "username")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "password")))
                                  (DBName (packPTH "password")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "email")))
                                  (DBName (packPTH "email")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "avatar")))
                                  (DBName (packPTH "avatar")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "firstName")))
                                  (DBName (packPTH "first_name")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [packPTH "Maybe"])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "secondName")))
                                  (DBName (packPTH "second_name")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [packPTH "Maybe"])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "birthDay")))
                                  (DBName (packPTH "birth_day")))
                                 ((FTTypeCon Nothing) (packPTH "UTCTime")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy UTCTime)))
                               [packPTH "Maybe"])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "sex")))
                                  (DBName (packPTH "sex")))
                                 ((FTTypeCon Nothing) (packPTH "Gender")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Gender)))
                               [packPTH "Maybe"])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "createdQuizzes")))
                                  (DBName (packPTH "created_quizzes")))
                                 (FTList ((FTTypeCon Nothing) (packPTH "QuizId"))))
                                SqlString)
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "passedQuizzes")))
                                  (DBName (packPTH "passed_quizzes")))
                                 (FTList ((FTTypeCon Nothing) (packPTH "QuizResult"))))
                                SqlString)
                               [])
                              True)
                             (EmbedRef
                                ((EmbedEntityDef (HaskellName (packPTH "QuizResult")))
                                   [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing) Nothing,
                                    ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                                    ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                                      Nothing]))],
           entityId = ((((((FieldDef (HaskellName (packPTH "Id")))
                             (DBName (packPTH "id")))
                            ((FTTypeCon Nothing) (packPTH "UserId")))
                           (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                              (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                          [])
                         True)
                        ((ForeignRef (HaskellName (packPTH "User")))
                           ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))}])
  ======>
    instance PersistField Question where
      toPersistValue
        = \ ent_a14wH
            -> (PersistMap
                  $ ((zip ((map Data.Text.pack) ["text", "option", "answer"]))
                       ((map toPersistValue) $ (toPersistFields ent_a14wH))))
      fromPersistValue
        = ((\ x_a14wI
              -> let
                   columns_a14wJ
                     = unordered-containers-0.2.9.0:Data.HashMap.Strict.fromList x_a14wI
                 in
                   (fromPersistValues
                      $ ((map
                            (\ name_a14wK
                               -> case
                                      (unordered-containers-0.2.9.0:Data.HashMap.Base.lookup
                                         (Data.Text.pack name_a14wK))
                                        columns_a14wJ
                                  of
                                    Just v_a14wL -> v_a14wL
                                    Nothing -> PersistNull))
                           $ ["text", "option", "answer"])))
             Control.Monad.<=< getPersistMap)
    instance persistent-2.8.1:Database.Persist.Sql.Class.PersistFieldSql Question where
      persistent-2.8.1:Database.Persist.Sql.Class.sqlType _ = SqlString
    instance PersistField Quiz where
      toPersistValue
        = \ ent_a14wM
            -> (PersistMap
                  $ ((zip
                        ((map Data.Text.pack)
                           ["name", "description", "creationDate", "passingNumber",
                            "question"]))
                       ((map toPersistValue) $ (toPersistFields ent_a14wM))))
      fromPersistValue
        = ((\ x_a14wN
              -> let
                   columns_a14wO
                     = unordered-containers-0.2.9.0:Data.HashMap.Strict.fromList x_a14wN
                 in
                   (fromPersistValues
                      $ ((map
                            (\ name_a14wP
                               -> case
                                      (unordered-containers-0.2.9.0:Data.HashMap.Base.lookup
                                         (Data.Text.pack name_a14wP))
                                        columns_a14wO
                                  of
                                    Just v_a14wQ -> v_a14wQ
                                    Nothing -> PersistNull))
                           $ ["name", "description", "creationDate", "passingNumber",
                              "question"])))
             Control.Monad.<=< getPersistMap)
    instance persistent-2.8.1:Database.Persist.Sql.Class.PersistFieldSql Quiz where
      persistent-2.8.1:Database.Persist.Sql.Class.sqlType _ = SqlString
    instance PersistField QuizResult where
      toPersistValue
        = \ ent_a14wR
            -> (PersistMap
                  $ ((zip
                        ((map Data.Text.pack) ["testKey", "result", "passingDate"]))
                       ((map toPersistValue) $ (toPersistFields ent_a14wR))))
      fromPersistValue
        = ((\ x_a14wS
              -> let
                   columns_a14wT
                     = unordered-containers-0.2.9.0:Data.HashMap.Strict.fromList x_a14wS
                 in
                   (fromPersistValues
                      $ ((map
                            (\ name_a14wU
                               -> case
                                      (unordered-containers-0.2.9.0:Data.HashMap.Base.lookup
                                         (Data.Text.pack name_a14wU))
                                        columns_a14wT
                                  of
                                    Just v_a14wV -> v_a14wV
                                    Nothing -> PersistNull))
                           $ ["testKey", "result", "passingDate"])))
             Control.Monad.<=< getPersistMap)
    instance persistent-2.8.1:Database.Persist.Sql.Class.PersistFieldSql QuizResult where
      persistent-2.8.1:Database.Persist.Sql.Class.sqlType _ = SqlString
    instance PersistField User where
      toPersistValue
        = \ ent_a14wW
            -> (PersistMap
                  $ ((zip
                        ((map Data.Text.pack)
                           ["username", "password", "email", "avatar", "firstName",
                            "secondName", "birthDay", "sex", "createdQuizzes",
                            "passedQuizzes"]))
                       ((map toPersistValue) $ (toPersistFields ent_a14wW))))
      fromPersistValue
        = ((\ x_a14wX
              -> let
                   columns_a14wY
                     = unordered-containers-0.2.9.0:Data.HashMap.Strict.fromList x_a14wX
                 in
                   (fromPersistValues
                      $ ((map
                            (\ name_a14wZ
                               -> case
                                      (unordered-containers-0.2.9.0:Data.HashMap.Base.lookup
                                         (Data.Text.pack name_a14wZ))
                                        columns_a14wY
                                  of
                                    Just v_a14x0 -> v_a14x0
                                    Nothing -> PersistNull))
                           $ ["username", "password", "email", "avatar", "firstName",
                              "secondName", "birthDay", "sex", "createdQuizzes",
                              "passedQuizzes"])))
             Control.Monad.<=< getPersistMap)
    instance persistent-2.8.1:Database.Persist.Sql.Class.PersistFieldSql User where
      persistent-2.8.1:Database.Persist.Sql.Class.sqlType _ = SqlString
    data Question
      = Question {questionText :: !Text,
                  questionOption :: !QuestionOptions,
                  questionAnswer :: !QuestionAnswer}
      deriving (Eq, Read, Show, Generic)
    type QuestionId = Key Question
    instance PersistEntity Question where
      type PersistEntityBackend Question = MongoContext
      data Unique Question
      newtype Key Question
        = QuestionKey {unQuestionKey :: (BackendKey MongoContext)}
        deriving (Show,
                  Read,
                  Eq,
                  Ord,
                  path-pieces-0.2.1:Web.PathPieces.PathPiece,
                  http-api-data-0.3.7.2:Web.Internal.HttpApiData.ToHttpApiData,
                  http-api-data-0.3.7.2:Web.Internal.HttpApiData.FromHttpApiData,
                  PersistField,
                  persistent-2.8.1:Database.Persist.Sql.Class.PersistFieldSql,
                  ToJSON,
                  FromJSON)
      data EntityField Question typ
        = typ ~ Key Question => QuestionId |
          typ ~ Text => QuestionText |
          typ ~ QuestionOptions => QuestionOption |
          typ ~ QuestionAnswer => QuestionAnswer
      keyToValues
        = ((ghc-prim-0.5.1.1:GHC.Types.: [])
             . (toPersistValue . unQuestionKey))
      keyFromValues
        = ((fmap QuestionKey)
             . (fromPersistValue . Database.Persist.TH.headNote))
      entityDef _
        = (((((((((EntityDef (HaskellName (packPTH "Question")))
                    (DBName (packPTH "question")))
                   (((((((FieldDef (HaskellName (packPTH "Id")))
                           (DBName (packPTH "id")))
                          ((FTTypeCon Nothing) (packPTH "QuestionId")))
                         SqlInt64)
                        [])
                       True)
                      ((ForeignRef (HaskellName (packPTH "Question")))
                         ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                  [packPTH "json"])
                 [((((((FieldDef (HaskellName (packPTH "text")))
                         (DBName (packPTH "text")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "option")))
                         (DBName (packPTH "option")))
                        ((FTTypeCon Nothing) (packPTH "QuestionOptions")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "answer")))
                         (DBName (packPTH "answer")))
                        ((FTTypeCon Nothing) (packPTH "QuestionAnswer")))
                       SqlString)
                      [])
                     True)
                    NoReference])
                [])
               [])
              [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
             (Data.Map.Internal.fromList []))
            False
      toPersistFields (Question x_a14x1 x_a14x2 x_a14x3)
        = [SomePersistField x_a14x1, SomePersistField x_a14x2,
           SomePersistField x_a14x3]
      fromPersistValues [x1_a14x5, x2_a14x6, x3_a14x7]
        = Question
            <$>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "text")))
                 . fromPersistValue)
                x1_a14x5
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "option")))
                 . fromPersistValue)
                x2_a14x6
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "answer")))
                 . fromPersistValue)
                x3_a14x7
      fromPersistValues x_a14x4
        = (Left
             $ ((mappend (packPTH "Question: fromPersistValues failed on: "))
                  (Data.Text.pack $ (show x_a14x4))))
      persistUniqueToFieldNames _
        = error "Degenerate case, should never happen"
      persistUniqueToValues _
        = error "Degenerate case, should never happen"
      persistUniqueKeys
        (Question _text_a14x8 _option_a14x9 _answer_a14xa)
        = []
      persistFieldDef QuestionId
        = ((((((FieldDef (HaskellName (packPTH "Id")))
                 (DBName (packPTH "id")))
                ((FTTypeCon Nothing) (packPTH "QuestionId")))
               SqlInt64)
              [])
             True)
            ((ForeignRef (HaskellName (packPTH "Question")))
               ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))
      persistFieldDef QuestionText
        = ((((((FieldDef (HaskellName (packPTH "text")))
                 (DBName (packPTH "text")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef QuestionOption
        = ((((((FieldDef (HaskellName (packPTH "option")))
                 (DBName (packPTH "option")))
                ((FTTypeCon Nothing) (packPTH "QuestionOptions")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef QuestionAnswer
        = ((((((FieldDef (HaskellName (packPTH "answer")))
                 (DBName (packPTH "answer")))
                ((FTTypeCon Nothing) (packPTH "QuestionAnswer")))
               SqlString)
              [])
             True)
            NoReference
      persistIdField = QuestionId
      fieldLens QuestionId
        = (lensPTH entityKey)
            (\ Entity _ value_a14xb key_a14xc
               -> (Entity key_a14xc) value_a14xb)
      fieldLens QuestionText
        = (lensPTH (questionText . entityVal))
            (\ Entity key_a14xd value_a14xe x_a14xf
               -> (Entity key_a14xd) value_a14xe {questionText = x_a14xf})
      fieldLens QuestionOption
        = (lensPTH (questionOption . entityVal))
            (\ Entity key_a14xd value_a14xe x_a14xf
               -> (Entity key_a14xd) value_a14xe {questionOption = x_a14xf})
      fieldLens QuestionAnswer
        = (lensPTH (questionAnswer . entityVal))
            (\ Entity key_a14xd value_a14xe x_a14xf
               -> (Entity key_a14xd) value_a14xe {questionAnswer = x_a14xf})
    instance ToBackendKey MongoContext Question where
      toBackendKey = unQuestionKey
      fromBackendKey = QuestionKey
    data Quiz
      = Quiz {quizName :: !Text,
              quizDescription :: !Text,
              quizCreationDate :: !UTCTime,
              quizPassingNumber :: !Int,
              quizQuestion :: !Question}
      deriving (Eq, Read, Show, Generic)
    type QuizId = Key Quiz
    instance PersistEntity Quiz where
      type PersistEntityBackend Quiz = MongoContext
      data Unique Quiz
      newtype Key Quiz
        = QuizKey {unQuizKey :: (BackendKey MongoContext)}
        deriving (Show,
                  Read,
                  Eq,
                  Ord,
                  path-pieces-0.2.1:Web.PathPieces.PathPiece,
                  http-api-data-0.3.7.2:Web.Internal.HttpApiData.ToHttpApiData,
                  http-api-data-0.3.7.2:Web.Internal.HttpApiData.FromHttpApiData,
                  PersistField,
                  persistent-2.8.1:Database.Persist.Sql.Class.PersistFieldSql,
                  ToJSON,
                  FromJSON)
      data EntityField Quiz typ
        = typ ~ Key Quiz => QuizId |
          typ ~ Text => QuizName |
          typ ~ Text => QuizDescription |
          typ ~ UTCTime => QuizCreationDate |
          typ ~ Int => QuizPassingNumber |
          typ ~ Question => QuizQuestion
      keyToValues
        = ((ghc-prim-0.5.1.1:GHC.Types.: [])
             . (toPersistValue . unQuizKey))
      keyFromValues
        = ((fmap QuizKey)
             . (fromPersistValue . Database.Persist.TH.headNote))
      entityDef _
        = (((((((((EntityDef (HaskellName (packPTH "Quiz")))
                    (DBName (packPTH "quiz")))
                   (((((((FieldDef (HaskellName (packPTH "Id")))
                           (DBName (packPTH "id")))
                          ((FTTypeCon Nothing) (packPTH "QuizId")))
                         SqlInt64)
                        [])
                       True)
                      ((ForeignRef (HaskellName (packPTH "Quiz")))
                         ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                  [packPTH "json"])
                 [((((((FieldDef (HaskellName (packPTH "name")))
                         (DBName (packPTH "name")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "description")))
                         (DBName (packPTH "description")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "creationDate")))
                         (DBName (packPTH "creation_date")))
                        ((FTTypeCon Nothing) (packPTH "UTCTime")))
                       SqlDayTime)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "passingNumber")))
                         (DBName (packPTH "passing_number")))
                        ((FTTypeCon Nothing) (packPTH "Int")))
                       SqlInt64)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "question")))
                         (DBName (packPTH "question")))
                        ((FTTypeCon Nothing) (packPTH "Question")))
                       SqlString)
                      [])
                     True)
                    (EmbedRef
                       ((EmbedEntityDef (HaskellName (packPTH "Question")))
                          [((EmbedFieldDef (DBName (packPTH "text"))) Nothing) Nothing,
                           ((EmbedFieldDef (DBName (packPTH "option"))) Nothing) Nothing,
                           ((EmbedFieldDef (DBName (packPTH "answer"))) Nothing) Nothing]))])
                [])
               [])
              [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
             (Data.Map.Internal.fromList []))
            False
      toPersistFields (Quiz x_a14xg x_a14xh x_a14xi x_a14xj x_a14xk)
        = [SomePersistField x_a14xg, SomePersistField x_a14xh,
           SomePersistField x_a14xi, SomePersistField x_a14xj,
           SomePersistField x_a14xk]
      fromPersistValues
        [x1_a14xm, x2_a14xn, x3_a14xo, x4_a14xp, x5_a14xq]
        = Quiz
            <$>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "name")))
                 . fromPersistValue)
                x1_a14xm
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "description")))
                 . fromPersistValue)
                x2_a14xn
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "creationDate")))
                 . fromPersistValue)
                x3_a14xo
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "passingNumber")))
                 . fromPersistValue)
                x4_a14xp
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "question")))
                 . fromPersistValue)
                x5_a14xq
      fromPersistValues x_a14xl
        = (Left
             $ ((mappend (packPTH "Quiz: fromPersistValues failed on: "))
                  (Data.Text.pack $ (show x_a14xl))))
      persistUniqueToFieldNames _
        = error "Degenerate case, should never happen"
      persistUniqueToValues _
        = error "Degenerate case, should never happen"
      persistUniqueKeys
        (Quiz _name_a14xr
              _description_a14xs
              _creationDate_a14xt
              _passingNumber_a14xu
              _question_a14xv)
        = []
      persistFieldDef QuizId
        = ((((((FieldDef (HaskellName (packPTH "Id")))
                 (DBName (packPTH "id")))
                ((FTTypeCon Nothing) (packPTH "QuizId")))
               SqlInt64)
              [])
             True)
            ((ForeignRef (HaskellName (packPTH "Quiz")))
               ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))
      persistFieldDef QuizName
        = ((((((FieldDef (HaskellName (packPTH "name")))
                 (DBName (packPTH "name")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef QuizDescription
        = ((((((FieldDef (HaskellName (packPTH "description")))
                 (DBName (packPTH "description")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef QuizCreationDate
        = ((((((FieldDef (HaskellName (packPTH "creationDate")))
                 (DBName (packPTH "creation_date")))
                ((FTTypeCon Nothing) (packPTH "UTCTime")))
               SqlDayTime)
              [])
             True)
            NoReference
      persistFieldDef QuizPassingNumber
        = ((((((FieldDef (HaskellName (packPTH "passingNumber")))
                 (DBName (packPTH "passing_number")))
                ((FTTypeCon Nothing) (packPTH "Int")))
               SqlInt64)
              [])
             True)
            NoReference
      persistFieldDef QuizQuestion
        = ((((((FieldDef (HaskellName (packPTH "question")))
                 (DBName (packPTH "question")))
                ((FTTypeCon Nothing) (packPTH "Question")))
               SqlString)
              [])
             True)
            (EmbedRef
               ((EmbedEntityDef (HaskellName (packPTH "Question")))
                  [((EmbedFieldDef (DBName (packPTH "text"))) Nothing) Nothing,
                   ((EmbedFieldDef (DBName (packPTH "option"))) Nothing) Nothing,
                   ((EmbedFieldDef (DBName (packPTH "answer"))) Nothing) Nothing]))
      persistIdField = QuizId
      fieldLens QuizId
        = (lensPTH entityKey)
            (\ Entity _ value_a14xw key_a14xx
               -> (Entity key_a14xx) value_a14xw)
      fieldLens QuizName
        = (lensPTH (quizName . entityVal))
            (\ Entity key_a14xy value_a14xz x_a14xA
               -> (Entity key_a14xy) value_a14xz {quizName = x_a14xA})
      fieldLens QuizDescription
        = (lensPTH (quizDescription . entityVal))
            (\ Entity key_a14xy value_a14xz x_a14xA
               -> (Entity key_a14xy) value_a14xz {quizDescription = x_a14xA})
      fieldLens QuizCreationDate
        = (lensPTH (quizCreationDate . entityVal))
            (\ Entity key_a14xy value_a14xz x_a14xA
               -> (Entity key_a14xy) value_a14xz {quizCreationDate = x_a14xA})
      fieldLens QuizPassingNumber
        = (lensPTH (quizPassingNumber . entityVal))
            (\ Entity key_a14xy value_a14xz x_a14xA
               -> (Entity key_a14xy) value_a14xz {quizPassingNumber = x_a14xA})
      fieldLens QuizQuestion
        = (lensPTH (quizQuestion . entityVal))
            (\ Entity key_a14xy value_a14xz x_a14xA
               -> (Entity key_a14xy) value_a14xz {quizQuestion = x_a14xA})
    instance ToBackendKey MongoContext Quiz where
      toBackendKey = unQuizKey
      fromBackendKey = QuizKey
    data QuizResult
      = QuizResult {quizResultTestKey :: !Text,
                    quizResultResult :: !Text,
                    quizResultPassingDate :: !UTCTime}
      deriving (Eq, Read, Show, Generic)
    type QuizResultId = Key QuizResult
    instance PersistEntity QuizResult where
      type PersistEntityBackend QuizResult = MongoContext
      data Unique QuizResult
      newtype Key QuizResult
        = QuizResultKey {unQuizResultKey :: (BackendKey MongoContext)}
        deriving (Show,
                  Read,
                  Eq,
                  Ord,
                  path-pieces-0.2.1:Web.PathPieces.PathPiece,
                  http-api-data-0.3.7.2:Web.Internal.HttpApiData.ToHttpApiData,
                  http-api-data-0.3.7.2:Web.Internal.HttpApiData.FromHttpApiData,
                  PersistField,
                  persistent-2.8.1:Database.Persist.Sql.Class.PersistFieldSql,
                  ToJSON,
                  FromJSON)
      data EntityField QuizResult typ
        = typ ~ Key QuizResult => QuizResultId |
          typ ~ Text => QuizResultTestKey |
          typ ~ Text => QuizResultResult |
          typ ~ UTCTime => QuizResultPassingDate
      keyToValues
        = ((ghc-prim-0.5.1.1:GHC.Types.: [])
             . (toPersistValue . unQuizResultKey))
      keyFromValues
        = ((fmap QuizResultKey)
             . (fromPersistValue . Database.Persist.TH.headNote))
      entityDef _
        = (((((((((EntityDef (HaskellName (packPTH "QuizResult")))
                    (DBName (packPTH "quiz_result")))
                   (((((((FieldDef (HaskellName (packPTH "Id")))
                           (DBName (packPTH "id")))
                          ((FTTypeCon Nothing) (packPTH "QuizResultId")))
                         SqlInt64)
                        [])
                       True)
                      ((ForeignRef (HaskellName (packPTH "QuizResult")))
                         ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                  [packPTH "json"])
                 [((((((FieldDef (HaskellName (packPTH "testKey")))
                         (DBName (packPTH "test_key")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "result")))
                         (DBName (packPTH "result")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "passingDate")))
                         (DBName (packPTH "passing_date")))
                        ((FTTypeCon Nothing) (packPTH "UTCTime")))
                       SqlDayTime)
                      [])
                     True)
                    NoReference])
                [])
               [])
              [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
             (Data.Map.Internal.fromList []))
            False
      toPersistFields (QuizResult x_a14xB x_a14xC x_a14xD)
        = [SomePersistField x_a14xB, SomePersistField x_a14xC,
           SomePersistField x_a14xD]
      fromPersistValues [x1_a14xF, x2_a14xG, x3_a14xH]
        = QuizResult
            <$>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "testKey")))
                 . fromPersistValue)
                x1_a14xF
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "result")))
                 . fromPersistValue)
                x2_a14xG
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "passingDate")))
                 . fromPersistValue)
                x3_a14xH
      fromPersistValues x_a14xE
        = (Left
             $ ((mappend (packPTH "QuizResult: fromPersistValues failed on: "))
                  (Data.Text.pack $ (show x_a14xE))))
      persistUniqueToFieldNames _
        = error "Degenerate case, should never happen"
      persistUniqueToValues _
        = error "Degenerate case, should never happen"
      persistUniqueKeys
        (QuizResult _testKey_a14xI _result_a14xJ _passingDate_a14xK)
        = []
      persistFieldDef QuizResultId
        = ((((((FieldDef (HaskellName (packPTH "Id")))
                 (DBName (packPTH "id")))
                ((FTTypeCon Nothing) (packPTH "QuizResultId")))
               SqlInt64)
              [])
             True)
            ((ForeignRef (HaskellName (packPTH "QuizResult")))
               ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))
      persistFieldDef QuizResultTestKey
        = ((((((FieldDef (HaskellName (packPTH "testKey")))
                 (DBName (packPTH "test_key")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef QuizResultResult
        = ((((((FieldDef (HaskellName (packPTH "result")))
                 (DBName (packPTH "result")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef QuizResultPassingDate
        = ((((((FieldDef (HaskellName (packPTH "passingDate")))
                 (DBName (packPTH "passing_date")))
                ((FTTypeCon Nothing) (packPTH "UTCTime")))
               SqlDayTime)
              [])
             True)
            NoReference
      persistIdField = QuizResultId
      fieldLens QuizResultId
        = (lensPTH entityKey)
            (\ Entity _ value_a14xL key_a14xM
               -> (Entity key_a14xM) value_a14xL)
      fieldLens QuizResultTestKey
        = (lensPTH (quizResultTestKey . entityVal))
            (\ Entity key_a14xN value_a14xO x_a14xP
               -> (Entity key_a14xN) value_a14xO {quizResultTestKey = x_a14xP})
      fieldLens QuizResultResult
        = (lensPTH (quizResultResult . entityVal))
            (\ Entity key_a14xN value_a14xO x_a14xP
               -> (Entity key_a14xN) value_a14xO {quizResultResult = x_a14xP})
      fieldLens QuizResultPassingDate
        = (lensPTH (quizResultPassingDate . entityVal))
            (\ Entity key_a14xN value_a14xO x_a14xP
               -> (Entity key_a14xN)
                    value_a14xO {quizResultPassingDate = x_a14xP})
    instance ToBackendKey MongoContext QuizResult where
      toBackendKey = unQuizResultKey
      fromBackendKey = QuizResultKey
    data User
      = User {userUsername :: !Text,
              userPassword :: !Text,
              userEmail :: !Text,
              userAvatar :: !Text,
              userFirstName :: !(Maybe Text),
              userSecondName :: !(Maybe Text),
              userBirthDay :: !(Maybe UTCTime),
              userSex :: !(Maybe Gender),
              userCreatedQuizzes :: ![QuizId],
              userPassedQuizzes :: ![QuizResult]}
      deriving (Eq, Read, Show, Generic)
    type UserId = Key User
    instance PersistEntity User where
      type PersistEntityBackend User = MongoContext
      data Unique User
      newtype Key User
        = UserKey {unUserKey :: (BackendKey MongoContext)}
        deriving (Show,
                  Read,
                  Eq,
                  Ord,
                  path-pieces-0.2.1:Web.PathPieces.PathPiece,
                  http-api-data-0.3.7.2:Web.Internal.HttpApiData.ToHttpApiData,
                  http-api-data-0.3.7.2:Web.Internal.HttpApiData.FromHttpApiData,
                  PersistField,
                  persistent-2.8.1:Database.Persist.Sql.Class.PersistFieldSql,
                  ToJSON,
                  FromJSON)
      data EntityField User typ
        = typ ~ Key User => UserId |
          typ ~ Text => UserUsername |
          typ ~ Text => UserPassword |
          typ ~ Text => UserEmail |
          typ ~ Text => UserAvatar |
          typ ~ Maybe Text => UserFirstName |
          typ ~ Maybe Text => UserSecondName |
          typ ~ Maybe UTCTime => UserBirthDay |
          typ ~ Maybe Gender => UserSex |
          typ ~ [QuizId] => UserCreatedQuizzes |
          typ ~ [QuizResult] => UserPassedQuizzes
      keyToValues
        = ((ghc-prim-0.5.1.1:GHC.Types.: [])
             . (toPersistValue . unUserKey))
      keyFromValues
        = ((fmap UserKey)
             . (fromPersistValue . Database.Persist.TH.headNote))
      entityDef _
        = (((((((((EntityDef (HaskellName (packPTH "User")))
                    (DBName (packPTH "user")))
                   (((((((FieldDef (HaskellName (packPTH "Id")))
                           (DBName (packPTH "id")))
                          ((FTTypeCon Nothing) (packPTH "UserId")))
                         SqlInt64)
                        [])
                       True)
                      ((ForeignRef (HaskellName (packPTH "User")))
                         ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                  [packPTH "json"])
                 [((((((FieldDef (HaskellName (packPTH "username")))
                         (DBName (packPTH "username")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "password")))
                         (DBName (packPTH "password")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "email")))
                         (DBName (packPTH "email")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "avatar")))
                         (DBName (packPTH "avatar")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "firstName")))
                         (DBName (packPTH "first_name")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [packPTH "Maybe"])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "secondName")))
                         (DBName (packPTH "second_name")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [packPTH "Maybe"])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "birthDay")))
                         (DBName (packPTH "birth_day")))
                        ((FTTypeCon Nothing) (packPTH "UTCTime")))
                       SqlDayTime)
                      [packPTH "Maybe"])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "sex")))
                         (DBName (packPTH "sex")))
                        ((FTTypeCon Nothing) (packPTH "Gender")))
                       SqlString)
                      [packPTH "Maybe"])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "createdQuizzes")))
                         (DBName (packPTH "created_quizzes")))
                        (FTList ((FTTypeCon Nothing) (packPTH "QuizId"))))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "passedQuizzes")))
                         (DBName (packPTH "passed_quizzes")))
                        (FTList ((FTTypeCon Nothing) (packPTH "QuizResult"))))
                       SqlString)
                      [])
                     True)
                    (EmbedRef
                       ((EmbedEntityDef (HaskellName (packPTH "QuizResult")))
                          [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing) Nothing,
                           ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                           ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                             Nothing]))])
                [])
               [])
              [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
             (Data.Map.Internal.fromList []))
            False
      toPersistFields
        (User x_a14xQ
              x_a14xR
              x_a14xS
              x_a14xT
              x_a14xU
              x_a14xV
              x_a14xW
              x_a14xX
              x_a14xY
              x_a14xZ)
        = [SomePersistField x_a14xQ, SomePersistField x_a14xR,
           SomePersistField x_a14xS, SomePersistField x_a14xT,
           SomePersistField x_a14xU, SomePersistField x_a14xV,
           SomePersistField x_a14xW, SomePersistField x_a14xX,
           SomePersistField x_a14xY, SomePersistField x_a14xZ]
      fromPersistValues
        [x1_a14y1,
         x2_a14y2,
         x3_a14y3,
         x4_a14y4,
         x5_a14y5,
         x6_a14y6,
         x7_a14y7,
         x8_a14y8,
         x9_a14y9,
         x10_a14ya]
        = User
            <$>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "username")))
                 . fromPersistValue)
                x1_a14y1
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "password")))
                 . fromPersistValue)
                x2_a14y2
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "email")))
                 . fromPersistValue)
                x3_a14y3
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "avatar")))
                 . fromPersistValue)
                x4_a14y4
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "firstName")))
                 . fromPersistValue)
                x5_a14y5
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "secondName")))
                 . fromPersistValue)
                x6_a14y6
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "birthDay")))
                 . fromPersistValue)
                x7_a14y7
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "sex")))
                 . fromPersistValue)
                x8_a14y8
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "createdQuizzes")))
                 . fromPersistValue)
                x9_a14y9
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "passedQuizzes")))
                 . fromPersistValue)
                x10_a14ya
      fromPersistValues x_a14y0
        = (Left
             $ ((mappend (packPTH "User: fromPersistValues failed on: "))
                  (Data.Text.pack $ (show x_a14y0))))
      persistUniqueToFieldNames _
        = error "Degenerate case, should never happen"
      persistUniqueToValues _
        = error "Degenerate case, should never happen"
      persistUniqueKeys
        (User _username_a14yb
              _password_a14yc
              _email_a14yd
              _avatar_a14ye
              _firstName_a14yf
              _secondName_a14yg
              _birthDay_a14yh
              _sex_a14yi
              _createdQuizzes_a14yj
              _passedQuizzes_a14yk)
        = []
      persistFieldDef UserId
        = ((((((FieldDef (HaskellName (packPTH "Id")))
                 (DBName (packPTH "id")))
                ((FTTypeCon Nothing) (packPTH "UserId")))
               SqlInt64)
              [])
             True)
            ((ForeignRef (HaskellName (packPTH "User")))
               ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))
      persistFieldDef UserUsername
        = ((((((FieldDef (HaskellName (packPTH "username")))
                 (DBName (packPTH "username")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef UserPassword
        = ((((((FieldDef (HaskellName (packPTH "password")))
                 (DBName (packPTH "password")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef UserEmail
        = ((((((FieldDef (HaskellName (packPTH "email")))
                 (DBName (packPTH "email")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef UserAvatar
        = ((((((FieldDef (HaskellName (packPTH "avatar")))
                 (DBName (packPTH "avatar")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef UserFirstName
        = ((((((FieldDef (HaskellName (packPTH "firstName")))
                 (DBName (packPTH "first_name")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [packPTH "Maybe"])
             True)
            NoReference
      persistFieldDef UserSecondName
        = ((((((FieldDef (HaskellName (packPTH "secondName")))
                 (DBName (packPTH "second_name")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [packPTH "Maybe"])
             True)
            NoReference
      persistFieldDef UserBirthDay
        = ((((((FieldDef (HaskellName (packPTH "birthDay")))
                 (DBName (packPTH "birth_day")))
                ((FTTypeCon Nothing) (packPTH "UTCTime")))
               SqlDayTime)
              [packPTH "Maybe"])
             True)
            NoReference
      persistFieldDef UserSex
        = ((((((FieldDef (HaskellName (packPTH "sex")))
                 (DBName (packPTH "sex")))
                ((FTTypeCon Nothing) (packPTH "Gender")))
               SqlString)
              [packPTH "Maybe"])
             True)
            NoReference
      persistFieldDef UserCreatedQuizzes
        = ((((((FieldDef (HaskellName (packPTH "createdQuizzes")))
                 (DBName (packPTH "created_quizzes")))
                (FTList ((FTTypeCon Nothing) (packPTH "QuizId"))))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef UserPassedQuizzes
        = ((((((FieldDef (HaskellName (packPTH "passedQuizzes")))
                 (DBName (packPTH "passed_quizzes")))
                (FTList ((FTTypeCon Nothing) (packPTH "QuizResult"))))
               SqlString)
              [])
             True)
            (EmbedRef
               ((EmbedEntityDef (HaskellName (packPTH "QuizResult")))
                  [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing) Nothing,
                   ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                   ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                     Nothing]))
      persistIdField = UserId
      fieldLens UserId
        = (lensPTH entityKey)
            (\ Entity _ value_a14yl key_a14ym
               -> (Entity key_a14ym) value_a14yl)
      fieldLens UserUsername
        = (lensPTH (userUsername . entityVal))
            (\ Entity key_a14yn value_a14yo x_a14yp
               -> (Entity key_a14yn) value_a14yo {userUsername = x_a14yp})
      fieldLens UserPassword
        = (lensPTH (userPassword . entityVal))
            (\ Entity key_a14yn value_a14yo x_a14yp
               -> (Entity key_a14yn) value_a14yo {userPassword = x_a14yp})
      fieldLens UserEmail
        = (lensPTH (userEmail . entityVal))
            (\ Entity key_a14yn value_a14yo x_a14yp
               -> (Entity key_a14yn) value_a14yo {userEmail = x_a14yp})
      fieldLens UserAvatar
        = (lensPTH (userAvatar . entityVal))
            (\ Entity key_a14yn value_a14yo x_a14yp
               -> (Entity key_a14yn) value_a14yo {userAvatar = x_a14yp})
      fieldLens UserFirstName
        = (lensPTH (userFirstName . entityVal))
            (\ Entity key_a14yn value_a14yo x_a14yp
               -> (Entity key_a14yn) value_a14yo {userFirstName = x_a14yp})
      fieldLens UserSecondName
        = (lensPTH (userSecondName . entityVal))
            (\ Entity key_a14yn value_a14yo x_a14yp
               -> (Entity key_a14yn) value_a14yo {userSecondName = x_a14yp})
      fieldLens UserBirthDay
        = (lensPTH (userBirthDay . entityVal))
            (\ Entity key_a14yn value_a14yo x_a14yp
               -> (Entity key_a14yn) value_a14yo {userBirthDay = x_a14yp})
      fieldLens UserSex
        = (lensPTH (userSex . entityVal))
            (\ Entity key_a14yn value_a14yo x_a14yp
               -> (Entity key_a14yn) value_a14yo {userSex = x_a14yp})
      fieldLens UserCreatedQuizzes
        = (lensPTH (userCreatedQuizzes . entityVal))
            (\ Entity key_a14yn value_a14yo x_a14yp
               -> (Entity key_a14yn) value_a14yo {userCreatedQuizzes = x_a14yp})
      fieldLens UserPassedQuizzes
        = (lensPTH (userPassedQuizzes . entityVal))
            (\ Entity key_a14yn value_a14yo x_a14yp
               -> (Entity key_a14yn) value_a14yo {userPassedQuizzes = x_a14yp})
    instance ToBackendKey MongoContext User where
      toBackendKey = unUserKey
      fromBackendKey = UserKey
    instance ToJSON Question where
      aeson-1.2.4.0:Data.Aeson.Types.ToJSON.toJSON
        (Question text_a14yr option_a14ys answer_a14yt)
        = aeson-1.2.4.0:Data.Aeson.Types.Internal.object
            [((Data.Text.pack "text")
                aeson-1.2.4.0:Data.Aeson.Types.ToJSON..= text_a14yr),
             ((Data.Text.pack "option")
                aeson-1.2.4.0:Data.Aeson.Types.ToJSON..= option_a14ys),
             ((Data.Text.pack "answer")
                aeson-1.2.4.0:Data.Aeson.Types.ToJSON..= answer_a14yt)]
    instance FromJSON Question where
      aeson-1.2.4.0:Data.Aeson.Types.FromJSON.parseJSON
        (aeson-1.2.4.0:Data.Aeson.Types.Internal.Object obj_a14yq)
        = ((((pure Question)
               <*>
                 (obj_a14yq
                    aeson-1.2.4.0:Data.Aeson.Types.FromJSON..:
                      (Data.Text.pack "text")))
              <*>
                (obj_a14yq
                   aeson-1.2.4.0:Data.Aeson.Types.FromJSON..:
                     (Data.Text.pack "option")))
             <*>
               (obj_a14yq
                  aeson-1.2.4.0:Data.Aeson.Types.FromJSON..:
                    (Data.Text.pack "answer")))
      aeson-1.2.4.0:Data.Aeson.Types.FromJSON.parseJSON _
        = GHC.Base.mzero
    instance ToJSON (Entity Question) where
      aeson-1.2.4.0:Data.Aeson.Types.ToJSON.toJSON = entityIdToJSON
    instance FromJSON (Entity Question) where
      aeson-1.2.4.0:Data.Aeson.Types.FromJSON.parseJSON
        = entityIdFromJSON
    instance ToJSON Quiz where
      aeson-1.2.4.0:Data.Aeson.Types.ToJSON.toJSON
        (Quiz name_a14yv
              description_a14yw
              creationDate_a14yx
              passingNumber_a14yy
              question_a14yz)
        = aeson-1.2.4.0:Data.Aeson.Types.Internal.object
            [((Data.Text.pack "name")
                aeson-1.2.4.0:Data.Aeson.Types.ToJSON..= name_a14yv),
             ((Data.Text.pack "description")
                aeson-1.2.4.0:Data.Aeson.Types.ToJSON..= description_a14yw),
             ((Data.Text.pack "creationDate")
                aeson-1.2.4.0:Data.Aeson.Types.ToJSON..= creationDate_a14yx),
             ((Data.Text.pack "passingNumber")
                aeson-1.2.4.0:Data.Aeson.Types.ToJSON..= passingNumber_a14yy),
             ((Data.Text.pack "question")
                aeson-1.2.4.0:Data.Aeson.Types.ToJSON..= question_a14yz)]
    instance FromJSON Quiz where
      aeson-1.2.4.0:Data.Aeson.Types.FromJSON.parseJSON
        (aeson-1.2.4.0:Data.Aeson.Types.Internal.Object obj_a14yu)
        = ((((((pure Quiz)
                 <*>
                   (obj_a14yu
                      aeson-1.2.4.0:Data.Aeson.Types.FromJSON..:
                        (Data.Text.pack "name")))
                <*>
                  (obj_a14yu
                     aeson-1.2.4.0:Data.Aeson.Types.FromJSON..:
                       (Data.Text.pack "description")))
               <*>
                 (obj_a14yu
                    aeson-1.2.4.0:Data.Aeson.Types.FromJSON..:
                      (Data.Text.pack "creationDate")))
              <*>
                (obj_a14yu
                   aeson-1.2.4.0:Data.Aeson.Types.FromJSON..:
                     (Data.Text.pack "passingNumber")))
             <*>
               (obj_a14yu
                  aeson-1.2.4.0:Data.Aeson.Types.FromJSON..:
                    (Data.Text.pack "question")))
      aeson-1.2.4.0:Data.Aeson.Types.FromJSON.parseJSON _
        = GHC.Base.mzero
    instance ToJSON (Entity Quiz) where
      aeson-1.2.4.0:Data.Aeson.Types.ToJSON.toJSON = entityIdToJSON
    instance FromJSON (Entity Quiz) where
      aeson-1.2.4.0:Data.Aeson.Types.FromJSON.parseJSON
        = entityIdFromJSON
    instance ToJSON QuizResult where
      aeson-1.2.4.0:Data.Aeson.Types.ToJSON.toJSON
        (QuizResult testKey_a14yB result_a14yC passingDate_a14yD)
        = aeson-1.2.4.0:Data.Aeson.Types.Internal.object
            [((Data.Text.pack "testKey")
                aeson-1.2.4.0:Data.Aeson.Types.ToJSON..= testKey_a14yB),
             ((Data.Text.pack "result")
                aeson-1.2.4.0:Data.Aeson.Types.ToJSON..= result_a14yC),
             ((Data.Text.pack "passingDate")
                aeson-1.2.4.0:Data.Aeson.Types.ToJSON..= passingDate_a14yD)]
    instance FromJSON QuizResult where
      aeson-1.2.4.0:Data.Aeson.Types.FromJSON.parseJSON
        (aeson-1.2.4.0:Data.Aeson.Types.Internal.Object obj_a14yA)
        = ((((pure QuizResult)
               <*>
                 (obj_a14yA
                    aeson-1.2.4.0:Data.Aeson.Types.FromJSON..:
                      (Data.Text.pack "testKey")))
              <*>
                (obj_a14yA
                   aeson-1.2.4.0:Data.Aeson.Types.FromJSON..:
                     (Data.Text.pack "result")))
             <*>
               (obj_a14yA
                  aeson-1.2.4.0:Data.Aeson.Types.FromJSON..:
                    (Data.Text.pack "passingDate")))
      aeson-1.2.4.0:Data.Aeson.Types.FromJSON.parseJSON _
        = GHC.Base.mzero
    instance ToJSON (Entity QuizResult) where
      aeson-1.2.4.0:Data.Aeson.Types.ToJSON.toJSON = entityIdToJSON
    instance FromJSON (Entity QuizResult) where
      aeson-1.2.4.0:Data.Aeson.Types.FromJSON.parseJSON
        = entityIdFromJSON
    instance ToJSON User where
      aeson-1.2.4.0:Data.Aeson.Types.ToJSON.toJSON
        (User username_a14yF
              password_a14yG
              email_a14yH
              avatar_a14yI
              firstName_a14yJ
              secondName_a14yK
              birthDay_a14yL
              sex_a14yM
              createdQuizzes_a14yN
              passedQuizzes_a14yO)
        = aeson-1.2.4.0:Data.Aeson.Types.Internal.object
            [((Data.Text.pack "username")
                aeson-1.2.4.0:Data.Aeson.Types.ToJSON..= username_a14yF),
             ((Data.Text.pack "password")
                aeson-1.2.4.0:Data.Aeson.Types.ToJSON..= password_a14yG),
             ((Data.Text.pack "email")
                aeson-1.2.4.0:Data.Aeson.Types.ToJSON..= email_a14yH),
             ((Data.Text.pack "avatar")
                aeson-1.2.4.0:Data.Aeson.Types.ToJSON..= avatar_a14yI),
             ((Data.Text.pack "firstName")
                aeson-1.2.4.0:Data.Aeson.Types.ToJSON..= firstName_a14yJ),
             ((Data.Text.pack "secondName")
                aeson-1.2.4.0:Data.Aeson.Types.ToJSON..= secondName_a14yK),
             ((Data.Text.pack "birthDay")
                aeson-1.2.4.0:Data.Aeson.Types.ToJSON..= birthDay_a14yL),
             ((Data.Text.pack "sex")
                aeson-1.2.4.0:Data.Aeson.Types.ToJSON..= sex_a14yM),
             ((Data.Text.pack "createdQuizzes")
                aeson-1.2.4.0:Data.Aeson.Types.ToJSON..= createdQuizzes_a14yN),
             ((Data.Text.pack "passedQuizzes")
                aeson-1.2.4.0:Data.Aeson.Types.ToJSON..= passedQuizzes_a14yO)]
    instance FromJSON User where
      aeson-1.2.4.0:Data.Aeson.Types.FromJSON.parseJSON
        (aeson-1.2.4.0:Data.Aeson.Types.Internal.Object obj_a14yE)
        = (((((((((((pure User)
                      <*>
                        (obj_a14yE
                           aeson-1.2.4.0:Data.Aeson.Types.FromJSON..:
                             (Data.Text.pack "username")))
                     <*>
                       (obj_a14yE
                          aeson-1.2.4.0:Data.Aeson.Types.FromJSON..:
                            (Data.Text.pack "password")))
                    <*>
                      (obj_a14yE
                         aeson-1.2.4.0:Data.Aeson.Types.FromJSON..:
                           (Data.Text.pack "email")))
                   <*>
                     (obj_a14yE
                        aeson-1.2.4.0:Data.Aeson.Types.FromJSON..:
                          (Data.Text.pack "avatar")))
                  <*>
                    (obj_a14yE
                       aeson-compat-0.3.7.1:Data.Aeson.Compat..:?
                         (Data.Text.pack "firstName")))
                 <*>
                   (obj_a14yE
                      aeson-compat-0.3.7.1:Data.Aeson.Compat..:?
                        (Data.Text.pack "secondName")))
                <*>
                  (obj_a14yE
                     aeson-compat-0.3.7.1:Data.Aeson.Compat..:?
                       (Data.Text.pack "birthDay")))
               <*>
                 (obj_a14yE
                    aeson-compat-0.3.7.1:Data.Aeson.Compat..:? (Data.Text.pack "sex")))
              <*>
                (obj_a14yE
                   aeson-1.2.4.0:Data.Aeson.Types.FromJSON..:
                     (Data.Text.pack "createdQuizzes")))
             <*>
               (obj_a14yE
                  aeson-1.2.4.0:Data.Aeson.Types.FromJSON..:
                    (Data.Text.pack "passedQuizzes")))
      aeson-1.2.4.0:Data.Aeson.Types.FromJSON.parseJSON _
        = GHC.Base.mzero
    instance ToJSON (Entity User) where
      aeson-1.2.4.0:Data.Aeson.Types.ToJSON.toJSON = entityIdToJSON
    instance FromJSON (Entity User) where
      aeson-1.2.4.0:Data.Aeson.Types.FromJSON.parseJSON
        = entityIdFromJSON
/home/nikita/Projects/labs/Databases/Course-Project/Server/src/Model/User.hs:(27,78)-(57,2): Splicing expression
    Language.Haskell.TH.Quote.quoteExp
      persistLowerCase
      "\n\
      \Question json\n\
      \  text    Text\n\
      \  option  QuestionOptions\n\
      \  answer  QuestionAnswer\n\
      \  deriving Eq Read Show Generic\n\
      \Quiz json\n\
      \  name            Text\n\
      \  description     Text\n\
      \  creationDate    UTCTime\n\
      \  passingNumber   Int\n\
      \  question        Question\n\
      \  deriving Eq Read Show Generic\n\
      \QuizResult json\n\
      \  testKey         Text\n\
      \  result          Text\n\
      \  passingDate     UTCTime\n\
      \  deriving        Eq Read Show Generic\n\
      \User json\n\
      \  username        Text\n\
      \  password        Text\n\
      \  email           Text\n\
      \  avatar          Text\n\
      \  firstName       Text Maybe\n\
      \  secondName      Text Maybe\n\
      \  birthDay        UTCTime Maybe\n\
      \  sex             Gender Maybe\n\
      \  createdQuizzes  [QuizId]\n\
      \  passedQuizzes   [QuizResult]\n\
      \  deriving        Eq Read Show Generic\n"
  ======>
    [(((((((((EntityDef (HaskellName (packPTH "Question")))
               (DBName (packPTH "question")))
              (((((((FieldDef (HaskellName (packPTH "Id")))
                      (DBName (packPTH "id")))
                     ((FTTypeCon Nothing) (packPTH "QuestionId")))
                    SqlInt64)
                   [])
                  True)
                 ((ForeignRef (HaskellName (packPTH "Question")))
                    ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
             [packPTH "json"])
            [((((((FieldDef (HaskellName (packPTH "text")))
                    (DBName (packPTH "text")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for text")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "option")))
                    (DBName (packPTH "option")))
                   ((FTTypeCon Nothing) (packPTH "QuestionOptions")))
                  (SqlOther (packPTH "SqlType unset for option")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "answer")))
                    (DBName (packPTH "answer")))
                   ((FTTypeCon Nothing) (packPTH "QuestionAnswer")))
                  (SqlOther (packPTH "SqlType unset for answer")))
                 [])
                True)
               NoReference])
           [])
          [])
         [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
        (Data.Map.Internal.fromList []))
       False
       {entityFields = [((((((FieldDef (HaskellName (packPTH "text")))
                               (DBName (packPTH "text")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "option")))
                               (DBName (packPTH "option")))
                              ((FTTypeCon Nothing) (packPTH "QuestionOptions")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy QuestionOptions)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "answer")))
                               (DBName (packPTH "answer")))
                              ((FTTypeCon Nothing) (packPTH "QuestionAnswer")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy QuestionAnswer)))
                            [])
                           True)
                          NoReference],
        entityId = ((((((FieldDef (HaskellName (packPTH "Id")))
                          (DBName (packPTH "id")))
                         ((FTTypeCon Nothing) (packPTH "QuestionId")))
                        (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                           (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                       [])
                      True)
                     ((ForeignRef (HaskellName (packPTH "Question")))
                        ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))},
     (((((((((EntityDef (HaskellName (packPTH "Quiz")))
               (DBName (packPTH "quiz")))
              (((((((FieldDef (HaskellName (packPTH "Id")))
                      (DBName (packPTH "id")))
                     ((FTTypeCon Nothing) (packPTH "QuizId")))
                    SqlInt64)
                   [])
                  True)
                 ((ForeignRef (HaskellName (packPTH "Quiz")))
                    ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
             [packPTH "json"])
            [((((((FieldDef (HaskellName (packPTH "name")))
                    (DBName (packPTH "name")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for name")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "description")))
                    (DBName (packPTH "description")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for description")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "creationDate")))
                    (DBName (packPTH "creation_date")))
                   ((FTTypeCon Nothing) (packPTH "UTCTime")))
                  (SqlOther (packPTH "SqlType unset for creationDate")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "passingNumber")))
                    (DBName (packPTH "passing_number")))
                   ((FTTypeCon Nothing) (packPTH "Int")))
                  (SqlOther (packPTH "SqlType unset for passingNumber")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "question")))
                    (DBName (packPTH "question")))
                   ((FTTypeCon Nothing) (packPTH "Question")))
                  (SqlOther (packPTH "SqlType unset for question")))
                 [])
                True)
               (EmbedRef
                  ((EmbedEntityDef (HaskellName (packPTH "Question")))
                     [((EmbedFieldDef (DBName (packPTH "text"))) Nothing) Nothing,
                      ((EmbedFieldDef (DBName (packPTH "option"))) Nothing) Nothing,
                      ((EmbedFieldDef (DBName (packPTH "answer"))) Nothing) Nothing]))])
           [])
          [])
         [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
        (Data.Map.Internal.fromList []))
       False
       {entityFields = [((((((FieldDef (HaskellName (packPTH "name")))
                               (DBName (packPTH "name")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "description")))
                               (DBName (packPTH "description")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "creationDate")))
                               (DBName (packPTH "creation_date")))
                              ((FTTypeCon Nothing) (packPTH "UTCTime")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy UTCTime)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "passingNumber")))
                               (DBName (packPTH "passing_number")))
                              ((FTTypeCon Nothing) (packPTH "Int")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Int)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "question")))
                               (DBName (packPTH "question")))
                              ((FTTypeCon Nothing) (packPTH "Question")))
                             SqlString)
                            [])
                           True)
                          (EmbedRef
                             ((EmbedEntityDef (HaskellName (packPTH "Question")))
                                [((EmbedFieldDef (DBName (packPTH "text"))) Nothing) Nothing,
                                 ((EmbedFieldDef (DBName (packPTH "option"))) Nothing) Nothing,
                                 ((EmbedFieldDef (DBName (packPTH "answer"))) Nothing) Nothing]))],
        entityId = ((((((FieldDef (HaskellName (packPTH "Id")))
                          (DBName (packPTH "id")))
                         ((FTTypeCon Nothing) (packPTH "QuizId")))
                        (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                           (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                       [])
                      True)
                     ((ForeignRef (HaskellName (packPTH "Quiz")))
                        ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))},
     (((((((((EntityDef (HaskellName (packPTH "QuizResult")))
               (DBName (packPTH "quiz_result")))
              (((((((FieldDef (HaskellName (packPTH "Id")))
                      (DBName (packPTH "id")))
                     ((FTTypeCon Nothing) (packPTH "QuizResultId")))
                    SqlInt64)
                   [])
                  True)
                 ((ForeignRef (HaskellName (packPTH "QuizResult")))
                    ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
             [packPTH "json"])
            [((((((FieldDef (HaskellName (packPTH "testKey")))
                    (DBName (packPTH "test_key")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for testKey")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "result")))
                    (DBName (packPTH "result")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for result")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "passingDate")))
                    (DBName (packPTH "passing_date")))
                   ((FTTypeCon Nothing) (packPTH "UTCTime")))
                  (SqlOther (packPTH "SqlType unset for passingDate")))
                 [])
                True)
               NoReference])
           [])
          [])
         [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
        (Data.Map.Internal.fromList []))
       False
       {entityFields = [((((((FieldDef (HaskellName (packPTH "testKey")))
                               (DBName (packPTH "test_key")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "result")))
                               (DBName (packPTH "result")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "passingDate")))
                               (DBName (packPTH "passing_date")))
                              ((FTTypeCon Nothing) (packPTH "UTCTime")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy UTCTime)))
                            [])
                           True)
                          NoReference],
        entityId = ((((((FieldDef (HaskellName (packPTH "Id")))
                          (DBName (packPTH "id")))
                         ((FTTypeCon Nothing) (packPTH "QuizResultId")))
                        (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                           (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                       [])
                      True)
                     ((ForeignRef (HaskellName (packPTH "QuizResult")))
                        ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))},
     (((((((((EntityDef (HaskellName (packPTH "User")))
               (DBName (packPTH "user")))
              (((((((FieldDef (HaskellName (packPTH "Id")))
                      (DBName (packPTH "id")))
                     ((FTTypeCon Nothing) (packPTH "UserId")))
                    SqlInt64)
                   [])
                  True)
                 ((ForeignRef (HaskellName (packPTH "User")))
                    ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
             [packPTH "json"])
            [((((((FieldDef (HaskellName (packPTH "username")))
                    (DBName (packPTH "username")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for username")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "password")))
                    (DBName (packPTH "password")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for password")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "email")))
                    (DBName (packPTH "email")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for email")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "avatar")))
                    (DBName (packPTH "avatar")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for avatar")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "firstName")))
                    (DBName (packPTH "first_name")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for firstName")))
                 [packPTH "Maybe"])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "secondName")))
                    (DBName (packPTH "second_name")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for secondName")))
                 [packPTH "Maybe"])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "birthDay")))
                    (DBName (packPTH "birth_day")))
                   ((FTTypeCon Nothing) (packPTH "UTCTime")))
                  (SqlOther (packPTH "SqlType unset for birthDay")))
                 [packPTH "Maybe"])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "sex")))
                    (DBName (packPTH "sex")))
                   ((FTTypeCon Nothing) (packPTH "Gender")))
                  (SqlOther (packPTH "SqlType unset for sex")))
                 [packPTH "Maybe"])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "createdQuizzes")))
                    (DBName (packPTH "created_quizzes")))
                   (FTList ((FTTypeCon Nothing) (packPTH "QuizId"))))
                  (SqlOther (packPTH "SqlType unset for createdQuizzes")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "passedQuizzes")))
                    (DBName (packPTH "passed_quizzes")))
                   (FTList ((FTTypeCon Nothing) (packPTH "QuizResult"))))
                  (SqlOther (packPTH "SqlType unset for passedQuizzes")))
                 [])
                True)
               (EmbedRef
                  ((EmbedEntityDef (HaskellName (packPTH "QuizResult")))
                     [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing) Nothing,
                      ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                      ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                        Nothing]))])
           [])
          [])
         [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
        (Data.Map.Internal.fromList []))
       False
       {entityFields = [((((((FieldDef (HaskellName (packPTH "username")))
                               (DBName (packPTH "username")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "password")))
                               (DBName (packPTH "password")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "email")))
                               (DBName (packPTH "email")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "avatar")))
                               (DBName (packPTH "avatar")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "firstName")))
                               (DBName (packPTH "first_name")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [packPTH "Maybe"])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "secondName")))
                               (DBName (packPTH "second_name")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [packPTH "Maybe"])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "birthDay")))
                               (DBName (packPTH "birth_day")))
                              ((FTTypeCon Nothing) (packPTH "UTCTime")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy UTCTime)))
                            [packPTH "Maybe"])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "sex")))
                               (DBName (packPTH "sex")))
                              ((FTTypeCon Nothing) (packPTH "Gender")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Gender)))
                            [packPTH "Maybe"])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "createdQuizzes")))
                               (DBName (packPTH "created_quizzes")))
                              (FTList ((FTTypeCon Nothing) (packPTH "QuizId"))))
                             SqlString)
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "passedQuizzes")))
                               (DBName (packPTH "passed_quizzes")))
                              (FTList ((FTTypeCon Nothing) (packPTH "QuizResult"))))
                             SqlString)
                            [])
                           True)
                          (EmbedRef
                             ((EmbedEntityDef (HaskellName (packPTH "QuizResult")))
                                [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing) Nothing,
                                 ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                                 ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                                   Nothing]))],
        entityId = ((((((FieldDef (HaskellName (packPTH "Id")))
                          (DBName (packPTH "id")))
                         ((FTTypeCon Nothing) (packPTH "UserId")))
                        (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                           (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                       [])
                      True)
                     ((ForeignRef (HaskellName (packPTH "User")))
                        ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))}]
/home/nikita/Projects/labs/Databases/Course-Project/Server/src/Model/User.hs:(27,1)-(57,2): Splicing declarations
    share
      [mkPersist (mkPersistSettings (ConT ''MongoContext))]
      ([(((((((((EntityDef (HaskellName (packPTH "Question")))
                  (DBName (packPTH "question")))
                 (((((((FieldDef (HaskellName (packPTH "Id")))
                         (DBName (packPTH "id")))
                        ((FTTypeCon Nothing) (packPTH "QuestionId")))
                       SqlInt64)
                      [])
                     True)
                    ((ForeignRef (HaskellName (packPTH "Question")))
                       ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                [packPTH "json"])
               [((((((FieldDef (HaskellName (packPTH "text")))
                       (DBName (packPTH "text")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for text")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "option")))
                       (DBName (packPTH "option")))
                      ((FTTypeCon Nothing) (packPTH "QuestionOptions")))
                     (SqlOther (packPTH "SqlType unset for option")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "answer")))
                       (DBName (packPTH "answer")))
                      ((FTTypeCon Nothing) (packPTH "QuestionAnswer")))
                     (SqlOther (packPTH "SqlType unset for answer")))
                    [])
                   True)
                  NoReference])
              [])
             [])
            [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
           (Data.Map.Internal.fromList []))
          False
          {entityFields = [((((((FieldDef (HaskellName (packPTH "text")))
                                  (DBName (packPTH "text")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "option")))
                                  (DBName (packPTH "option")))
                                 ((FTTypeCon Nothing) (packPTH "QuestionOptions")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy QuestionOptions)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "answer")))
                                  (DBName (packPTH "answer")))
                                 ((FTTypeCon Nothing) (packPTH "QuestionAnswer")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy QuestionAnswer)))
                               [])
                              True)
                             NoReference],
           entityId = ((((((FieldDef (HaskellName (packPTH "Id")))
                             (DBName (packPTH "id")))
                            ((FTTypeCon Nothing) (packPTH "QuestionId")))
                           (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                              (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                          [])
                         True)
                        ((ForeignRef (HaskellName (packPTH "Question")))
                           ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))},
        (((((((((EntityDef (HaskellName (packPTH "Quiz")))
                  (DBName (packPTH "quiz")))
                 (((((((FieldDef (HaskellName (packPTH "Id")))
                         (DBName (packPTH "id")))
                        ((FTTypeCon Nothing) (packPTH "QuizId")))
                       SqlInt64)
                      [])
                     True)
                    ((ForeignRef (HaskellName (packPTH "Quiz")))
                       ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                [packPTH "json"])
               [((((((FieldDef (HaskellName (packPTH "name")))
                       (DBName (packPTH "name")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for name")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "description")))
                       (DBName (packPTH "description")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for description")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "creationDate")))
                       (DBName (packPTH "creation_date")))
                      ((FTTypeCon Nothing) (packPTH "UTCTime")))
                     (SqlOther (packPTH "SqlType unset for creationDate")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "passingNumber")))
                       (DBName (packPTH "passing_number")))
                      ((FTTypeCon Nothing) (packPTH "Int")))
                     (SqlOther (packPTH "SqlType unset for passingNumber")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "question")))
                       (DBName (packPTH "question")))
                      ((FTTypeCon Nothing) (packPTH "Question")))
                     (SqlOther (packPTH "SqlType unset for question")))
                    [])
                   True)
                  (EmbedRef
                     ((EmbedEntityDef (HaskellName (packPTH "Question")))
                        [((EmbedFieldDef (DBName (packPTH "text"))) Nothing) Nothing,
                         ((EmbedFieldDef (DBName (packPTH "option"))) Nothing) Nothing,
                         ((EmbedFieldDef (DBName (packPTH "answer"))) Nothing) Nothing]))])
              [])
             [])
            [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
           (Data.Map.Internal.fromList []))
          False
          {entityFields = [((((((FieldDef (HaskellName (packPTH "name")))
                                  (DBName (packPTH "name")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "description")))
                                  (DBName (packPTH "description")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "creationDate")))
                                  (DBName (packPTH "creation_date")))
                                 ((FTTypeCon Nothing) (packPTH "UTCTime")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy UTCTime)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "passingNumber")))
                                  (DBName (packPTH "passing_number")))
                                 ((FTTypeCon Nothing) (packPTH "Int")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Int)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "question")))
                                  (DBName (packPTH "question")))
                                 ((FTTypeCon Nothing) (packPTH "Question")))
                                SqlString)
                               [])
                              True)
                             (EmbedRef
                                ((EmbedEntityDef (HaskellName (packPTH "Question")))
                                   [((EmbedFieldDef (DBName (packPTH "text"))) Nothing) Nothing,
                                    ((EmbedFieldDef (DBName (packPTH "option"))) Nothing) Nothing,
                                    ((EmbedFieldDef (DBName (packPTH "answer"))) Nothing)
                                      Nothing]))],
           entityId = ((((((FieldDef (HaskellName (packPTH "Id")))
                             (DBName (packPTH "id")))
                            ((FTTypeCon Nothing) (packPTH "QuizId")))
                           (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                              (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                          [])
                         True)
                        ((ForeignRef (HaskellName (packPTH "Quiz")))
                           ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))},
        (((((((((EntityDef (HaskellName (packPTH "QuizResult")))
                  (DBName (packPTH "quiz_result")))
                 (((((((FieldDef (HaskellName (packPTH "Id")))
                         (DBName (packPTH "id")))
                        ((FTTypeCon Nothing) (packPTH "QuizResultId")))
                       SqlInt64)
                      [])
                     True)
                    ((ForeignRef (HaskellName (packPTH "QuizResult")))
                       ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                [packPTH "json"])
               [((((((FieldDef (HaskellName (packPTH "testKey")))
                       (DBName (packPTH "test_key")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for testKey")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "result")))
                       (DBName (packPTH "result")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for result")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "passingDate")))
                       (DBName (packPTH "passing_date")))
                      ((FTTypeCon Nothing) (packPTH "UTCTime")))
                     (SqlOther (packPTH "SqlType unset for passingDate")))
                    [])
                   True)
                  NoReference])
              [])
             [])
            [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
           (Data.Map.Internal.fromList []))
          False
          {entityFields = [((((((FieldDef (HaskellName (packPTH "testKey")))
                                  (DBName (packPTH "test_key")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "result")))
                                  (DBName (packPTH "result")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "passingDate")))
                                  (DBName (packPTH "passing_date")))
                                 ((FTTypeCon Nothing) (packPTH "UTCTime")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy UTCTime)))
                               [])
                              True)
                             NoReference],
           entityId = ((((((FieldDef (HaskellName (packPTH "Id")))
                             (DBName (packPTH "id")))
                            ((FTTypeCon Nothing) (packPTH "QuizResultId")))
                           (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                              (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                          [])
                         True)
                        ((ForeignRef (HaskellName (packPTH "QuizResult")))
                           ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))},
        (((((((((EntityDef (HaskellName (packPTH "User")))
                  (DBName (packPTH "user")))
                 (((((((FieldDef (HaskellName (packPTH "Id")))
                         (DBName (packPTH "id")))
                        ((FTTypeCon Nothing) (packPTH "UserId")))
                       SqlInt64)
                      [])
                     True)
                    ((ForeignRef (HaskellName (packPTH "User")))
                       ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                [packPTH "json"])
               [((((((FieldDef (HaskellName (packPTH "username")))
                       (DBName (packPTH "username")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for username")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "password")))
                       (DBName (packPTH "password")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for password")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "email")))
                       (DBName (packPTH "email")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for email")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "avatar")))
                       (DBName (packPTH "avatar")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for avatar")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "firstName")))
                       (DBName (packPTH "first_name")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for firstName")))
                    [packPTH "Maybe"])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "secondName")))
                       (DBName (packPTH "second_name")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for secondName")))
                    [packPTH "Maybe"])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "birthDay")))
                       (DBName (packPTH "birth_day")))
                      ((FTTypeCon Nothing) (packPTH "UTCTime")))
                     (SqlOther (packPTH "SqlType unset for birthDay")))
                    [packPTH "Maybe"])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "sex")))
                       (DBName (packPTH "sex")))
                      ((FTTypeCon Nothing) (packPTH "Gender")))
                     (SqlOther (packPTH "SqlType unset for sex")))
                    [packPTH "Maybe"])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "createdQuizzes")))
                       (DBName (packPTH "created_quizzes")))
                      (FTList ((FTTypeCon Nothing) (packPTH "QuizId"))))
                     (SqlOther (packPTH "SqlType unset for createdQuizzes")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "passedQuizzes")))
                       (DBName (packPTH "passed_quizzes")))
                      (FTList ((FTTypeCon Nothing) (packPTH "QuizResult"))))
                     (SqlOther (packPTH "SqlType unset for passedQuizzes")))
                    [])
                   True)
                  (EmbedRef
                     ((EmbedEntityDef (HaskellName (packPTH "QuizResult")))
                        [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing) Nothing,
                         ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                         ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                           Nothing]))])
              [])
             [])
            [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
           (Data.Map.Internal.fromList []))
          False
          {entityFields = [((((((FieldDef (HaskellName (packPTH "username")))
                                  (DBName (packPTH "username")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "password")))
                                  (DBName (packPTH "password")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "email")))
                                  (DBName (packPTH "email")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "avatar")))
                                  (DBName (packPTH "avatar")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "firstName")))
                                  (DBName (packPTH "first_name")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [packPTH "Maybe"])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "secondName")))
                                  (DBName (packPTH "second_name")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [packPTH "Maybe"])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "birthDay")))
                                  (DBName (packPTH "birth_day")))
                                 ((FTTypeCon Nothing) (packPTH "UTCTime")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy UTCTime)))
                               [packPTH "Maybe"])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "sex")))
                                  (DBName (packPTH "sex")))
                                 ((FTTypeCon Nothing) (packPTH "Gender")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Gender)))
                               [packPTH "Maybe"])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "createdQuizzes")))
                                  (DBName (packPTH "created_quizzes")))
                                 (FTList ((FTTypeCon Nothing) (packPTH "QuizId"))))
                                SqlString)
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "passedQuizzes")))
                                  (DBName (packPTH "passed_quizzes")))
                                 (FTList ((FTTypeCon Nothing) (packPTH "QuizResult"))))
                                SqlString)
                               [])
                              True)
                             (EmbedRef
                                ((EmbedEntityDef (HaskellName (packPTH "QuizResult")))
                                   [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing) Nothing,
                                    ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                                    ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                                      Nothing]))],
           entityId = ((((((FieldDef (HaskellName (packPTH "Id")))
                             (DBName (packPTH "id")))
                            ((FTTypeCon Nothing) (packPTH "UserId")))
                           (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                              (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                          [])
                         True)
                        ((ForeignRef (HaskellName (packPTH "User")))
                           ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))}])
  ======>
    instance PersistField Question where
      toPersistValue
        = \ ent_a1aqF
            -> (PersistMap
                  $ ((zip ((map Data.Text.pack) ["text", "option", "answer"]))
                       ((map toPersistValue) $ (toPersistFields ent_a1aqF))))
      fromPersistValue
        = ((\ x_a1aqG
              -> let
                   columns_a1aqH
                     = unordered-containers-0.2.9.0:Data.HashMap.Strict.fromList x_a1aqG
                 in
                   (fromPersistValues
                      $ ((map
                            (\ name_a1aqI
                               -> case
                                      (unordered-containers-0.2.9.0:Data.HashMap.Base.lookup
                                         (Data.Text.pack name_a1aqI))
                                        columns_a1aqH
                                  of
                                    Just v_a1aqJ -> v_a1aqJ
                                    Nothing -> PersistNull))
                           $ ["text", "option", "answer"])))
             Control.Monad.<=< getPersistMap)
    instance persistent-2.8.1:Database.Persist.Sql.Class.PersistFieldSql Question where
      persistent-2.8.1:Database.Persist.Sql.Class.sqlType _ = SqlString
    instance PersistField Quiz where
      toPersistValue
        = \ ent_a1aqK
            -> (PersistMap
                  $ ((zip
                        ((map Data.Text.pack)
                           ["name", "description", "creationDate", "passingNumber",
                            "question"]))
                       ((map toPersistValue) $ (toPersistFields ent_a1aqK))))
      fromPersistValue
        = ((\ x_a1aqL
              -> let
                   columns_a1aqM
                     = unordered-containers-0.2.9.0:Data.HashMap.Strict.fromList x_a1aqL
                 in
                   (fromPersistValues
                      $ ((map
                            (\ name_a1aqN
                               -> case
                                      (unordered-containers-0.2.9.0:Data.HashMap.Base.lookup
                                         (Data.Text.pack name_a1aqN))
                                        columns_a1aqM
                                  of
                                    Just v_a1aqO -> v_a1aqO
                                    Nothing -> PersistNull))
                           $ ["name", "description", "creationDate", "passingNumber",
                              "question"])))
             Control.Monad.<=< getPersistMap)
    instance persistent-2.8.1:Database.Persist.Sql.Class.PersistFieldSql Quiz where
      persistent-2.8.1:Database.Persist.Sql.Class.sqlType _ = SqlString
    instance PersistField QuizResult where
      toPersistValue
        = \ ent_a1aqP
            -> (PersistMap
                  $ ((zip
                        ((map Data.Text.pack) ["testKey", "result", "passingDate"]))
                       ((map toPersistValue) $ (toPersistFields ent_a1aqP))))
      fromPersistValue
        = ((\ x_a1aqQ
              -> let
                   columns_a1aqR
                     = unordered-containers-0.2.9.0:Data.HashMap.Strict.fromList x_a1aqQ
                 in
                   (fromPersistValues
                      $ ((map
                            (\ name_a1aqS
                               -> case
                                      (unordered-containers-0.2.9.0:Data.HashMap.Base.lookup
                                         (Data.Text.pack name_a1aqS))
                                        columns_a1aqR
                                  of
                                    Just v_a1aqT -> v_a1aqT
                                    Nothing -> PersistNull))
                           $ ["testKey", "result", "passingDate"])))
             Control.Monad.<=< getPersistMap)
    instance persistent-2.8.1:Database.Persist.Sql.Class.PersistFieldSql QuizResult where
      persistent-2.8.1:Database.Persist.Sql.Class.sqlType _ = SqlString
    instance PersistField User where
      toPersistValue
        = \ ent_a1aqU
            -> (PersistMap
                  $ ((zip
                        ((map Data.Text.pack)
                           ["username", "password", "email", "avatar", "firstName",
                            "secondName", "birthDay", "sex", "createdQuizzes",
                            "passedQuizzes"]))
                       ((map toPersistValue) $ (toPersistFields ent_a1aqU))))
      fromPersistValue
        = ((\ x_a1aqV
              -> let
                   columns_a1aqW
                     = unordered-containers-0.2.9.0:Data.HashMap.Strict.fromList x_a1aqV
                 in
                   (fromPersistValues
                      $ ((map
                            (\ name_a1aqX
                               -> case
                                      (unordered-containers-0.2.9.0:Data.HashMap.Base.lookup
                                         (Data.Text.pack name_a1aqX))
                                        columns_a1aqW
                                  of
                                    Just v_a1aqY -> v_a1aqY
                                    Nothing -> PersistNull))
                           $ ["username", "password", "email", "avatar", "firstName",
                              "secondName", "birthDay", "sex", "createdQuizzes",
                              "passedQuizzes"])))
             Control.Monad.<=< getPersistMap)
    instance persistent-2.8.1:Database.Persist.Sql.Class.PersistFieldSql User where
      persistent-2.8.1:Database.Persist.Sql.Class.sqlType _ = SqlString
    data Question
      = Question {questionText :: !Text,
                  questionOption :: !QuestionOptions,
                  questionAnswer :: !QuestionAnswer}
      deriving (Eq, Read, Show, Generic)
    type QuestionId = Key Question
    instance PersistEntity Question where
      type PersistEntityBackend Question = MongoContext
      data Unique Question
      newtype Key Question
        = QuestionKey {unQuestionKey :: (BackendKey MongoContext)}
        deriving (Show,
                  Read,
                  Eq,
                  Ord,
                  path-pieces-0.2.1:Web.PathPieces.PathPiece,
                  http-api-data-0.3.7.2:Web.Internal.HttpApiData.ToHttpApiData,
                  http-api-data-0.3.7.2:Web.Internal.HttpApiData.FromHttpApiData,
                  PersistField,
                  persistent-2.8.1:Database.Persist.Sql.Class.PersistFieldSql,
                  ToJSON,
                  FromJSON)
      data EntityField Question typ
        = typ ~ Key Question => QuestionId |
          typ ~ Text => QuestionText |
          typ ~ QuestionOptions => QuestionOption |
          typ ~ QuestionAnswer => QuestionAnswer
      keyToValues
        = ((ghc-prim-0.5.1.1:GHC.Types.: [])
             . (toPersistValue . unQuestionKey))
      keyFromValues
        = ((fmap QuestionKey)
             . (fromPersistValue . Database.Persist.TH.headNote))
      entityDef _
        = (((((((((EntityDef (HaskellName (packPTH "Question")))
                    (DBName (packPTH "question")))
                   (((((((FieldDef (HaskellName (packPTH "Id")))
                           (DBName (packPTH "id")))
                          ((FTTypeCon Nothing) (packPTH "QuestionId")))
                         SqlInt64)
                        [])
                       True)
                      ((ForeignRef (HaskellName (packPTH "Question")))
                         ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                  [packPTH "json"])
                 [((((((FieldDef (HaskellName (packPTH "text")))
                         (DBName (packPTH "text")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "option")))
                         (DBName (packPTH "option")))
                        ((FTTypeCon Nothing) (packPTH "QuestionOptions")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "answer")))
                         (DBName (packPTH "answer")))
                        ((FTTypeCon Nothing) (packPTH "QuestionAnswer")))
                       SqlString)
                      [])
                     True)
                    NoReference])
                [])
               [])
              [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
             (Data.Map.Internal.fromList []))
            False
      toPersistFields (Question x_a1aqZ x_a1ar0 x_a1ar1)
        = [SomePersistField x_a1aqZ, SomePersistField x_a1ar0,
           SomePersistField x_a1ar1]
      fromPersistValues [x1_a1ar3, x2_a1ar4, x3_a1ar5]
        = Question
            <$>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "text")))
                 . fromPersistValue)
                x1_a1ar3
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "option")))
                 . fromPersistValue)
                x2_a1ar4
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "answer")))
                 . fromPersistValue)
                x3_a1ar5
      fromPersistValues x_a1ar2
        = (Left
             $ ((mappend (packPTH "Question: fromPersistValues failed on: "))
                  (Data.Text.pack $ (show x_a1ar2))))
      persistUniqueToFieldNames _
        = error "Degenerate case, should never happen"
      persistUniqueToValues _
        = error "Degenerate case, should never happen"
      persistUniqueKeys
        (Question _text_a1ar6 _option_a1ar7 _answer_a1ar8)
        = []
      persistFieldDef QuestionId
        = ((((((FieldDef (HaskellName (packPTH "Id")))
                 (DBName (packPTH "id")))
                ((FTTypeCon Nothing) (packPTH "QuestionId")))
               SqlInt64)
              [])
             True)
            ((ForeignRef (HaskellName (packPTH "Question")))
               ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))
      persistFieldDef QuestionText
        = ((((((FieldDef (HaskellName (packPTH "text")))
                 (DBName (packPTH "text")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef QuestionOption
        = ((((((FieldDef (HaskellName (packPTH "option")))
                 (DBName (packPTH "option")))
                ((FTTypeCon Nothing) (packPTH "QuestionOptions")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef QuestionAnswer
        = ((((((FieldDef (HaskellName (packPTH "answer")))
                 (DBName (packPTH "answer")))
                ((FTTypeCon Nothing) (packPTH "QuestionAnswer")))
               SqlString)
              [])
             True)
            NoReference
      persistIdField = QuestionId
      fieldLens QuestionId
        = (lensPTH entityKey)
            (\ Entity _ value_a1ar9 key_a1ara
               -> (Entity key_a1ara) value_a1ar9)
      fieldLens QuestionText
        = (lensPTH (questionText . entityVal))
            (\ Entity key_a1arb value_a1arc x_a1ard
               -> (Entity key_a1arb) value_a1arc {questionText = x_a1ard})
      fieldLens QuestionOption
        = (lensPTH (questionOption . entityVal))
            (\ Entity key_a1arb value_a1arc x_a1ard
               -> (Entity key_a1arb) value_a1arc {questionOption = x_a1ard})
      fieldLens QuestionAnswer
        = (lensPTH (questionAnswer . entityVal))
            (\ Entity key_a1arb value_a1arc x_a1ard
               -> (Entity key_a1arb) value_a1arc {questionAnswer = x_a1ard})
    instance ToBackendKey MongoContext Question where
      toBackendKey = unQuestionKey
      fromBackendKey = QuestionKey
    data Quiz
      = Quiz {quizName :: !Text,
              quizDescription :: !Text,
              quizCreationDate :: !UTCTime,
              quizPassingNumber :: !Int,
              quizQuestion :: !Question}
      deriving (Eq, Read, Show, Generic)
    type QuizId = Key Quiz
    instance PersistEntity Quiz where
      type PersistEntityBackend Quiz = MongoContext
      data Unique Quiz
      newtype Key Quiz
        = QuizKey {unQuizKey :: (BackendKey MongoContext)}
        deriving (Show,
                  Read,
                  Eq,
                  Ord,
                  path-pieces-0.2.1:Web.PathPieces.PathPiece,
                  http-api-data-0.3.7.2:Web.Internal.HttpApiData.ToHttpApiData,
                  http-api-data-0.3.7.2:Web.Internal.HttpApiData.FromHttpApiData,
                  PersistField,
                  persistent-2.8.1:Database.Persist.Sql.Class.PersistFieldSql,
                  ToJSON,
                  FromJSON)
      data EntityField Quiz typ
        = typ ~ Key Quiz => QuizId |
          typ ~ Text => QuizName |
          typ ~ Text => QuizDescription |
          typ ~ UTCTime => QuizCreationDate |
          typ ~ Int => QuizPassingNumber |
          typ ~ Question => QuizQuestion
      keyToValues
        = ((ghc-prim-0.5.1.1:GHC.Types.: [])
             . (toPersistValue . unQuizKey))
      keyFromValues
        = ((fmap QuizKey)
             . (fromPersistValue . Database.Persist.TH.headNote))
      entityDef _
        = (((((((((EntityDef (HaskellName (packPTH "Quiz")))
                    (DBName (packPTH "quiz")))
                   (((((((FieldDef (HaskellName (packPTH "Id")))
                           (DBName (packPTH "id")))
                          ((FTTypeCon Nothing) (packPTH "QuizId")))
                         SqlInt64)
                        [])
                       True)
                      ((ForeignRef (HaskellName (packPTH "Quiz")))
                         ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                  [packPTH "json"])
                 [((((((FieldDef (HaskellName (packPTH "name")))
                         (DBName (packPTH "name")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "description")))
                         (DBName (packPTH "description")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "creationDate")))
                         (DBName (packPTH "creation_date")))
                        ((FTTypeCon Nothing) (packPTH "UTCTime")))
                       SqlDayTime)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "passingNumber")))
                         (DBName (packPTH "passing_number")))
                        ((FTTypeCon Nothing) (packPTH "Int")))
                       SqlInt64)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "question")))
                         (DBName (packPTH "question")))
                        ((FTTypeCon Nothing) (packPTH "Question")))
                       SqlString)
                      [])
                     True)
                    (EmbedRef
                       ((EmbedEntityDef (HaskellName (packPTH "Question")))
                          [((EmbedFieldDef (DBName (packPTH "text"))) Nothing) Nothing,
                           ((EmbedFieldDef (DBName (packPTH "option"))) Nothing) Nothing,
                           ((EmbedFieldDef (DBName (packPTH "answer"))) Nothing) Nothing]))])
                [])
               [])
              [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
             (Data.Map.Internal.fromList []))
            False
      toPersistFields (Quiz x_a1are x_a1arf x_a1arg x_a1arh x_a1ari)
        = [SomePersistField x_a1are, SomePersistField x_a1arf,
           SomePersistField x_a1arg, SomePersistField x_a1arh,
           SomePersistField x_a1ari]
      fromPersistValues
        [x1_a1ark, x2_a1arl, x3_a1arm, x4_a1arn, x5_a1aro]
        = Quiz
            <$>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "name")))
                 . fromPersistValue)
                x1_a1ark
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "description")))
                 . fromPersistValue)
                x2_a1arl
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "creationDate")))
                 . fromPersistValue)
                x3_a1arm
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "passingNumber")))
                 . fromPersistValue)
                x4_a1arn
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "question")))
                 . fromPersistValue)
                x5_a1aro
      fromPersistValues x_a1arj
        = (Left
             $ ((mappend (packPTH "Quiz: fromPersistValues failed on: "))
                  (Data.Text.pack $ (show x_a1arj))))
      persistUniqueToFieldNames _
        = error "Degenerate case, should never happen"
      persistUniqueToValues _
        = error "Degenerate case, should never happen"
      persistUniqueKeys
        (Quiz _name_a1arp
              _description_a1arq
              _creationDate_a1arr
              _passingNumber_a1ars
              _question_a1art)
        = []
      persistFieldDef QuizId
        = ((((((FieldDef (HaskellName (packPTH "Id")))
                 (DBName (packPTH "id")))
                ((FTTypeCon Nothing) (packPTH "QuizId")))
               SqlInt64)
              [])
             True)
            ((ForeignRef (HaskellName (packPTH "Quiz")))
               ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))
      persistFieldDef QuizName
        = ((((((FieldDef (HaskellName (packPTH "name")))
                 (DBName (packPTH "name")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef QuizDescription
        = ((((((FieldDef (HaskellName (packPTH "description")))
                 (DBName (packPTH "description")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef QuizCreationDate
        = ((((((FieldDef (HaskellName (packPTH "creationDate")))
                 (DBName (packPTH "creation_date")))
                ((FTTypeCon Nothing) (packPTH "UTCTime")))
               SqlDayTime)
              [])
             True)
            NoReference
      persistFieldDef QuizPassingNumber
        = ((((((FieldDef (HaskellName (packPTH "passingNumber")))
                 (DBName (packPTH "passing_number")))
                ((FTTypeCon Nothing) (packPTH "Int")))
               SqlInt64)
              [])
             True)
            NoReference
      persistFieldDef QuizQuestion
        = ((((((FieldDef (HaskellName (packPTH "question")))
                 (DBName (packPTH "question")))
                ((FTTypeCon Nothing) (packPTH "Question")))
               SqlString)
              [])
             True)
            (EmbedRef
               ((EmbedEntityDef (HaskellName (packPTH "Question")))
                  [((EmbedFieldDef (DBName (packPTH "text"))) Nothing) Nothing,
                   ((EmbedFieldDef (DBName (packPTH "option"))) Nothing) Nothing,
                   ((EmbedFieldDef (DBName (packPTH "answer"))) Nothing) Nothing]))
      persistIdField = QuizId
      fieldLens QuizId
        = (lensPTH entityKey)
            (\ Entity _ value_a1aru key_a1arv
               -> (Entity key_a1arv) value_a1aru)
      fieldLens QuizName
        = (lensPTH (quizName . entityVal))
            (\ Entity key_a1arw value_a1arx x_a1ary
               -> (Entity key_a1arw) value_a1arx {quizName = x_a1ary})
      fieldLens QuizDescription
        = (lensPTH (quizDescription . entityVal))
            (\ Entity key_a1arw value_a1arx x_a1ary
               -> (Entity key_a1arw) value_a1arx {quizDescription = x_a1ary})
      fieldLens QuizCreationDate
        = (lensPTH (quizCreationDate . entityVal))
            (\ Entity key_a1arw value_a1arx x_a1ary
               -> (Entity key_a1arw) value_a1arx {quizCreationDate = x_a1ary})
      fieldLens QuizPassingNumber
        = (lensPTH (quizPassingNumber . entityVal))
            (\ Entity key_a1arw value_a1arx x_a1ary
               -> (Entity key_a1arw) value_a1arx {quizPassingNumber = x_a1ary})
      fieldLens QuizQuestion
        = (lensPTH (quizQuestion . entityVal))
            (\ Entity key_a1arw value_a1arx x_a1ary
               -> (Entity key_a1arw) value_a1arx {quizQuestion = x_a1ary})
    instance ToBackendKey MongoContext Quiz where
      toBackendKey = unQuizKey
      fromBackendKey = QuizKey
    data QuizResult
      = QuizResult {quizResultTestKey :: !Text,
                    quizResultResult :: !Text,
                    quizResultPassingDate :: !UTCTime}
      deriving (Eq, Read, Show, Generic)
    type QuizResultId = Key QuizResult
    instance PersistEntity QuizResult where
      type PersistEntityBackend QuizResult = MongoContext
      data Unique QuizResult
      newtype Key QuizResult
        = QuizResultKey {unQuizResultKey :: (BackendKey MongoContext)}
        deriving (Show,
                  Read,
                  Eq,
                  Ord,
                  path-pieces-0.2.1:Web.PathPieces.PathPiece,
                  http-api-data-0.3.7.2:Web.Internal.HttpApiData.ToHttpApiData,
                  http-api-data-0.3.7.2:Web.Internal.HttpApiData.FromHttpApiData,
                  PersistField,
                  persistent-2.8.1:Database.Persist.Sql.Class.PersistFieldSql,
                  ToJSON,
                  FromJSON)
      data EntityField QuizResult typ
        = typ ~ Key QuizResult => QuizResultId |
          typ ~ Text => QuizResultTestKey |
          typ ~ Text => QuizResultResult |
          typ ~ UTCTime => QuizResultPassingDate
      keyToValues
        = ((ghc-prim-0.5.1.1:GHC.Types.: [])
             . (toPersistValue . unQuizResultKey))
      keyFromValues
        = ((fmap QuizResultKey)
             . (fromPersistValue . Database.Persist.TH.headNote))
      entityDef _
        = (((((((((EntityDef (HaskellName (packPTH "QuizResult")))
                    (DBName (packPTH "quiz_result")))
                   (((((((FieldDef (HaskellName (packPTH "Id")))
                           (DBName (packPTH "id")))
                          ((FTTypeCon Nothing) (packPTH "QuizResultId")))
                         SqlInt64)
                        [])
                       True)
                      ((ForeignRef (HaskellName (packPTH "QuizResult")))
                         ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                  [packPTH "json"])
                 [((((((FieldDef (HaskellName (packPTH "testKey")))
                         (DBName (packPTH "test_key")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "result")))
                         (DBName (packPTH "result")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "passingDate")))
                         (DBName (packPTH "passing_date")))
                        ((FTTypeCon Nothing) (packPTH "UTCTime")))
                       SqlDayTime)
                      [])
                     True)
                    NoReference])
                [])
               [])
              [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
             (Data.Map.Internal.fromList []))
            False
      toPersistFields (QuizResult x_a1arz x_a1arA x_a1arB)
        = [SomePersistField x_a1arz, SomePersistField x_a1arA,
           SomePersistField x_a1arB]
      fromPersistValues [x1_a1arD, x2_a1arE, x3_a1arF]
        = QuizResult
            <$>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "testKey")))
                 . fromPersistValue)
                x1_a1arD
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "result")))
                 . fromPersistValue)
                x2_a1arE
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "passingDate")))
                 . fromPersistValue)
                x3_a1arF
      fromPersistValues x_a1arC
        = (Left
             $ ((mappend (packPTH "QuizResult: fromPersistValues failed on: "))
                  (Data.Text.pack $ (show x_a1arC))))
      persistUniqueToFieldNames _
        = error "Degenerate case, should never happen"
      persistUniqueToValues _
        = error "Degenerate case, should never happen"
      persistUniqueKeys
        (QuizResult _testKey_a1arG _result_a1arH _passingDate_a1arI)
        = []
      persistFieldDef QuizResultId
        = ((((((FieldDef (HaskellName (packPTH "Id")))
                 (DBName (packPTH "id")))
                ((FTTypeCon Nothing) (packPTH "QuizResultId")))
               SqlInt64)
              [])
             True)
            ((ForeignRef (HaskellName (packPTH "QuizResult")))
               ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))
      persistFieldDef QuizResultTestKey
        = ((((((FieldDef (HaskellName (packPTH "testKey")))
                 (DBName (packPTH "test_key")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef QuizResultResult
        = ((((((FieldDef (HaskellName (packPTH "result")))
                 (DBName (packPTH "result")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef QuizResultPassingDate
        = ((((((FieldDef (HaskellName (packPTH "passingDate")))
                 (DBName (packPTH "passing_date")))
                ((FTTypeCon Nothing) (packPTH "UTCTime")))
               SqlDayTime)
              [])
             True)
            NoReference
      persistIdField = QuizResultId
      fieldLens QuizResultId
        = (lensPTH entityKey)
            (\ Entity _ value_a1arJ key_a1arK
               -> (Entity key_a1arK) value_a1arJ)
      fieldLens QuizResultTestKey
        = (lensPTH (quizResultTestKey . entityVal))
            (\ Entity key_a1arL value_a1arM x_a1arN
               -> (Entity key_a1arL) value_a1arM {quizResultTestKey = x_a1arN})
      fieldLens QuizResultResult
        = (lensPTH (quizResultResult . entityVal))
            (\ Entity key_a1arL value_a1arM x_a1arN
               -> (Entity key_a1arL) value_a1arM {quizResultResult = x_a1arN})
      fieldLens QuizResultPassingDate
        = (lensPTH (quizResultPassingDate . entityVal))
            (\ Entity key_a1arL value_a1arM x_a1arN
               -> (Entity key_a1arL)
                    value_a1arM {quizResultPassingDate = x_a1arN})
    instance ToBackendKey MongoContext QuizResult where
      toBackendKey = unQuizResultKey
      fromBackendKey = QuizResultKey
    data User
      = User {userUsername :: !Text,
              userPassword :: !Text,
              userEmail :: !Text,
              userAvatar :: !Text,
              userFirstName :: !(Maybe Text),
              userSecondName :: !(Maybe Text),
              userBirthDay :: !(Maybe UTCTime),
              userSex :: !(Maybe Gender),
              userCreatedQuizzes :: ![QuizId],
              userPassedQuizzes :: ![QuizResult]}
      deriving (Eq, Read, Show, Generic)
    type UserId = Key User
    instance PersistEntity User where
      type PersistEntityBackend User = MongoContext
      data Unique User
      newtype Key User
        = UserKey {unUserKey :: (BackendKey MongoContext)}
        deriving (Show,
                  Read,
                  Eq,
                  Ord,
                  path-pieces-0.2.1:Web.PathPieces.PathPiece,
                  http-api-data-0.3.7.2:Web.Internal.HttpApiData.ToHttpApiData,
                  http-api-data-0.3.7.2:Web.Internal.HttpApiData.FromHttpApiData,
                  PersistField,
                  persistent-2.8.1:Database.Persist.Sql.Class.PersistFieldSql,
                  ToJSON,
                  FromJSON)
      data EntityField User typ
        = typ ~ Key User => UserId |
          typ ~ Text => UserUsername |
          typ ~ Text => UserPassword |
          typ ~ Text => UserEmail |
          typ ~ Text => UserAvatar |
          typ ~ Maybe Text => UserFirstName |
          typ ~ Maybe Text => UserSecondName |
          typ ~ Maybe UTCTime => UserBirthDay |
          typ ~ Maybe Gender => UserSex |
          typ ~ [QuizId] => UserCreatedQuizzes |
          typ ~ [QuizResult] => UserPassedQuizzes
      keyToValues
        = ((ghc-prim-0.5.1.1:GHC.Types.: [])
             . (toPersistValue . unUserKey))
      keyFromValues
        = ((fmap UserKey)
             . (fromPersistValue . Database.Persist.TH.headNote))
      entityDef _
        = (((((((((EntityDef (HaskellName (packPTH "User")))
                    (DBName (packPTH "user")))
                   (((((((FieldDef (HaskellName (packPTH "Id")))
                           (DBName (packPTH "id")))
                          ((FTTypeCon Nothing) (packPTH "UserId")))
                         SqlInt64)
                        [])
                       True)
                      ((ForeignRef (HaskellName (packPTH "User")))
                         ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                  [packPTH "json"])
                 [((((((FieldDef (HaskellName (packPTH "username")))
                         (DBName (packPTH "username")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "password")))
                         (DBName (packPTH "password")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "email")))
                         (DBName (packPTH "email")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "avatar")))
                         (DBName (packPTH "avatar")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "firstName")))
                         (DBName (packPTH "first_name")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [packPTH "Maybe"])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "secondName")))
                         (DBName (packPTH "second_name")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [packPTH "Maybe"])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "birthDay")))
                         (DBName (packPTH "birth_day")))
                        ((FTTypeCon Nothing) (packPTH "UTCTime")))
                       SqlDayTime)
                      [packPTH "Maybe"])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "sex")))
                         (DBName (packPTH "sex")))
                        ((FTTypeCon Nothing) (packPTH "Gender")))
                       SqlString)
                      [packPTH "Maybe"])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "createdQuizzes")))
                         (DBName (packPTH "created_quizzes")))
                        (FTList ((FTTypeCon Nothing) (packPTH "QuizId"))))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "passedQuizzes")))
                         (DBName (packPTH "passed_quizzes")))
                        (FTList ((FTTypeCon Nothing) (packPTH "QuizResult"))))
                       SqlString)
                      [])
                     True)
                    (EmbedRef
                       ((EmbedEntityDef (HaskellName (packPTH "QuizResult")))
                          [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing) Nothing,
                           ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                           ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                             Nothing]))])
                [])
               [])
              [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
             (Data.Map.Internal.fromList []))
            False
      toPersistFields
        (User x_a1arO
              x_a1arP
              x_a1arQ
              x_a1arR
              x_a1arS
              x_a1arT
              x_a1arU
              x_a1arV
              x_a1arW
              x_a1arX)
        = [SomePersistField x_a1arO, SomePersistField x_a1arP,
           SomePersistField x_a1arQ, SomePersistField x_a1arR,
           SomePersistField x_a1arS, SomePersistField x_a1arT,
           SomePersistField x_a1arU, SomePersistField x_a1arV,
           SomePersistField x_a1arW, SomePersistField x_a1arX]
      fromPersistValues
        [x1_a1arZ,
         x2_a1as0,
         x3_a1as1,
         x4_a1as2,
         x5_a1as3,
         x6_a1as4,
         x7_a1as5,
         x8_a1as6,
         x9_a1as7,
         x10_a1as8]
        = User
            <$>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "username")))
                 . fromPersistValue)
                x1_a1arZ
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "password")))
                 . fromPersistValue)
                x2_a1as0
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "email")))
                 . fromPersistValue)
                x3_a1as1
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "avatar")))
                 . fromPersistValue)
                x4_a1as2
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "firstName")))
                 . fromPersistValue)
                x5_a1as3
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "secondName")))
                 . fromPersistValue)
                x6_a1as4
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "birthDay")))
                 . fromPersistValue)
                x7_a1as5
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "sex")))
                 . fromPersistValue)
                x8_a1as6
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "createdQuizzes")))
                 . fromPersistValue)
                x9_a1as7
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "passedQuizzes")))
                 . fromPersistValue)
                x10_a1as8
      fromPersistValues x_a1arY
        = (Left
             $ ((mappend (packPTH "User: fromPersistValues failed on: "))
                  (Data.Text.pack $ (show x_a1arY))))
      persistUniqueToFieldNames _
        = error "Degenerate case, should never happen"
      persistUniqueToValues _
        = error "Degenerate case, should never happen"
      persistUniqueKeys
        (User _username_a1as9
              _password_a1asa
              _email_a1asb
              _avatar_a1asc
              _firstName_a1asd
              _secondName_a1ase
              _birthDay_a1asf
              _sex_a1asg
              _createdQuizzes_a1ash
              _passedQuizzes_a1asi)
        = []
      persistFieldDef UserId
        = ((((((FieldDef (HaskellName (packPTH "Id")))
                 (DBName (packPTH "id")))
                ((FTTypeCon Nothing) (packPTH "UserId")))
               SqlInt64)
              [])
             True)
            ((ForeignRef (HaskellName (packPTH "User")))
               ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))
      persistFieldDef UserUsername
        = ((((((FieldDef (HaskellName (packPTH "username")))
                 (DBName (packPTH "username")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef UserPassword
        = ((((((FieldDef (HaskellName (packPTH "password")))
                 (DBName (packPTH "password")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef UserEmail
        = ((((((FieldDef (HaskellName (packPTH "email")))
                 (DBName (packPTH "email")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef UserAvatar
        = ((((((FieldDef (HaskellName (packPTH "avatar")))
                 (DBName (packPTH "avatar")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef UserFirstName
        = ((((((FieldDef (HaskellName (packPTH "firstName")))
                 (DBName (packPTH "first_name")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [packPTH "Maybe"])
             True)
            NoReference
      persistFieldDef UserSecondName
        = ((((((FieldDef (HaskellName (packPTH "secondName")))
                 (DBName (packPTH "second_name")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [packPTH "Maybe"])
             True)
            NoReference
      persistFieldDef UserBirthDay
        = ((((((FieldDef (HaskellName (packPTH "birthDay")))
                 (DBName (packPTH "birth_day")))
                ((FTTypeCon Nothing) (packPTH "UTCTime")))
               SqlDayTime)
              [packPTH "Maybe"])
             True)
            NoReference
      persistFieldDef UserSex
        = ((((((FieldDef (HaskellName (packPTH "sex")))
                 (DBName (packPTH "sex")))
                ((FTTypeCon Nothing) (packPTH "Gender")))
               SqlString)
              [packPTH "Maybe"])
             True)
            NoReference
      persistFieldDef UserCreatedQuizzes
        = ((((((FieldDef (HaskellName (packPTH "createdQuizzes")))
                 (DBName (packPTH "created_quizzes")))
                (FTList ((FTTypeCon Nothing) (packPTH "QuizId"))))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef UserPassedQuizzes
        = ((((((FieldDef (HaskellName (packPTH "passedQuizzes")))
                 (DBName (packPTH "passed_quizzes")))
                (FTList ((FTTypeCon Nothing) (packPTH "QuizResult"))))
               SqlString)
              [])
             True)
            (EmbedRef
               ((EmbedEntityDef (HaskellName (packPTH "QuizResult")))
                  [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing) Nothing,
                   ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                   ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                     Nothing]))
      persistIdField = UserId
      fieldLens UserId
        = (lensPTH entityKey)
            (\ Entity _ value_a1asj key_a1ask
               -> (Entity key_a1ask) value_a1asj)
      fieldLens UserUsername
        = (lensPTH (userUsername . entityVal))
            (\ Entity key_a1asl value_a1asm x_a1asn
               -> (Entity key_a1asl) value_a1asm {userUsername = x_a1asn})
      fieldLens UserPassword
        = (lensPTH (userPassword . entityVal))
            (\ Entity key_a1asl value_a1asm x_a1asn
               -> (Entity key_a1asl) value_a1asm {userPassword = x_a1asn})
      fieldLens UserEmail
        = (lensPTH (userEmail . entityVal))
            (\ Entity key_a1asl value_a1asm x_a1asn
               -> (Entity key_a1asl) value_a1asm {userEmail = x_a1asn})
      fieldLens UserAvatar
        = (lensPTH (userAvatar . entityVal))
            (\ Entity key_a1asl value_a1asm x_a1asn
               -> (Entity key_a1asl) value_a1asm {userAvatar = x_a1asn})
      fieldLens UserFirstName
        = (lensPTH (userFirstName . entityVal))
            (\ Entity key_a1asl value_a1asm x_a1asn
               -> (Entity key_a1asl) value_a1asm {userFirstName = x_a1asn})
      fieldLens UserSecondName
        = (lensPTH (userSecondName . entityVal))
            (\ Entity key_a1asl value_a1asm x_a1asn
               -> (Entity key_a1asl) value_a1asm {userSecondName = x_a1asn})
      fieldLens UserBirthDay
        = (lensPTH (userBirthDay . entityVal))
            (\ Entity key_a1asl value_a1asm x_a1asn
               -> (Entity key_a1asl) value_a1asm {userBirthDay = x_a1asn})
      fieldLens UserSex
        = (lensPTH (userSex . entityVal))
            (\ Entity key_a1asl value_a1asm x_a1asn
               -> (Entity key_a1asl) value_a1asm {userSex = x_a1asn})
      fieldLens UserCreatedQuizzes
        = (lensPTH (userCreatedQuizzes . entityVal))
            (\ Entity key_a1asl value_a1asm x_a1asn
               -> (Entity key_a1asl) value_a1asm {userCreatedQuizzes = x_a1asn})
      fieldLens UserPassedQuizzes
        = (lensPTH (userPassedQuizzes . entityVal))
            (\ Entity key_a1asl value_a1asm x_a1asn
               -> (Entity key_a1asl) value_a1asm {userPassedQuizzes = x_a1asn})
    instance ToBackendKey MongoContext User where
      toBackendKey = unUserKey
      fromBackendKey = UserKey
    instance ToJSON Question where
      aeson-1.2.4.0:Data.Aeson.Types.ToJSON.toJSON
        (Question text_a1asp option_a1asq answer_a1asr)
        = aeson-1.2.4.0:Data.Aeson.Types.Internal.object
            [((Data.Text.pack "text")
                aeson-1.2.4.0:Data.Aeson.Types.ToJSON..= text_a1asp),
             ((Data.Text.pack "option")
                aeson-1.2.4.0:Data.Aeson.Types.ToJSON..= option_a1asq),
             ((Data.Text.pack "answer")
                aeson-1.2.4.0:Data.Aeson.Types.ToJSON..= answer_a1asr)]
    instance FromJSON Question where
      aeson-1.2.4.0:Data.Aeson.Types.FromJSON.parseJSON
        (aeson-1.2.4.0:Data.Aeson.Types.Internal.Object obj_a1aso)
        = ((((pure Question)
               <*>
                 (obj_a1aso
                    aeson-1.2.4.0:Data.Aeson.Types.FromJSON..:
                      (Data.Text.pack "text")))
              <*>
                (obj_a1aso
                   aeson-1.2.4.0:Data.Aeson.Types.FromJSON..:
                     (Data.Text.pack "option")))
             <*>
               (obj_a1aso
                  aeson-1.2.4.0:Data.Aeson.Types.FromJSON..:
                    (Data.Text.pack "answer")))
      aeson-1.2.4.0:Data.Aeson.Types.FromJSON.parseJSON _
        = GHC.Base.mzero
    instance ToJSON (Entity Question) where
      aeson-1.2.4.0:Data.Aeson.Types.ToJSON.toJSON = entityIdToJSON
    instance FromJSON (Entity Question) where
      aeson-1.2.4.0:Data.Aeson.Types.FromJSON.parseJSON
        = entityIdFromJSON
    instance ToJSON Quiz where
      aeson-1.2.4.0:Data.Aeson.Types.ToJSON.toJSON
        (Quiz name_a1ast
              description_a1asu
              creationDate_a1asv
              passingNumber_a1asw
              question_a1asx)
        = aeson-1.2.4.0:Data.Aeson.Types.Internal.object
            [((Data.Text.pack "name")
                aeson-1.2.4.0:Data.Aeson.Types.ToJSON..= name_a1ast),
             ((Data.Text.pack "description")
                aeson-1.2.4.0:Data.Aeson.Types.ToJSON..= description_a1asu),
             ((Data.Text.pack "creationDate")
                aeson-1.2.4.0:Data.Aeson.Types.ToJSON..= creationDate_a1asv),
             ((Data.Text.pack "passingNumber")
                aeson-1.2.4.0:Data.Aeson.Types.ToJSON..= passingNumber_a1asw),
             ((Data.Text.pack "question")
                aeson-1.2.4.0:Data.Aeson.Types.ToJSON..= question_a1asx)]
    instance FromJSON Quiz where
      aeson-1.2.4.0:Data.Aeson.Types.FromJSON.parseJSON
        (aeson-1.2.4.0:Data.Aeson.Types.Internal.Object obj_a1ass)
        = ((((((pure Quiz)
                 <*>
                   (obj_a1ass
                      aeson-1.2.4.0:Data.Aeson.Types.FromJSON..:
                        (Data.Text.pack "name")))
                <*>
                  (obj_a1ass
                     aeson-1.2.4.0:Data.Aeson.Types.FromJSON..:
                       (Data.Text.pack "description")))
               <*>
                 (obj_a1ass
                    aeson-1.2.4.0:Data.Aeson.Types.FromJSON..:
                      (Data.Text.pack "creationDate")))
              <*>
                (obj_a1ass
                   aeson-1.2.4.0:Data.Aeson.Types.FromJSON..:
                     (Data.Text.pack "passingNumber")))
             <*>
               (obj_a1ass
                  aeson-1.2.4.0:Data.Aeson.Types.FromJSON..:
                    (Data.Text.pack "question")))
      aeson-1.2.4.0:Data.Aeson.Types.FromJSON.parseJSON _
        = GHC.Base.mzero
    instance ToJSON (Entity Quiz) where
      aeson-1.2.4.0:Data.Aeson.Types.ToJSON.toJSON = entityIdToJSON
    instance FromJSON (Entity Quiz) where
      aeson-1.2.4.0:Data.Aeson.Types.FromJSON.parseJSON
        = entityIdFromJSON
    instance ToJSON QuizResult where
      aeson-1.2.4.0:Data.Aeson.Types.ToJSON.toJSON
        (QuizResult testKey_a1asz result_a1asA passingDate_a1asB)
        = aeson-1.2.4.0:Data.Aeson.Types.Internal.object
            [((Data.Text.pack "testKey")
                aeson-1.2.4.0:Data.Aeson.Types.ToJSON..= testKey_a1asz),
             ((Data.Text.pack "result")
                aeson-1.2.4.0:Data.Aeson.Types.ToJSON..= result_a1asA),
             ((Data.Text.pack "passingDate")
                aeson-1.2.4.0:Data.Aeson.Types.ToJSON..= passingDate_a1asB)]
    instance FromJSON QuizResult where
      aeson-1.2.4.0:Data.Aeson.Types.FromJSON.parseJSON
        (aeson-1.2.4.0:Data.Aeson.Types.Internal.Object obj_a1asy)
        = ((((pure QuizResult)
               <*>
                 (obj_a1asy
                    aeson-1.2.4.0:Data.Aeson.Types.FromJSON..:
                      (Data.Text.pack "testKey")))
              <*>
                (obj_a1asy
                   aeson-1.2.4.0:Data.Aeson.Types.FromJSON..:
                     (Data.Text.pack "result")))
             <*>
               (obj_a1asy
                  aeson-1.2.4.0:Data.Aeson.Types.FromJSON..:
                    (Data.Text.pack "passingDate")))
      aeson-1.2.4.0:Data.Aeson.Types.FromJSON.parseJSON _
        = GHC.Base.mzero
    instance ToJSON (Entity QuizResult) where
      aeson-1.2.4.0:Data.Aeson.Types.ToJSON.toJSON = entityIdToJSON
    instance FromJSON (Entity QuizResult) where
      aeson-1.2.4.0:Data.Aeson.Types.FromJSON.parseJSON
        = entityIdFromJSON
    instance ToJSON User where
      aeson-1.2.4.0:Data.Aeson.Types.ToJSON.toJSON
        (User username_a1asD
              password_a1asE
              email_a1asF
              avatar_a1asG
              firstName_a1asH
              secondName_a1asI
              birthDay_a1asJ
              sex_a1asK
              createdQuizzes_a1asL
              passedQuizzes_a1asM)
        = aeson-1.2.4.0:Data.Aeson.Types.Internal.object
            [((Data.Text.pack "username")
                aeson-1.2.4.0:Data.Aeson.Types.ToJSON..= username_a1asD),
             ((Data.Text.pack "password")
                aeson-1.2.4.0:Data.Aeson.Types.ToJSON..= password_a1asE),
             ((Data.Text.pack "email")
                aeson-1.2.4.0:Data.Aeson.Types.ToJSON..= email_a1asF),
             ((Data.Text.pack "avatar")
                aeson-1.2.4.0:Data.Aeson.Types.ToJSON..= avatar_a1asG),
             ((Data.Text.pack "firstName")
                aeson-1.2.4.0:Data.Aeson.Types.ToJSON..= firstName_a1asH),
             ((Data.Text.pack "secondName")
                aeson-1.2.4.0:Data.Aeson.Types.ToJSON..= secondName_a1asI),
             ((Data.Text.pack "birthDay")
                aeson-1.2.4.0:Data.Aeson.Types.ToJSON..= birthDay_a1asJ),
             ((Data.Text.pack "sex")
                aeson-1.2.4.0:Data.Aeson.Types.ToJSON..= sex_a1asK),
             ((Data.Text.pack "createdQuizzes")
                aeson-1.2.4.0:Data.Aeson.Types.ToJSON..= createdQuizzes_a1asL),
             ((Data.Text.pack "passedQuizzes")
                aeson-1.2.4.0:Data.Aeson.Types.ToJSON..= passedQuizzes_a1asM)]
    instance FromJSON User where
      aeson-1.2.4.0:Data.Aeson.Types.FromJSON.parseJSON
        (aeson-1.2.4.0:Data.Aeson.Types.Internal.Object obj_a1asC)
        = (((((((((((pure User)
                      <*>
                        (obj_a1asC
                           aeson-1.2.4.0:Data.Aeson.Types.FromJSON..:
                             (Data.Text.pack "username")))
                     <*>
                       (obj_a1asC
                          aeson-1.2.4.0:Data.Aeson.Types.FromJSON..:
                            (Data.Text.pack "password")))
                    <*>
                      (obj_a1asC
                         aeson-1.2.4.0:Data.Aeson.Types.FromJSON..:
                           (Data.Text.pack "email")))
                   <*>
                     (obj_a1asC
                        aeson-1.2.4.0:Data.Aeson.Types.FromJSON..:
                          (Data.Text.pack "avatar")))
                  <*>
                    (obj_a1asC
                       aeson-compat-0.3.7.1:Data.Aeson.Compat..:?
                         (Data.Text.pack "firstName")))
                 <*>
                   (obj_a1asC
                      aeson-compat-0.3.7.1:Data.Aeson.Compat..:?
                        (Data.Text.pack "secondName")))
                <*>
                  (obj_a1asC
                     aeson-compat-0.3.7.1:Data.Aeson.Compat..:?
                       (Data.Text.pack "birthDay")))
               <*>
                 (obj_a1asC
                    aeson-compat-0.3.7.1:Data.Aeson.Compat..:? (Data.Text.pack "sex")))
              <*>
                (obj_a1asC
                   aeson-1.2.4.0:Data.Aeson.Types.FromJSON..:
                     (Data.Text.pack "createdQuizzes")))
             <*>
               (obj_a1asC
                  aeson-1.2.4.0:Data.Aeson.Types.FromJSON..:
                    (Data.Text.pack "passedQuizzes")))
      aeson-1.2.4.0:Data.Aeson.Types.FromJSON.parseJSON _
        = GHC.Base.mzero
    instance ToJSON (Entity User) where
      aeson-1.2.4.0:Data.Aeson.Types.ToJSON.toJSON = entityIdToJSON
    instance FromJSON (Entity User) where
      aeson-1.2.4.0:Data.Aeson.Types.FromJSON.parseJSON
        = entityIdFromJSON
/home/nikita/Projects/labs/Databases/Course-Project/Server/src/Model/User.hs:(27,78)-(57,2): Splicing expression
    Language.Haskell.TH.Quote.quoteExp
      persistLowerCase
      "\n\
      \Question json\n\
      \  text    Text\n\
      \  option  QuestionOptions\n\
      \  answer  QuestionAnswer\n\
      \  deriving Eq Read Show Generic\n\
      \Quiz json\n\
      \  name            Text\n\
      \  description     Text\n\
      \  creationDate    UTCTime\n\
      \  passingNumber   Int\n\
      \  question        Question\n\
      \  deriving Eq Read Show Generic\n\
      \QuizResult json\n\
      \  testKey         Text\n\
      \  result          Text\n\
      \  passingDate     UTCTime\n\
      \  deriving        Eq Read Show Generic\n\
      \User json\n\
      \  username        Text\n\
      \  password        Text\n\
      \  email           Text\n\
      \  avatar          Text\n\
      \  firstName       Text Maybe\n\
      \  secondName      Text Maybe\n\
      \  birthDay        UTCTime Maybe\n\
      \  sex             Gender Maybe\n\
      \  createdQuizzes  [QuizId]\n\
      \  passedQuizzes   [QuizResult]\n\
      \  deriving        Eq Read Show Generic\n"
  ======>
    [(((((((((EntityDef (HaskellName (packPTH "Question")))
               (DBName (packPTH "question")))
              (((((((FieldDef (HaskellName (packPTH "Id")))
                      (DBName (packPTH "id")))
                     ((FTTypeCon Nothing) (packPTH "QuestionId")))
                    SqlInt64)
                   [])
                  True)
                 ((ForeignRef (HaskellName (packPTH "Question")))
                    ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
             [packPTH "json"])
            [((((((FieldDef (HaskellName (packPTH "text")))
                    (DBName (packPTH "text")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for text")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "option")))
                    (DBName (packPTH "option")))
                   ((FTTypeCon Nothing) (packPTH "QuestionOptions")))
                  (SqlOther (packPTH "SqlType unset for option")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "answer")))
                    (DBName (packPTH "answer")))
                   ((FTTypeCon Nothing) (packPTH "QuestionAnswer")))
                  (SqlOther (packPTH "SqlType unset for answer")))
                 [])
                True)
               NoReference])
           [])
          [])
         [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
        (Data.Map.Internal.fromList []))
       False
       {entityFields = [((((((FieldDef (HaskellName (packPTH "text")))
                               (DBName (packPTH "text")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "option")))
                               (DBName (packPTH "option")))
                              ((FTTypeCon Nothing) (packPTH "QuestionOptions")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy QuestionOptions)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "answer")))
                               (DBName (packPTH "answer")))
                              ((FTTypeCon Nothing) (packPTH "QuestionAnswer")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy QuestionAnswer)))
                            [])
                           True)
                          NoReference],
        entityId = ((((((FieldDef (HaskellName (packPTH "Id")))
                          (DBName (packPTH "id")))
                         ((FTTypeCon Nothing) (packPTH "QuestionId")))
                        (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                           (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                       [])
                      True)
                     ((ForeignRef (HaskellName (packPTH "Question")))
                        ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))},
     (((((((((EntityDef (HaskellName (packPTH "Quiz")))
               (DBName (packPTH "quiz")))
              (((((((FieldDef (HaskellName (packPTH "Id")))
                      (DBName (packPTH "id")))
                     ((FTTypeCon Nothing) (packPTH "QuizId")))
                    SqlInt64)
                   [])
                  True)
                 ((ForeignRef (HaskellName (packPTH "Quiz")))
                    ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
             [packPTH "json"])
            [((((((FieldDef (HaskellName (packPTH "name")))
                    (DBName (packPTH "name")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for name")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "description")))
                    (DBName (packPTH "description")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for description")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "creationDate")))
                    (DBName (packPTH "creation_date")))
                   ((FTTypeCon Nothing) (packPTH "UTCTime")))
                  (SqlOther (packPTH "SqlType unset for creationDate")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "passingNumber")))
                    (DBName (packPTH "passing_number")))
                   ((FTTypeCon Nothing) (packPTH "Int")))
                  (SqlOther (packPTH "SqlType unset for passingNumber")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "question")))
                    (DBName (packPTH "question")))
                   ((FTTypeCon Nothing) (packPTH "Question")))
                  (SqlOther (packPTH "SqlType unset for question")))
                 [])
                True)
               (EmbedRef
                  ((EmbedEntityDef (HaskellName (packPTH "Question")))
                     [((EmbedFieldDef (DBName (packPTH "text"))) Nothing) Nothing,
                      ((EmbedFieldDef (DBName (packPTH "option"))) Nothing) Nothing,
                      ((EmbedFieldDef (DBName (packPTH "answer"))) Nothing) Nothing]))])
           [])
          [])
         [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
        (Data.Map.Internal.fromList []))
       False
       {entityFields = [((((((FieldDef (HaskellName (packPTH "name")))
                               (DBName (packPTH "name")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "description")))
                               (DBName (packPTH "description")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "creationDate")))
                               (DBName (packPTH "creation_date")))
                              ((FTTypeCon Nothing) (packPTH "UTCTime")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy UTCTime)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "passingNumber")))
                               (DBName (packPTH "passing_number")))
                              ((FTTypeCon Nothing) (packPTH "Int")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Int)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "question")))
                               (DBName (packPTH "question")))
                              ((FTTypeCon Nothing) (packPTH "Question")))
                             SqlString)
                            [])
                           True)
                          (EmbedRef
                             ((EmbedEntityDef (HaskellName (packPTH "Question")))
                                [((EmbedFieldDef (DBName (packPTH "text"))) Nothing) Nothing,
                                 ((EmbedFieldDef (DBName (packPTH "option"))) Nothing) Nothing,
                                 ((EmbedFieldDef (DBName (packPTH "answer"))) Nothing) Nothing]))],
        entityId = ((((((FieldDef (HaskellName (packPTH "Id")))
                          (DBName (packPTH "id")))
                         ((FTTypeCon Nothing) (packPTH "QuizId")))
                        (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                           (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                       [])
                      True)
                     ((ForeignRef (HaskellName (packPTH "Quiz")))
                        ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))},
     (((((((((EntityDef (HaskellName (packPTH "QuizResult")))
               (DBName (packPTH "quiz_result")))
              (((((((FieldDef (HaskellName (packPTH "Id")))
                      (DBName (packPTH "id")))
                     ((FTTypeCon Nothing) (packPTH "QuizResultId")))
                    SqlInt64)
                   [])
                  True)
                 ((ForeignRef (HaskellName (packPTH "QuizResult")))
                    ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
             [packPTH "json"])
            [((((((FieldDef (HaskellName (packPTH "testKey")))
                    (DBName (packPTH "test_key")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for testKey")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "result")))
                    (DBName (packPTH "result")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for result")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "passingDate")))
                    (DBName (packPTH "passing_date")))
                   ((FTTypeCon Nothing) (packPTH "UTCTime")))
                  (SqlOther (packPTH "SqlType unset for passingDate")))
                 [])
                True)
               NoReference])
           [])
          [])
         [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
        (Data.Map.Internal.fromList []))
       False
       {entityFields = [((((((FieldDef (HaskellName (packPTH "testKey")))
                               (DBName (packPTH "test_key")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "result")))
                               (DBName (packPTH "result")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "passingDate")))
                               (DBName (packPTH "passing_date")))
                              ((FTTypeCon Nothing) (packPTH "UTCTime")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy UTCTime)))
                            [])
                           True)
                          NoReference],
        entityId = ((((((FieldDef (HaskellName (packPTH "Id")))
                          (DBName (packPTH "id")))
                         ((FTTypeCon Nothing) (packPTH "QuizResultId")))
                        (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                           (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                       [])
                      True)
                     ((ForeignRef (HaskellName (packPTH "QuizResult")))
                        ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))},
     (((((((((EntityDef (HaskellName (packPTH "User")))
               (DBName (packPTH "user")))
              (((((((FieldDef (HaskellName (packPTH "Id")))
                      (DBName (packPTH "id")))
                     ((FTTypeCon Nothing) (packPTH "UserId")))
                    SqlInt64)
                   [])
                  True)
                 ((ForeignRef (HaskellName (packPTH "User")))
                    ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
             [packPTH "json"])
            [((((((FieldDef (HaskellName (packPTH "username")))
                    (DBName (packPTH "username")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for username")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "password")))
                    (DBName (packPTH "password")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for password")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "email")))
                    (DBName (packPTH "email")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for email")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "avatar")))
                    (DBName (packPTH "avatar")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for avatar")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "firstName")))
                    (DBName (packPTH "first_name")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for firstName")))
                 [packPTH "Maybe"])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "secondName")))
                    (DBName (packPTH "second_name")))
                   ((FTTypeCon Nothing) (packPTH "Text")))
                  (SqlOther (packPTH "SqlType unset for secondName")))
                 [packPTH "Maybe"])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "birthDay")))
                    (DBName (packPTH "birth_day")))
                   ((FTTypeCon Nothing) (packPTH "UTCTime")))
                  (SqlOther (packPTH "SqlType unset for birthDay")))
                 [packPTH "Maybe"])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "sex")))
                    (DBName (packPTH "sex")))
                   ((FTTypeCon Nothing) (packPTH "Gender")))
                  (SqlOther (packPTH "SqlType unset for sex")))
                 [packPTH "Maybe"])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "createdQuizzes")))
                    (DBName (packPTH "created_quizzes")))
                   (FTList ((FTTypeCon Nothing) (packPTH "QuizId"))))
                  (SqlOther (packPTH "SqlType unset for createdQuizzes")))
                 [])
                True)
               NoReference,
             ((((((FieldDef (HaskellName (packPTH "passedQuizzes")))
                    (DBName (packPTH "passed_quizzes")))
                   (FTList ((FTTypeCon Nothing) (packPTH "QuizResult"))))
                  (SqlOther (packPTH "SqlType unset for passedQuizzes")))
                 [])
                True)
               (EmbedRef
                  ((EmbedEntityDef (HaskellName (packPTH "QuizResult")))
                     [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing) Nothing,
                      ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                      ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                        Nothing]))])
           [])
          [])
         [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
        (Data.Map.Internal.fromList []))
       False
       {entityFields = [((((((FieldDef (HaskellName (packPTH "username")))
                               (DBName (packPTH "username")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "password")))
                               (DBName (packPTH "password")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "email")))
                               (DBName (packPTH "email")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "avatar")))
                               (DBName (packPTH "avatar")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "firstName")))
                               (DBName (packPTH "first_name")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [packPTH "Maybe"])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "secondName")))
                               (DBName (packPTH "second_name")))
                              ((FTTypeCon Nothing) (packPTH "Text")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                            [packPTH "Maybe"])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "birthDay")))
                               (DBName (packPTH "birth_day")))
                              ((FTTypeCon Nothing) (packPTH "UTCTime")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy UTCTime)))
                            [packPTH "Maybe"])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "sex")))
                               (DBName (packPTH "sex")))
                              ((FTTypeCon Nothing) (packPTH "Gender")))
                             (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                (Data.Proxy.Proxy :: Data.Proxy.Proxy Gender)))
                            [packPTH "Maybe"])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "createdQuizzes")))
                               (DBName (packPTH "created_quizzes")))
                              (FTList ((FTTypeCon Nothing) (packPTH "QuizId"))))
                             SqlString)
                            [])
                           True)
                          NoReference,
                        ((((((FieldDef (HaskellName (packPTH "passedQuizzes")))
                               (DBName (packPTH "passed_quizzes")))
                              (FTList ((FTTypeCon Nothing) (packPTH "QuizResult"))))
                             SqlString)
                            [])
                           True)
                          (EmbedRef
                             ((EmbedEntityDef (HaskellName (packPTH "QuizResult")))
                                [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing) Nothing,
                                 ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                                 ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                                   Nothing]))],
        entityId = ((((((FieldDef (HaskellName (packPTH "Id")))
                          (DBName (packPTH "id")))
                         ((FTTypeCon Nothing) (packPTH "UserId")))
                        (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                           (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                       [])
                      True)
                     ((ForeignRef (HaskellName (packPTH "User")))
                        ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))}]
/home/nikita/Projects/labs/Databases/Course-Project/Server/src/Model/User.hs:(27,1)-(57,2): Splicing declarations
    share
      [mkPersist (mkPersistSettings (ConT ''MongoContext))]
      ([(((((((((EntityDef (HaskellName (packPTH "Question")))
                  (DBName (packPTH "question")))
                 (((((((FieldDef (HaskellName (packPTH "Id")))
                         (DBName (packPTH "id")))
                        ((FTTypeCon Nothing) (packPTH "QuestionId")))
                       SqlInt64)
                      [])
                     True)
                    ((ForeignRef (HaskellName (packPTH "Question")))
                       ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                [packPTH "json"])
               [((((((FieldDef (HaskellName (packPTH "text")))
                       (DBName (packPTH "text")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for text")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "option")))
                       (DBName (packPTH "option")))
                      ((FTTypeCon Nothing) (packPTH "QuestionOptions")))
                     (SqlOther (packPTH "SqlType unset for option")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "answer")))
                       (DBName (packPTH "answer")))
                      ((FTTypeCon Nothing) (packPTH "QuestionAnswer")))
                     (SqlOther (packPTH "SqlType unset for answer")))
                    [])
                   True)
                  NoReference])
              [])
             [])
            [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
           (Data.Map.Internal.fromList []))
          False
          {entityFields = [((((((FieldDef (HaskellName (packPTH "text")))
                                  (DBName (packPTH "text")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "option")))
                                  (DBName (packPTH "option")))
                                 ((FTTypeCon Nothing) (packPTH "QuestionOptions")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy QuestionOptions)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "answer")))
                                  (DBName (packPTH "answer")))
                                 ((FTTypeCon Nothing) (packPTH "QuestionAnswer")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy QuestionAnswer)))
                               [])
                              True)
                             NoReference],
           entityId = ((((((FieldDef (HaskellName (packPTH "Id")))
                             (DBName (packPTH "id")))
                            ((FTTypeCon Nothing) (packPTH "QuestionId")))
                           (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                              (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                          [])
                         True)
                        ((ForeignRef (HaskellName (packPTH "Question")))
                           ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))},
        (((((((((EntityDef (HaskellName (packPTH "Quiz")))
                  (DBName (packPTH "quiz")))
                 (((((((FieldDef (HaskellName (packPTH "Id")))
                         (DBName (packPTH "id")))
                        ((FTTypeCon Nothing) (packPTH "QuizId")))
                       SqlInt64)
                      [])
                     True)
                    ((ForeignRef (HaskellName (packPTH "Quiz")))
                       ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                [packPTH "json"])
               [((((((FieldDef (HaskellName (packPTH "name")))
                       (DBName (packPTH "name")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for name")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "description")))
                       (DBName (packPTH "description")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for description")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "creationDate")))
                       (DBName (packPTH "creation_date")))
                      ((FTTypeCon Nothing) (packPTH "UTCTime")))
                     (SqlOther (packPTH "SqlType unset for creationDate")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "passingNumber")))
                       (DBName (packPTH "passing_number")))
                      ((FTTypeCon Nothing) (packPTH "Int")))
                     (SqlOther (packPTH "SqlType unset for passingNumber")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "question")))
                       (DBName (packPTH "question")))
                      ((FTTypeCon Nothing) (packPTH "Question")))
                     (SqlOther (packPTH "SqlType unset for question")))
                    [])
                   True)
                  (EmbedRef
                     ((EmbedEntityDef (HaskellName (packPTH "Question")))
                        [((EmbedFieldDef (DBName (packPTH "text"))) Nothing) Nothing,
                         ((EmbedFieldDef (DBName (packPTH "option"))) Nothing) Nothing,
                         ((EmbedFieldDef (DBName (packPTH "answer"))) Nothing) Nothing]))])
              [])
             [])
            [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
           (Data.Map.Internal.fromList []))
          False
          {entityFields = [((((((FieldDef (HaskellName (packPTH "name")))
                                  (DBName (packPTH "name")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "description")))
                                  (DBName (packPTH "description")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "creationDate")))
                                  (DBName (packPTH "creation_date")))
                                 ((FTTypeCon Nothing) (packPTH "UTCTime")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy UTCTime)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "passingNumber")))
                                  (DBName (packPTH "passing_number")))
                                 ((FTTypeCon Nothing) (packPTH "Int")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Int)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "question")))
                                  (DBName (packPTH "question")))
                                 ((FTTypeCon Nothing) (packPTH "Question")))
                                SqlString)
                               [])
                              True)
                             (EmbedRef
                                ((EmbedEntityDef (HaskellName (packPTH "Question")))
                                   [((EmbedFieldDef (DBName (packPTH "text"))) Nothing) Nothing,
                                    ((EmbedFieldDef (DBName (packPTH "option"))) Nothing) Nothing,
                                    ((EmbedFieldDef (DBName (packPTH "answer"))) Nothing)
                                      Nothing]))],
           entityId = ((((((FieldDef (HaskellName (packPTH "Id")))
                             (DBName (packPTH "id")))
                            ((FTTypeCon Nothing) (packPTH "QuizId")))
                           (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                              (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                          [])
                         True)
                        ((ForeignRef (HaskellName (packPTH "Quiz")))
                           ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))},
        (((((((((EntityDef (HaskellName (packPTH "QuizResult")))
                  (DBName (packPTH "quiz_result")))
                 (((((((FieldDef (HaskellName (packPTH "Id")))
                         (DBName (packPTH "id")))
                        ((FTTypeCon Nothing) (packPTH "QuizResultId")))
                       SqlInt64)
                      [])
                     True)
                    ((ForeignRef (HaskellName (packPTH "QuizResult")))
                       ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                [packPTH "json"])
               [((((((FieldDef (HaskellName (packPTH "testKey")))
                       (DBName (packPTH "test_key")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for testKey")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "result")))
                       (DBName (packPTH "result")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for result")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "passingDate")))
                       (DBName (packPTH "passing_date")))
                      ((FTTypeCon Nothing) (packPTH "UTCTime")))
                     (SqlOther (packPTH "SqlType unset for passingDate")))
                    [])
                   True)
                  NoReference])
              [])
             [])
            [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
           (Data.Map.Internal.fromList []))
          False
          {entityFields = [((((((FieldDef (HaskellName (packPTH "testKey")))
                                  (DBName (packPTH "test_key")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "result")))
                                  (DBName (packPTH "result")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "passingDate")))
                                  (DBName (packPTH "passing_date")))
                                 ((FTTypeCon Nothing) (packPTH "UTCTime")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy UTCTime)))
                               [])
                              True)
                             NoReference],
           entityId = ((((((FieldDef (HaskellName (packPTH "Id")))
                             (DBName (packPTH "id")))
                            ((FTTypeCon Nothing) (packPTH "QuizResultId")))
                           (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                              (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                          [])
                         True)
                        ((ForeignRef (HaskellName (packPTH "QuizResult")))
                           ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))},
        (((((((((EntityDef (HaskellName (packPTH "User")))
                  (DBName (packPTH "user")))
                 (((((((FieldDef (HaskellName (packPTH "Id")))
                         (DBName (packPTH "id")))
                        ((FTTypeCon Nothing) (packPTH "UserId")))
                       SqlInt64)
                      [])
                     True)
                    ((ForeignRef (HaskellName (packPTH "User")))
                       ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                [packPTH "json"])
               [((((((FieldDef (HaskellName (packPTH "username")))
                       (DBName (packPTH "username")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for username")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "password")))
                       (DBName (packPTH "password")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for password")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "email")))
                       (DBName (packPTH "email")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for email")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "avatar")))
                       (DBName (packPTH "avatar")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for avatar")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "firstName")))
                       (DBName (packPTH "first_name")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for firstName")))
                    [packPTH "Maybe"])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "secondName")))
                       (DBName (packPTH "second_name")))
                      ((FTTypeCon Nothing) (packPTH "Text")))
                     (SqlOther (packPTH "SqlType unset for secondName")))
                    [packPTH "Maybe"])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "birthDay")))
                       (DBName (packPTH "birth_day")))
                      ((FTTypeCon Nothing) (packPTH "UTCTime")))
                     (SqlOther (packPTH "SqlType unset for birthDay")))
                    [packPTH "Maybe"])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "sex")))
                       (DBName (packPTH "sex")))
                      ((FTTypeCon Nothing) (packPTH "Gender")))
                     (SqlOther (packPTH "SqlType unset for sex")))
                    [packPTH "Maybe"])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "createdQuizzes")))
                       (DBName (packPTH "created_quizzes")))
                      (FTList ((FTTypeCon Nothing) (packPTH "QuizId"))))
                     (SqlOther (packPTH "SqlType unset for createdQuizzes")))
                    [])
                   True)
                  NoReference,
                ((((((FieldDef (HaskellName (packPTH "passedQuizzes")))
                       (DBName (packPTH "passed_quizzes")))
                      (FTList ((FTTypeCon Nothing) (packPTH "QuizResult"))))
                     (SqlOther (packPTH "SqlType unset for passedQuizzes")))
                    [])
                   True)
                  (EmbedRef
                     ((EmbedEntityDef (HaskellName (packPTH "QuizResult")))
                        [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing) Nothing,
                         ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                         ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                           Nothing]))])
              [])
             [])
            [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
           (Data.Map.Internal.fromList []))
          False
          {entityFields = [((((((FieldDef (HaskellName (packPTH "username")))
                                  (DBName (packPTH "username")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "password")))
                                  (DBName (packPTH "password")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "email")))
                                  (DBName (packPTH "email")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "avatar")))
                                  (DBName (packPTH "avatar")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "firstName")))
                                  (DBName (packPTH "first_name")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [packPTH "Maybe"])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "secondName")))
                                  (DBName (packPTH "second_name")))
                                 ((FTTypeCon Nothing) (packPTH "Text")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Text)))
                               [packPTH "Maybe"])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "birthDay")))
                                  (DBName (packPTH "birth_day")))
                                 ((FTTypeCon Nothing) (packPTH "UTCTime")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy UTCTime)))
                               [packPTH "Maybe"])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "sex")))
                                  (DBName (packPTH "sex")))
                                 ((FTTypeCon Nothing) (packPTH "Gender")))
                                (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                                   (Data.Proxy.Proxy :: Data.Proxy.Proxy Gender)))
                               [packPTH "Maybe"])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "createdQuizzes")))
                                  (DBName (packPTH "created_quizzes")))
                                 (FTList ((FTTypeCon Nothing) (packPTH "QuizId"))))
                                SqlString)
                               [])
                              True)
                             NoReference,
                           ((((((FieldDef (HaskellName (packPTH "passedQuizzes")))
                                  (DBName (packPTH "passed_quizzes")))
                                 (FTList ((FTTypeCon Nothing) (packPTH "QuizResult"))))
                                SqlString)
                               [])
                              True)
                             (EmbedRef
                                ((EmbedEntityDef (HaskellName (packPTH "QuizResult")))
                                   [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing) Nothing,
                                    ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                                    ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                                      Nothing]))],
           entityId = ((((((FieldDef (HaskellName (packPTH "Id")))
                             (DBName (packPTH "id")))
                            ((FTTypeCon Nothing) (packPTH "UserId")))
                           (persistent-2.8.1:Database.Persist.Sql.Class.sqlType
                              (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                          [])
                         True)
                        ((ForeignRef (HaskellName (packPTH "User")))
                           ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))}])
  ======>
    instance PersistField Question where
      toPersistValue
        = \ ent_a1gkD
            -> (PersistMap
                  $ ((zip ((map Data.Text.pack) ["text", "option", "answer"]))
                       ((map toPersistValue) $ (toPersistFields ent_a1gkD))))
      fromPersistValue
        = ((\ x_a1gkE
              -> let
                   columns_a1gkF
                     = unordered-containers-0.2.9.0:Data.HashMap.Strict.fromList x_a1gkE
                 in
                   (fromPersistValues
                      $ ((map
                            (\ name_a1gkG
                               -> case
                                      (unordered-containers-0.2.9.0:Data.HashMap.Base.lookup
                                         (Data.Text.pack name_a1gkG))
                                        columns_a1gkF
                                  of
                                    Just v_a1gkH -> v_a1gkH
                                    Nothing -> PersistNull))
                           $ ["text", "option", "answer"])))
             Control.Monad.<=< getPersistMap)
    instance persistent-2.8.1:Database.Persist.Sql.Class.PersistFieldSql Question where
      persistent-2.8.1:Database.Persist.Sql.Class.sqlType _ = SqlString
    instance PersistField Quiz where
      toPersistValue
        = \ ent_a1gkI
            -> (PersistMap
                  $ ((zip
                        ((map Data.Text.pack)
                           ["name", "description", "creationDate", "passingNumber",
                            "question"]))
                       ((map toPersistValue) $ (toPersistFields ent_a1gkI))))
      fromPersistValue
        = ((\ x_a1gkJ
              -> let
                   columns_a1gkK
                     = unordered-containers-0.2.9.0:Data.HashMap.Strict.fromList x_a1gkJ
                 in
                   (fromPersistValues
                      $ ((map
                            (\ name_a1gkL
                               -> case
                                      (unordered-containers-0.2.9.0:Data.HashMap.Base.lookup
                                         (Data.Text.pack name_a1gkL))
                                        columns_a1gkK
                                  of
                                    Just v_a1gkM -> v_a1gkM
                                    Nothing -> PersistNull))
                           $ ["name", "description", "creationDate", "passingNumber",
                              "question"])))
             Control.Monad.<=< getPersistMap)
    instance persistent-2.8.1:Database.Persist.Sql.Class.PersistFieldSql Quiz where
      persistent-2.8.1:Database.Persist.Sql.Class.sqlType _ = SqlString
    instance PersistField QuizResult where
      toPersistValue
        = \ ent_a1gkN
            -> (PersistMap
                  $ ((zip
                        ((map Data.Text.pack) ["testKey", "result", "passingDate"]))
                       ((map toPersistValue) $ (toPersistFields ent_a1gkN))))
      fromPersistValue
        = ((\ x_a1gkO
              -> let
                   columns_a1gkP
                     = unordered-containers-0.2.9.0:Data.HashMap.Strict.fromList x_a1gkO
                 in
                   (fromPersistValues
                      $ ((map
                            (\ name_a1gkQ
                               -> case
                                      (unordered-containers-0.2.9.0:Data.HashMap.Base.lookup
                                         (Data.Text.pack name_a1gkQ))
                                        columns_a1gkP
                                  of
                                    Just v_a1gkR -> v_a1gkR
                                    Nothing -> PersistNull))
                           $ ["testKey", "result", "passingDate"])))
             Control.Monad.<=< getPersistMap)
    instance persistent-2.8.1:Database.Persist.Sql.Class.PersistFieldSql QuizResult where
      persistent-2.8.1:Database.Persist.Sql.Class.sqlType _ = SqlString
    instance PersistField User where
      toPersistValue
        = \ ent_a1gkS
            -> (PersistMap
                  $ ((zip
                        ((map Data.Text.pack)
                           ["username", "password", "email", "avatar", "firstName",
                            "secondName", "birthDay", "sex", "createdQuizzes",
                            "passedQuizzes"]))
                       ((map toPersistValue) $ (toPersistFields ent_a1gkS))))
      fromPersistValue
        = ((\ x_a1gkT
              -> let
                   columns_a1gkU
                     = unordered-containers-0.2.9.0:Data.HashMap.Strict.fromList x_a1gkT
                 in
                   (fromPersistValues
                      $ ((map
                            (\ name_a1gkV
                               -> case
                                      (unordered-containers-0.2.9.0:Data.HashMap.Base.lookup
                                         (Data.Text.pack name_a1gkV))
                                        columns_a1gkU
                                  of
                                    Just v_a1gkW -> v_a1gkW
                                    Nothing -> PersistNull))
                           $ ["username", "password", "email", "avatar", "firstName",
                              "secondName", "birthDay", "sex", "createdQuizzes",
                              "passedQuizzes"])))
             Control.Monad.<=< getPersistMap)
    instance persistent-2.8.1:Database.Persist.Sql.Class.PersistFieldSql User where
      persistent-2.8.1:Database.Persist.Sql.Class.sqlType _ = SqlString
    data Question
      = Question {questionText :: !Text,
                  questionOption :: !QuestionOptions,
                  questionAnswer :: !QuestionAnswer}
      deriving (Eq, Read, Show, Generic)
    type QuestionId = Key Question
    instance PersistEntity Question where
      type PersistEntityBackend Question = MongoContext
      data Unique Question
      newtype Key Question
        = QuestionKey {unQuestionKey :: (BackendKey MongoContext)}
        deriving (Show,
                  Read,
                  Eq,
                  Ord,
                  path-pieces-0.2.1:Web.PathPieces.PathPiece,
                  http-api-data-0.3.7.2:Web.Internal.HttpApiData.ToHttpApiData,
                  http-api-data-0.3.7.2:Web.Internal.HttpApiData.FromHttpApiData,
                  PersistField,
                  persistent-2.8.1:Database.Persist.Sql.Class.PersistFieldSql,
                  ToJSON,
                  FromJSON)
      data EntityField Question typ
        = typ ~ Key Question => QuestionId |
          typ ~ Text => QuestionText |
          typ ~ QuestionOptions => QuestionOption |
          typ ~ QuestionAnswer => QuestionAnswer
      keyToValues
        = ((ghc-prim-0.5.1.1:GHC.Types.: [])
             . (toPersistValue . unQuestionKey))
      keyFromValues
        = ((fmap QuestionKey)
             . (fromPersistValue . Database.Persist.TH.headNote))
      entityDef _
        = (((((((((EntityDef (HaskellName (packPTH "Question")))
                    (DBName (packPTH "question")))
                   (((((((FieldDef (HaskellName (packPTH "Id")))
                           (DBName (packPTH "id")))
                          ((FTTypeCon Nothing) (packPTH "QuestionId")))
                         SqlInt64)
                        [])
                       True)
                      ((ForeignRef (HaskellName (packPTH "Question")))
                         ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                  [packPTH "json"])
                 [((((((FieldDef (HaskellName (packPTH "text")))
                         (DBName (packPTH "text")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "option")))
                         (DBName (packPTH "option")))
                        ((FTTypeCon Nothing) (packPTH "QuestionOptions")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "answer")))
                         (DBName (packPTH "answer")))
                        ((FTTypeCon Nothing) (packPTH "QuestionAnswer")))
                       SqlString)
                      [])
                     True)
                    NoReference])
                [])
               [])
              [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
             (Data.Map.Internal.fromList []))
            False
      toPersistFields (Question x_a1gkX x_a1gkY x_a1gkZ)
        = [SomePersistField x_a1gkX, SomePersistField x_a1gkY,
           SomePersistField x_a1gkZ]
      fromPersistValues [x1_a1gl1, x2_a1gl2, x3_a1gl3]
        = Question
            <$>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "text")))
                 . fromPersistValue)
                x1_a1gl1
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "option")))
                 . fromPersistValue)
                x2_a1gl2
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "answer")))
                 . fromPersistValue)
                x3_a1gl3
      fromPersistValues x_a1gl0
        = (Left
             $ ((mappend (packPTH "Question: fromPersistValues failed on: "))
                  (Data.Text.pack $ (show x_a1gl0))))
      persistUniqueToFieldNames _
        = error "Degenerate case, should never happen"
      persistUniqueToValues _
        = error "Degenerate case, should never happen"
      persistUniqueKeys
        (Question _text_a1gl4 _option_a1gl5 _answer_a1gl6)
        = []
      persistFieldDef QuestionId
        = ((((((FieldDef (HaskellName (packPTH "Id")))
                 (DBName (packPTH "id")))
                ((FTTypeCon Nothing) (packPTH "QuestionId")))
               SqlInt64)
              [])
             True)
            ((ForeignRef (HaskellName (packPTH "Question")))
               ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))
      persistFieldDef QuestionText
        = ((((((FieldDef (HaskellName (packPTH "text")))
                 (DBName (packPTH "text")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef QuestionOption
        = ((((((FieldDef (HaskellName (packPTH "option")))
                 (DBName (packPTH "option")))
                ((FTTypeCon Nothing) (packPTH "QuestionOptions")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef QuestionAnswer
        = ((((((FieldDef (HaskellName (packPTH "answer")))
                 (DBName (packPTH "answer")))
                ((FTTypeCon Nothing) (packPTH "QuestionAnswer")))
               SqlString)
              [])
             True)
            NoReference
      persistIdField = QuestionId
      fieldLens QuestionId
        = (lensPTH entityKey)
            (\ Entity _ value_a1gl7 key_a1gl8
               -> (Entity key_a1gl8) value_a1gl7)
      fieldLens QuestionText
        = (lensPTH (questionText . entityVal))
            (\ Entity key_a1gl9 value_a1gla x_a1glb
               -> (Entity key_a1gl9) value_a1gla {questionText = x_a1glb})
      fieldLens QuestionOption
        = (lensPTH (questionOption . entityVal))
            (\ Entity key_a1gl9 value_a1gla x_a1glb
               -> (Entity key_a1gl9) value_a1gla {questionOption = x_a1glb})
      fieldLens QuestionAnswer
        = (lensPTH (questionAnswer . entityVal))
            (\ Entity key_a1gl9 value_a1gla x_a1glb
               -> (Entity key_a1gl9) value_a1gla {questionAnswer = x_a1glb})
    instance ToBackendKey MongoContext Question where
      toBackendKey = unQuestionKey
      fromBackendKey = QuestionKey
    data Quiz
      = Quiz {quizName :: !Text,
              quizDescription :: !Text,
              quizCreationDate :: !UTCTime,
              quizPassingNumber :: !Int,
              quizQuestion :: !Question}
      deriving (Eq, Read, Show, Generic)
    type QuizId = Key Quiz
    instance PersistEntity Quiz where
      type PersistEntityBackend Quiz = MongoContext
      data Unique Quiz
      newtype Key Quiz
        = QuizKey {unQuizKey :: (BackendKey MongoContext)}
        deriving (Show,
                  Read,
                  Eq,
                  Ord,
                  path-pieces-0.2.1:Web.PathPieces.PathPiece,
                  http-api-data-0.3.7.2:Web.Internal.HttpApiData.ToHttpApiData,
                  http-api-data-0.3.7.2:Web.Internal.HttpApiData.FromHttpApiData,
                  PersistField,
                  persistent-2.8.1:Database.Persist.Sql.Class.PersistFieldSql,
                  ToJSON,
                  FromJSON)
      data EntityField Quiz typ
        = typ ~ Key Quiz => QuizId |
          typ ~ Text => QuizName |
          typ ~ Text => QuizDescription |
          typ ~ UTCTime => QuizCreationDate |
          typ ~ Int => QuizPassingNumber |
          typ ~ Question => QuizQuestion
      keyToValues
        = ((ghc-prim-0.5.1.1:GHC.Types.: [])
             . (toPersistValue . unQuizKey))
      keyFromValues
        = ((fmap QuizKey)
             . (fromPersistValue . Database.Persist.TH.headNote))
      entityDef _
        = (((((((((EntityDef (HaskellName (packPTH "Quiz")))
                    (DBName (packPTH "quiz")))
                   (((((((FieldDef (HaskellName (packPTH "Id")))
                           (DBName (packPTH "id")))
                          ((FTTypeCon Nothing) (packPTH "QuizId")))
                         SqlInt64)
                        [])
                       True)
                      ((ForeignRef (HaskellName (packPTH "Quiz")))
                         ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                  [packPTH "json"])
                 [((((((FieldDef (HaskellName (packPTH "name")))
                         (DBName (packPTH "name")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "description")))
                         (DBName (packPTH "description")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "creationDate")))
                         (DBName (packPTH "creation_date")))
                        ((FTTypeCon Nothing) (packPTH "UTCTime")))
                       SqlDayTime)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "passingNumber")))
                         (DBName (packPTH "passing_number")))
                        ((FTTypeCon Nothing) (packPTH "Int")))
                       SqlInt64)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "question")))
                         (DBName (packPTH "question")))
                        ((FTTypeCon Nothing) (packPTH "Question")))
                       SqlString)
                      [])
                     True)
                    (EmbedRef
                       ((EmbedEntityDef (HaskellName (packPTH "Question")))
                          [((EmbedFieldDef (DBName (packPTH "text"))) Nothing) Nothing,
                           ((EmbedFieldDef (DBName (packPTH "option"))) Nothing) Nothing,
                           ((EmbedFieldDef (DBName (packPTH "answer"))) Nothing) Nothing]))])
                [])
               [])
              [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
             (Data.Map.Internal.fromList []))
            False
      toPersistFields (Quiz x_a1glc x_a1gld x_a1gle x_a1glf x_a1glg)
        = [SomePersistField x_a1glc, SomePersistField x_a1gld,
           SomePersistField x_a1gle, SomePersistField x_a1glf,
           SomePersistField x_a1glg]
      fromPersistValues
        [x1_a1gli, x2_a1glj, x3_a1glk, x4_a1gll, x5_a1glm]
        = Quiz
            <$>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "name")))
                 . fromPersistValue)
                x1_a1gli
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "description")))
                 . fromPersistValue)
                x2_a1glj
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "creationDate")))
                 . fromPersistValue)
                x3_a1glk
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "passingNumber")))
                 . fromPersistValue)
                x4_a1gll
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "question")))
                 . fromPersistValue)
                x5_a1glm
      fromPersistValues x_a1glh
        = (Left
             $ ((mappend (packPTH "Quiz: fromPersistValues failed on: "))
                  (Data.Text.pack $ (show x_a1glh))))
      persistUniqueToFieldNames _
        = error "Degenerate case, should never happen"
      persistUniqueToValues _
        = error "Degenerate case, should never happen"
      persistUniqueKeys
        (Quiz _name_a1gln
              _description_a1glo
              _creationDate_a1glp
              _passingNumber_a1glq
              _question_a1glr)
        = []
      persistFieldDef QuizId
        = ((((((FieldDef (HaskellName (packPTH "Id")))
                 (DBName (packPTH "id")))
                ((FTTypeCon Nothing) (packPTH "QuizId")))
               SqlInt64)
              [])
             True)
            ((ForeignRef (HaskellName (packPTH "Quiz")))
               ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))
      persistFieldDef QuizName
        = ((((((FieldDef (HaskellName (packPTH "name")))
                 (DBName (packPTH "name")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef QuizDescription
        = ((((((FieldDef (HaskellName (packPTH "description")))
                 (DBName (packPTH "description")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef QuizCreationDate
        = ((((((FieldDef (HaskellName (packPTH "creationDate")))
                 (DBName (packPTH "creation_date")))
                ((FTTypeCon Nothing) (packPTH "UTCTime")))
               SqlDayTime)
              [])
             True)
            NoReference
      persistFieldDef QuizPassingNumber
        = ((((((FieldDef (HaskellName (packPTH "passingNumber")))
                 (DBName (packPTH "passing_number")))
                ((FTTypeCon Nothing) (packPTH "Int")))
               SqlInt64)
              [])
             True)
            NoReference
      persistFieldDef QuizQuestion
        = ((((((FieldDef (HaskellName (packPTH "question")))
                 (DBName (packPTH "question")))
                ((FTTypeCon Nothing) (packPTH "Question")))
               SqlString)
              [])
             True)
            (EmbedRef
               ((EmbedEntityDef (HaskellName (packPTH "Question")))
                  [((EmbedFieldDef (DBName (packPTH "text"))) Nothing) Nothing,
                   ((EmbedFieldDef (DBName (packPTH "option"))) Nothing) Nothing,
                   ((EmbedFieldDef (DBName (packPTH "answer"))) Nothing) Nothing]))
      persistIdField = QuizId
      fieldLens QuizId
        = (lensPTH entityKey)
            (\ Entity _ value_a1gls key_a1glt
               -> (Entity key_a1glt) value_a1gls)
      fieldLens QuizName
        = (lensPTH (quizName . entityVal))
            (\ Entity key_a1glu value_a1glv x_a1glw
               -> (Entity key_a1glu) value_a1glv {quizName = x_a1glw})
      fieldLens QuizDescription
        = (lensPTH (quizDescription . entityVal))
            (\ Entity key_a1glu value_a1glv x_a1glw
               -> (Entity key_a1glu) value_a1glv {quizDescription = x_a1glw})
      fieldLens QuizCreationDate
        = (lensPTH (quizCreationDate . entityVal))
            (\ Entity key_a1glu value_a1glv x_a1glw
               -> (Entity key_a1glu) value_a1glv {quizCreationDate = x_a1glw})
      fieldLens QuizPassingNumber
        = (lensPTH (quizPassingNumber . entityVal))
            (\ Entity key_a1glu value_a1glv x_a1glw
               -> (Entity key_a1glu) value_a1glv {quizPassingNumber = x_a1glw})
      fieldLens QuizQuestion
        = (lensPTH (quizQuestion . entityVal))
            (\ Entity key_a1glu value_a1glv x_a1glw
               -> (Entity key_a1glu) value_a1glv {quizQuestion = x_a1glw})
    instance ToBackendKey MongoContext Quiz where
      toBackendKey = unQuizKey
      fromBackendKey = QuizKey
    data QuizResult
      = QuizResult {quizResultTestKey :: !Text,
                    quizResultResult :: !Text,
                    quizResultPassingDate :: !UTCTime}
      deriving (Eq, Read, Show, Generic)
    type QuizResultId = Key QuizResult
    instance PersistEntity QuizResult where
      type PersistEntityBackend QuizResult = MongoContext
      data Unique QuizResult
      newtype Key QuizResult
        = QuizResultKey {unQuizResultKey :: (BackendKey MongoContext)}
        deriving (Show,
                  Read,
                  Eq,
                  Ord,
                  path-pieces-0.2.1:Web.PathPieces.PathPiece,
                  http-api-data-0.3.7.2:Web.Internal.HttpApiData.ToHttpApiData,
                  http-api-data-0.3.7.2:Web.Internal.HttpApiData.FromHttpApiData,
                  PersistField,
                  persistent-2.8.1:Database.Persist.Sql.Class.PersistFieldSql,
                  ToJSON,
                  FromJSON)
      data EntityField QuizResult typ
        = typ ~ Key QuizResult => QuizResultId |
          typ ~ Text => QuizResultTestKey |
          typ ~ Text => QuizResultResult |
          typ ~ UTCTime => QuizResultPassingDate
      keyToValues
        = ((ghc-prim-0.5.1.1:GHC.Types.: [])
             . (toPersistValue . unQuizResultKey))
      keyFromValues
        = ((fmap QuizResultKey)
             . (fromPersistValue . Database.Persist.TH.headNote))
      entityDef _
        = (((((((((EntityDef (HaskellName (packPTH "QuizResult")))
                    (DBName (packPTH "quiz_result")))
                   (((((((FieldDef (HaskellName (packPTH "Id")))
                           (DBName (packPTH "id")))
                          ((FTTypeCon Nothing) (packPTH "QuizResultId")))
                         SqlInt64)
                        [])
                       True)
                      ((ForeignRef (HaskellName (packPTH "QuizResult")))
                         ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                  [packPTH "json"])
                 [((((((FieldDef (HaskellName (packPTH "testKey")))
                         (DBName (packPTH "test_key")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "result")))
                         (DBName (packPTH "result")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "passingDate")))
                         (DBName (packPTH "passing_date")))
                        ((FTTypeCon Nothing) (packPTH "UTCTime")))
                       SqlDayTime)
                      [])
                     True)
                    NoReference])
                [])
               [])
              [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
             (Data.Map.Internal.fromList []))
            False
      toPersistFields (QuizResult x_a1glx x_a1gly x_a1glz)
        = [SomePersistField x_a1glx, SomePersistField x_a1gly,
           SomePersistField x_a1glz]
      fromPersistValues [x1_a1glB, x2_a1glC, x3_a1glD]
        = QuizResult
            <$>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "testKey")))
                 . fromPersistValue)
                x1_a1glB
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "result")))
                 . fromPersistValue)
                x2_a1glC
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "passingDate")))
                 . fromPersistValue)
                x3_a1glD
      fromPersistValues x_a1glA
        = (Left
             $ ((mappend (packPTH "QuizResult: fromPersistValues failed on: "))
                  (Data.Text.pack $ (show x_a1glA))))
      persistUniqueToFieldNames _
        = error "Degenerate case, should never happen"
      persistUniqueToValues _
        = error "Degenerate case, should never happen"
      persistUniqueKeys
        (QuizResult _testKey_a1glE _result_a1glF _passingDate_a1glG)
        = []
      persistFieldDef QuizResultId
        = ((((((FieldDef (HaskellName (packPTH "Id")))
                 (DBName (packPTH "id")))
                ((FTTypeCon Nothing) (packPTH "QuizResultId")))
               SqlInt64)
              [])
             True)
            ((ForeignRef (HaskellName (packPTH "QuizResult")))
               ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))
      persistFieldDef QuizResultTestKey
        = ((((((FieldDef (HaskellName (packPTH "testKey")))
                 (DBName (packPTH "test_key")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef QuizResultResult
        = ((((((FieldDef (HaskellName (packPTH "result")))
                 (DBName (packPTH "result")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef QuizResultPassingDate
        = ((((((FieldDef (HaskellName (packPTH "passingDate")))
                 (DBName (packPTH "passing_date")))
                ((FTTypeCon Nothing) (packPTH "UTCTime")))
               SqlDayTime)
              [])
             True)
            NoReference
      persistIdField = QuizResultId
      fieldLens QuizResultId
        = (lensPTH entityKey)
            (\ Entity _ value_a1glH key_a1glI
               -> (Entity key_a1glI) value_a1glH)
      fieldLens QuizResultTestKey
        = (lensPTH (quizResultTestKey . entityVal))
            (\ Entity key_a1glJ value_a1glK x_a1glL
               -> (Entity key_a1glJ) value_a1glK {quizResultTestKey = x_a1glL})
      fieldLens QuizResultResult
        = (lensPTH (quizResultResult . entityVal))
            (\ Entity key_a1glJ value_a1glK x_a1glL
               -> (Entity key_a1glJ) value_a1glK {quizResultResult = x_a1glL})
      fieldLens QuizResultPassingDate
        = (lensPTH (quizResultPassingDate . entityVal))
            (\ Entity key_a1glJ value_a1glK x_a1glL
               -> (Entity key_a1glJ)
                    value_a1glK {quizResultPassingDate = x_a1glL})
    instance ToBackendKey MongoContext QuizResult where
      toBackendKey = unQuizResultKey
      fromBackendKey = QuizResultKey
    data User
      = User {userUsername :: !Text,
              userPassword :: !Text,
              userEmail :: !Text,
              userAvatar :: !Text,
              userFirstName :: !(Maybe Text),
              userSecondName :: !(Maybe Text),
              userBirthDay :: !(Maybe UTCTime),
              userSex :: !(Maybe Gender),
              userCreatedQuizzes :: ![QuizId],
              userPassedQuizzes :: ![QuizResult]}
      deriving (Eq, Read, Show, Generic)
    type UserId = Key User
    instance PersistEntity User where
      type PersistEntityBackend User = MongoContext
      data Unique User
      newtype Key User
        = UserKey {unUserKey :: (BackendKey MongoContext)}
        deriving (Show,
                  Read,
                  Eq,
                  Ord,
                  path-pieces-0.2.1:Web.PathPieces.PathPiece,
                  http-api-data-0.3.7.2:Web.Internal.HttpApiData.ToHttpApiData,
                  http-api-data-0.3.7.2:Web.Internal.HttpApiData.FromHttpApiData,
                  PersistField,
                  persistent-2.8.1:Database.Persist.Sql.Class.PersistFieldSql,
                  ToJSON,
                  FromJSON)
      data EntityField User typ
        = typ ~ Key User => UserId |
          typ ~ Text => UserUsername |
          typ ~ Text => UserPassword |
          typ ~ Text => UserEmail |
          typ ~ Text => UserAvatar |
          typ ~ Maybe Text => UserFirstName |
          typ ~ Maybe Text => UserSecondName |
          typ ~ Maybe UTCTime => UserBirthDay |
          typ ~ Maybe Gender => UserSex |
          typ ~ [QuizId] => UserCreatedQuizzes |
          typ ~ [QuizResult] => UserPassedQuizzes
      keyToValues
        = ((ghc-prim-0.5.1.1:GHC.Types.: [])
             . (toPersistValue . unUserKey))
      keyFromValues
        = ((fmap UserKey)
             . (fromPersistValue . Database.Persist.TH.headNote))
      entityDef _
        = (((((((((EntityDef (HaskellName (packPTH "User")))
                    (DBName (packPTH "user")))
                   (((((((FieldDef (HaskellName (packPTH "Id")))
                           (DBName (packPTH "id")))
                          ((FTTypeCon Nothing) (packPTH "UserId")))
                         SqlInt64)
                        [])
                       True)
                      ((ForeignRef (HaskellName (packPTH "User")))
                         ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                  [packPTH "json"])
                 [((((((FieldDef (HaskellName (packPTH "username")))
                         (DBName (packPTH "username")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "password")))
                         (DBName (packPTH "password")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "email")))
                         (DBName (packPTH "email")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "avatar")))
                         (DBName (packPTH "avatar")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "firstName")))
                         (DBName (packPTH "first_name")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [packPTH "Maybe"])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "secondName")))
                         (DBName (packPTH "second_name")))
                        ((FTTypeCon Nothing) (packPTH "Text")))
                       SqlString)
                      [packPTH "Maybe"])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "birthDay")))
                         (DBName (packPTH "birth_day")))
                        ((FTTypeCon Nothing) (packPTH "UTCTime")))
                       SqlDayTime)
                      [packPTH "Maybe"])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "sex")))
                         (DBName (packPTH "sex")))
                        ((FTTypeCon Nothing) (packPTH "Gender")))
                       SqlString)
                      [packPTH "Maybe"])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "createdQuizzes")))
                         (DBName (packPTH "created_quizzes")))
                        (FTList ((FTTypeCon Nothing) (packPTH "QuizId"))))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "passedQuizzes")))
                         (DBName (packPTH "passed_quizzes")))
                        (FTList ((FTTypeCon Nothing) (packPTH "QuizResult"))))
                       SqlString)
                      [])
                     True)
                    (EmbedRef
                       ((EmbedEntityDef (HaskellName (packPTH "QuizResult")))
                          [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing) Nothing,
                           ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                           ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                             Nothing]))])
                [])
               [])
              [packPTH "Eq", packPTH "Read", packPTH "Show", packPTH "Generic"])
             (Data.Map.Internal.fromList []))
            False
      toPersistFields
        (User x_a1glM
              x_a1glN
              x_a1glO
              x_a1glP
              x_a1glQ
              x_a1glR
              x_a1glS
              x_a1glT
              x_a1glU
              x_a1glV)
        = [SomePersistField x_a1glM, SomePersistField x_a1glN,
           SomePersistField x_a1glO, SomePersistField x_a1glP,
           SomePersistField x_a1glQ, SomePersistField x_a1glR,
           SomePersistField x_a1glS, SomePersistField x_a1glT,
           SomePersistField x_a1glU, SomePersistField x_a1glV]
      fromPersistValues
        [x1_a1glX,
         x2_a1glY,
         x3_a1glZ,
         x4_a1gm0,
         x5_a1gm1,
         x6_a1gm2,
         x7_a1gm3,
         x8_a1gm4,
         x9_a1gm5,
         x10_a1gm6]
        = User
            <$>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "username")))
                 . fromPersistValue)
                x1_a1glX
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "password")))
                 . fromPersistValue)
                x2_a1glY
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "email")))
                 . fromPersistValue)
                x3_a1glZ
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "avatar")))
                 . fromPersistValue)
                x4_a1gm0
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "firstName")))
                 . fromPersistValue)
                x5_a1gm1
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "secondName")))
                 . fromPersistValue)
                x6_a1gm2
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "birthDay")))
                 . fromPersistValue)
                x7_a1gm3
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "sex")))
                 . fromPersistValue)
                x8_a1gm4
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "createdQuizzes")))
                 . fromPersistValue)
                x9_a1gm5
            <*>
              ((Database.Persist.TH.mapLeft
                  (Database.Persist.TH.fieldError (packPTH "passedQuizzes")))
                 . fromPersistValue)
                x10_a1gm6
      fromPersistValues x_a1glW
        = (Left
             $ ((mappend (packPTH "User: fromPersistValues failed on: "))
                  (Data.Text.pack $ (show x_a1glW))))
      persistUniqueToFieldNames _
        = error "Degenerate case, should never happen"
      persistUniqueToValues _
        = error "Degenerate case, should never happen"
      persistUniqueKeys
        (User _username_a1gm7
              _password_a1gm8
              _email_a1gm9
              _avatar_a1gma
              _firstName_a1gmb
              _secondName_a1gmc
              _birthDay_a1gmd
              _sex_a1gme
              _createdQuizzes_a1gmf
              _passedQuizzes_a1gmg)
        = []
      persistFieldDef UserId
        = ((((((FieldDef (HaskellName (packPTH "Id")))
                 (DBName (packPTH "id")))
                ((FTTypeCon Nothing) (packPTH "UserId")))
               SqlInt64)
              [])
             True)
            ((ForeignRef (HaskellName (packPTH "User")))
               ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))
      persistFieldDef UserUsername
        = ((((((FieldDef (HaskellName (packPTH "username")))
                 (DBName (packPTH "username")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef UserPassword
        = ((((((FieldDef (HaskellName (packPTH "password")))
                 (DBName (packPTH "password")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef UserEmail
        = ((((((FieldDef (HaskellName (packPTH "email")))
                 (DBName (packPTH "email")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef UserAvatar
        = ((((((FieldDef (HaskellName (packPTH "avatar")))
                 (DBName (packPTH "avatar")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef UserFirstName
        = ((((((FieldDef (HaskellName (packPTH "firstName")))
                 (DBName (packPTH "first_name")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [packPTH "Maybe"])
             True)
            NoReference
      persistFieldDef UserSecondName
        = ((((((FieldDef (HaskellName (packPTH "secondName")))
                 (DBName (packPTH "second_name")))
                ((FTTypeCon Nothing) (packPTH "Text")))
               SqlString)
              [packPTH "Maybe"])
             True)
            NoReference
      persistFieldDef UserBirthDay
        = ((((((FieldDef (HaskellName (packPTH "birthDay")))
                 (DBName (packPTH "birth_day")))
                ((FTTypeCon Nothing) (packPTH "UTCTime")))
               SqlDayTime)
              [packPTH "Maybe"])
             True)
            NoReference
      persistFieldDef UserSex
        = ((((((FieldDef (HaskellName (packPTH "sex")))
                 (DBName (packPTH "sex")))
                ((FTTypeCon Nothing) (packPTH "Gender")))
               SqlString)
              [packPTH "Maybe"])
             True)
            NoReference
      persistFieldDef UserCreatedQuizzes
        = ((((((FieldDef (HaskellName (packPTH "createdQuizzes")))
                 (DBName (packPTH "created_quizzes")))
                (FTList ((FTTypeCon Nothing) (packPTH "QuizId"))))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef UserPassedQuizzes
        = ((((((FieldDef (HaskellName (packPTH "passedQuizzes")))
                 (DBName (packPTH "passed_quizzes")))
                (FTList ((FTTypeCon Nothing) (packPTH "QuizResult"))))
               SqlString)
              [])
             True)
            (EmbedRef
               ((EmbedEntityDef (HaskellName (packPTH "QuizResult")))
                  [((EmbedFieldDef (DBName (packPTH "test_key"))) Nothing) Nothing,
                   ((EmbedFieldDef (DBName (packPTH "result"))) Nothing) Nothing,
                   ((EmbedFieldDef (DBName (packPTH "passing_date"))) Nothing)
                     Nothing]))
      persistIdField = UserId
      fieldLens UserId
        = (lensPTH entityKey)
            (\ Entity _ value_a1gmh key_a1gmi
               -> (Entity key_a1gmi) value_a1gmh)
      fieldLens UserUsername
        = (lensPTH (userUsername . entityVal))
            (\ Entity key_a1gmj value_a1gmk x_a1gml
               -> (Entity key_a1gmj) value_a1gmk {userUsername = x_a1gml})
      fieldLens UserPassword
        = (lensPTH (userPassword . entityVal))
            (\ Entity key_a1gmj value_a1gmk x_a1gml
               -> (Entity key_a1gmj) value_a1gmk {userPassword = x_a1gml})
      fieldLens UserEmail
        = (lensPTH (userEmail . entityVal))
            (\ Entity key_a1gmj value_a1gmk x_a1gml
               -> (Entity key_a1gmj) value_a1gmk {userEmail = x_a1gml})
      fieldLens UserAvatar
        = (lensPTH (userAvatar . entityVal))
            (\ Entity key_a1gmj value_a1gmk x_a1gml
               -> (Entity key_a1gmj) value_a1gmk {userAvatar = x_a1gml})
      fieldLens UserFirstName
        = (lensPTH (userFirstName . entityVal))
            (\ Entity key_a1gmj value_a1gmk x_a1gml
               -> (Entity key_a1gmj) value_a1gmk {userFirstName = x_a1gml})
      fieldLens UserSecondName
        = (lensPTH (userSecondName . entityVal))
            (\ Entity key_a1gmj value_a1gmk x_a1gml
               -> (Entity key_a1gmj) value_a1gmk {userSecondName = x_a1gml})
      fieldLens UserBirthDay
        = (lensPTH (userBirthDay . entityVal))
            (\ Entity key_a1gmj value_a1gmk x_a1gml
               -> (Entity key_a1gmj) value_a1gmk {userBirthDay = x_a1gml})
      fieldLens UserSex
        = (lensPTH (userSex . entityVal))
            (\ Entity key_a1gmj value_a1gmk x_a1gml
               -> (Entity key_a1gmj) value_a1gmk {userSex = x_a1gml})
      fieldLens UserCreatedQuizzes
        = (lensPTH (userCreatedQuizzes . entityVal))
            (\ Entity key_a1gmj value_a1gmk x_a1gml
               -> (Entity key_a1gmj) value_a1gmk {userCreatedQuizzes = x_a1gml})
      fieldLens UserPassedQuizzes
        = (lensPTH (userPassedQuizzes . entityVal))
            (\ Entity key_a1gmj value_a1gmk x_a1gml
               -> (Entity key_a1gmj) value_a1gmk {userPassedQuizzes = x_a1gml})
    instance ToBackendKey MongoContext User where
      toBackendKey = unUserKey
      fromBackendKey = UserKey
    instance ToJSON Question where
      aeson-1.2.4.0:Data.Aeson.Types.ToJSON.toJSON
        (Question text_a1gmn option_a1gmo answer_a1gmp)
        = aeson-1.2.4.0:Data.Aeson.Types.Internal.object
            [((Data.Text.pack "text")
                aeson-1.2.4.0:Data.Aeson.Types.ToJSON..= text_a1gmn),
             ((Data.Text.pack "option")
                aeson-1.2.4.0:Data.Aeson.Types.ToJSON..= option_a1gmo),
             ((Data.Text.pack "answer")
                aeson-1.2.4.0:Data.Aeson.Types.ToJSON..= answer_a1gmp)]
    instance FromJSON Question where
      aeson-1.2.4.0:Data.Aeson.Types.FromJSON.parseJSON
        (aeson-1.2.4.0:Data.Aeson.Types.Internal.Object obj_a1gmm)
        = ((((pure Question)
               <*>
                 (obj_a1gmm
                    aeson-1.2.4.0:Data.Aeson.Types.FromJSON..:
                      (Data.Text.pack "text")))
              <*>
                (obj_a1gmm
                   aeson-1.2.4.0:Data.Aeson.Types.FromJSON..:
                     (Data.Text.pack "option")))
             <*>
               (obj_a1gmm
                  aeson-1.2.4.0:Data.Aeson.Types.FromJSON..:
                    (Data.Text.pack "answer")))
      aeson-1.2.4.0:Data.Aeson.Types.FromJSON.parseJSON _
        = GHC.Base.mzero
    instance ToJSON (Entity Question) where
      aeson-1.2.4.0:Data.Aeson.Types.ToJSON.toJSON = entityIdToJSON
    instance FromJSON (Entity Question) where
      aeson-1.2.4.0:Data.Aeson.Types.FromJSON.parseJSON
        = entityIdFromJSON
    instance ToJSON Quiz where
      aeson-1.2.4.0:Data.Aeson.Types.ToJSON.toJSON
        (Quiz name_a1gmr
              description_a1gms
              creationDate_a1gmt
              passingNumber_a1gmu
              question_a1gmv)
        = aeson-1.2.4.0:Data.Aeson.Types.Internal.object
            [((Data.Text.pack "name")
                aeson-1.2.4.0:Data.Aeson.Types.ToJSON..= name_a1gmr),
             ((Data.Text.pack "description")
                aeson-1.2.4.0:Data.Aeson.Types.ToJSON..= description_a1gms),
             ((Data.Text.pack "creationDate")
                aeson-1.2.4.0:Data.Aeson.Types.ToJSON..= creationDate_a1gmt),
             ((Data.Text.pack "passingNumber")
                aeson-1.2.4.0:Data.Aeson.Types.ToJSON..= passingNumber_a1gmu),
             ((Data.Text.pack "question")
                aeson-1.2.4.0:Data.Aeson.Types.ToJSON..= question_a1gmv)]
    instance FromJSON Quiz where
      aeson-1.2.4.0:Data.Aeson.Types.FromJSON.parseJSON
        (aeson-1.2.4.0:Data.Aeson.Types.Internal.Object obj_a1gmq)
        = ((((((pure Quiz)
                 <*>
                   (obj_a1gmq
                      aeson-1.2.4.0:Data.Aeson.Types.FromJSON..:
                        (Data.Text.pack "name")))
                <*>
                  (obj_a1gmq
                     aeson-1.2.4.0:Data.Aeson.Types.FromJSON..:
                       (Data.Text.pack "description")))
               <*>
                 (obj_a1gmq
                    aeson-1.2.4.0:Data.Aeson.Types.FromJSON..:
                      (Data.Text.pack "creationDate")))
              <*>
                (obj_a1gmq
                   aeson-1.2.4.0:Data.Aeson.Types.FromJSON..:
                     (Data.Text.pack "passingNumber")))
             <*>
               (obj_a1gmq
                  aeson-1.2.4.0:Data.Aeson.Types.FromJSON..:
                    (Data.Text.pack "question")))
      aeson-1.2.4.0:Data.Aeson.Types.FromJSON.parseJSON _
        = GHC.Base.mzero
    instance ToJSON (Entity Quiz) where
      aeson-1.2.4.0:Data.Aeson.Types.ToJSON.toJSON = entityIdToJSON
    instance FromJSON (Entity Quiz) where
      aeson-1.2.4.0:Data.Aeson.Types.FromJSON.parseJSON
        = entityIdFromJSON
    instance ToJSON QuizResult where
      aeson-1.2.4.0:Data.Aeson.Types.ToJSON.toJSON
        (QuizResult testKey_a1gmx result_a1gmy passingDate_a1gmz)
        = aeson-1.2.4.0:Data.Aeson.Types.Internal.object
            [((Data.Text.pack "testKey")
                aeson-1.2.4.0:Data.Aeson.Types.ToJSON..= testKey_a1gmx),
             ((Data.Text.pack "result")
                aeson-1.2.4.0:Data.Aeson.Types.ToJSON..= result_a1gmy),
             ((Data.Text.pack "passingDate")
                aeson-1.2.4.0:Data.Aeson.Types.ToJSON..= passingDate_a1gmz)]
    instance FromJSON QuizResult where
      aeson-1.2.4.0:Data.Aeson.Types.FromJSON.parseJSON
        (aeson-1.2.4.0:Data.Aeson.Types.Internal.Object obj_a1gmw)
        = ((((pure QuizResult)
               <*>
                 (obj_a1gmw
                    aeson-1.2.4.0:Data.Aeson.Types.FromJSON..:
                      (Data.Text.pack "testKey")))
              <*>
                (obj_a1gmw
                   aeson-1.2.4.0:Data.Aeson.Types.FromJSON..:
                     (Data.Text.pack "result")))
             <*>
               (obj_a1gmw
                  aeson-1.2.4.0:Data.Aeson.Types.FromJSON..:
                    (Data.Text.pack "passingDate")))
      aeson-1.2.4.0:Data.Aeson.Types.FromJSON.parseJSON _
        = GHC.Base.mzero
    instance ToJSON (Entity QuizResult) where
      aeson-1.2.4.0:Data.Aeson.Types.ToJSON.toJSON = entityIdToJSON
    instance FromJSON (Entity QuizResult) where
      aeson-1.2.4.0:Data.Aeson.Types.FromJSON.parseJSON
        = entityIdFromJSON
    instance ToJSON User where
      aeson-1.2.4.0:Data.Aeson.Types.ToJSON.toJSON
        (User username_a1gmB
              password_a1gmC
              email_a1gmD
              avatar_a1gmE
              firstName_a1gmF
              secondName_a1gmG
              birthDay_a1gmH
              sex_a1gmI
              createdQuizzes_a1gmJ
              passedQuizzes_a1gmK)
        = aeson-1.2.4.0:Data.Aeson.Types.Internal.object
            [((Data.Text.pack "username")
                aeson-1.2.4.0:Data.Aeson.Types.ToJSON..= username_a1gmB),
             ((Data.Text.pack "password")
                aeson-1.2.4.0:Data.Aeson.Types.ToJSON..= password_a1gmC),
             ((Data.Text.pack "email")
                aeson-1.2.4.0:Data.Aeson.Types.ToJSON..= email_a1gmD),
             ((Data.Text.pack "avatar")
                aeson-1.2.4.0:Data.Aeson.Types.ToJSON..= avatar_a1gmE),
             ((Data.Text.pack "firstName")
                aeson-1.2.4.0:Data.Aeson.Types.ToJSON..= firstName_a1gmF),
             ((Data.Text.pack "secondName")
                aeson-1.2.4.0:Data.Aeson.Types.ToJSON..= secondName_a1gmG),
             ((Data.Text.pack "birthDay")
                aeson-1.2.4.0:Data.Aeson.Types.ToJSON..= birthDay_a1gmH),
             ((Data.Text.pack "sex")
                aeson-1.2.4.0:Data.Aeson.Types.ToJSON..= sex_a1gmI),
             ((Data.Text.pack "createdQuizzes")
                aeson-1.2.4.0:Data.Aeson.Types.ToJSON..= createdQuizzes_a1gmJ),
             ((Data.Text.pack "passedQuizzes")
                aeson-1.2.4.0:Data.Aeson.Types.ToJSON..= passedQuizzes_a1gmK)]
    instance FromJSON User where
      aeson-1.2.4.0:Data.Aeson.Types.FromJSON.parseJSON
        (aeson-1.2.4.0:Data.Aeson.Types.Internal.Object obj_a1gmA)
        = (((((((((((pure User)
                      <*>
                        (obj_a1gmA
                           aeson-1.2.4.0:Data.Aeson.Types.FromJSON..:
                             (Data.Text.pack "username")))
                     <*>
                       (obj_a1gmA
                          aeson-1.2.4.0:Data.Aeson.Types.FromJSON..:
                            (Data.Text.pack "password")))
                    <*>
                      (obj_a1gmA
                         aeson-1.2.4.0:Data.Aeson.Types.FromJSON..:
                           (Data.Text.pack "email")))
                   <*>
                     (obj_a1gmA
                        aeson-1.2.4.0:Data.Aeson.Types.FromJSON..:
                          (Data.Text.pack "avatar")))
                  <*>
                    (obj_a1gmA
                       aeson-compat-0.3.7.1:Data.Aeson.Compat..:?
                         (Data.Text.pack "firstName")))
                 <*>
                   (obj_a1gmA
                      aeson-compat-0.3.7.1:Data.Aeson.Compat..:?
                        (Data.Text.pack "secondName")))
                <*>
                  (obj_a1gmA
                     aeson-compat-0.3.7.1:Data.Aeson.Compat..:?
                       (Data.Text.pack "birthDay")))
               <*>
                 (obj_a1gmA
                    aeson-compat-0.3.7.1:Data.Aeson.Compat..:? (Data.Text.pack "sex")))
              <*>
                (obj_a1gmA
                   aeson-1.2.4.0:Data.Aeson.Types.FromJSON..:
                     (Data.Text.pack "createdQuizzes")))
             <*>
               (obj_a1gmA
                  aeson-1.2.4.0:Data.Aeson.Types.FromJSON..:
                    (Data.Text.pack "passedQuizzes")))
      aeson-1.2.4.0:Data.Aeson.Types.FromJSON.parseJSON _
        = GHC.Base.mzero
    instance ToJSON (Entity User) where
      aeson-1.2.4.0:Data.Aeson.Types.ToJSON.toJSON = entityIdToJSON
    instance FromJSON (Entity User) where
      aeson-1.2.4.0:Data.Aeson.Types.FromJSON.parseJSON
        = entityIdFromJSON
